
unit t_WebArmProcedures;


interface
    
uses Windows, Messages, SysUtils, Forms, Dialogs, ImgList, Controls, Menus, Grids, Math,DateUtils,
     StdCtrls, Classes, ComObj, ActiveX, Graphics, OleServer, Variants, IBQuery, IBDatabase, IBSQL, IniFiles,
     Registry,  Excel_TLB, Contnrs, IdContext, System.zip, IOUtils,
     IdHTTP, IdSSLOpenSSL, IdUri,
     v_constants, v_DataTrans, 
     n_LogThreads, n_free_functions, n_Server_common, n_functions,n_DataCacheObjects,n_DataCacheInMemory,n_constants, 
     n_WebArmProcedures, n_TD_functions, n_DataCacheAddition,
     t_ImportChecking, t_function,                                                                       
     t_ExcelXmlUse{, a_ExcelUse, t_constants, a_Data_Contnrs};
const
  cDateTimeFormatTSnD = 'hh:nn:ss dd.mm.yy';              
  //version = {$Ifdef Ver140} 6 {$ELSE} 2 {$EndIf};     

type 


  TMMLink = class
    ID: integer; //id
    Links: pointer; //указатель на родителя связываемого объекта
  public
    constructor Create (aID: integer; aLinks: pointer);
  end; 
  
  Link3data = record
    wareID: integer;                           
    modelID: integer;
    nodeID: integer;
    userID: integer;
    L2Qty: real;//integer;
    Row: integer;
    Oper: integer;
  end;
  
  Link3CritData = record
    wareID: integer;
    ModelID: integer;
    nodeID: integer;
    userID: integer;
    UsageClauseName: string;
    UsageClauseValue: string;
    Col: integer;
    Row: integer;
    Oper: integer;
  end;
  
  TWareAnaliticsData = class
  private
    FImpType: integer;
    FUserRole: integer;
    FTypeSys: integer;
    FWare: TWareInfo;
    FWareName: string;
    FWarePgr: string;
    FWareDescr: string;
    FWareDescrExist: boolean;
    FWareImageExist: boolean;
    FWareManager: string;
    FWareUsageCount: integer;
//    FWareUsageWrongCount: integer;
    FWareModelsList: string;
    FWareArticleTD: string;
  public
    Constructor Create (aWare: TWareInfo; aRole: integer; aTypeSys: integer);
    procedure FillSelfData (aImpType: integer);
    procedure CheckImgDescrExist (ImagePath, DescrPath: string);
     function GetXmlDataRow (aXmlReportStyle: TXmlReportStyle=nil): string; //возвращает одну строку xml
     function GetHeaderData (aXMLdata: boolean=false; aXMLReportStyle: TXmlReportStyle=nil): Tas;
    property UserRole: integer          read FUserRole;
    property Ware: TWareInfo            read FWare;
    property TypeSys: integer           read FTypeSys;
    property ImpType: integer           read FImpType;
    property Name: string               read FWareName;
    property PgrName: string            read FWarePgr;
    property Descr: string              read FWareDescr;
    property WareMgr: string            read FWareManager;
    property TextDescr: boolean         read FWareDescrExist;
    property Image: boolean             read FWareImageExist;
    property UsageCount: integer        read FWareUsageCount;
//    property UsageWrongCount: integer  read FWareUsageWrongCount;
    property ModelsList: string         read FWareModelsList;
    property ArticleTD: string          read FWareArticleTD;
  end;

  TExtendedAutoTreeNode = class
  public
    Link: TAutoTreeNode; //указатель на ноду TAutoTreeNode
    Depth: integer; //уровень узла в дереве. 0 - корневые узлы
    CC: integer; //Общее количество потомков у данного узла
    ParentNode: TExtendedAutoTreeNode; //указатель на родительскую ноду
    MainNodeIndex: integer;
    NodeSys: integer;
    constructor Create (aTreeNode: TAutoTreeNode); overload;
    constructor Create (aTreeNode: TAutoTreeNode; aTypeSys: integer); overload;
    destructor Destroy; override;
    function GetAllParentNames: tas;
  end;

    TRec = record
      IdMan : integer;
      ManufacturerName : string;
      ModelLineName : string;
      ModelName : string;
      NodeName : string;
      ArrWare : Tai;
      ArrGB : Tai;
      ArrON : Tai;
   end;
   TRecArray= array of TRec;
   
TArtSup = record
  MF_ID: integer;
  Art_Search: string;
  Art_NR: string;
  Sup_Name: string;
  TradeMark: string;
end;       
TArrayArtSup = array of TArtSup;
       
procedure prHideEmptyOE(Stream: TBoBMemoryStream; ThreadData: TThreadData);
procedure prWaresByOE(Stream: TBoBMemoryStream; ThreadData: TThreadData);
procedure prGetKAPhones(Stream: TBoBMemoryStream; ThreadData: TThreadData);

procedure prGetBaseStamp(Stream: TBoBMemoryStream; ThreadData: TThreadData);
procedure prCommonImport(Stream: TBoBMemoryStream; ThreadData: TThreadData);

procedure prShowCurrentOperations(Stream: TBoBMemoryStream; ThreadData: TThreadData);
procedure prStopIEOperation(Stream: TBoBMemoryStream; ThreadData: TThreadData);
procedure prAutoFilterXLSX(FName: string);

procedure prImportSATELLITES(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,
   ContentType:string; ThreadData: TThreadData);        //41 сопутствующие товары
function AnalogsWare(const UserId: integer; const Manufactur: integer; var maxWare: integer; 
   var maxGB: integer; var maxON: integer; var pAll,pTecDoc: Boolean): TRecArray;  //не привязанные аналоги из GB и по ON
function fnGetAnalogsFree(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,   //подготовка письма с excel по не привязанным аналогам из GB и по ON
   ContentType:string; ThreadData: TThreadData; filter_data: string):string;
procedure prImportAnalogsFreeLink(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,
   ContentType:string; ThreadData: TThreadData);
function fnGetOriginalNumsFree(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,
   ContentType:string; ThreadData: TThreadData; filter_data: string):string;   
function fnGetOriginalNumsFreeON(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,
   ContentType, s:string; ThreadData: TThreadData; filter_data: string):string;   

(*procedure prGetAnalystReport1(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,
   ContentType:string; ThreadData: TThreadData; filter_data: string);
procedure prGetAnalystReport1CSV(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,
   ContentType:string; ThreadData: TThreadData; filter_data: string);   
*)
function fnGetNewLinkManager(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,
   ContentType:string; ThreadData: TThreadData; filter_data: string):string;

function fnProductReportSearchWareClient(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,
   ContentType:string; ThreadData: TThreadData; filter_data: string):string;   //отчет 29

function fnEmplRoleReg(UserID, ThreadDataID: integer): tai; // проверка на наличие других ролей, кроме регионал или суперрегионал  

function fnReportSearchQtyMax(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,
   ContentType:string; ThreadData: TThreadData; filter_data: string):string; 

function fnReportSearchWareMax(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,
   ContentType:string; ThreadData: TThreadData; filter_data: string):string;  //проверка на превышение допустимого кол-ва запросов
function fnRepCountRequestLOG(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,
   ContentType:string; ThreadData: TThreadData; filter_data: string): string;  // проверка на превышение допустимого кол-ва подборов  LOG 
function fnRepCountRequestWareLOG(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,
   ContentType:string; ThreadData: TThreadData; filter_data: string): string;  // проверка на превышение допустимого кол-ва подборов по товару LOG 
function fnRepCountRequestWareQTYLOG(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,
   ContentType:string; ThreadData: TThreadData; filter_data: string): string;  // проверка на превышение допустимого количеству товара при подборе LOG 
function fnConnectCount(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,
   ContentType:string; ThreadData: TThreadData; filter_data: string): string; //проверка на превышение допустимого количества обращений к системе   
function fnConnectIP(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,     //проверка на превышение допустимого количества обращений IP 30_5
   ContentType:string; ThreadData: TThreadData; filter_data: string): string;   
function fnPriLoadCount(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,     //проверка на превышение допустимого количества скачиваний прайс-листа 30_6
   ContentType:string; ThreadData: TThreadData; filter_data: string): string;   
function fnRep61(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,     
   ContentType:string; ThreadData: TThreadData; filter_data: string): string;//61  
function fnDinConnect30(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,     
   ContentType:string; ThreadData: TThreadData; filter_data: string): string;//30_7 

function fnWidthOfRangeRep(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,
   ContentType:string; ThreadData: TThreadData; filter_data: string): string; // Определение ширины действующего ассортимента    
function fnExportNotInfoFileRep(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,  //  Товары, у которых отсутствуют инфо-файлы
   ContentType:string; ThreadData: TThreadData; filter_data: string): string;
procedure prDelActionNews(Stream: TBoBMemoryStream; ThreadData: TThreadData);  //csDelActionNews, rolNewsManage   
procedure GetReports30;

procedure prUpdateGraFiles(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,
   ContentType:string; ThreadData: TThreadData);

procedure prImportAnalogs(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,
   ContentType:string; ThreadData: TThreadData);//импорт аналогов по ТекДок    // импорт 35
//function fnRepRequestsWeb(UserID: integer; DateStart, DateEnd: TDateTime; var FName: string): string;  // запросы пользователя за период
function ConvertKod(s,KodOld, KodNew: string): string;
function fnRepTypesNull(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,  //38(0)  Товары, у которых не указан тип
   ContentType:string; ThreadData: TThreadData; filter_data: string): string;
function fnRepAnalogGBTypes(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,  //38(1)  Аналоги ГБ, у которых разные типы
   ContentType:string; ThreadData: TThreadData; filter_data: string): string;   
function fnRepAnalogTypes(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,  //38(2)  Аналоги односторонние, у которых разные типы
   ContentType:string; ThreadData: TThreadData; filter_data: string): string;      
function fnRepAnalogONTypes(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,  //38(3)  Аналоги по ON, у которых разные типы
   ContentType:string; ThreadData: TThreadData; filter_data: string): string;   
function fnRepWebArmSystemStatistic(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,  //  Статистика 37
   ContentType:string; ThreadData: TThreadData; filter_data: string): string;   
function fnReport38(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,     //38
   ContentType:string; ThreadData: TThreadData; filter_data: string):string;   
function fnGetOriginalNumsFreeI(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,           //03New
   ContentType:string; ThreadData: TThreadData; filter_data: string):string; 
function fnRepCrossAnalogs1(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,  //  analogs 35
   ContentType:string; ThreadData: TThreadData; filter_data: string): string;  
function fnConnectCountUser(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,
   ContentType:string; ThreadData: TThreadData; filter_data: string): string;//43  
procedure prImportActionText(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,
   ContentType:string; ThreadData: TThreadData); //44
function fnRepActionText(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,
   ContentType:string; ThreadData: TThreadData; filter_data: string): string;    //44     
function fnRepOETecDoc45(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,  //45 rep
   ContentType:string; ThreadData: TThreadData; filter_data: string): string;    
procedure prImpOETecDoc45(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,
   ContentType:string; ThreadData: TThreadData);                                  //45 imp                                
procedure prSheetTreeNodes(WorkBook: Excel_TLB._Workbook; Sheet: integer=1);
procedure prSheetCriterias(WorkBook: Excel_TLB._Workbook; Sheet: integer=1); 
function fnRepNotific48(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,  //48  уведомления
   ContentType:string; ThreadData: TThreadData; filter_data: string): string;
function fnRep49(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,     //49 pricelist
   ContentType:string; ThreadData: TThreadData; filter_data: string): string;   
function fnRep50(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,     //50 laximo vin
   ContentType:string; ThreadData: TThreadData; filter_data: string): string;    
function fnRep52(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,     // Анализ покрытия
   ContentType:string; ThreadData: TThreadData; filter_data: string): string;  
procedure prImp55(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,  //import55
   ContentType:string; ThreadData: TThreadData); 
procedure prImport56(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,     //рассылка писем клиентам
   ContentType:string; ThreadData: TThreadData);    //import 56   
procedure prImport57(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,     //обнуление пароля клиентам
   ContentType:string; ThreadData: TThreadData);    //import 57   
function fnStatistic(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,     //Statistic    37
   ContentType:string; ThreadData: TThreadData; filter_data: string): string;   
function fnGetPhones(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,     //Rep58
   ContentType:string; ThreadData: TThreadData; filter_data: string):string;   
function fnRep000(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,  //000 rep
   ContentType:string; ThreadData: TThreadData; filter_data: string): string;   
function fnRep59(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,  //59 rep
   ContentType:string; ThreadData: TThreadData; filter_data: string): string;   
function fnRep60(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,  //60 rep
   ContentType:string; ThreadData: TThreadData; filter_data: string): string;  
procedure prImport62(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,     //рассылка писем 
   ContentType:string; ThreadData: TThreadData);    //import 62    

procedure prGetOutInvoiceXml(Stream: TBoBMemoryStream; ThreadData: TThreadData);
 

///Артем
procedure apWareDetModFileFormer(TypeSys: integer; FName: string);
procedure apGetWareDetModFile (UserID: integer; var lstBodyMail: TStringList; var FName, Subj, ContentType, s: string; ThreadData: TThreadData);
function fnCheckWareDetModFileValid(UserID,ThreadDataID: integer): string;
procedure apReCreateWareDetModPatternFile (aTypeSys: integer; UserID: integer =0; ThreadDataID: integer =0);
procedure apImportAutoWares(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,
          ContentType: string; aThreadData: TThreadData);// импорт 20
procedure apGetWareNodeLines (UserID: integer; var lstBodyMail: TStringList;
          var FName, Subj, ContentType, s: string; ThreadData: TThreadData; pNodes: String = ''; pModels: String = '');//отчет 31  
procedure apGetMgrWaresDataAnalitics (UserID: integer; var lstBodyMail: TStringList; var FName, Subj, 
                                      ContentType, s: string; aThreadData: TThreadData); //отчет 16   
function  fnGetGBAndTecDocWareLinks(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,
                                 ContentType: string; ThreadData: TThreadData; filter_data: string): string; //отчет 18
procedure apGetMgrWaresWoTDarts (UserID: integer; var lstBodyMail: TStringList;
                                 var FName, Subj, ContentType, s: string; ThreadData: TThreadData; filter_data: string); //отчет 22   
procedure apImportWareDetModFile (UserID: integer; var lstBodyMail: TStringList; var FName, Subj,
          ContentType: string; aThreadData: TThreadData);                        //импорт 19                                      
procedure apImportAttributes(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,
          ContentType: string; ThreadData: TThreadData);                         //импорт 10
procedure apImportLinkDetModWare(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,
          ContentType: string; aThreadData: TThreadData);                        //импорт 12
procedure apImportGBandTecDocWareLinks(UserID: integer; var lstBodyMail: TStringList; var FName, Subj, //импорт 18,22
          ContentType: string; aThreadData: TThreadData);
procedure apGetAttrFile(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,
          ContentType: string; ThreadData: TThreadData; s: string);              //отчет 10
procedure apGetLinkDetModWareFile(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,
          ContentType,s: string; ThreadData: TThreadData; pNodes: String = ''; pModels: String = '');// отчет 12   
procedure apGetLink2forModels(UserID: integer; var lstBodyMail: TStringList; var FName, Subj, //отчет 17
          ContentType, s: string; ThreadData: TThreadData; pNodes: String = ''; pModels: String = '');                 
procedure apImportOriginalNums (UserID: integer; var lstBodyMail: TStringList; var FName, Subj,
          ContentType: string; aThreadData: TThreadData);                        //импорт 18, 22

 function fnTypeSysDecision (UserID: integer): integer;
 function fnLink23NodeParams(aIncomingString: String; aWhatNodesNeed: integer; aTypeSys: integer): Tai;  
 function fnNodeParamsByTypeSysDecision (aTypeSys: integer): integer;    
 function fnGetTreeNodes(aNodeIDs: Tai; aTypeSys: integer): arTas; 
 function fnWrkShtNameSpotter (aWrkShtName: string): string; 
 function fnDeclareXMLcols (aWidthArray: tai): string; 
 function fnGetModelWares(aNodeIDs: Tai; aModel: TModelAuto): arTas;
 function fnUserRolesEntree(pReportType: integer; pUserRoles: tai): boolean;
 function fnLink2Reader (aCellValue: string): string;
 function fnColorDemodulator (pIntColor: integer): integer;
 function fnColorModulator (pCode: integer): intRGB;
 function fnSumDigits (aInt: integer): integer;
 function fnAddLink2fromReport (aLink3record: Link3data; var aMsgStr: string): integer;
 function fnAddLink3fromRecord (aLink3record: Link3data; var aMsgStr: string): integer;
 function fnAddUsageClausefromRecord (aLink3usageClause: Link3CritData; var aMsgStr: string): integer;
 function SearchWareGBInTecDoc(Ware: TWareInfo; ThreadData: TThreadData): TStringList;
 function fnPrimaryUserRole(UserID: integer; var aTypeSys: integer): integer;
 function fnGetUserRoles (pUSERID: integer): Tai;
 function fnGetWareAnaliticsDataObjects(aWareList: TStringList; aRepType, aRole, aTypeSys: integer): TObjectList;
 function fnGetModelsListWithTDCodes (pManufID: integer): TStringList;
 function fnWareSearchWithValidation(aWareName: string; aCondition: string; aBrandName: string=''): Tai;
// g_ProductProcedures
//* Страница продукт-менеджера
procedure prProductPageOld(Stream: TBoBMemoryStream; ThreadData: TThreadData);
//* Получение списка товара по условию, Бренд, Группа, строка поиска
procedure prProductWareSearchOld(Stream: TBoBMemoryStream; ThreadData: TThreadData);


             
implementation

uses {n_DataCacheAddition,} n_CSSThreads,
  {a_WebArmProcedures,} n_IBCntsPool, n_DataSetsManager;

var
  isFileUnderConstruction: array [0..2] of boolean = (true, true, true);

procedure prAutoFilterXLSX(FName: string);
var SLFileXML: TStringList;
    s, ss, sss, row, FileName: string;
//    delDir: boolean;
    LogStr: tas;
    i, k: integer;
begin
    ZipExtractFiles(FName, s, ExtractFilePath(FName));
    FileName := ExtractFilePath(FName) + 'xl\workbook.xml';
    SLFileXML:= TStringList.Create;
    SLFileXML.LoadFromFile(FileName);
    ss:=SLFileXML.CommaText;
    for i:= 0 to SLFileXML.Count-1 do 
    if pos('_FilterDatabase',SLFileXML[i])>0 then begin
      k:= 1;
      ss:= SLFileXML[i];
      row:= '';
      while pos('_FilterDatabase',ss)>0 do begin
        sss:= Copy(ss,1,pos('_FilterDatabase',ss)+length('_FilterDatabase'));
        sss:= StringReplace(sss, '_FilterDatabase', 'a'+IntToStr(k)+'_FilterDatabase', [rfReplaceAll]);
        inc(k);
        ss:= Copy(ss,pos('_FilterDatabase',ss)+length('_FilterDatabase')+1,length(ss));
        row:= row+sss;
      end;
      SLFileXML[i]:= row+ss;
    end;
    SLFileXML.SaveToFile(FileName);  
//ss:= FName+','+ FileName;    
    ZipAddFiles(FName, s);
    LogStr:= fnSplitString(s,',');
    for i:= 0 to length(LogStr)-1 do begin
//      k:= pos('/',LogStr[i]);
      if FileExists(StringReplace(LogStr[i],'\','/', [rfReplaceAll])) then SysUtils.DeleteFile(StringReplace(LogStr[i],'\','/', [rfReplaceAll]));
      ss:= LogStr[i];
      row:='';
      while pos('/',ss)>0 do begin
        sss:= Copy(ss,1,pos('/',ss));
        ss:= Copy(ss,pos('/',ss)+1,length(ss));
        row:= row+sss;
      end;
      if row<>'' then {delDir:=} RemoveDir(row);
      
    end;  

//    ZipAddFiles(FName, FileName);
    ss:='';
    sss:='';
//    k:= 0;
    row:= '';
end;  
  
function fnSplitsString(Source: string; Splitters: string=';'; All: Tas=nil): Tas;
var i: integer;
    Sour, s: string;
begin
  SetLength(Result, 0);
  if length(Source)<1 then Exit;
  Sour:= Source;
  repeat
    i:= Pos(Splitters, Sour);
    if i<1 then begin
      s:= Sour;
      Sour:= '';
    end else if i=1 then begin
      s:= '';
      if length(Sour)>1 then Sour:= trim(Copy(Sour, 1+length(splitters), length(Sour))) else Sour:= '';
    end else begin
      s:= Copy(Sour, 1, i-1);
      if length(Sour)>i then Sour:= trim(Copy(Sour, i+length(splitters), length(Sour))) else Sour:= '';
    end;
    if trim(s)<>'' then
    if not Assigned(All) or fnInStrArrayBool(s, All) then begin
      SetLength(Result, length(Result)+1);
      Result[length(Result)-1]:= trim(s);
    end;
//    end;//
  until Sour= '';
  if copy(Source,length(Source)-length(Splitters)+1,length(Splitters))=Splitters then begin //Source[length(Source)]=Splitters then begin     
    SetLength(Result, length(Result)+1);
    Result[length(Result)-1]:= '';
  end;
end;
//================================ телефоны к/а и конт.лиц
procedure prGetKAPhones(Stream: TBoBMemoryStream; ThreadData: TThreadData);
const nmProc='prGetKAPhones';
var GBIBSQL: TIBSQL;
    IBGRB: TIBDatabase;
    arFields: tas; 
    PHONE, PHONEBase, PersNAME, FIRMSHORTNAME, FIRMMAINNAME, s, PHONEsql, PHONEprint, commenttext,source: string;
    SLFile: TStringList;
SLFileCSV: TStringList;
    FIRMCODE, i: integer;
begin

Stream.Position:= 0;
  FIRMCODE:=-1;
  FIRMSHORTNAME:='';
  FIRMMAINNAME:='';
  PHONEsql:= '';
  PersNAME:='';
  GBIBSQL:= nil;
  IBGRB:= nil;
  arFields:= fnSplitString('FIRMMAINNAME,FIRMSHORTNAME,PPHPHONE,PRSNNAME',',');
  s:='';
  SLFile:= TStringList.Create;
//SLFileCSV:= TStringList.Create;  
  for i:= 0 to length(arFields)-1 do s:= s+fnIfStr(s<>'',',','')+ arFields[i];
//  SLFile.Add(s);
  s:='';
  Stream.Clear;
  Stream.WriteInt(aeSuccess);    // нашли товар по ОЕ
//  sPos:= Stream.Position;
  try
    IBGRB:= cntsGRB.GetFreeCnt;
    GBIBSQL:= fnCreateNewIBSQL(IBGRB, 'Query_'+nmProc, -1, tpWrite, true);
    try 
(*      GBIBSQL.SQL.Text:=' SELECT PRSNFIRMCODE, FIRMMAINNAME, FIRMSHORTNAME, PPHPHONE FIRMMAINPHONE,'
                     +' replace(replace(replace(replace(replace(PPHPHONE,"(",""),")",""),"-",""),"+","")," ","") PPHPHONE, PRSNNAME '#10
                     +' , PRSNFORMOFADRESS commenttext, "p"|| cast(PPHCODE as char(10)) source '#10
                     +' FROM PERSONPHONES '#10
                     +' left outer join  PERSONS on PPHPERSONCODE=PRSNCODE '#10
                     +' left outer join FIRMS on FIRMCODE=PRSNFIRMCODE '#10
                     +' where PPHARCHIVEDKEY="F" and PRSNARCHIVEDKEY="F" '#10
                     +' and FIRMSERVICEFIRM="F"  and FIRMARCHIVEDKEY="F" '#10
                     +' and FIRMCHILDCOUNT=0 --and PRSNFIRMCODE= 29473'#10
  //                   +' group by PRSNFIRMCODE, FIRMMAINNAME, FIRMSHORTNAME, PPHPHONE, PRSNNAME--, PPHPERSONCODE '#10
                     +' union '#10
                     +' SELECT FIRMCODE, FIRMMAINNAME, FIRMSHORTNAME,FIRMMAINPHONE,'#10
                     +' replace(replace(replace(replace(replace(FIRMMAINPHONE,"(",""),")",""),"-",""),"+","")," ","") PPHPHONE, null--,null '#10
                     +' , "",  "f"|| cast(FIRMCODE as char(10)) '#10
                     +' FROM FIRMS '#10
                     +' where FIRMSERVICEFIRM="F"  and FIRMARCHIVEDKEY="F"  and coalesce(trim(FIRMMAINPHONE),"")<>"" '#10
                     +' and FIRMCHILDCOUNT=0 --and FIRMCODE= 29473'#10
                     +' order by 1,5,6 desc';  *)
      GBIBSQL.SQL.Text:=' SELECT PRSNFIRMCODE, FIRMMAINNAME, FIRMSHORTNAME, PPHPHONE FIRMMAINPHONE, PRSNNAME'#10
                       +' , PRSNFORMOFADRESS commenttext, "p"|| cast(PPHCODE as char(10)) source '#10
                       +' FROM PERSONPHONES '#10
                       +' left outer join  PERSONS on PPHPERSONCODE=PRSNCODE '#10
                       +' left outer join FIRMS on FIRMCODE=PRSNFIRMCODE '#10
                       +' where PPHARCHIVEDKEY="F" and PRSNARCHIVEDKEY="F" '#10
                       +' and FIRMSERVICEFIRM="F"  and FIRMARCHIVEDKEY="F" '#10
                       +' and FIRMCHILDCOUNT=0 '#10
                       +' union '#10
                       +' SELECT FIRMCODE, FIRMMAINNAME, FIRMSHORTNAME,FIRMMAINPHONE, null'#10
                       +' , "",  "f"|| cast(FIRMCODE as char(10)) '#10
                       +' FROM FIRMS '#10
                       +' where FIRMSERVICEFIRM="F"  and FIRMARCHIVEDKEY="F"  and coalesce(trim(FIRMMAINPHONE),"")<>"" '#10
                       +' and FIRMCHILDCOUNT=0'#10
                       +' order by 2,4, 5 desc';                     
      GBIBSQL.Prepare;
      GBIBSQL.ExecQuery;
      try
      while not GBIBSQL.EOF do begin
   //       SLManuf.Add(OrdIBSQL.FieldByName('LMMANUFNAME').AsString);      fnMakeAddCharStr(S: String; N: Integer)
        try
          PHONE:=StringReplace(StringReplace(GBIBSQL.FieldByName('FIRMMAINPHONE').AsString,#10,'',[rfReplaceAll]),#13,'',[rfReplaceAll]);
          PHONE:= trim(PHONE);
          PHONE:= StringReplace(PHONE,'+','', [rfReplaceAll]);
          PHONE:= StringReplace(PHONE,'-','', [rfReplaceAll]);
          PHONE:= StringReplace(PHONE,' ','', [rfReplaceAll]);
          PHONE:= StringReplace(PHONE,'(','', [rfReplaceAll]);
          PHONE:= StringReplace(PHONE,')','', [rfReplaceAll]);
          if length(PHONE)=10 then PHONE:='38'+PHONE;
          if length(PHONE)=11 then PHONE:='3'+PHONE;
          
          if (PHONE<>'') and (length(trim(PHONE))=12) then
          if not((PHONE=PHONEprint) and (FIRMCODE=GBIBSQL.FieldByName('PRSNFIRMCODE').AsInteger) and (StringReplace(StringReplace(trim(GBIBSQL.FieldByName('PRSNNAME').AsString),#10,'',[rfReplaceAll]),#13,'',[rfReplaceAll])='') )
            then
            if (length(trim(PHONE))>2) and (pos('@', trim(PHONE))=0) then begin
              SLFile.Add(fnMakeAddCharStr(StringReplace(StringReplace(GBIBSQL.FieldByName('FIRMMAINNAME').AsString,#10,'',[rfReplaceAll]),#13,'',[rfReplaceAll]),255,true){+';'}
                        +fnMakeAddCharStr(StringReplace(StringReplace(GBIBSQL.FieldByName('FIRMSHORTNAME').AsString,#10,'',[rfReplaceAll]),#13,'',[rfReplaceAll]),255,true){+';'}{+'`'}
                        +fnMakeAddCharStr(PHONE,255,true){+';'}
                        +fnMakeAddCharStr(StringReplace(StringReplace(trim(GBIBSQL.FieldByName('PRSNNAME').AsString),#10,'',[rfReplaceAll]),#13,'',[rfReplaceAll]),255,true)
                        +fnMakeAddCharStr(StringReplace(StringReplace(trim(GBIBSQL.FieldByName('commenttext').AsString),#10,'',[rfReplaceAll]),#13,'',[rfReplaceAll]),255,true)
                        +fnMakeAddCharStr(StringReplace(StringReplace(trim(GBIBSQL.FieldByName('source').AsString),#10,'',[rfReplaceAll]),#13,'',[rfReplaceAll]),255,true)
                        );
(*SLFileCSV.Add(fnMakeAddCharStr(StringReplace(StringReplace(GBIBSQL.FieldByName('FIRMMAINNAME').AsString,#10,'',[rfReplaceAll]),#13,'',[rfReplaceAll]),255,true)+';'
                        +fnMakeAddCharStr(StringReplace(StringReplace(GBIBSQL.FieldByName('FIRMSHORTNAME').AsString,#10,'',[rfReplaceAll]),#13,'',[rfReplaceAll]),255,true)+';'
                        +fnMakeAddCharStr(PHONE,255,true)+';'
                        +fnMakeAddCharStr(StringReplace(StringReplace(trim(GBIBSQL.FieldByName('PRSNNAME').AsString),#10,'',[rfReplaceAll]),#13,'',[rfReplaceAll]),255,true)+';'
                        +fnMakeAddCharStr(StringReplace(StringReplace(trim(GBIBSQL.FieldByName('commenttext').AsString),#10,'',[rfReplaceAll]),#13,'',[rfReplaceAll]),255,true)+';'
                        +fnMakeAddCharStr(StringReplace(StringReplace(trim(GBIBSQL.FieldByName('source').AsString),#10,'',[rfReplaceAll]),#13,'',[rfReplaceAll]),255,true)+';'
                        );   *)                     
end;

          PHONEprint:= PHONE;
          FIRMMAINNAME:= StringReplace(StringReplace(GBIBSQL.FieldByName('FIRMMAINNAME').AsString,#10,'',[rfReplaceAll]),#13,'',[rfReplaceAll]);       //
          FIRMSHORTNAME:= StringReplace(StringReplace(GBIBSQL.FieldByName('FIRMSHORTNAME').AsString,#10,'',[rfReplaceAll]),#13,'',[rfReplaceAll]);// GBIBSQL.FieldByName('FIRMSHORTNAME').AsString;
          PersNAME:=StringReplace(StringReplace(GBIBSQL.FieldByName('PRSNNAME').AsString,#10,'',[rfReplaceAll]),#13,'',[rfReplaceAll]);       //GBIBSQL.FieldByName('PRSNNAME').AsString;
          FIRMCODE:=GBIBSQL.FieldByName('PRSNFIRMCODE').AsInteger;
          commenttext:=GBIBSQL.FieldByName('commenttext').AsString;
          source:=GBIBSQL.FieldByName('source').AsString;
        except
          on e: exception do  begin
            prMessageLOGS('Ошибка: '+e.Message,'error' , false);
            prMessageLOGS('FIRMCODE= '+IntToStr(FIRMCODE)+' FIRMMAINNAME='+FIRMMAINNAME+' FIRMSHORTNAME='+FIRMSHORTNAME+' PHONE='+PHONEsql+' PersNAME='+PersNAME,'error' , false);
          end;
        end;
        GBIBSQL.Next;
      end;
      except
        on e: exception do  begin
          prMessageLOGS('Ошибка при обработке результатов запроса: '+e.Message,'error' , false);
        end;
      end;
//      if (length(trim(PHONE))=12) then
//        SLFile.Add({IntToStr(FIRMCODE)+';'+}fnMakeAddCharStr(FIRMMAINNAME,255,true){+';'}+fnMakeAddCharStr(FIRMSHORTNAME,255,true){+';'}{+'`'}+fnMakeAddCharStr(PHONE,255,true){+';'}+fnMakeAddCharStr(PersNAME,255,true));
  //    SLFile.Add(FIRMMAINNAME+';'+FIRMSHORTNAME+';'+PHONE+';'+PersNAME);
      GBIBSQL.Close;       
      
(*      GBIBSQL.SQL.Text:='SELECT MANCODE, m.mandrivercertnumber FIRMMAINNAME ,'#10
                       +'m.mandrivercategorynumber FIRMSHORTNAME ,'#10
//                       +'trim(m.manlastname) manlastname, trim(m.manname) manname, trim(m.manpatronymicname) manpatronymicname, '#10
                       +'tptrim(m.manlastname)||" "||tptrim(m.manname)||" "||trim(m.manpatronymicname)as PRSNNAME, '#10
                       +'replace(replace(replace(replace(replace(m.mandrivermednumber,"(",""),")",""),"-",""),"+","")," ","")  PPHPHONE '#10
                       +',"" as commenttext, "e"|| cast(EMPLCODE as char(10)) as source'#10
                       +'FROM employees left join MANS m on EMPLMANCODE= MANCODE '#10
                       +'where EMPLARCHIVE<>"T" and MANARCHIVE<>"T" and m.mandrivermednumber<>"" and  not m.mandrivermednumber is null '#10;
*)
      GBIBSQL.SQL.Text:=' SELECT MANCODE , m.mandrivercertnumber FIRMMAINNAME ,'#10
                       +' m.mandrivercategorynumber FIRMSHORTNAME ,'#10
                       +' m.mandrivermednumber PPHPHONE, tptrim(m.manlastname)||" "||tptrim(m.manname)||" "'#10
                       +' ||trim(m.manpatronymicname)as PRSNNAME'#10
                       +'," " as commenttext, "e"|| cast(EMPLCODE as char(10)) as source'#10
                       +' FROM employees left join MANS m on EMPLMANCODE= MANCODE'#10
                       +' where EMPLARCHIVE<>"T" and MANARCHIVE<>"T"'#10
                       +' and m.mandrivermednumber<>"" and  not m.mandrivermednumber is null'#10
                       +' order by m.mandrivercertnumber'#10;
      GBIBSQL.Prepare;
      GBIBSQL.ExecQuery;
      try
      while not GBIBSQL.EOF do begin
   //       SLManuf.Add(OrdIBSQL.FieldByName('LMMANUFNAME').AsString);      fnMakeAddCharStr(S: String; N: Integer)
        try
          PHONE:=StringReplace(StringReplace(GBIBSQL.FieldByName('PPHPHONE').AsString,#10,'',[rfReplaceAll]),#13,'',[rfReplaceAll]);       
          PHONE:= trim(PHONE);
          PHONE:= StringReplace(PHONE,'+','', [rfReplaceAll]);
          PHONE:= StringReplace(PHONE,'-','', [rfReplaceAll]);
          PHONE:= StringReplace(PHONE,' ','', [rfReplaceAll]);
          PHONE:= StringReplace(PHONE,'(','', [rfReplaceAll]);
          PHONE:= StringReplace(PHONE,')','', [rfReplaceAll]);
          PHONE:= StringReplace(PHONE,'/','', [rfReplaceAll]);
          PHONE:= StringReplace(PHONE,'\','', [rfReplaceAll]);
          PHONE:= StringReplace(PHONE,'|','', [rfReplaceAll]);
          if length(PHONE)=10 then PHONE:='38'+PHONE;
          if length(PHONE)=11 then PHONE:='3'+PHONE;
//          PersNAME:= trim(GBIBSQL.FieldByName('manlastname').AsString)+' '+trim(GBIBSQL.FieldByName('manname').AsString)+' '+trim(GBIBSQL.FieldByName('manpatronymicname').AsString);       
          PersNAME:= GBIBSQL.FieldByName('PRSNNAME').AsString;
          FIRMMAINNAME:= StringReplace(StringReplace(GBIBSQL.FieldByName('FIRMMAINNAME').AsString,#10,'',[rfReplaceAll]),#13,'',[rfReplaceAll]); 
          FIRMSHORTNAME:= StringReplace(StringReplace(GBIBSQL.FieldByName('FIRMSHORTNAME').AsString,#10,'',[rfReplaceAll]),#13,'',[rfReplaceAll]);
          FIRMCODE:=GBIBSQL.FieldByName('MANCODE').AsInteger;
          commenttext:=GBIBSQL.FieldByName('commenttext').AsString;
          source:=GBIBSQL.FieldByName('source').AsString;
          if PHONE<>'' then
            if (length(trim(PHONE))=12) then
            if (length(trim(PHONE))>2) and (pos('@', trim(PHONE))=0) then
              SLFile.Add(fnMakeAddCharStr(FIRMMAINNAME,255,true)+fnMakeAddCharStr(trim(FIRMSHORTNAME),255,true)+fnMakeAddCharStr(PHONE,255,true)+fnMakeAddCharStr(PersNAME,255,true)+fnMakeAddCharStr(commenttext,255,true)+fnMakeAddCharStr(source,255,true));
        except
          on e: exception do  begin
            prMessageLOGS('Ошибка: '+e.Message,'error' , false);
            prMessageLOGS('MANCODE= '+IntToStr(FIRMCODE)+' подразделение работы='+FIRMMAINNAME+' отдел работы='+FIRMSHORTNAME+' PHONE='+PHONEsql+' PersNAME='+PersNAME,'error' , false);
          end;
        end;
        GBIBSQL.Next;
      end;
      GBIBSQL.Close;       
      except
        on e: exception do  begin
          prMessageLOGS('Ошибка при обработке результатов запроса(2) : '+e.Message,'error' , false);
        end;
      end;

    
    except
      on E: EBOBError do begin
        prMessageLOGS(nmProc+': ' +E.Message+')','error' , false);
      end;
      on E: Exception do begin
        prMessageLOGS(nmProc+': ' +E.Message+')','error' , false);    
      end;    
    end;
  finally
    Stream.WriteInt(SLFile.Count);
//SLFileCSV.SaveToFile('l:\TMP\vv\Phone.csv');    
    for i:=0 to SLFile.Count-1 do Stream.WriteLongStr(SLFile[i]); 
      
    Stream.Position:= 0;
    prFreeIBSQL(GBIBSQL);
    if assigned(IBGRB) then cntsGRB.SetFreeCnt(IBGRB, True);
    prFree(SLFile);
  end;
end;
//================================ поиск товаров по оригин.номеру (Web & WebArm)
procedure prWaresByOE(Stream: TBoBMemoryStream; ThreadData: TThreadData);
const nmProc = 'prWaresByOE'; // имя процедуры/функции
      arManufDuo: array [0..3] of string = ('LEXUS','TOYOTA','INFINITI','NISSAN');
var UserId, FirmId, ContID, i, j, ManufID, arlen, arlen1, ForFirmID, FirmSys, CurrID, wareID, iCount: integer;
    Manuf, OE, ManufDuo: string;
    ErrorPos: string;
    aiWareByON, aiAnalogs, aiSatells, arTotalWares: Tai;
    PriceInUah, ShowAnalogs: boolean;
    SLLaximoBrand: TStringList;
    iList, iListT: TIntegerList;
    countOE, m, pline, sPos: integer;
    IBORDQuery: TIBSQL;
    IBORD: TIBDatabase;
begin
//  SLLaximoBrand:= nil;
  iList:= TIntegerList.Create;
  IBORDQuery:= nil;
  IBORD:= nil;  
  Stream.Position:= 0;
  SetLength(aiWareByON, 0);
  SetLength(arTotalWares, 0);
try  
  try
    UserID:= Stream.ReadInt;
    FirmID:= Stream.ReadInt;
    ForFirmID:= Stream.ReadInt;   // new !!!
    ContID:= Stream.ReadInt; // для контрактов
    PriceInUah:= Stream.ReadBool;
    Manuf:= AnsiUpperCase(Stream.ReadStr);
    OE:= Stream.ReadStr;
    pline:=Stream.ReadInt;
    IBORD:= cntsORD.GetFreeCnt;
    IBORDQuery:= fnCreateNewIBSQL(IBORD, 'Query_'+nmProc, -1, tpWrite, true);
    try 
      IBORDQuery.SQL.Text:='execute procedure LAXIMOSAVECLICKPROTONLINE(:pLineID)';    
      IBORDQuery.ParamByName('pLineID').AsInteger:= pline;
      IBORDQuery.ExecQuery; 
      if IBORDQuery.Transaction.Active then IBORDQuery.Transaction.Commit;
      IBORDQuery.Close;
    except
      on E: EBOBError do begin
        prMessageLOGS(nmProc+': ' +E.Message+ ' (ErrorPos='+ErrorPos+')','error' , false);
        prMessageLOGS('SQL.Text='+IBORDQuery.SQL.Text,'error' , false);
        prMessageLOGS(' pLineID='+IntToStr(pline),'error' , false);
      end;
      on E: Exception do begin
        prMessageLOGS(nmProc+': ' +E.Message+ ' (ErrorPos='+ErrorPos+')','error' , false);    
        prMessageLOGS('SQL.Text='+IBORDQuery.SQL.Text,'error' , false);
        prMessageLOGS(' pLineID='+IntToStr(pline),'error' , false);              
      end;    
    end;
    SLLaximoBrand:= cache.BrandLaximoList;
    i:= SLLaximoBrand.IndexOf(Manuf);
    if i>-1 then 
      iList:= TIntegerList(Cache.BrandLaximoList.Objects[i]);
      
    m:= fnInStrArray(UpperCase(Manuf), arManufDuo);
    
    if m>-1 then begin
//    if UpperCase(Manuf)='LEXUS' then begin
      if Odd(m) then ManufDuo:= arManufDuo[m-1]
                else ManufDuo:= arManufDuo[m+1];
      manuf:={'"'+}manuf+{'", "'}''', '''+ManufDuo{+'"'};          
      iListT:= TIntegerList.Create;
      
      i:= SLLaximoBrand.IndexOf(ManufDuo);
      if i>-1 then 
        iListT:= TIntegerList(Cache.BrandLaximoList.Objects[i]);
      for i := 0 to iListT.Count-1 do
        iList.Add(iListT[i]);
    end;
ErrorPos:='00';
    prSetThLogParams(ThreadData,0,UserID,FirmID,'OE='+OE+#13#10); // логирование
//    prSetThLogParams(ThreadData, 0, UserId, 0, '');
               // проверить UserID, FirmID, ForFirmID и получить систему, валюту
    prCheckUserForFirmAndGetSysCurr(UserID, FirmID, ForFirmID, FirmSys, CurrID, PriceInUah, contID);

{ErrorPos:='05';
    if not Cache.FDCA.Manufacturers.ManufExistsByName(Manuf, ManufID) then
      raise EBOBError.Create(MessText(mtkNotFoundManuf, Manuf));
    if (FirmSys>0) and not Cache.FDCA.Manufacturers[ManufID].CheckIsTypeSys(FirmSys) then
      raise EBOBError.Create(MessText(mtkNotSysManuf, intToStr(FirmSys)));
}
ErrorPos:='10';
    Stream.Clear;
    countOE:= 0;
//    manuf:='                         ';
    for m := 0 to iList.Count-1 do begin    
      ManufID:= iList[m];
      if not Cache.FDCA.Manufacturers.ManufExists(ManufID) then continue;      
//      if not Cache.FDCA.Manufacturers.ManufExistsByName(Manuf, ManufID) then continue;
      if (FirmSys>0) and not Cache.FDCA.Manufacturers[ManufID].CheckIsTypeSys(FirmSys) then  continue;
      i:= Cache.FDCA.SearchOriginalNum(ManufID, fnDelSpcAndSumb(OE));
      if i=-1 then  continue;
      //raise EBOBError.Create(MessText(mtkNotFoundOrNum)+' "'+OE+'"');
      inc(countOE);
      if countOE=1 then begin
        Stream.WriteInt(aeSuccess);    // нашли товар по ОЕ
        sPos:= Stream.Position;
        Stream.WriteStr(manuf);
        Stream.WriteStr(Cache.GetCurrName(CurrID, FirmID<>isWe));
//        Stream.WriteStr(Cache.GetCurrName(CurrID));
      end;
    
      aiWareByON:= Cache.FDCA.arOriginalNumInfo[i].arAnalogs; // товары к ОН

      if (FirmSys>0) then for i:= High(aiWareByON) downto 0 do // отсев по системе
        if not Cache.GetWare(aiWareByON[i]).CheckWareTypeSys(FirmSys) then
          prDelItemFromArray(i, aiWareByON);

      iCount:= Length(aiWareByON);
      if (iCount<1) then raise EBOBError.Create(MessText(mtkNotFoundWares)+
                                               ' с оригинальным номером "'+OE+'"');
  ErrorPos:='15';

      ShowAnalogs:= (FirmID<>IsWe) and (iCount<=Cache.arClientInfo[UserID].MaxRowShowAnalogs);
      Stream.WriteBool(ShowAnalogs);

      Stream.WriteInt(iCount); // кол-во аналогов
      for i:= 0 to High(aiWareByON) do try
        wareID:= aiWareByON[i];
        aiAnalogs:= fnGetAllAnalogs(wareID, -1, FirmSys);
        arlen:= Length(aiAnalogs);
        aiSatells:= Cache.GetWare(wareID).GetSatellites(FirmSys);
        arlen1:= Length(aiSatells); // кол-во сопут.товаров
        prSaveShortWareInfoToStream(Stream, wareID, FirmID, UserID, arlen, CurrID, ForFirmID, arlen1, contID);
        prAddItemToIntArray(wareID, arTotalWares);

        if ShowAnalogs then for j:= 0 to High(aiAnalogs) do begin
          prSaveShortWareInfoToStream(Stream, aiAnalogs[j], FirmID, UserID, 0, CurrID, ForFirmID, 0, contID);
          prAddItemToIntArray(wareID, arTotalWares);
        end;
      finally
        SetLength(aiAnalogs, 0);
        SetLength(aiSatells, 0);
      end;

      j:= length(arTotalWares);
      PriceInUah:= ((FirmId<>IsWe) or (ForFirmID>0)) and (j>0);  // здесь PriceInUah использ.как флаг
        //and (j<=Cache.GetConstItem(pcOrderWareSemaforLimit).IntValue);
      Stream.WriteBool(PriceInUah);          // нужно ли запрашивать остатки

  ErrorPos:='20';
      //--------------------- блок отправки инфы о наличии привязанных моделей +++
      prSaveWaresModelsExists(Stream, FirmSys, arTotalWares);
      //--------------------- блок отправки инфы о наличии привязанных моделей ---
      
      //------------------------ запись в Stream блока семафоров наличия товаров
      if ((FirmId<>IsWe) or (ForFirmID>0)) and (j>0) then begin
        if (FirmId<>IsWe) and (ForFirmID<1) then ForFirmID:= FirmID;
        prSaveWareRestsExists(Stream, ForFirmID, ContID, arTotalWares);
      end else Stream.WriteInt(0);
    end; 
  Stream.WriteStr('WaresByOE');
  except
    on E: EBOBError do prSaveCommonError(Stream, ThreadData, nmProc, E.Message, '', True);
    on E: Exception do prSaveCommonError(Stream, ThreadData, nmProc, E.Message, '', False);
  end;
finally
  Stream.Position:= 0;
  SetLength(aiWareByON, 0);
  SetLength(arTotalWares, 0);
  prFreeIBSQL(IBORDQuery);
  if assigned(IBORD) then cntsORD.SetFreeCnt(IBORD, True);
end;
  
end;
//==============================================================================  
  
procedure prHideEmptyOE(Stream: TBoBMemoryStream; ThreadData: TThreadData);
const nmProc = 'prHideEmptyOE'; // имя процедуры/функции
      arManufDuo: array [0..3] of string = ('LEXUS','TOYOTA','INFINITI','NISSAN');
var
  UserId, FirmId, ForFirmID, FirmSys, CurrID, i, j, m, ManufID, arOElen, count: integer;
  Manuf, OE, oeIN, aboutcar, aboutnode, category,vin,frame, ManufDuo: string;
  ErrorPos: string;
  arOE, arOEname: tas; 
  aiWareByON: Tai;
  SLLaximoBrand: TStringList;
  iList, iListT: TIntegerList;
  PriceInUah: boolean;
  isVin,VinOrFrame,brand,catalog,vehicleid,name,model,engine,engineno,transmission,date,manufactured,destinationregion,framecolor,trimcolor: string;
  IBORDQuery: TIBSQL;
  IBORD: TIBDatabase;
  PROTLINE: integer;
  p,PROTONID, PROTONMFAU,PROTONLINE: integer; 
  ONLINEs, oem, oemname: string;
  OrigNum: TOriginalNumInfo;
  Firm: TFirmInfo;
  Contract: TContract;
  //SLContracts: TStringList;
  arStorageMain, arStorageCodes: tai;
  ILContracts: TIntegerList;
  OList: TObjectList;
  ContractID, l, cc,posW: integer;
  RestAll, RestMain: real;
begin
cc:= 0;
  Olist:= TObjectList.Create;    //must Free
  SLLaximoBrand:= TStringList.Create;
  ILContracts:= TIntegerList.Create;
  iList:= TIntegerList.Create;
  Stream.Position:= 0;
  SetLength(aiWareByON, 0);
  SetLength(arOE,0);
  SetLength(arStorageCodes,0);
  SetLength(arStorageMain,0);
  IBORDQuery:= nil;  
  IBORD:= nil; 
  PROTONMFAU:=-1;      
try  
  try
    UserID:= Stream.ReadInt;
    FirmID:= Stream.ReadInt;
    ForFirmID:= Stream.ReadInt;   // new !!!
    Manuf:= AnsiUpperCase(Stream.ReadStr);
    OE:= Stream.ReadLongStr;
    oeIN:=OE;
    aboutcar:=Stream.ReadLongStr;
//i:=pos(#39,aboutcar);
    aboutnode:=Stream.ReadLongStr;
//    aboutnode:=aboutnode;
    category:=Stream.ReadStr;
    vin:=Stream.ReadStr;
    frame:=Stream.ReadStr;
    contractID:=StrToIntDef(Stream.ReadStr,0);
    prSetThLogParams(ThreadData, 0, UserId, FirmID, '');   
prSetThLogParams(ThreadData,0,UserID,0,'OE='+OE+#13#10); // логирование    
  if (FirmID<>IsWe) then ForFirmID:= FirmID;
  if ForFirmID<>IsWe then begin
    Firm:= Cache.arFirmInfo[ForFirmID];
    if contractID=0 then begin
      ILContracts:=Firm.FirmContracts;
      for i := 0 to ILContracts.Count-1 do begin
        ContractID:= ILContracts[i];
        Contract:= Firm.GetContract(ContractID);
        prAddItemToIntArray(Contract.MainStorage, arStorageMain);
        for j:= 0  to High(Contract.ContStorages) do 
          with Contract.ContStorages[j] do
  //          if IsVisible then prAddItemToIntArray(DprtID, arStorageCodes);   
            if IsVisible or (flClientStoragesView_add and IsAddVis) then       
              prAddItemToIntArray(DprtID, arStorageCodes);                     
      end;
    end
    else begin
      Contract:= Firm.GetContract(ContractID);
      CurrID := Contract.ContCurrency;
      FirmSys:= 0; // Contract.SysID;
      prAddItemToIntArray(Contract.MainStorage, arStorageMain);
      for j:= 0  to High(Contract.ContStorages) do 
        with Contract.ContStorages[j] do 
          if IsVisible or (flClientStoragesView_add and IsAddVis) then       
            prAddItemToIntArray(DprtID, arStorageCodes);
    end;
  end
  else prCheckUserForFirmAndGetSysCurr(UserID, FirmID, ForFirmID, FirmSys, CurrID, PriceInUah);

  VinOrFrame:= fnIfStr(vin='',frame,vin);
  isVin:=fnIfStr(vin='',fnIfStr(frame='','' ,'F'),'T');
(*  brand:= fnCutFromTo(aboutcar, 'brand="', '"',false);;
//  Manuf:= AnsiUpperCase(brand);
  catalog:= fnCutFromTo(aboutcar, 'catalog="', '"',false);
  vehicleid:= fnCutFromTo(aboutcar, 'vehicleid="', '"',false);
  name:= fnCutFromTo(aboutcar, 'name="', '"',false);
  model:= fnCutFromTo(aboutcar, 'model="', '"',false);
  engine:= fnCutFromTo(aboutcar, 'engine="', '"',false);
  engineno:= fnCutFromTo(aboutcar, 'engineno="', '"',false);
  transmission:= fnCutFromTo(aboutcar, 'transmission="', '"',false);
  date:= fnCutFromTo(aboutcar, 'date="', '"',false);
  manufactured:= fnCutFromTo(aboutcar, 'manufactured="', '"',false);
  destinationregion:= fnCutFromTo(aboutcar, 'destinationregion="', '"',false);
  framecolor:= fnCutFromTo(aboutcar, 'framecolor="', '"',false);
  trimcolor:= fnCutFromTo(aboutcar, 'trimcolor="', '"',false);  *)
  brand:= fnCutFromTo(aboutcar, 'brand='+#39, #39,false);;
  catalog:= fnCutFromTo(aboutcar, 'catalog=''', '''',false);
  vehicleid:= fnCutFromTo(aboutcar, 'vehicleid=''', '''',false);
  name:= fnCutFromTo(aboutcar, 'name=''', '''',false);
  model:= fnCutFromTo(aboutcar, 'model=''', '''',false);
  engine:= fnCutFromTo(aboutcar, 'engine=''', '''',false);
  engineno:= fnCutFromTo(aboutcar, 'engineno=''', '''',false);
  transmission:= fnCutFromTo(aboutcar, 'transmission=''', '''',false);
  date:= fnCutFromTo(aboutcar, 'date=''', '''',false);
  manufactured:= fnCutFromTo(aboutcar, 'manufactured=''', '''',false);
  destinationregion:= fnCutFromTo(aboutcar, 'destinationregion=''', '''',false);
  framecolor:= fnCutFromTo(aboutcar, 'framecolor=''', '''',false);
  trimcolor:= fnCutFromTo(aboutcar, 'trimcolor=''', '''',false);

  PROTLINE:= -1;
  if (VEHICLEID='') {or (VINORFRAME='')} then begin
    prMessageLOGS('--------------------------------', 'error', false);
    if (VEHICLEID='') then prMessageLOGS(nmProc+': пустой VEHICLEID', 'error', false)
    else if (VINORFRAME='') then prMessageLOGS(nmProc+': пустой VINORFRAME', 'error', false);
    prMessageLOGS(' pVINORFRAME='+UpperCase(VINORFRAME)+'; pISVIN='+ISVIN+'; pCATEGORY='+CATEGORY+
      '; paboutnode='+aboutnode+'; pbrand='+brand+'; pCATALOG='+CATALOG, 'error', false);
    prMessageLOGS(' pVEHICLEID='+VEHICLEID+'; pNAME='+NAME+'; pMODEL='+MODEL+'; pENGINE='+ENGINE+
      '; pENGINENO='+ENGINENO, 'error', false);
    prMessageLOGS(' pTRANSMISSION='+TRANSMISSION+' pDATE='+DATE+' pmanufactured='+manufactured+
      ' pdestinationregion='+destinationregion+' pFRAMECOLOR='+FRAMECOLOR+' pTRIMCOLOR='+TRIMCOLOR, 'error', false);
  end;

  IBORDQuery:= nil;
  IBORD:= nil;
  if (oe<>'') and (VEHICLEID<>'') {and (VINORFRAME<>'')} then begin    //LAXIMOSAVESEARCHPROTLINE    
    IBORD:= cntsORD.GetFreeCnt;
    IBORDQuery:= fnCreateNewIBSQL(IBORD, 'Query_'+nmProc, -1, tpWrite, true);
    try
      if not IBORDQuery.Transaction.InTransaction then IBORDQuery.Transaction.StartTransaction;
      IBORDQuery.SQL.Text:= 'SELECT RLINEID FROM LAXIMOSAVESEARCHPROTLINE(:pVINORFRAME, :pISVIN,:pCATEGORY,:paboutnode, '
                           +':pbrand, :pCATALOG, :pVEHICLEID, :pNAME, :pMODEL, :pENGINE, '
                           +':pENGINENO, :pTRANSMISSION, :pDATE, :pmanufactured, :pdestinationregion, :pFRAMECOLOR, :pTRIMCOLOR, '
                           +':pFIRMID, :pUSERID)';
      IBORDQuery.ParamByName('pVINORFRAME').AsString:=UpperCase(VINORFRAME);
      IBORDQuery.ParamByName('pISVIN').AsString:=ISVIN;
      IBORDQuery.ParamByName('pCATEGORY').AsString:=CATEGORY;
      IBORDQuery.ParamByName('paboutnode').AsString:=aboutnode;
      IBORDQuery.ParamByName('pbrand').AsString:=brand;
      IBORDQuery.ParamByName('pCATALOG').AsString:=CATALOG;
      IBORDQuery.ParamByName('pVEHICLEID').AsString:=VEHICLEID;
      IBORDQuery.ParamByName('pNAME').AsString:=NAME;
      IBORDQuery.ParamByName('pMODEL').AsString:=MODEL;
      IBORDQuery.ParamByName('pENGINE').AsString:=ENGINE;
      IBORDQuery.ParamByName('pENGINENO').AsString:=ENGINENO;
      IBORDQuery.ParamByName('pTRANSMISSION').AsString:=TRANSMISSION;
      IBORDQuery.ParamByName('pDATE').AsString:=DATE;
      IBORDQuery.ParamByName('pmanufactured').AsString:=manufactured;
      IBORDQuery.ParamByName('pdestinationregion').AsString:=destinationregion;
      IBORDQuery.ParamByName('pFRAMECOLOR').AsString:=FRAMECOLOR;
      IBORDQuery.ParamByName('pTRIMCOLOR').AsString:=TRIMCOLOR;

      IBORDQuery.ParamByName('pFIRMID').AsInteger:={ForFirmID;}FIRMID;
      IBORDQuery.ParamByName('pUSERID').AsInteger:=USERID;
      IBORDQuery.Prepare;
      IBORDQuery.ExecQuery;
      if IBORDQuery.Transaction.Active then IBORDQuery.Transaction.Commit;
      if (IBORDQuery.Bof and IBORDQuery.Eof) then
        PROTLINE:= -1
      else PROTLINE:=IBORDQuery.FieldByName('RLINEID').AsInteger;
      IBORDQuery.Close;
    except
      on E: Exception do begin
        prMessageLOGS('--------------------------------', 'error', false);   
        prMessageLOGS(nmProc+': ' +E.Message+ ' (ErrorPos='+ErrorPos+')','error' , false);
  //      prMessageLOGS('LAXIMOSAVESEARCHPROTLINE','error' , false);
        prMessageLOGS(' pVINORFRAME='+UpperCase(VINORFRAME)+'; pISVIN='+ISVIN+'; pCATEGORY='+CATEGORY+'; paboutnode='+aboutnode+'; pbrand='+brand+'; pCATALOG='+CATALOG,'error' , false);
        prMessageLOGS(' pVEHICLEID='+VEHICLEID+'; pNAME='+NAME+'; pMODEL='+MODEL+'; pENGINE='+ENGINE+'; pENGINENO='+ENGINENO,'error' , false);
        prMessageLOGS(' pTRANSMISSION='+TRANSMISSION+' pDATE='+DATE+' pmanufactured='+manufactured+' pdestinationregion='+destinationregion,'error' , false);
        prMessageLOGS(' pFRAMECOLOR='+FRAMECOLOR+' pTRIMCOLOR='+TRIMCOLOR,'error' , false);
      end;
    end;
  end; 
//  if not IBORDQuery.Transaction.InTransaction then IBORDQuery.Transaction.StartTransaction;
  if PROTLINE>-1 then
    IBORDQuery.SQL.Text:= 'SELECT RONID,RMFAU,RONLINE FROM LAXIMOSAVESEARCHPROTONLINE(:pPROTLINE,:pORIGNUMID,:pORIGNUM,:pDETAIL,:pQTYDEF,:pQTYVIS)';  
  Stream.Clear;
  Stream.Position:= 0;
  Stream.WriteInt(aeSuccess);
  Stream.WriteInt(PROTLINE);   //№ строки в LaximoSearchProtocol
  
ErrorPos:='00';
               // проверить UserID, FirmID, ForFirmID и получить систему, валюту
//    prCheckUserForFirmAndGetSysCurr(UserID, FirmID, ForFirmID, FirmSys, CurrID, PriceInUah);
(*
    if FirmID=isWe then begin                    // проверки WebArm
      prSetThLogParams(ThreadData, 0, UserId, 0, '');
      if not Cache.EmplExist(UserID) then raise EBOBError.Create(MessText(mtkNotEmplExist));
    end else begin                               // проверки Web
      prSetThLogParams(ThreadData, 0, UserId, FirmID, '');
      if not Cache.ClientExist(UserID) then raise EBOBError.Create(MessText(mtkNotClientExist));
      if not Cache.FirmExist(FirmID) then raise EBOBError.Create(MessText(mtkNotFirmExists));
      if Cache.arClientInfo[UserID].FirmID<>FirmID then raise EBOBError.Create(MessText(mtkNotClientOfFirm));
    end;*)
ErrorPos:='05';
    SLLaximoBrand:= cache.BrandLaximoList;
    i:= SLLaximoBrand.IndexOf(Manuf);
    if i>-1 then 
      iList:= TIntegerList(Cache.BrandLaximoList.Objects[i]);
    m:= fnInStrArray(UpperCase(Manuf), arManufDuo);
    
    if m>-1 then begin
//    if UpperCase(Manuf)='LEXUS' then begin
      if Odd(m) then ManufDuo:= arManufDuo[m-1]
                else ManufDuo:= arManufDuo[m+1];
//      ManufDuo:= fnIfStr(Odd(m),arManufDuo[m-1],arManufDuo[m+1]);
      iListT:= TIntegerList.Create;
      
      i:= SLLaximoBrand.IndexOf(ManufDuo);
      if i>-1 then 
        iListT:= TIntegerList(Cache.BrandLaximoList.Objects[i]);
      for i := 0 to iListT.Count-1 do
        iList.Add(iListT[i]);
    end;
//    if not Cache.FDCA.Manufacturers.ManufExistsByName(Manuf, ManufID) then raise EBOBError.Create(MessText(mtkNotFoundManuf, Manuf));

ErrorPos:='10';
    arOE:=fnSplitsString(oe,'oe='); //fnSplitString(OE,',');
    OE:= '';
    count:= 0;
//    Stream.WriteInt(length(arOE)*iList.Count);//кол-во ОН   
    PosW:= Stream.Position; 
    Stream.WriteInt(0);
    arOElen:= length(arOE)-1;
    for j := 0 to arOElen do if arOE[j]<>'' then begin
      for m := 0 to iList.Count-1 do begin
        ManufID:= iList[m];
        if not Cache.FDCA.Manufacturers.ManufExists(ManufID) then continue;
        if (FirmSys>0) and not Cache.FDCA.Manufacturers[ManufID].CheckIsTypeSys(FirmSys) then  continue;
        p:=pos('name=',arOE[j]);
        oem:=copy(arOE[j],1,p-1);
        oemname:= copy(arOE[j],p+5,length(arOE[j]));
        RestAll:= -1;
        RestMain:= -1;

        i:=Cache.FDCA.SearchOriginalNum(ManufID, fnDelSpcAndSumb(oem));
        if i>-1 then begin
          OE:=OE+fnIfStr(oe='', '',',')+oem;
          inc(count);
          aiWareByON:=Cache.FDCA.arOriginalNumInfo[i].arAnalogs;
          RestAll:= 0;
          RestMain:= 0;
          for i := 0 to length(aiWareByON)-1 do begin
            OList:= Cache.GetWareRestsByStores(aiWareByON[i]);
            try
              for l:= 0 to OList.Count-1 do with TCodeAndQty(OList[l]) do begin
                if ForFirmID<>IsWe then begin
                  if ((fnInIntArray(ID, arStorageCodes)>-1) {and (Qty>constDeltaZero)}) then
                    RestAll:=RestAll+ Qty;
                  if ((fnInIntArray(ID, arStorageMain)>-1) {and (Qty>constDeltaZero)}) then
                    RestMain:=RestMain+ Qty;
                end
                else RestAll:=RestAll+ Qty;
              end;
            finally
              prFree(OList);
            end;
          end;

      {      end
            else begin
              aiWareByON:=Cache.FDCA.arOriginalNumInfo[i].arAnalogs;
              arlen:= Length(aiWareByON)-1;
              if arlen=-1 then begin
                OE:=OE+fnIfStr(oe='', '',',')+arOE[j];
                inc(count); 
              end; }

        end;
        ONLINEs:='';
        if (PROTLINE>0) then begin
          if (fnDelSpcAndSumb(oem)='') then begin
            prMessageLOGS('----------------', 'error', false);
            prMessageLOGS(nmProc+': пустой ОН','error' , false);
            prMessageLOGS(' pPROTLINE='+IntToStr(PROTLINE)+'; pORIGNUMID='+IntToStr(0)+'; pORIGNUM='+oem+
              '; pDETAIL='+oemname+'; pQTYDEF='+FloatToStr(RestMain)+'; pQTYVIS='+FloatToStr(RestAll), 'error', false);
            prMessageLOGS(oeIN, 'error', false);             
          end else begin
//        IBORDQuery.SQL.Text:= 'SELECT RONID, RMFAU, RONLINE'+
//          ' FROM LAXIMOSAVESEARCHPROTONLINE(:pPROTLINE,:pORIGNUMID,:pORIGNUM,:pDETAIL,:pQTYDEF,:pQTYVIS)';
            try
                if not IBORDQuery.Transaction.InTransaction then IBORDQuery.Transaction.StartTransaction;
                IBORDQuery.ParamByName('pORIGNUM').AsString:=fnDelSpcAndSumb(oem);
                IBORDQuery.ParamByName('pDETAIL').AsString:=oemname;
                IBORDQuery.ParamByName('pPROTLINE').AsInteger:=PROTLINE;
                IBORDQuery.ParamByName('pORIGNUMID').AsInteger:=0;
                IBORDQuery.ParamByName('pQTYDEF').AsFloat:=RestMain;
                IBORDQuery.ParamByName('pQTYVIS').AsFloat:=RestAll;
                IBORDQuery.ExecQuery;
                while not IBORDQuery.Eof do begin
                  PROTONID:=IBORDQuery.FieldByName('RONID').AsInteger;  //ORIGINALNUMWARE.ORNWCODE
//                  PROTONMFAU:=IBORDQuery.FieldByName('RMFAU').AsInteger;  //LaximoManufMfauLink.LbmmMfau
                  PROTONLINE:=IBORDQuery.FieldByName('RONLINE').AsInteger;  //LaximoSearchProtocolON.LSPOCODE 
                  if not Cache.FDCA.OrigNumExist(PROTONID) then  // если новый ОН - создаем
                    OrigNum:= Cache.FDCA.AddNewOrigNumToCache(PROTONID, ManufID, fnDelSpcAndSumb(oem));
                  ONLINEs:= ONLINEs+fnIfStr(ONLINEs='', '',',')+IntTOStr(PROTONLINE);
                  IBORDQuery.Next;
                end;
                if IBORDQuery.Transaction.Active then IBORDQuery.Transaction.Commit;          
            except
              on E: Exception do begin
                prMessageLOGS('----------------', 'error', false);   
                prMessageLOGS(nmProc+': ' +E.Message+ ' (ErrorPos='+ErrorPos+')','error' , false);
    //            prMessageLOGS('LAXIMOSAVESEARCHPROTONLINE','error' , false);
                prMessageLOGS(' pPROTLINE='+IntToStr(PROTLINE)+'; pORIGNUMID='+IntToStr(0)+'; pORIGNUM='+oem+'; pDETAIL='+oemname+'; pQTYDEF='+FloatToStr(IBORDQuery.ParamByName('pQTYDEF').AsFloat)+'; pQTYVIS='+FloatToStr(IBORDQuery.ParamByName('pQTYVIS').AsFloat),'error' , false);
              end;
            end;
            IBORDQuery.Close;           
          end;                              
        end;
        Stream.WriteStr(oem); //OН
        Stream.WriteStr(ONLINEs); //  строки в LaximoSearchProtocolON  
        inc(cc);   
      end; //for m := 0 to iList.Count-1 do begin
    end;
if cc<>0 then
cc:=cc;
ErrorPos:='15';
    
    SetLength(arOE,0);
    arOE:=fnSplitString(OE,',');
    Stream.WriteInt(length(arOE));
    for j := 0 to count-1 do  Stream.WriteStr(arOE[j]);
Stream.Position:= PosW;
Stream.WriteInt(cc);      
ErrorPos:='20';

  except
    on E: EBOBError do begin
      Stream.Clear;
      Stream.WriteInt(aeCommonError);
      Stream.WriteStr(E.Message);
      fnWriteToLog(ThreadData, lgmsUserError, nmProc, '', E.Message, '');
    end;
    on E: Exception do begin
      Stream.Clear;
      Stream.WriteInt(aeCommonError);
      Stream.WriteStr('Ошибка выполнения .');
      fnWriteToLog(ThreadData, lgmsSysError, nmProc, '', E.Message, '');
      prMessageLOGS(nmProc+': ' +E.Message+ ' (ErrorPos='+ErrorPos+')','error' , false);      
    end;
  end;
finally
  Stream.Position:= 0;
  SetLength(aiWareByON, 0);
  SetLength(arOE, 0);
  prFreeIBSQL(IBORDQuery);
  if assigned(IBORD) then cntsORD.SetFreeCnt(IBORD, True);
  if assigned(OList) then prFree(OList);
end;

end; //prHideEmptyOE
  
//------------------------------------------------------------------------------ 
function fnArtSup(BrandGB: integer= -1): TArrayArtSup;
const nmProc = 'fnArtSup'; // имя процедуры/функции
var IBQuery: TIBSQL;
    IBD: TIBDatabase;
    i: integer;
    ss: string;
begin
IBD:= nil;
try
  ss:= '';
//BrandGB:=32;  
  if BrandGB>-1 then ss:= 'where Ds_MF_ID in ('+fnArrOfIntToString(TBrandItem(Cache.WareBrands[BrandGB]).TDMFcodes)+')';
 
  IBD:= cntsTDT.GetFreeCnt;
  IBQuery:= fnCreateNewIBSQL(IBD, 'IBQuery_'+nmProc, -1, tpRead, true);
  IBQuery.SQL.Text:= {'SELECT "" as ART_SUP_BRA, "" as  ART_NR, "" as ART_SEARCH, count(ART_ID) MF_ID'#10+
         'FROM ARTICLES left outer join DATA_SUPPLIERS on ART_SUP_ID=DS_ID '#10+
         ss+#10+}
         'SELECT first 1 "" as ART_SUP_BRA, "" as  ART_NR, "" as ART_SEARCH,'#10+
         '(SELECT count(ART_ID) FROM ARTICLES left outer join DATA_SUPPLIERS on ART_SUP_ID=DS_ID '+ss+') '+#10+
         //'+(select count(ATN_ID) FROM ART_TRADE_NUMBERS left outer join  DATA_SUPPLIERS on ATN_SUP_ID=DS_ID '+ss+') 
         'as MF_ID'+#10+
         'FROM DATA_SUPPLIERS'+#10+         
         'union '#10+
         'SELECT ds_Name ART_SUP_BRA, ART_NR, ART_SEARCH, Ds_MF_ID MF_ID FROM ARTICLES'#10+
         ' left outer join (select DS_ID, DS_MF_ID,  iif(ICN_NEWDESCR is null, DS_BRA, ICN_NEWDESCR) ds_Name'#10+
         ' from DATA_SUPPLIERS'#10+
         ' left join IMPORT_CHANGE_NAMES on ICN_TAB_ID = 100 and ICN_KE_KEY = DS_MF_ID) on ART_SUP_ID=DS_ID '+
         ss+#10;//#10+
         //'WHERE ART_SUP_ID=DS_ID '#10+
         //'ORDER BY ART_NR';
  IBQuery.Prepare;
  IBQuery.ExecQuery;
  try
    if not IBQuery.EOF then begin
      if IBQuery.FieldByName('MF_ID').AsInteger>0 then
      SetLength(Result,IBQuery.FieldByName('MF_ID').AsInteger);
      IBQuery.Next;
    end;
    i:= 0;
    while not IBQuery.EOF do begin
      TestCssStopException;
      Result[i].MF_ID:= IBQuery.FieldByName('MF_ID').AsInteger;
      Result[i].Art_Search:= IBQuery.FieldByName('ART_SEARCH').asString;
      Result[i].Art_NR:= IBQuery.FieldByName('ART_NR').asString;
      Result[i].Sup_Name:= IBQuery.FieldByName('ART_SUP_BRA').asString;
      Result[i].TradeMark:= ' ';
      inc(i);
  //    Result.Add(IBQuery.FieldByName('DS_MF_ID').AsString+'|'+IBQuery.FieldByName('ART_NR').asString);
      if cntsTDT.Suspend then raise EBOBError.Create(MessText(mtkExitBySuspend));
      IBQuery.Next;
    end;
  except
    on E: Exception do begin
      prMessageLOGS(nmProc+': ' +E.Message,'Log_prg.log' , false);
    end;
  end;  
  IBQuery.close;   
(*   
IBQuery.SQL.Text:= {'SELECT "" as ART_SUP_BRA, "" as  ART_NR, "" as ART_SEARCH, count(ATN_ID) MF_ID'#10+
                   'FROM ART_TRADE_NUMBERS'#10+
                   'left outer join  DATA_SUPPLIERS on ATN_SUP_ID=DS_ID'#10+
                   ss+#10+
                   'union '#10+ }
                   'SELECT  ds_Name ART_SUP_BRA, ATN_ART_NR ART_NR, ATN_SEARCH ART_SEARCH, Ds_MF_ID MF_ID'#10+
                   'FROM ART_TRADE_NUMBERS'#10+
                   'left outer join (select DS_ID, DS_MF_ID,  iif(ICN_NEWDESCR is null, DS_BRA, ICN_NEWDESCR) ds_Name'#10+
                   'from DATA_SUPPLIERS'#10+
                   'left join IMPORT_CHANGE_NAMES on ICN_TAB_ID = 100 and ICN_KE_KEY = DS_MF_ID) on ATN_SUP_ID=DS_ID'#10+
                   ss+#10;
if ss='' then  IBQuery.SQL.Text:= IBQuery.SQL.Text + 'where CHAR_LENGTH(trim(ATN_TRNUM))>1'  
         else  IBQuery.SQL.Text:= IBQuery.SQL.Text + ' and CHAR_LENGTH(trim(ATN_TRNUM))>1';                
if not Assigned(IBD) or not IBD.Connected then begin      
  prFreeIBSQL(IBQuery);                                   
  if Assigned(IBD) then cntsTDT.SetFreeCnt(IBD, True);    
  IBD:= cntsTDT.GetFreeCnt;
  IBQuery:= fnCreateNewIBSQL(IBD, 'IBQuery_'+nmProc, -1, tpRead, true);
//  IBQuery.SQL.Text:= SQLText;
  IBQuery.Prepare;
end;                   
IBQuery.ExecQuery;
try
  while not IBQuery.EOF do begin
    TestCssStopException;
    Result[i].MF_ID:= IBQuery.FieldByName('MF_ID').AsInteger;
    Result[i].Art_Search:= IBQuery.FieldByName('ART_SEARCH').asString;
    Result[i].Art_NR:= IBQuery.FieldByName('ART_NR').asString;
    Result[i].Sup_Name:= IBQuery.FieldByName('ART_SUP_BRA').asString;
    Result[i].TradeMark:= 'T';
    inc(i);
  //    Result.Add(IBQuery.FieldByName('DS_MF_ID').AsString+'|'+IBQuery.FieldByName('ART_NR').asString);
    if cntsTDT.Suspend then raise EBOBError.Create(MessText(mtkExitBySuspend));
    IBQuery.Next;
  end;
except
  on E: Exception do begin
    prMessageLOGS(nmProc+': ' +E.Message,'Log_prg.log' , false);
  end;
end;  
IBQuery.close; 
*)  
finally
  prFreeIBSQL(IBQuery);
  if assigned(IBD) then cntsTDT.SetFreeCnt(IBD, True);
end;          
end;
//==============================================================================
procedure prGetOutInvoiceXml(Stream: TBoBMemoryStream; ThreadData: TThreadData);
const nmProc = 'prGetOutInvoiceXml'; // имя процедуры/функции
var gbIBD: TIBDatabase;
    GBIBS: TIBSQL;
    UserId, FirmID, LineCount, Pos, contID: integer;
    OutInvoiceID, Summa, s, Contr, DateContr, sParam: string;
    Ware: TWareInfo;
    Client: TClientInfo;
    price, qty, weight, allweight: Double;
    CellStylesArray: TXmlCellStylesArray; //Массив стилей оформления документа
    HeaderStyle, BoldHeaderStyle, NumberStyle, ItKolStyle, KolStyle, BoldStyleL, BoldStyleR: TXmlReportStyle;  //Стили оформления документа
    SubHeaderStyle, NameStyle, HeaderStyleBI: TXmlReportStyle;
    XmlDoc, lstBodyMail: TStringList;
    DatePay: TDateTime;
    WareCount, i: integer;
    Subj, ContentType, FName: string;
    rbs: RawByteString;
    Stream1: TBoBMemoryStream;
begin
  Stream.Position:= 0;
  GBIBS:= nil;
  gbIBD:= nil;
  Contr:= '';
  DateContr:='';
  WareCount:= 0;
  LineCount:=0;
  try
    UserId:= Stream.ReadInt;
    FirmId:= Stream.ReadInt;
    OutInvoiceID:= Stream.ReadStr;

    prSetThLogParams(ThreadData, 0, UserID, FirmID, 'OutInvoiceID='+OutInvoiceID); // логирование

    if CheckNotValidUser(UserID, FirmID, s) then raise EBOBError.Create(s);

    Client:= Cache.arClientInfo[UserID];
    s:= fnIntegerListToStr(Client.CliContracts); // TIntegerList - в строку через запятую

    gbIBD:= cntsGRB.GetFreeCnt;
    GBIBS:= fnCreateNewIBSQL(gbIBD, 'GBIBS_'+nmProc, ThreadData.ID, tpRead, True);
    GBIBS.SQL.Text:= 'SELECT INVCNUMBER, INVCDATE, INVCSUMM, INVCCRNCCODE, INVCCONTRACTCODE,'+
      ' bc.bnclcalcbonussumm, (case when INVCPAYDELAY is null then RDelay else INVCPAYDELAY end) as PAYDELAY'+
      ',INVCDATE+(case when INVCPAYDELAY is null then RDelay else INVCPAYDELAY end) DataPay, CONTNUMBER, CONTBEGININGDATE'+
      ' from INVOICEREESTR left outer join bonuscalculations bc'+
      ' on bc.bncldocmcode=invccode and bc.bncldocmtype='+IntToStr(docInvoice)+
      ' left outer join GETCONTRACTDELAYANDCREDIT (INVCRECIPIENTCODE, INVCCONTRACTCODE, INVCDATE) on  1=1'+
      'left outer join CONTRACT on INVCCONTRACTCODE=CONTCODE '+
      ' where INVCCODE='+OutInvoiceID+' and INVCRECIPIENTCODE='+IntToStr(FirmId)+
      '   and INVCCONTRACTCODE in ('+s+')';
    GBIBS.ExecQuery;
    if GBIBS.Bof and GBIBS.Eof then
      raise EBOBError.Create('Не найден документ, код='+OutInvoiceID);
    XmlDoc:= TStringList.Create;
    CellStylesArray:= TXmlCellStylesArray.Create;

    FName:= 'doc_'+GBIBS.FieldByName('INVCNUMBER').AsString+'('+FormatDateTime('yyyymmdd_hhnnss', Now())+').xml';
//--== создаем и инициализируем стили ячеек отчета
    HeaderStyle:= CellStylesArray.AddStyle(TXmlReportStyle.Create('',
                         'Center', 'Center', [], '', true, false, ''));
    BoldHeaderStyle:= CellStylesArray.AddStyle(TXmlReportStyle.Create('',
                         'Center', 'Center', [fsBold,fsItalic], '', true, true));
    BoldStyleR:= CellStylesArray.AddStyle(TXmlReportStyle.Create('',
                         'Right', 'Center', [fsBold,fsItalic], '', true, true));
    BoldStyleL:= CellStylesArray.AddStyle(TXmlReportStyle.Create('',
                         'Left', 'Center', [fsBold,fsItalic], '', true, true));                                          
    SubHeaderStyle:= CellStylesArray.AddStyle(TXmlReportStyle.Create('',          ///
                         'Center', 'Center', [fsBold,fsItalic], '', true, false,'','','14'));
    HeaderStyleBI:= CellStylesArray.AddStyle(TXmlReportStyle.Create('',
                         'Center', 'Center', [fsBold], '', true, false));
    NameStyle:= CellStylesArray.AddStyle(TXmlReportStyle.Create('',
                         'Left', 'Bottom', [], '', false, true));
    NumberStyle:= CellStylesArray.AddStyle(TXmlReportStyle.Create('',
                         'Right', 'Bottom', [], '', false, true,''));
    ItKolStyle:= CellStylesArray.AddStyle(TXmlReportStyle.Create('',
                         'Left', 'Bottom', [], '', false)); 
    KolStyle:= CellStylesArray.AddStyle(TXmlReportStyle.Create('',
                         'Right', 'Bottom', [], '', false));                                         
    XmlDoc.Add(cEX_Doc_Begin);
    XmlDoc.Add(cEX_Workbook_Begin);
    XmlDoc.Add(CellStylesArray.GetXmlStyles);

    XmlDoc.Add(fnOpenWorkSheet);
    XmlDoc.Add('<Column ss:Width="200"/>'#10);
    XmlDoc.Add('<Column ss:Width="50"/>'#10);
    XmlDoc.Add('<Column ss:Width="50"/>'#10);
    XmlDoc.Add('<Column ss:Width="70"/>'#10);
    XmlDoc.Add('<Column ss:Width="100"/>'#10);
    XmlDoc.Add('<Row ss:Height="15">'+fnGenerateXMLcell('', HeaderStyle)+fnGenerateXMLcell('', HeaderStyle)+fnGenerateXMLcell('', HeaderStyle)+fnGenerateXMLcell('', HeaderStyle)
               +fnGenerateXMLcell(DateToStr(GBIBS.FieldByName('INVCDATE').AsDate), HeaderStyle)+'</Row>'#10);
    XmlDoc.Add('<Row ss:Height="34">'+fnGenerateXMLcell('Сборочный лист №'+GBIBS.FieldByName('INVCNUMBER').AsString, SubHeaderStyle,'','',0,4)+'</Row>'#10);
    XmlDoc.Add('<Row ss:Height="17">'+fnGenerateXMLcell('Контракт:', ItKolStyle)+fnGenerateXMLcell(' № '+GBIBS.FieldByName('CONTNUMBER').AsString+' от '+DateToStr(GBIBS.FieldByName('CONTBEGININGDATE').AsDate), HeaderStyleBI,'','',0,3)+'</Row>'#10);
    DatePay:= GBIBS.FieldByName('DataPay').AsDate;
    if GBIBS.FieldByName('PAYDELAY').AsInteger<>999999999 then
      XmlDoc.Add('<Row ss:Height="17">'+fnGenerateXMLcell('Срок оплаты истекает '+DateToStr(DatePay), HeaderStyleBI,'','',0,1)+'</Row>'#10);
    XmlDoc.Add('<Row ss:Height="28">'+fnGenerateXMLcell('Наименование товара', BoldHeaderStyle)+fnGenerateXMLcell('Количество', BoldHeaderStyle)+fnGenerateXMLcell('ед.изм', BoldHeaderStyle)+fnGenerateXMLcell('Цена'#10+'(грн.)', BoldHeaderStyle)
                   +fnGenerateXMLcell('Сумма'#10+'(грн.)', BoldHeaderStyle)+'</Row>'#10);                 
    Summa:= FormatFloat('# ##0.00', GBIBS.FieldByName('INVCSUMM').AsFloat);
    
    LineCount:= 0;            // счетчик - кол-во строк

    contID:= GBIBS.FieldByName('INVCCONTRACTCODE').AsInteger;

    GBIBS.Close;
    GBIBS.SQL.Text:= 'select INVCLNWARECODE, INVCLNCOUNT, INVCLNPRICE, WAREWEIGHT'+
                     ' from INVOICELINES, WARES where WARECODE= INVCLNWARECODE and INVCLNDOCMCODE='+OutInvoiceID;
    GBIBS.ExecQuery;
    allweight:= 0;
    while not GBIBS.EOF do begin
      Ware:= Cache.GetWare(GBIBS.FieldByName('INVCLNWARECODE').AsInteger);
      if (Ware=nil) or (Ware=NoWare) then raise EBOBError.Create('Не найден заданный товар');  //
      price:= GBIBS.FieldByName('INVCLNPRICE').AsFloat;
      qty  := GBIBS.FieldByName('INVCLNCOUNT').AsFloat;
      weight:= GBIBS.FieldByName('WAREWEIGHT').AsFloat; 
      allweight:= allweight+RoundToHalfDown(weight*qty, -3);
      XmlDoc.Add('<Row ss:Height="17">'+fnGenerateXMLcell(Ware.Name, NameStyle)+fnGenerateXMLcell(GBIBS.FieldByName('INVCLNCOUNT').AsString, NumberStyle)+fnGenerateXMLcell(Ware.MeasName, NameStyle)+fnGenerateXMLcell(FormatFloat('# ##0.00', price), NumberStyle)
                 +fnGenerateXMLcell(FormatFloat('# ##0.00', RoundToHalfDown(price*qty, -2)), NumberStyle)+'</Row>'#10);
      WareCount:= WareCount+GBIBS.FieldByName('INVCLNCOUNT').AsInteger;
      inc(LineCount);
      GBIBS.Next;
    end;
    GBIBS.Close;
    XmlDoc.Add('<Row ss:Height="28">'+fnGenerateXMLcell('ВСЕГО НА СУММУ: ', BoldStyleL,'','',0,3)+fnGenerateXMLcell(Summa, BoldStyleR)+'</Row>'#10);
    XmlDoc.Add('<Row ss:Height="17">'+fnGenerateXMLcell('Количество: ', ItKolStyle)+fnGenerateXMLcell(IntToStr(WareCount), KolStyle)+'</Row>'#10);
    XmlDoc.Add('<Row ss:Height="17">'+fnGenerateXMLcell('Вес: ', ItKolStyle)+fnGenerateXMLcell(FormatFloat('# ##0.000', allweight), KolStyle)+'</Row>'#10);
  except
    on E: EBOBError do prSaveCommonError(Stream, ThreadData, nmProc, E.Message, '', True);
    on E: Exception do prSaveCommonError(Stream, ThreadData, nmProc, E.Message, '', False);
  end;
  prFreeIBSQL(GBIBS);
  cntsGRB.SetFreeCnt(gbIBD);
  Stream.Position:= 0;
  if LineCount>0 then  begin
    XmlDoc.Add(fnCloseWorkSheet(fnGetWorkSheetOptions(0,0)));
    XmlDoc.Add(cEX_Workbook_End);
    s:= XmlDoc.CommaText;
//SaveToFile(XmlDoc,FName);  //vv del





    Stream.Clear;
    Stream.Position:= 0;
    Stream.WriteInt(aeSuccess);
    rbs:= RawByteString(XmlDoc.Text);
    i:= Length(rbs);
    Stream.WriteStr(XMLContentType);
    Stream.WriteStr(FName);
    Stream.WriteInt(i);
    //Stream.WriteLongStr(XmlDoc.Text);
    Stream.Write(Pointer(rbs)^, i);




//FName:= '1'+FName;   //vv del
//SaveToFile(XmlDoc,FName); //vv del
  end;
  Stream.Position:= 0;
  prFree(XmlDoc);
end;
//===============================================================================
function fnRep60(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,  //60 rep
   ContentType:string; ThreadData: TThreadData; filter_data: string): string;
const nmProc = 'fnRep60'; // имя процедуры/функции
   function fnGetGeoParamsGoogle(country,region,town,street, house: string;ua: string=''): string;
     var HTTP: TIDHTTP;
          s, ss, adr: string;
          SSLIOHandlerSocketOpenSSL: TIdSSLIOHandlerSocketOpenSSL;
          pIniFile: TINIFile;
          lat, lng, gadr: string;
   begin 
     result:= '';
     pIniFile:= TINIFile.Create(nmIniFileBOB);
     HTTP:= TIDHTTP.Create(nil);
     if pIniFile.ReadString('Proxy', 'Server', '')<>'' then begin
       HTTP.ProxyParams.ProxyServer:=pIniFile.ReadString('Proxy', 'Server', '');
       HTTP.ProxyParams.ProxyPort:=pIniFile.ReadInteger('Proxy', 'Port', 8080);
       HTTP.ProxyParams.ProxyUsername:=pIniFile.ReadString('Proxy', 'login', '');
       HTTP.ProxyParams.ProxyPassword:=pIniFile.ReadString('Proxy', 'Password', '');
     end;
     SSLIOHandlerSocketOpenSSL:= TIdSSLIOHandlerSocketOpenSSL.Create(nil);
     HTTP.IOHandler:=SSLIOHandlerSocketOpenSSL;
     try  try
         adr:= town+','+street+','+ house;
         ss:= 'http://maps.google.com/maps/api/geocode/xml?address='+adr+'&sensor=false&language=ru';
         s := HTTP.Get(TIdUri.UrlEncode(ss));
         if (pos(' ',house)>0) or (pos('.',house)>0) then
         house := fnIfStr(pos(' ',house)>pos('.',house),copy(house,pos(' ',house)+1,length(house)),copy(house,1,pos(' ',house)));
         gadr:=fnCutFromTo(s, '<formatted_address>', '</formatted_address>',true);
         if pos(country,gadr)>0 then
         while True do begin
          ss:= fnCutFromTo(s, '<geometry', '</location>',true);                  //<lat>51.4743550</lat><lng>31.2720960</lng>
          if ss='' then break;
            lat:=  fnCutFromTo(ss, '<lat>', '</lat>',false);
            lng:=  fnCutFromTo(ss, '<lng>', '</lng>',false);
            if pos(house,gadr)>0 then
              result:= lng+' '+ lat
            else country:= lng+' '+ lat+';'+gadr;  
            break;
         end;
       except
         on E: Exception do begin
            prMessageLOGS('Ошибка fnGetGeoParamsGoogle:'+' '+ E.Message, 'import', true) ;
            prMessageLOGS('Адрес:'+' '+ adr, 'import', true) ;
          end;
       end;
     finally
       prFree(HTTP);
       prFree(pIniFile);
     end;
   end;
   function fnGetGeoParams(var country: string;region,town,street, house: string;ua: string=''): string;
     var HTTP: TIDHTTP;
          s, ss, adr, gadr: string;
          SSLIOHandlerSocketOpenSSL: TIdSSLIOHandlerSocketOpenSSL;
          pIniFile: TINIFile;
   begin
     result:= '';
     pIniFile:= TINIFile.Create(nmIniFileBOB);
     HTTP:= TIDHTTP.Create(nil);
     if pIniFile.ReadString('Proxy', 'Server', '')<>'' then begin
       HTTP.ProxyParams.ProxyServer:=pIniFile.ReadString('Proxy', 'Server', '');
       HTTP.ProxyParams.ProxyPort:=pIniFile.ReadInteger('Proxy', 'Port', 8080);
       HTTP.ProxyParams.ProxyUsername:=pIniFile.ReadString('Proxy', 'login', '');
       HTTP.ProxyParams.ProxyPassword:=pIniFile.ReadString('Proxy', 'Password', '');
     end;
     SSLIOHandlerSocketOpenSSL:= TIdSSLIOHandlerSocketOpenSSL.Create(nil);
     HTTP.IOHandler:=SSLIOHandlerSocketOpenSSL;
     
     if (pos(' ',region)>0) or (pos('.',region)>0) then
     region := fnIfStr(pos(' ',region)>pos('.',region),copy(region,pos(' ',region)+1,length(region)),copy(region,1,pos(' ',region)));
     if (pos(' ',town)>0) or (pos('.',town)>0) then
     town := fnIfStr(pos(' ',town)>pos('.',town),copy(town,pos(' ',town)+1,length(town)),copy(town,1,pos(' ',town)));
     if (pos(' ',street)>0) or (pos('.',street)>0) then
     street := fnIfStr(pos(' ',street)>pos('.',street),copy(street,pos(' ',street)+1,length(street)),copy(street,1,pos(' ',street)));
     if (pos(' ',house)>0) or (pos('.',house)>0) then
     house := fnIfStr(pos(' ',house)>pos('.',house),copy(house,pos(' ',house)+1,length(house)),copy(house,1,pos(' ',house)));
     try try
       adr:= country+','+region+','+town+','+street+','+ house;
       ss:= 'https://geocode-maps.yandex.ru/1.x/?geocode='+adr{'Днепродзержинск, ул. Маяковского,42''Днепропетровск,+Героев Сталинграда+улица,+дом+184'}+'&kind=house';
       s := HTTP.Get(TIdUri.UrlEncode(ss));
  //     if pos('<found>1</found>',s)>0 then begin
     if ua<>'' then
       while True do begin
         ss:= fnCutFromTo(s, '<featureMember', '</featureMember>',true); 
         if ss='' then break;
         gadr:= fnCutFromTo(ss, '<text>','</text>',false);       
         if ((pos(region,fnCutFromTo(ss, '<AdministrativeAreaName>', '</AdministrativeAreaName>',false))>0) or (town=fnCutFromTo(ss, '<AdministrativeAreaName>', '</AdministrativeAreaName>',false))) and
            ((pos(town,fnCutFromTo(ss, '<LocalityName>', '</LocalityName>',false))>0) or (pos(stringReplace(town,'е','ё',[rfReplaceAll]),fnCutFromTo(ss, '<LocalityName>', '</LocalityName>',false))>0)) and
  //          (pos(street,fnCutFromTo(ss, '<ThoroughfareName>', '</ThoroughfareName>',false))>0) and
            (pos(house,fnCutFromTo(ss, '<PremiseNumber>', '</PremiseNumber>',false))>0) then begin       
           ss:=  fnCutFromTo(ss, '<Point', '</Point>',false);
           if length(ss)>0 then begin
             result:= fnCutFromTo(ss, '<pos>', '</pos>',false);
             break;
           end
           else result:='';
         end
         else begin
           country:= fnCutFromTo(ss, '<pos>', '</pos>',false)+';'+gadr;
           break;
         end;
       end
     else
       while True do begin
         ss:= fnCutFromTo(s, '<featureMember', '</featureMember>',true);
         if ss='' then break;
         gadr:= fnCutFromTo(ss, '<text>','</text>',false);
         if ((pos(region,fnCutFromTo(ss, '<AdministrativeAreaName>', '</AdministrativeAreaName>',false))>0) or (town=fnCutFromTo(ss, '<AdministrativeAreaName>', '</AdministrativeAreaName>',false))) and
            ((pos(town,fnCutFromTo(ss, '<LocalityName>', '</LocalityName>',false))>0) or (pos(stringReplace(town,'е','ё',[rfReplaceAll]),fnCutFromTo(ss, '<LocalityName>', '</LocalityName>',false))>0)) and
  //          (pos(street,fnCutFromTo(ss, '<ThoroughfareName>', '</ThoroughfareName>',false))>0) and
            (pos(house,fnCutFromTo(ss, '<PremiseNumber>', '</PremiseNumber>',false))>0) then begin
           ss:=  fnCutFromTo(ss, '<Point', '</Point>',false);
           if length(ss)>0 then begin
             result:= fnCutFromTo(ss, '<pos>', '</pos>',false);
             break;
           end
           else result:='';
         end
         else begin
           country:= fnCutFromTo(ss, '<pos>', '</pos>',false)+';'+gadr;;
           break;
         end;
       end;
     except
         on E: Exception do begin
            prMessageLOGS('Ошибка fnGetGeoParams:'+' '+ E.Message, 'import', true) ;
            prMessageLOGS('Адрес:'+' '+ adr, 'import', true) ;
          end;
     end;
     finally
       prFree(HTTP);
       prFree(pIniFile);
     end;
   end;
var
    IBDatabase, IBDatabaseUp: TIBDatabase;
    IBSQL, IBSQLUp: TIBSQL;
    Percent: real;
    geoParams,country,region,town,street, house, LONG, LAT, pLONG, pLAT, textUp, text: string;
    Content, PathFile, Title,s, adrP: string;
    file_csv: textfile;
    iCount, i, j, maxCode, CodeBeg, CodeEnd: integer;
    ErrorPos: string;
begin 
  IBSQL:= nil; 
  IBSQLUp:= nil;
  Content:= '';
  iCount:= 0;
  maxCode:= 0; 
  CodeBeg:= 0;
  CodeEnd:= 0;
  s:= '';
  geoParams:= '';
try
  if FName='' then begin
    if not GetEmplTmpFilePath(UserID, PathFile, s) then raise EBOBError.Create(s); 
    FName:= PathFile+fnFormRepFileName('60', '.csv', ImpCheck.GetCheckKind(UserID, ThreadData.ID));
  end;
  if FileExists(FName) and not SysUtils.DeleteFile(FName) then begin
    s:= MessText(mtkNotDelPrevFile);
    raise EBOBError.Create(MessText(mtkNotDelPrevFile));
  end;
  try  
  AssignFile(file_csv, FName);
  filemode:= fmOpenReadWrite; //назначаем файл
  if FileExists(FName) then Reset(file_csv) else ReWrite(file_csv);
  Append(file_csv);
  Title:= 'Отчет о результате определения координат адреса (неопределены) ';
  Content:= Title;    
  WriteLn(file_csv, Content);
  Content:='';
  Percent:= 90/20000;  
    try
//        IBDatabase:= cntsGRB.GetFreeCnt;    //cntsGRB;
    //ibd:= pool.GetFreeCnt(empl.GBLogin, cDefPassword, cDefGBrole);
      IBDatabase:=CntsGRB.GetFreeCnt(Cache.arEmplInfo[UserID].GBLogin, cDefPassword, cDefGBrole,True);
      IBDatabaseUp:=CntsGRB.GetFreeCnt(Cache.arEmplInfo[UserID].GBLogin, cDefPassword, cDefGBrole);
    except
      exit;
    end;  
//    IBS:= fnCreateNewIBSQL(IBD, 'IBS_'+nmProc, ThreadData.ID, tpWrite, true);

  IBSQLUp:= fnCreateNewIBSQL(IBDatabaseUp,'IBSQLUp_'+nmProc, ThreadData.ID, tpWrite, true);
  textUp:='update ADRESSADDPARM set ADRADLATITUDE= 3600*:pLAT, ADRADLONGITUDE= 3600*:pLONG where ADRADCODE= :pADRADCODE '; 
  IBSQLUp.SQL.Text:= textUp;
  IBSQLUp.Prepare;
ErrorPos:='1';
  text:=' select ADRADCODE, ADRADREGISTRCODE, ADRADNAMEMAIN, ANDTCODE, country,region,town,street, house, ANDTMASTERCODE, ANDTNAME'#10
                 +' , CUKR, rUKR, tUKR, sUKR, hUKR, CCUKR, ADRADLATITUDE, ADRADLONGITUDE from'#10
                 +' (select ADRADCODE, ADRADREGISTRCODE, ADRADNAMEMAIN, ADRADLATITUDE, ADRADLONGITUDE'#10
                 +' FROM ADRESSADDPARM, ANALITDICT'#10
                 +' where ANDTARCHIVE="F" and ADRADREGISTRCODE= ANDTCODE and ANDTCHILDCOUNT=0 and ((ADRADLATITUDE is null and ADRADLONGITUDE is null) or (ADRADLATITUDE=0 and ADRADLONGITUDE=0))'#10
                 +' and ADRADCODE between :pCodeBeg and :pCodeEnd'#10
                 +' ) AP left outer join'#10
                 +' (SELECT h.ANDTCODE, c.ANDTNAME country,r.ANDTNAME region,t.ANDTNAME town,s.ANDTNAME street, h.ANDTNAME  house, c.ANDTMASTERCODE, cc.ANDTNAME'#10
                 +' ,'#10
                +' (SELECT ADRADNAMEURK FROM ADRESSADDPARM where ADRADREGISTRCODE= c.ANDTCODE) CUKR,'#10
                +' (SELECT ADRADNAMEURK FROM ADRESSADDPARM where ADRADREGISTRCODE= r.ANDTCODE) rUKR,'#10
                +' (SELECT ADRADNAMEURK FROM ADRESSADDPARM where ADRADREGISTRCODE= t.ANDTCODE) tUKR,'#10
                +' (SELECT ADRADNAMEURK FROM ADRESSADDPARM where ADRADREGISTRCODE= s.ANDTCODE) sUKR,'#10
                +' (SELECT ADRADNAMEURK FROM ADRESSADDPARM where ADRADREGISTRCODE= h.ANDTCODE) hUKR,'#10
                +' (SELECT ADRADNAMEURK FROM ADRESSADDPARM where ADRADREGISTRCODE= cc.ANDTCODE) CCUKR'#10
                 +' FROM ANALITDICT H'#10
                 +' left outer join ANALITDICT S on h.ANDTMASTERCODE=s.ANDTCODE'#10
                 +' left outer join ANALITDICT T on s.ANDTMASTERCODE=t.ANDTCODE'#10
                 +' left outer join ANALITDICT R on t.ANDTMASTERCODE=r.ANDTCODE'#10
                 +' left outer join ANALITDICT C on r.ANDTMASTERCODE=c.ANDTCODE'#10
                 +' left outer join ANALITDICT CC on c.ANDTMASTERCODE=cc.ANDTCODE and c.ANDTMASTERCODE<>8266'#10
                 +' WHERE h.ANDTANALITTYPECODE=60 and h.ANDTCHILDCOUNT=0 and h.ANDTARCHIVE="F") A'#10
                 +' on a.ANDTCODE=ap.ADRADREGISTRCODE'#10
                 +' order by ap.ADRADCODE';  
IBSQL:= fnCreateNewIBSQL(IBDatabase,'IBSQL_'+nmProc, ThreadData.ID, tpRead, true);                 
IBSQL.SQL.Text:= 'select max(ADRADCODE) maxCode FROM ADRESSADDPARM';  
IBSQL.ExecQuery;   
while not IBSQL.EOF do begin 
  maxCode:= IBSQL.FieldByName('maxCode').AsInteger;
  IBSQL.Next;
end;  
IBSQL.Close;
            
while True do begin
  if CodeBeg>MaxCode then break;
  CodeEnd:= CodeBeg+1000;
  prFreeIBSQL(IBSQL);      
ErrorPos:='1-1';                               
//  if Assigned(IBDatabase) then CntsGRB.SetFreeCnt(IBDatabase, True);    
//  IBDatabaseUp:= CntsGRB.GetFreeCnt;
  IBSQL:= fnCreateNewIBSQL(IBDatabase,'IBSQL_'+nmProc, ThreadData.ID, tpRead, true); 
ErrorPos:='1-2';
  IBSQL.SQL.Text:= text;
  IBSQL.ParamByName('pCodeBeg').AsInteger:= CodeBeg;
  IBSQL.ParamByName('pCodeEnd').AsInteger:= CodeEnd;
ErrorPos:='1-3';  
  IBSQL.Prepare;  
ErrorPos:='2';
  IBSQL.ExecQuery;
ErrorPos:='3';  
  i:= 0;
  while not IBSQL.EOF do begin  
    try    
      i:= 0;
      j:= 0;     
      country:= IBSQL.FieldByName('country').AsString;
      region:= IBSQL.FieldByName('region').AsString;
      town:= IBSQL.FieldByName('town').AsString;
      street:= IBSQL.FieldByName('street').AsString;
      house:= fnIfStr(pos(IBSQL.FieldByName('ADRADNAMEMAIN').AsString,IBSQL.FieldByName('house').AsString)>0,IBSQL.FieldByName('ADRADNAMEMAIN').AsString,IBSQL.FieldByName('house').AsString);
ErrorPos:= 'fnGetGeoParams';
      geoParams:= fnGetGeoParams( country, region, town, street, house);
      if geoParams<>'' then begin
        i:= pos(' ',geoParams);
        LONG:= copy(geoParams,1,i);
        LAT:= copy(geoParams,i+1,length(geoParams));
      end
      else begin
        if country<> IBSQL.FieldByName('country').AsString then begin
          i:= pos(' ',country);
          j:= pos(';',country);
          pLONG:= copy(country,1,i);
          pLAT:= copy(country,i+1,j-i-1);
          adrP:= copy(country,j+1,length(country));
        end;
        if (IBSQL.FieldByName('cUKR').AsString<>'') or (IBSQL.FieldByName('rUKR').AsString<>'') or (IBSQL.FieldByName('tUKR').AsString<>'') or (IBSQL.FieldByName('sUKR').AsString<>'') then begin
          country:= IBSQL.FieldByName('cUKR').AsString;
ErrorPos:= 'fnGetGeoParamsUa';          
          geoParams:= fnGetGeoParams(country, IBSQL.FieldByName('rUKR').AsString, 
                      IBSQL.FieldByName('tUKR').AsString, fnIfStr(IBSQL.FieldByName('sUKR').AsString<>'',
                      IBSQL.FieldByName('sUKR').AsString,street), house,'ua');
          if geoParams<>'' then begin
            i:= pos(' ',geoParams);
            LONG:= copy(geoParams,1,i);
            LAT:= copy(geoParams,i+1,length(geoParams));
          end
          else if country<> IBSQL.FieldByName('cUKR').AsString then begin
            i:= pos(' ',country);
            j:= pos(';',country);
            pLONG:= copy(country,1,i);
            pLAT:= copy(country,i+1,j-i-1);
            adrP:= copy(country,j+1,length(country));
          end;
        end;
      end;
      if geoParams='' then begin   
        country:= IBSQL.FieldByName('country').AsString;
ErrorPos:= 'fnGetGeoParamsGoogle';   
       geoParams:= fnGetGeoParamsGoogle( country, region, town, street, house);
        if geoParams<>'' then begin
          i:= pos(' ',geoParams);
          LONG:= copy(geoParams,1,i);
          LAT:= copy(geoParams,i+1,length(geoParams));
        end
        else if country<> IBSQL.FieldByName('country').AsString then begin
          i:= pos(' ',country);
          j:= pos(';',country);
          pLONG:= copy(country,1,i);
          pLAT:= copy(country,i+1,j-i-1);
          adrP:= copy(country,j+1,length(country));
        end;
      end;  
      if not Assigned(IBDatabaseUp) or not IBDatabaseUp.Connected then begin      
        prFreeIBSQL(IBSQLUp);                                   
        if Assigned(IBDatabaseUp) then CntsGRB.SetFreeCnt(IBDatabaseUp, True);    
        //IBDatabaseUp:= CntsGRB.GetFreeCnt;     
        IBDatabaseUp:=CntsGRB.GetFreeCnt(Cache.arEmplInfo[UserID].GBLogin, cDefPassword, cDefGBrole);
        IBSQLUp:= fnCreateNewIBSQL(IBDatabaseUp,'IBSQLUp_'+nmProc, ThreadData.ID, tpWrite, true); 
        IBSQLUp.SQL.Text:= textUp;
        IBSQLUp.Prepare;
      end;      
      if (LAT<>'') and (LONG<>'') then begin
        IBSQLUp.ParamByName('pLAT').AsString:=fnIfStr(LAT='',{pLAT}'',LAT);//FloatToStr(StrToFloat(LAT)*3600));
        IBSQLUp.ParamByName('pLONG').AsString:=fnIfStr(LONG='',{pLONG}'',LONG);
        IBSQLUp.ParamByName('pADRADCODE').AsInteger:= IBSQL.FieldByName('ADRADCODE').AsInteger;
  ErrorPos:='4';
        with IBSQLUp.Transaction do if not InTransaction then StartTransaction;
        try
  ErrorPos:='5';      
          IBSQLUp.ExecQuery;
          IBSQLUp.Transaction.Commit;
          IBSQLUp.Close;
        except
            on E: Exception do begin
              IBSQLUp.Transaction.Rollback;
              prMessageLOGS('Ошибка обновления базы '+nmProc+' '+ E.Message, 'import', true) ;
              prMessageLOGS('ADRADCODE='+IBSQL.FieldByName('ADRADCODE').AsString, 'import', true) ;
              prMessageLOGS('ErrorPos='+ErrorPos, 'import', true) ;
              //s:=  'Ошибка при обработке результатов запроса. ';
              //raise Exception.Create(Title+#13+s+E.Message);
            end;
        end;
      end;      
      Content:= //IBSQL.FieldByName('ADRADCODE').AsString +';'+IBSQL.FieldByName('country').AsString +';'+
                IBSQL.FieldByName('region').AsString +';'+IBSQL.FieldByName('town').AsString+';'
              + IBSQL.FieldByName('street').AsString +';'+IBSQL.FieldByName('house').AsString+';'
              + pLAT+';'+pLONG+';'+adrP;
      if (LAT='') and (LONG='') then
      WriteLn(file_csv, Content);
      inc(i);
      inc(iCount);
      Content:='';        
      region:= '';
      town:= '';
      street:= '';
      house:= '';
      LAT:= '';
      LONG:= '';
      pLAT:= '';
      pLONG:= '';
      adrP:= '';
      geoParams:= '';
      ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);
//prStopProcess( UserID, ThreadData.ID);      
    except
          on E: Exception do begin
            prMessageLOGS('Ошибка обработки результатов запроса '+nmProc+' '+ E.Message, 'import', true) ;
            prMessageLOGS('ErrorPos='+ErrorPos, 'import', true) ;
            //s:=  'Ошибка при обработке результатов запроса. ';
            //raise Exception.Create(Title+#13+s+E.Message);
          end;
    end;
    IBSQL.Next;                 
  end;  
  IBSQL.Close; 
  prStopProcess( UserID, ThreadData.ID);
  CodeBeg:= CodeEnd;
end;  
  except
    on E: Exception do begin
      prMessageLOGS('Ошибка выполнения запроса '+nmProc+' '+ E.Message, 'import', true) ;
      prMessageLOGS('ErrorPos='+ErrorPos, 'import', true) ;
    end;
  end;            
  finally
//  prFreeIBSQL(IBSQLUp);   
//prMessageLOGS('ErrorPos='+ErrorPos+'  if i>=1000 then break;', 'import', false);
  try     
ErrorPos:='6';                             
    if not Assigned(IBDatabaseUp) or not IBDatabaseUp.Connected then begin 
      prFreeIBSQL(IBSQLUp);
      if Assigned(IBDatabaseUp) then CntsGRB.SetFreeCnt(IBDatabaseUp, True);
      CntsGRB.SetFreeCnt(IBDatabaseUp, True);    
      IBDatabaseUp:= CntsGRB.GetFreeCnt;
      IBSQLUp:= fnCreateNewIBSQL(IBDatabaseUp,'IBSQLUp_'+nmProc, ThreadData.ID, tpWrite, true); 
    end;
    if not IBSQLUp.Transaction.InTransaction then IBSQLUp.Transaction.StartTransaction;
    IBSQLUp.SQL.Text:= 'update ADRESSADDPARM set ADRADLATITUDE= null, ADRADLONGITUDE= null where ADRADCODE= 0 '; 
    IBSQLUp.Prepare; 
    IBSQLUp.ExecQuery; 
    if IBSQLUp.Transaction.InTransaction then IBSQLUp.Transaction.Commit;
    IBSQLUp.Close; 
  finally
ErrorPos:='7';  
//  IBSQLUp.Close;  
    prFreeIBSQL(IBSQLUp);
  
    prFreeIBSQL(IBSQL);
    if assigned(IBDatabase) then cntsGRB.SetFreeCnt(IBDatabase, True);
    if assigned(IBDatabaseUp) then cntsGRB.SetFreeCnt(IBDatabaseUp, True);
    CloseFile(file_csv);  
    if iCount>0 then begin
      Title:= 'Отчет о результате определения координат адреса ';   
      Subj:= 'Отчет 60 '+FormatDateTime(cDateTimeFormatY2S, Now());
      ContentType:= CSVContentType;// for Excel(.csv)
      lstBodyMail:= TStringList.Create;
      lstBodyMail.Add(Title); 
    end;
    if iCount=0 then begin
      s:= MessText(mtkNotFoundDataUse);
      raise Exception.Create(Title+#10+'  '+s);
    end;  
    result:= s;
  end;
  end;
end;

//===============================================================================
function fnRep59(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,  //59 rep
   ContentType:string; ThreadData: TThreadData; filter_data: string): string;
   const nmProc = 'fnRep59'; // имя процедуры/функции
var
    IBDatabase, LogIBDatabase: TIBDatabase;
    IBSQL, LogIBSQL: TIBSQL;
    FilterData: TStringList;
    DateStart: TDatetime;   
    s, s1, Title, FirmName, login, CreateTime, LastAct: string;   
    Content, PathFile: string;
    file_csv: textfile;   
    flSUF: boolean;
    Pool, PoolLog: TIBCntsPool;
    iCount,count, FirmId: integer;
    Percent: real;
    firma: TFirmInfo;
begin 
  s:= '';
  iCount:= 0;
  FilterData:=nil;
  FilterData:= TStringList.Create;
  IBSQL:= nil;
  DateStart:= 0;
  FirmName:='';
  count:= 0;
  try
    FilterData.Text:= filter_data;
//    MaxCount:= StrToIntDef(FilterData.Values['dop_qty'],-1);// максимальное допустимое кол-во
//    if MaxCount=-1 then raise EBOBError.Create('Укажите правильно количество.');
//    GroupFirst := StrToInt(FilterData.Values['dop_groupby']);
    DateStart:= StrToDateTime(FilterData.Values['dop_fromdate']); // получаем DateStart
    flSUF:= (DateStart < Date) ; // если ToDate до вчера - берем с суфлера
    if flSUF and cntsSUFORD.BaseConnected then Pool:= cntsSufORD else Pool:= cntsORD;
    if flSUF and cntsSUFLog.BaseConnected then PoolLog:= cntsSufLog else PoolLog:= cntsLog;
    try
      IBDatabase:= Pool.GetFreeCnt;
    except
      exit;
    end;
    try
      LogIBDatabase:= PoolLog.GetFreeCnt;
    except
      exit;
    end;
    try
      if FName='' then begin
        if not GetEmplTmpFilePath(UserID, PathFile, s) then raise EBOBError.Create(s); 
        FName:= PathFile+fnFormRepFileName('59', '.csv', ImpCheck.GetCheckKind(UserID, ThreadData.ID));
      end;
      if FileExists(FName) and not SysUtils.DeleteFile(FName) then begin
        s:= MessText(mtkNotDelPrevFile);
        raise EBOBError.Create(MessText(mtkNotDelPrevFile));
      end;    
      AssignFile(file_csv, FName);
      filemode:= fmOpenReadWrite; //назначаем файл
      if FileExists(FName) then Reset(file_csv) else ReWrite(file_csv);
      Append(file_csv);
    //Добавляем шапку:                  
      Title:= 'Отчет о количестве созданных/восстановленных новых логинов за '+FormatDateTime(cDateFormatY4, DateStart);    

      Content:= Title;    
      WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
      Content:= 'К/а;Логин;Дата создания;Дата запроса на восстановление;Дата последней активности';
      WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
      Content:= '';
//prMessageLOGS('Приготовились'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;      
      Percent:= 10;     
      ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);    //шапка добавлена 
      LogIBSQL:= fnCreateNewIBSQL(LogIBDatabase,'LogQuery_'+nmProc, -1, tpRead, true);
      LogIBSQL.SQL.Text:='SELECT null THLGBEGINTIME, null THLGENDTIME, count(THLGCODE) THLGCOMMAND, null THLGUSERID, null THLGFIRMID, null THLGPARAMS '
                        +'FROM LOGTHREADS '
                        +'where THLGBEGINTIME between :pDateStart and :pDateEnd and THLGCOMMAND='+IntToStr(csRemindPass)
                        +'union '
                        +'SELECT THLGBEGINTIME, THLGENDTIME, THLGCOMMAND, THLGUSERID, THLGFIRMID, cast(THLGPARAMS as varchar(1200)) THLGPARAMS '
                        +'FROM LOGTHREADS '
                        +'where THLGBEGINTIME between :pDateStart and :pDateEnd and THLGCOMMAND='+IntToStr(csRemindPass)
                        +'order by 1, 3 ';
      LogIBSQL.Prepare;
      LogIBSQL.ParamByName('pDateStart').AsDate := DateStart;      // Начальная дата
      LogIBSQL.ParamByName('pDateEnd').AsDate:= DateStart+1;       //  
                          
      IBSQL:= fnCreateNewIBSQL(IBDatabase,'Query_'+nmProc, -1, tpRead, true);
      IBSQL.SQL.Text:='SELECT  count(WOCLCODE) WOCLFIRMCODE, " " WOCLLOGIN, null as WOCLCREATETIME, null as WOCLLASTACTIONTIME '
                     +'FROM WEBORDERCLIENTS '
                     +'where WOCLCREATETIME between :pDateStart and :pDateEnd '
                     +'union '
                     +'SELECT  WOCLFIRMCODE, WOCLLOGIN, WOCLCREATETIME, WOCLLASTACTIONTIME '
                     +'FROM WEBORDERCLIENTS '
                     +'where WOCLCREATETIME between :pDateStart and :pDateEnd '
                     +'order by  3 ';

      IBSQL.Prepare;
      IBSQL.ParamByName('pDateStart').AsDate := DateStart;      // Начальная дата
      IBSQL.ParamByName('pDateEnd').AsDate:= DateStart+1;       // 
      IBSQL.ExecQuery;
      if not IBSQL.EOF then begin
        count:= IBSQL.FieldByName('WOCLFIRMCODE').AsInteger;
        IBSQL.Next;
      end;
      Percent:= 30;   
      if count>0 then Percent:= Percent/count else ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);

      while not IBSQL.EOF do begin  
        try
          prStopProcess( UserID, ThreadData.ID);
          FirmId:= IBSQL.FieldByName('WOCLFIRMCODE').AsInteger;
          if cache.FirmExist(FirmId) then begin
            firma:= Cache.arFirmInfo[FirmID];
            FirmName:= firma.Name;
          end
          else FirmName:= 'к/а не определен';
          Content:= FirmName+';'+IBSQL.FieldByName('WOCLLOGIN').AsString+';'+          // #9 - кавычка для определения текстового поля в Excel
                    IBSQL.FieldByName('WOCLCREATETIME').AsString+';;'+IBSQL.FieldByName('WOCLLASTACTIONTIME').AsString+';'; 
               
          WriteLn(file_csv, Content);     
          inc(iCount);
          Content:= '';
          FirmName:='';
          ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);
        except
          on E: Exception do begin
            prMessageLOGS('Ошибка в процедуре '+nmProc+' '+ E.Message, 'import', true) ;
            //s:=  'Ошибка при обработке результатов запроса. ';
            //raise Exception.Create(Title+#13+s+E.Message);
          end;
        end;
        IBSQL.Next;                 
      end;  
      IBSQL.Close;
      IBSQL.SQL.Text:='SELECT  WOCLFIRMCODE, WOCLLOGIN, WOCLCREATETIME, WOCLLASTACTIONTIME '
                     +'FROM WEBORDERCLIENTS '
                     +'where WOCLUPPERLOGIN= :pLogin ';
      IBSQL.Prepare;               
      LogIBSQL.ExecQuery;
      if not LogIBSQL.EOF then begin
        count:= LogIBSQL.FieldByName('THLGCOMMAND').AsInteger;
        LogIBSQL.Next;
      end;
      Percent:= 30;   
      if count>0 then Percent:= Percent/count else ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);
      while not LogIBSQL.EOF do begin  
        try
          prStopProcess( UserID, ThreadData.ID);
          s:= LogIBSQL.FieldByName('THLGPARAMS').AsString;
          FilterData.Text:= StringReplace(LogIBSQL.FieldByName('THLGPARAMS').AsString,' ',#10#13,[rfReplaceAll]);
          login:= FilterData.Values['login'];
          IBSQL.ParamByName('pLogin').AsString := UpperCase(login);
          IBSQL.ExecQuery;
          FirmID:= LogIBSQL.FieldByName('THLGFIRMID').AsInteger;
          FirmName:= 'к/а не определен';
          LastAct:= '';
          CreateTime:='';
          while not IBSQL.EOF do begin
            if FirmId=0 then
              FirmId:= IBSQL.FieldByName('WOCLFIRMCODE').AsInteger;                                                    
            LastAct:= IBSQL.FieldByName('WOCLLASTACTIONTIME').AsString;
            CreateTime:=IBSQL.FieldByName('WOCLCREATETIME').AsString;
            IBSQL.Next;
          end;
          IBSQL.Close;
          if (FirmId<>0) and (cache.FirmExist(FirmId)) then begin
            firma:= Cache.arFirmInfo[FirmID];
            FirmName:= firma.Name;
          end;
          Content:= FirmName+';'+login+';'+ CreateTime+';'+LogIBSQL.FieldByName('THLGBEGINTIME').AsString+';'+LastAct+';'; 
          WriteLn(file_csv, Content);     
          inc(iCount);
          Content:= '';
          login:='';
          ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);
        except
          on E: Exception do begin
            prMessageLOGS('Ошибка в процедуре '+nmProc+' '+ E.Message, 'import', true) ;
            //s:=  'Ошибка при обработке результатов запроса. ';
            //raise Exception.Create(Title+#13+s+E.Message);
          end;
        end;
        LogIBSQL.Next;                 
      end;  
      LogIBSQL.Close;
    finally
      prFreeIBSQL(IBSQL);
      if Pool<>nil then Pool.SetFreeCnt(IBDatabase, True);
      prFreeIBSQL(LogIBSQL);
      if PoolLog<>nil then PoolLog.SetFreeCnt(LogIBDatabase, True);
      CloseFile(file_csv);  
    end;
  finally
    if iCount>0 then begin
      Title:= 'Отчет о количестве созданных/восстановленных новых логинов за '+FormatDateTime(cDateFormatY4, DateStart);   
      Subj:= 'Отчет 59 '+FormatDateTime(cDateTimeFormatY2S, Now());
      ContentType:= CSVContentType;// for Excel(.csv)
      lstBodyMail:= TStringList.Create;
      lstBodyMail.Add(Title); 
    end;
    prFree(FilterData);
    if iCount=0 then begin
      s:= MessText(mtkNotFoundDataUse);
      raise Exception.Create(Title+#10+'  '+s);
    end;  
    result:= s;      
  end; 
//prMessageLOGS('Закончили'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;  
  Percent:= 10;     
  ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);                       
end;
//===============================================================================
function fnRep000(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,     //Rep000
   ContentType:string; ThreadData: TThreadData; filter_data: string):string;
const nmProc='fnGetPhones';
var GBIBSQL,IBSQL: TIBSQL;
    IBGRB, IBORD: TIBDatabase;
//    arFields: tas; 
//    PHONE, PHONEBase, PersNAME, FIRMSHORTNAME, FIRMMAINNAME, s, PHONEsql, PHONEprint: string;
//    SLFile: TStringList;
    EmplID: integer;
    Content, PathFile, Title, s, login: string;
    file_csv: textfile;
begin
  GBIBSQL:= nil;
  IBGRB:= nil;
  IBSQL:= nil;
  IBORD:= nil;

  try
//    IBGRB:= cntsGRB.GetFreeCnt;
//    GBIBSQL:= fnCreateNewIBSQL(IBGRB, 'Query_'+nmProc, -1, tpRead, true);
    IBORD:= cntsORD.GetFreeCnt;
    IBSQL:= fnCreateNewIBSQL(IBORD, 'Query_'+nmProc, -1, tpRead, true);
    if FName='' then begin
      if not GetEmplTmpFilePath(UserID, PathFile, s) then raise EBOBError.Create(s); 
      FName:= PathFile+fnFormRepFileName('000', '.csv', ImpCheck.GetCheckKind(UserID, ThreadData.ID));
    end;
    if FileExists(FName) and not SysUtils.DeleteFile(FName) then begin
      s:= MessText(mtkNotDelPrevFile);
      raise EBOBError.Create(MessText(mtkNotDelPrevFile));
    end;

    AssignFile(file_csv, FName);
    filemode:= fmOpenReadWrite; //назначаем файл
    if FileExists(FName) then Reset(file_csv) else ReWrite(file_csv);
    Append(file_csv);
        //Добавляем шапку:                  
      Title:= 'Сотрудники ';    

      Content:= Title;    
      WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
      Content:= 'ФИО;Роль';
      WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
      Content:= '';
    try 
      IBSQL.SQL.Text:='SELECT EMPLLOGIN,ROLENAME, EMPLGBUSER '#10
                     +'FROM ROLES left join EMPLOYEESROLES on EMRLROLECODE = ROLECODE   '#10
                     +'left  join EMPLOYEES on  EMPLCODE=EMRLEMPLCODE '#10
                     +'where ROLECODE in (10,21)'#10
                     +'order by EMPLLOGIN'#10;
      IBSQL.Prepare;
      IBSQL.ExecQuery;               
(*      GBIBSQL.SQL.Text:=' SELECT PRSNFIRMCODE, FIRMMAINNAME, FIRMSHORTNAME, PPHPHONE FIRMMAINPHONE, PRSNNAME'#10
                       +' FROM PERSONPHONES '#10
                       +' left outer join  PERSONS on PPHPERSONCODE=PRSNCODE '#10
                       +' left outer join FIRMS on FIRMCODE=PRSNFIRMCODE '#10
                       +' where PPHARCHIVEDKEY="F" and PRSNARCHIVEDKEY="F" '#10
                       +' and FIRMSERVICEFIRM="F"  and FIRMARCHIVEDKEY="F" '#10
                       +' and FIRMCHILDCOUNT=0 '#10
                       +' union '#10
                       +' SELECT FIRMCODE, FIRMMAINNAME, FIRMSHORTNAME,FIRMMAINPHONE, null'#10
                       +' FROM FIRMS '#10
                       +' where FIRMSERVICEFIRM="F"  and FIRMARCHIVEDKEY="F"  and coalesce(trim(FIRMMAINPHONE),"")<>"" '#10
                       +' and FIRMCHILDCOUNT=0'#10
                       +' order by 2,4 ';
      GBIBSQL.Prepare;
      GBIBSQL.ExecQuery;  *)
      try
      while not IBSQL.EOF do begin
   //       SLManuf.Add(OrdIBSQL.FieldByName('LMMANUFNAME').AsString);      fnMakeAddCharStr(S: String; N: Integer)
        try
          login:= IBSQL.FieldByName('EMPLLOGIN').AsString;
          EmplId:= cache.GetEmplIDByLogin(login);
          if not cache.arEmplInfo[EmplID].Arhived then begin
          Content:= cache.arEmplInfo[EmplID].EmplShortName+';'+ IBSQL.FieldByName('ROLENAME').AsString;
          WriteLn(file_csv, Content); 
          end;                                                          /////////////////////////////////////////////
          Content:= '';
          login:='';

        except
          on e: exception do  begin
            prMessageLOGS('Ошибка: '+e.Message,'error' , false);
          end;
        end;
        IBSQL.Next;
      end;
      except
        on e: exception do  begin
          prMessageLOGS('Ошибка при обработке результатов запроса: '+e.Message,'error' , false);
        end;
      end;
      IBSQL.Close;       

    except
      on E: EBOBError do begin
        prMessageLOGS(nmProc+': ' +E.Message+')','error' , false);
      end;
      on E: Exception do begin
        prMessageLOGS(nmProc+': ' +E.Message+')','error' , false);    
      end;    
    end;
  finally
    Subj:= 'Отчет '+FormatDateTime(cDateTimeFormatY2S, Now());
    ContentType:= CSVContentType;// for Excel(.csv)
    lstBodyMail:= TStringList.Create;
    lstBodyMail.Add(Title); 
    CloseFile(file_csv);
    prFreeIBSQL(IBSQL);
    if assigned(IBORD) then cntsOrd.SetFreeCnt(IBORD, True);
//    prFree(SLFile);
  end;                                          
end;//00000
//=====================================================================================================
function fnGetPhones(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,     //Rep58
   ContentType:string; ThreadData: TThreadData; filter_data: string):string;
const nmProc='fnGetPhones';
var GBIBSQL: TIBSQL;
    IBGRB: TIBDatabase;
//    arFields: tas; 
//    PHONE, PHONEBase, PersNAME, FIRMSHORTNAME, FIRMMAINNAME, s, PHONEsql, PHONEprint: string;
//    SLFile: TStringList;
//    FIRMCODE, i: integer;
    Content, PathFile, Title, s: string;
    file_csv: textfile;
begin
  GBIBSQL:= nil;
  IBGRB:= nil;

  try
    IBGRB:= cntsGRB.GetFreeCnt;
    GBIBSQL:= fnCreateNewIBSQL(IBGRB, 'Query_'+nmProc, -1, tpRead, true);
    if FName='' then begin
      if not GetEmplTmpFilePath(UserID, PathFile, s) then raise EBOBError.Create(s); 
      FName:= PathFile+fnFormRepFileName('58', '.csv', ImpCheck.GetCheckKind(UserID, ThreadData.ID));
    end;
    if FileExists(FName) and not SysUtils.DeleteFile(FName) then begin
      s:= MessText(mtkNotDelPrevFile);
      raise EBOBError.Create(MessText(mtkNotDelPrevFile));
    end;

    AssignFile(file_csv, FName);
    filemode:= fmOpenReadWrite; //назначаем файл
    if FileExists(FName) then Reset(file_csv) else ReWrite(file_csv);
    Append(file_csv);
        //Добавляем шапку:                  
      Title:= 'Телефоны ';    

      Content:= Title;    
      WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
      Content:= 'Полное наименование к/а;Краткое наименование к/а;Телефонный номер;ФИО';
      WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
      Content:= '';
    try 
      GBIBSQL.SQL.Text:=' SELECT PRSNFIRMCODE, FIRMMAINNAME, FIRMSHORTNAME, PPHPHONE FIRMMAINPHONE, PRSNNAME'#10
                       +' FROM PERSONPHONES '#10
                       +' left outer join  PERSONS on PPHPERSONCODE=PRSNCODE '#10
                       +' left outer join FIRMS on FIRMCODE=PRSNFIRMCODE '#10
                       +' where PPHARCHIVEDKEY="F" and PRSNARCHIVEDKEY="F" '#10
                       +' and FIRMSERVICEFIRM="F"  and FIRMARCHIVEDKEY="F" '#10
                       +' and FIRMCHILDCOUNT=0 '#10
                       +' union '#10
                       +' SELECT FIRMCODE, FIRMMAINNAME, FIRMSHORTNAME,FIRMMAINPHONE, null'#10
                       +' FROM FIRMS '#10
                       +' where FIRMSERVICEFIRM="F"  and FIRMARCHIVEDKEY="F"  and coalesce(trim(FIRMMAINPHONE),"")<>"" '#10
                       +' and FIRMCHILDCOUNT=0'#10
                       +' order by 2,4 ';
      GBIBSQL.Prepare;
      GBIBSQL.ExecQuery;
      try
      while not GBIBSQL.EOF do begin
   //       SLManuf.Add(OrdIBSQL.FieldByName('LMMANUFNAME').AsString);      fnMakeAddCharStr(S: String; N: Integer)
        try
//if GBIBSQL.FieldByName('FIRMSHORTNAME').AsString='07-0174' then  begin
        
          Content:= {GBIBSQL.FieldByName('PRSNFIRMCODE').AsString+';'
                  +}#160+ StringReplace(StringReplace(GBIBSQL.FieldByName('FIRMMAINNAME').AsString,#10,'',[rfReplaceAll]),#13,'',[rfReplaceAll])+';'       //GBIBSQL.FieldByName('FIRMMAINNAME').AsString+';'
                  + #160+StringReplace(StringReplace(GBIBSQL.FieldByName('FIRMSHORTNAME').AsString,#10,'',[rfReplaceAll]),#13,'',[rfReplaceAll])+';'       //GBIBSQL.FieldByName('FIRMSHORTNAME').AsString+';'
                  + #160+GBIBSQL.FieldByName('FIRMMAINPHONE').AsString+';'
                  + StringReplace(StringReplace(GBIBSQL.FieldByName('PRSNNAME').AsString,#10,'',[rfReplaceAll]),#13,'',[rfReplaceAll])
                  ;       //GBIBSQL.FieldByName('PRSNNAME').AsString+';';
          WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
          Content:= '';
//end;
        except
          on e: exception do  begin
            prMessageLOGS('Ошибка: '+e.Message,'error' , false);
            prMessageLOGS('FIRMCODE= '+GBIBSQL.FieldByName('PRSNFIRMCODE').AsString+' FIRMMAINNAME='+GBIBSQL.FieldByName('FIRMMAINNAME').AsString
                         +' FIRMSHORTNAME='+GBIBSQL.FieldByName('FIRMSHORTNAME').AsString+' PHONE='+GBIBSQL.FieldByName('FIRMMAINPHONE').AsString
                         +' PersNAME='+GBIBSQL.FieldByName('PRSNNAME').AsString,'error' , false);
          end;
        end;
        GBIBSQL.Next;
      end;
      except
        on e: exception do  begin
          prMessageLOGS('Ошибка при обработке результатов запроса: '+e.Message,'error' , false);
        end;
      end;
      GBIBSQL.Close;       
      
      GBIBSQL.SQL.Text:=' SELECT MANCODE PRSNFIRMCODE, m.mandrivercertnumber FIRMMAINNAME ,'#10
                       +' m.mandrivercategorynumber FIRMSHORTNAME ,'#10
                       +' m.mandrivermednumber, tptrim(m.manlastname)||" "||tptrim(m.manname)||" "'#10
                       +' ||trim(m.manpatronymicname)as PRSNNAME'#10
                       +' FROM employees left join MANS m on EMPLMANCODE= MANCODE'#10
                       +' where EMPLARCHIVE<>"T" and MANARCHIVE<>"T"'#10
                       +' and m.mandrivermednumber<>"" and  not m.mandrivermednumber is null'#10
                       +' order by m.mandrivercertnumber'#10;
      GBIBSQL.Prepare;
      GBIBSQL.ExecQuery;
      try
      while not GBIBSQL.EOF do begin
        try
          Content:= {GBIBSQL.FieldByName('PRSNFIRMCODE').AsString+';'
                  +} StringReplace(StringReplace(GBIBSQL.FieldByName('FIRMMAINNAME').AsString,#10,'',[rfReplaceAll]),#13,'',[rfReplaceAll])+';'       //GBIBSQL.FieldByName('FIRMMAINNAME').AsString+';'
                  + #160+ StringReplace(StringReplace(GBIBSQL.FieldByName('FIRMSHORTNAME').AsString,#10,'',[rfReplaceAll]),#13,'',[rfReplaceAll])+';'       //GBIBSQL.FieldByName('FIRMSHORTNAME').AsString+';'
                  + #160+GBIBSQL.FieldByName('mandrivermednumber').AsString+';'
                  + StringReplace(StringReplace(GBIBSQL.FieldByName('PRSNNAME').AsString,#10,'',[rfReplaceAll]),#13,'',[rfReplaceAll]);       //GBIBSQL.FieldByName('PRSNNAME').AsString+';';
          WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
          Content:= '';
        except
          on e: exception do  begin
            prMessageLOGS('Ошибка: '+e.Message,'error' , false);
            prMessageLOGS('MANCODE= '+GBIBSQL.FieldByName('PRSNFIRMCODE').AsString+' подразделение='+GBIBSQL.FieldByName('FIRMMAINNAME').AsString
                        +' отдел ='+GBIBSQL.FieldByName('FIRMSHORTNAME').AsString+' PHONE='+GBIBSQL.FieldByName('mandrivermednumber').AsString
                        +' PersNAME='+GBIBSQL.FieldByName('PRSNNAME').AsString,'error' , false);
          end;
        end;
        GBIBSQL.Next;
      end;
      except
        on e: exception do  begin
          prMessageLOGS('Ошибка при обработке результатов запроса(2) : '+e.Message,'error' , false);
        end;
      end;
      GBIBSQL.Close;
    
    except
      on E: EBOBError do begin
        prMessageLOGS(nmProc+': ' +E.Message+')','error' , false);
      end;
      on E: Exception do begin
        prMessageLOGS(nmProc+': ' +E.Message+')','error' , false);    
      end;    
    end;
  finally
    Subj:= 'Отчет 58 '+FormatDateTime(cDateTimeFormatY2S, Now());
    ContentType:= CSVContentType;// for Excel(.csv)
    lstBodyMail:= TStringList.Create;
    lstBodyMail.Add(Title); 
    CloseFile(file_csv);
    prFreeIBSQL(GBIBSQL);
    if assigned(IBGRB) then cntsGRB.SetFreeCnt(IBGRB, True);
//    prFree(SLFile);
  end;                                          
end;

//--============================================================================================--//
procedure prImport57(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,     //замена пароля клиентам
   ContentType:string; ThreadData: TThreadData);    //import 57
const  nmProc='prImport57'   ;
var XL: TExcelApplication;
    WorkBook: Excel_TLB._Workbook;
    WorkSheet: Excel_TLB._Worksheet;
    isGreenCell: integer;
    isWarningCell: integer;
    isErrorCell: integer;
    isHeaderCell: integer;
    usedRng: Range;   
    ErrMsg: array of TStringList;
    LogStr: Tas;
    i, j, k, ErrCount: integer; 
    rows, cols, irow, recs: integer;
    SheetCount, SheetID: integer;
    SheetName: string;
    FNameI: string;
    LinkAdd, ResCode, FirmID, EmplDprtID, Role, ManID, countC: integer;  
    ErrPos: integer;   
    ss, MText, Text, FirmName, FirmMan, ClMail, ClLogin: string; 
    Firm: TFirmInfo;
    SLFirms: TStringList;
    ibd: TIBDatabase;
    ibs: TIBSQL;
    Percent,PPercent: real;
    firma: TFirmInfo;
    RoleUser, arFirmCl: tai;
    Fl: boolean;
    stopped: boolean;
begin
 PPercent:= 0;
 isGreenCell := cHexToInt(cnGreenCell);
 isHeaderCell := cHexToInt(cnHeaderCell);
 isWarningCell:= cHexToInt(cnYellowCell);
 isErrorCell:= cHEXtoINT(cnRedCell);
 LinkAdd:= 0;
 ErrCount:=0;
 ibd:= nil;
 ibs:= nil; 
 SLFirms:= nil;
 SLFirms:= TStringList.Create;
 for i:= 0 to length(cache.arFirmInfo)-1 do begin
   if cache.FirmExist(i) then begin
     Firm:=cache.arFirmInfo[i];
     SLFirms.AddObject(Firm.UPPERMAINNAME,Pointer(Firm.ID))
   end;
 end;

 EmplDprtID:= Cache.arEmplInfo[UserId].EmplDprtID;   
 RoleUser:= Cache.arEmplInfo[UserId].UserRoles;
 Role:= 0;

 for i:= 0 to length(RoleUser)-1 do begin
   if not (RoleUser[i] in [rolRegional, rolSuperRegional]) then begin
     Role:= 99;
     break;
   end;
 end;
 if (Role <>99) and (Role<>rolSuperRegional) then begin
   if  fnInIntArray(rolRegional, RoleUser)>-1 then Role:= rolRegional;
   if  fnInIntArray(rolSuperRegional, RoleUser)>-1 then Role:= rolSuperRegional;
 end;
 if Role=0 then raise Exception.Create('Недостаточно прав для выполнения рассылки.');
//ibs.ExecQuery;
  try   //1
ErrPos:= 1;    
try    
    XL:= TExcelApplication.Create(nil);
    WorkBook:= nil;
//--== Инициализируем работу экземпляра Excel
    CoInitializeEx(nil, COINIT_MULTITHREADED);
    XL.ConnectKind:= ckNewInstance;
    XL.Connect;
    XL.Visible[lcid]:= False;
    //XL.AutoQuit:= False;
    XL.ScreenUpdating[lcid]:=False;
    XL.DisplayAlerts[lcid]:= False;
    XL.Calculation[lcid] := xlManual;
//    XL.AlertBeforeOverwriting[lcid]:= false;
 // отменяем автоматическую проверку ошибок в ячейках
    with XL.ErrorCheckingOptions do begin
      BackgroundChecking := False;
      NumberAsText := False;
      InconsistentFormula := False;
    end;
//    prStopProcess( UserID, ThreadData.ID);
    //TestCssStopException; 
    if copy(FName, length(FName)-5+1,5)='.xlsx' then
      prAutoFilterXLSX(FName);
 // открываем импортируемый файл
    if Assigned(XL) and (not Assigned(WorkBook)) then begin
//      prStopProcess( UserID, ThreadData.ID);
      //TestCssStopException;
      WorkBook := XL.Workbooks.Open (FName,     // 1// const Filename: WideString;
                                     0,              // 2// UpdateLinks: OleVariant;
                                     false,          // 3// ReadOnly: OleVariant;
                                     EmptyParam,     // 4// Format: OleVariant;
                                     EmptyParam,     // 5// Password: OleVariant;
                                     EmptyParam,     // 6// WriteResPassword: OleVariant;
                                     true,           // 7// IgnoreReadOnlyRecommended: OleVariant;
                                     EmptyParam,     // 8// Origin: OleVariant;
                                     5,              // 9// Delimiter: OleVariant;
                                     False,          //10// Editable: OleVariant;
                                     false,          //11// Notify: OleVariant;
                                     EmptyParam,     //12// Converter: OleVariant;
                                     EmptyParam,     //13// Local: OleVariant;
                                     EmptyParam,     //14// CorruptLoad: OleVariant;
                                     false,          //15// AddToMru: OleVariant;
                                     lcid);          //16// lcid: Integer): Workbook; safecall;
//ErrPos:=2;                                     
      try  //2
        SetLength(ErrMsg,0);
        SetLength(LogStr,0);
        lstBodyMail:= TStringList.Create;
//        lstBodyMailMes:= TStringList.Create;
//        SubjMes:='';
        SheetCount:= WorkBook.Worksheets.Count; //количество листов excel
        SetLength(ErrMsg, SheetCount);
        ibd:= cntsORD.GetFreeCnt;
      // if not Assigned(ibd) then raise EBOBError.Create(MessText(mtkErrConnectToDB));
        ibs:= fnCreateNewIBSQL(ibd, 'ibs_'+nmProc, ThreadData.ID, tpWrite, True);

        ibs.SQL.Text:= 'update WEBORDERCLIENTS set WOCLSESSIONID=null, WOCLRESETPASWORD="T" '
                     + 'where WOCLFIRMCODE= :pFirmID and trim(WOCLUPPERLOGIN)=trim(:pLogin)';
        ibs.Prepare;
        SheetID:= 1;
        WorkSheet:= WorkBook.Sheets.Item[SheetID] as Excel_TLB._Worksheet;
        ImpCheck.SetProcessPercent( UserID, ThreadData.ID, 10);
        SetLength(ErrMsg, SheetID);
        while SheetID <= 1{SheetCount} do begin
          ErrMsg[SheetID-1]:= TStringList.Create;        
          WorkSheet:= WorkBook.Sheets.Item[SheetID] as Excel_TLB._Worksheet;
          SheetName:= AnsiUpperCase(WorkSheet.Name);
          ImpCheck.SetComment( UserID, ThreadData.ID, SheetName); 
//          prStopProcess( UserID, ThreadData.ID);
          //TestCssStopException;        
          //перевод указателя на последнюю используемую ячейку листа
          usedRng:= WorkSheet.Range['A1', EmptyParam].SpecialCells(xlCellTypeLastCell,EmptyParam);
          rows:= usedRng.Row;   
          cols:= usedRng.Column;
          if cols<1 then begin
            //raise EBOBError.Create('Не указаны аналоги.Проверьте файл для импорта аналогов.');
            ErrMsg[SheetID-1].AddObject('Ошибка '#9+'Лист '+IntToStr(SheetID)+'. Не занесены данные.'+#9+SheetName+{#9+MsgStr+}#9+'A1',
                                         pointer(-15*100000-cols));
            WorkSheet.Range['A1', EmptyParam].Interior.Color:= isErrorCell;
            inc(ErrCount);
            inc(SheetID);
          end
          else 
              if rows=0 then begin
                ErrMsg[SheetID-1].AddObject('Ошибка '#9+'Лист '+IntToStr(SheetID)+'. Не указаны контрагенты.'+#9+SheetName+{#9+MsgStr+}#9+'A1',
                                         pointer(-12*100000-cols));
                WorkSheet.Range['A1', EmptyParam].Interior.Color:= isErrorCell;
                inc(ErrCount);
                inc(SheetID);
              end
              else begin //                if (SubjMes<>'') or (lstBodyMailMes.Count>0) then
                  Percent:= 80;
                  PPercent:=Percent/rows;
                  for irow:= 1 to rows do begin                                         // по строкам**************
//                    prStopProcess( UserID, ThreadData.ID);
//                    TestCssStopException; 
                    ImpCheck.SetProcessPercent( UserID, ThreadData.ID, PPercent);
                    usedRng:= WorkSheet.Range['A'+IntToStr(irow), EmptyParam];
                    FirmName:= fnOleXLCellReader(VarToStr(usedRng.Value2), false);
                    if FirmName<>'' then begin
                    //поверяем правильность наименования
                      k:= SLFirms.IndexOf(UpperCase(FirmName));// 
                      if k > -1 then begin
                        FirmID:= integer(SLFirms.Objects[k]);
                        firma:= Cache.arFirmInfo[FirmID];
                        Fl:= false;
                        if Role= rolRegional then begin
                          firmMan:= firma.GetFirmManagersString([fmpCode]);
                          if fnInIntArray(UserID,fnArrOfCodesFromString(firmMan))>-1 then Fl:= true;
                        end;
                        if Role= rolSuperRegional then begin
                          for i:=0 to firma.FirmManagers.Count-1 do begin
                            ManID:= firma.FirmManagers[i];
                            if Cache.arEmplInfo[UserId].FaccRegion= Cache.arEmplInfo[ManId].FaccRegion then begin
                              Fl:= true;
                              break;
                            end;
                          end;
                        end;
                        if Role=99 then Fl:= true;
                        prStopProcess( UserID, ThreadData.ID);                        
                        if Fl= true then begin
                          arFirmCl:= firma.FirmClients;
                          if length(arFirmCl)=0 then begin
                            ErrMsg[SheetID-1].AddObject('Ошибка '#9+'Лист '+IntToStr(SheetID)+'. У к/а '+FirmName+' не найдено контактное лицо.'+#9+SheetName+{#9+MsgStr+}#9+'A'+IntToStr(irow),
                                                 pointer(-6*100000-cols));
                            WorkSheet.Range['A'+IntToStr(irow), EmptyParam].Interior.Color:= isErrorCell;
                            inc(ErrCount);
                          end else begin
                            countC:=0;
                            for i:= 0 to length(arFirmCl)-1 do if (Cache.ClientExist(arFirmCl[i])) and (not Cache.arClientInfo[arFirmCl[i]].Arhived) then begin
                              inc(countC);   //Cache.arClientInfo[arFirmCl[i]] not arhive
                              ClLogin:= Cache.arClientInfo[arFirmCl[i]].Login;
                              if ClLogin<>'' then begin
                                try
                                  ibs.ParamByName('pLogin').AsString:= UpperCase(ClLogin);
                                  ibs.ParamByName('pFirmID').AsInteger:= FirmID;
                                  if not ibs.Transaction.Active then ibs.Transaction.StartTransaction;
                                  ibs.ExecQuery;
                                  //ibs.Transaction.Commit;      
                                  usedRng:= WorkSheet.Range['A'+IntToStr(irow), EmptyParam];
                                  if usedRng.Interior.Color= isErrorCell then
                                    usedRng.Interior.Color:= isWarningCell                   
                                  else usedRng.Interior.Color:= isGreenCell;
//                                  usedRng.Interior.Color:= isGreenCell;                  
                                  inc(LinkAdd);
                                except  //2
                                  on E: EStopError do ss:= E.Message;
                                  on E: Exception do begin
                                    prMessageLOGS(' '+nmProc+': FirmName='+FirmName+' Контактное лицо='+Cache.arClientInfo[arFirmCl[i]].Name+'  '+E.Message+ 'ErrPos='+IntToStr(ErrPos), 'Import', false);
                                  end;  
                                end; //except
                              end
                              else begin
(*                                ErrMsg[SheetID-1].AddObject('Ошибка '#9+'Лист '+IntToStr(SheetID)+'. Контактное лицо: '+Cache.arClientInfo[arFirmCl[i]].Name+' не имеет прав на вход в систему. '+ss+#9+SheetName+{#9+MsgStr+}#9+'A'+IntToStr(irow),
                                                     pointer(-6*100000-cols));
                                if WorkSheet.Range['A'+IntToStr(irow), EmptyParam].Interior.Color= isGreenCell then
                                  WorkSheet.Range['A'+IntToStr(irow), EmptyParam].Interior.Color:= isWarningCell                   
                                else WorkSheet.Range['A'+IntToStr(irow), EmptyParam].Interior.Color:= isErrorCell;
                                inc(ErrCount);  *)
                              end;
                            end;
                            if (countC=0) then begin
                              ErrMsg[SheetID-1].AddObject('Ошибка '#9+'Лист '+IntToStr(SheetID)+'. У к/а '+FirmName+' указанные контактные лица - архивные.'+#9+SheetName+{#9+MsgStr+}#9+'A'+IntToStr(irow),
                                                   pointer(-6*100000-cols));
                              WorkSheet.Range['A'+IntToStr(irow), EmptyParam].Interior.Color:= isErrorCell;
                              inc(ErrCount);
                            end;
                          end;
                        end
                        else begin
                          ErrMsg[SheetID-1].AddObject('Ошибка '#9+'Лист '+IntToStr(SheetID)+'. Это не подотчетный Вам к/а.'+#9+SheetName+{#9+MsgStr+}#9+'A'+IntToStr(irow),
                                               pointer(-6*100000-cols));
                          WorkSheet.Range['A'+IntToStr(irow), EmptyParam].Interior.Color:= isErrorCell;
                          inc(ErrCount);
                        end;
                      end
                      else begin
                        ErrMsg[SheetID-1].AddObject('Ошибка '#9+'Лист '+IntToStr(SheetID)+'. Такой к/а не найден.'+#9+SheetName+{#9+MsgStr+}#9+'A'+IntToStr(irow),
                                             pointer(-6*100000-cols));
                        WorkSheet.Range['A'+IntToStr(irow), EmptyParam].Interior.Color:= isErrorCell;
                        inc(ErrCount);
                      end; 
                    end
                    else begin
                      ErrMsg[SheetID-1].AddObject('Ошибка '#9+'Лист '+IntToStr(SheetID)+'. Не указан к/а.'+#9+SheetName+{#9+MsgStr+}#9+'A'+IntToStr(irow),
                                               pointer(-4*100000-cols));
                      WorkSheet.Range['A'+IntToStr(irow), EmptyParam].Interior.Color:= isErrorCell;
                      inc(ErrCount);
                    end;
                  end;
//                  if ibs.Transaction.Active then ibs.Transaction.Commit;
                end;
            ErrMsg[SheetID-1].AddObject('ИТОГО '#9+IntToStr(LinkAdd)+#9+SheetName+#9+'A1', pointer(1*100000+2));
            lstBodyMail.Add('Изменено : '+IntToStr(LinkAdd));
            inc(SheetID);// переходим к следующему листу документа
        end; //while SheetID <= 1
      except  //2
        on E: EStopError do begin ss:= E.Message; raise EStopError.Create(ss); end;
        on E: Exception do begin
          prMessageLOGS(' '+nmProc+': '+E.Message+ 'ErrPos='+IntToStr(ErrPos), 'Import', false);
        end;  
      end; //except
    end; //if Assigned(XL) and (not Assigned(WorkBook)) then begin
    //Отправка письма
  except  
    on E: EStopError do begin ss:= E.Message; raise EStopError.Create(ss); end;
    on E: Exception do begin
      prMessageLOGS(' '+nmProc+': '+E.Message+ 'ErrPos='+IntToStr(ErrPos), 'Import', false);
    end;  
  end; //except

  finally      
  
        // Добавим один новый лист после 
//ErrPos:=5;   
        XL.ActiveWorkbook.Sheets.Add(EmptyParam, WorkBook.Sheets.Item[WorkBook.Sheets.Count], 1, xlWorksheet, lcid);
        WorkSheet:= WorkBook.Sheets.Item[WorkBook.Sheets.Count] as Excel_TLB._Worksheet;
        WorkSheet.Name:= 'Импорт от'+FormatDateTime(' dd.mm hh_nn ',Now);
    
        recs:= 1;
      //-=создаем шапку для лога импорта

        WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= 'Статус  сообщения';
        WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= 'Лист';
        WorkSheet.Range['C'+IntToStr(recs), EmptyParam].Value2:= '   Ячейка   ';
        WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= 'Сообщение';
        usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
        usedRng.EntireRow.RowHeight:= usedRng.EntireRow.RowHeight*2;
        usedRng.Interior.Color:= isHeaderCell;
        usedRng.Font.Color:= cHEXtoINT(cnHeaderText);
        usedRng.Font.Bold:= True;
        usedRng.HorizontalAlignment:= xlCenter;
        usedRng.VerticalAlignment:= xlCenter;
        usedRng.Borders.Color:= cHEXtoINT(cnHeaderBorder);
        usedRng.BorderAround(xlContinuous, xlHairLine, xlColorIndexAutomatic, EmptyParam, EmptyParam);
        XL.ActiveWindow.SplitRow:= 1;
        XL.ActiveWindow.FreezePanes := True;
    //=-шапка создана
        inc(recs);
        Percent:= 10;      
        if High(ErrMsg)>-1 then Percent:= Percent/(High(ErrMsg)+1) else ImpCheck.SetProcessPercent( UserID, ThreadData.ID, Percent);
//ErrPos:=6;
        for j := 0 to High(ErrMsg) do begin
          ErrMsg[j].CustomSort(@SizeCustomSort);
          rows:= ErrMsg[j].Count;
          if rows> 0 then PPercent:= Percent/(rows) else ImpCheck.SetProcessPercent( UserID, ThreadData.ID, Percent);
          for i := 0 to rows-1 do begin
            LogStr:= fnSplitStringChar(ErrMsg[j].Strings[i]);   
            ResCode:= trunc((integer(ErrMsg[j].Objects[i]))/100000);
            Case ResCode of
              -15..-13: begin
                WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                usedRng:= WorkSheet.Range['C'+IntToStr(recs),EmptyParam];
                usedRng.Value2:= LogStr[3];
                WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam, EmptyParam,
                  EmptyParam);
                WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
                usedRng.Interior.Color:= isErrorCell;
              end;            
              -12..-11: begin
                WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                usedRng:= WorkSheet.Range['C'+IntToStr(recs),EmptyParam];
                usedRng.Value2:= LogStr[3];
                WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam, EmptyParam,
                  EmptyParam);
                WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
                usedRng.Interior.Color:= isErrorCell;
              end;            
              -10..-9: begin
                WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                usedRng:= WorkSheet.Range['C'+IntToStr(recs),EmptyParam];
                usedRng.Value2:= LogStr[3];
                WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam, EmptyParam,
                  EmptyParam);
                WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
                usedRng.Interior.Color:= isErrorCell;
              end;
              -8..-7: begin
                WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                usedRng:= WorkSheet.Range['C'+IntToStr(recs),EmptyParam];
                usedRng.Value2:= LogStr[3];
                WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam,EmptyParam,
                  EmptyParam);
                WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
                usedRng.Interior.Color:= isErrorCell;
              end;
              -6..-6: begin
                WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                usedRng:= WorkSheet.Range['C'+IntToStr(recs),EmptyParam];
                usedRng.Value2:= LogStr[3];
                WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam,EmptyParam,
                  EmptyParam);
                WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
                usedRng.Interior.Color:= isErrorCell;
              end;              
              -3..-1: begin
                WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                usedRng:= WorkSheet.Range['C'+IntToStr(recs),EmptyParam];
                usedRng.Value2:= LogStr[3];
                WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam,EmptyParam,
                  EmptyParam);
                WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
                usedRng.Interior.Color:= isErrorCell;
              end;              
              1..2: begin
                WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                usedRng:= WorkSheet.Range['B'+IntToStr(recs), EmptyParam];
                usedRng.Value2:= LogStr[2];      //Excel.ActiveSheet.Hyperlinks.Add(Excel.ActiveWorkBook.WorkSheets[1].Cells[k,1],Excel.ActiveWorkBook.WorkSheets[1].Cells[k,1]);
                WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam,EmptyParam,
                  EmptyParam);
                WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
                usedRng.Interior.Color:= isGreenCell;
              end;
            end;
            inc (recs);
            ImpCheck.SetProcessPercent( UserID, ThreadData.ID, PPercent);
          end;  //i

        end; //j

        usedRng:= WorkSheet.Range['A1', 'D'+IntToStr(recs-1)];
        usedRng.WrapText:= False;
        usedRng.EntireRow.AutoFit;
        usedRng.EntireColumn.AutoFit;
    Subj:= WorkBook.Name+' Принудительное обнуление пароля входа в систему для к/а от '+FormatDateTime(cDateTimeFormatY2S, Now());
    ContentType:= XMLContentType;
    if ErrCount = 0 then lstBodyMail.Add(MessText(mtkImportSuccess))     
    else lstBodyMail.Add(MessText(mtkImportError)); 
    lstBodyMail.Add(' ');
    if ss<>'' then lstBodyMail.Add(ss);
                         
//  finally
    Workbook.CheckCompatibility := False;
    WorkBook.Save(lcid);
    WorkBook.Close(false,EmptyParam,EmptyParam,lcid);
//    XL.Workbooks.Close(lcid);
    XL.Quit;// закрыть Excel
    XL.Disconnect;
    CoUnInitialize;
    prFree(XL);
    FNameI:= ExtractFilePath(FName)+fnFormRepFileName(IntToStr(ImpCheck.GetImpType(UserID, ThreadData.ID)), FName, constOpImport);                 
    RenameFile(FName, FNameI);
    FName:= FNameI;
    SetLength(LogStr, 0);
    for i:= 0 to High(ErrMsg) do begin
      if ErrMsg[i] <> nil then prFree (ErrMsg[i]);
    end;
    SetLength(ErrMsg,0);
    ImpCheck.SetProcessPercent( UserID, ThreadData.ID, 9);
    prFreeIBSQL(ibs);
    if assigned(ibd) then cntsOrd.SetFreeCnt(ibd, True);
    if assigned(SLFirms) then prFree(SLFirms);
  end;  
end;  


//--============================================================================================--//
procedure prImport56(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,     //рассылка писем клиентам
   ContentType:string; ThreadData: TThreadData);    //import 56
const  nmProc='prImport56'   ;
var XL: TExcelApplication;
    WorkBook: Excel_TLB._Workbook;
    WorkSheet: Excel_TLB._Worksheet;
    isGreenCell: integer;
    isWarningCell: integer;
    isErrorCell: integer;
    isHeaderCell: integer;
    usedRng: Range;   
    ErrMsg: array of TStringList;
    LogStr: Tas;
    i, j, k, ErrCount: integer; 
    rows, cols, irow, recs: integer;
    SheetCount, SheetID: integer;
    SheetName: string;
    FNameI: string;
    LinkAdd, ResCode, FirmID, EmplDprtID, Role, ManID, countC: integer;  
    ErrPos: integer;   
    ss, MText, Text, FirmName, FirmMan, ClMail, ClLogin: string; 
    Firm: TFirmInfo;
    SLFirms: TStringList;
    ibd: TIBDatabase;
    ibs: TIBSQL;
    Percent,PPercent: real;
    firma: TFirmInfo;
    RoleUser, arFirmCl: tai;
    Fl: boolean;
    lstBodyMailMes: TStringList;
    SubjMes: string;
    stopped: boolean;
begin
 PPercent:= 0;
 isGreenCell := cHexToInt(cnGreenCell);
 isHeaderCell := cHexToInt(cnHeaderCell);
 isWarningCell:= cHexToInt(cnYellowCell);
 isErrorCell:= cHEXtoINT(cnRedCell);
 LinkAdd:= 0;
 ErrCount:=0;
 ibd:= nil;
 ibs:= nil; 
 SLFirms:= nil;
 SLFirms:= TStringList.Create;
 for i:= 0 to length(cache.arFirmInfo)-1 do begin
   if cache.FirmExist(i) then begin
     Firm:=cache.arFirmInfo[i];
     SLFirms.AddObject(Firm.UPPERMAINNAME,Pointer(Firm.ID))
   end;
 end;

 EmplDprtID:= Cache.arEmplInfo[UserId].EmplDprtID;   
 RoleUser:= Cache.arEmplInfo[UserId].UserRoles;
 Role:= 0;

 for i:= 0 to length(RoleUser)-1 do begin
   if not (RoleUser[i] in [rolRegional, rolSuperRegional]) then begin
     Role:= 99;
     break;
   end;
 end;
 if (Role <>99) and (Role<>rolSuperRegional) then begin
   if  fnInIntArray(rolRegional, RoleUser)>-1 then Role:= rolRegional;
   if  fnInIntArray(rolSuperRegional, RoleUser)>-1 then Role:= rolSuperRegional;
 end;
 if Role=0 then raise Exception.Create('Недостаточно прав для выполнения рассылки.');
try   //1
ErrPos:= 1;    
try    
    XL:= TExcelApplication.Create(nil);
    WorkBook:= nil;
//--== Инициализируем работу экземпляра Excel
    CoInitializeEx(nil, COINIT_MULTITHREADED);
    XL.ConnectKind:= ckNewInstance;
    XL.Connect;
    XL.Visible[lcid]:= False;
    //XL.AutoQuit:= False;
    XL.ScreenUpdating[lcid]:=False;
    XL.DisplayAlerts[lcid]:= False;
    XL.Calculation[lcid] := xlManual;
//    XL.AlertBeforeOverwriting[lcid]:= false;
 // отменяем автоматическую проверку ошибок в ячейках
    with XL.ErrorCheckingOptions do begin
      BackgroundChecking := False;
      NumberAsText := False;
      InconsistentFormula := False;
    end;
    if copy(FName, length(FName)-5+1,5)='.xlsx' then
      prAutoFilterXLSX(FName);
 // открываем импортируемый файл
    if Assigned(XL) and (not Assigned(WorkBook)) then begin
      WorkBook := XL.Workbooks.Open (FName,     // 1// const Filename: WideString;
                                     0,              // 2// UpdateLinks: OleVariant;
                                     false,          // 3// ReadOnly: OleVariant;
                                     EmptyParam,     // 4// Format: OleVariant;
                                     EmptyParam,     // 5// Password: OleVariant;
                                     EmptyParam,     // 6// WriteResPassword: OleVariant;
                                     true,           // 7// IgnoreReadOnlyRecommended: OleVariant;
                                     EmptyParam,     // 8// Origin: OleVariant;
                                     5,              // 9// Delimiter: OleVariant;
                                     False,          //10// Editable: OleVariant;
                                     false,          //11// Notify: OleVariant;
                                     EmptyParam,     //12// Converter: OleVariant;
                                     EmptyParam,     //13// Local: OleVariant;
                                     EmptyParam,     //14// CorruptLoad: OleVariant;
                                     false,          //15// AddToMru: OleVariant;
                                     lcid);          //16// lcid: Integer): Workbook; safecall;
//ErrPos:=2;                                     
      try  //2
        SetLength(ErrMsg,0);
        SetLength(LogStr,0);
        lstBodyMail:= TStringList.Create;
        lstBodyMailMes:= TStringList.Create;
        SubjMes:='';
        SheetCount:= WorkBook.Worksheets.Count; //количество листов excel
        SetLength(ErrMsg, SheetCount);
        SheetID:= 2;
        WorkSheet:= WorkBook.Sheets.Item[SheetID] as Excel_TLB._Worksheet;  
        usedRng:= WorkSheet.Range['A1', EmptyParam];
        SubjMes:= fnOleXLCellReader(VarToStr(usedRng.Value2),false);
        usedRng:= WorkSheet.Range['A2', EmptyParam].SpecialCells(xlCellTypeLastCell,EmptyParam);
        rows:= usedRng.Row;
        for irow:= 2 to rows do begin
          usedRng:= WorkSheet.Range['A'+IntToStr(irow), EmptyParam];
          lstBodyMailMes.Add(fnOleXLCellReader(VarToStr(usedRng.Value2),false));
        end;
ss:= lstBodyMailMes.CommaText;   
ss:= '';     
        if (SubjMes='') and (lstBodyMailMes.Count=0) then 
          raise Exception.Create('Не указана тема рассылки и текст рассылки!');
        SheetID:= 1;
        WorkSheet:= WorkBook.Sheets.Item[SheetID] as Excel_TLB._Worksheet;
        ImpCheck.SetProcessPercent( UserID, ThreadData.ID, 10);
        SetLength(ErrMsg, SheetID);
        while SheetID <= 1{SheetCount} do if (SubjMes<>'') or (lstBodyMailMes.Count>0) then begin
          ErrMsg[SheetID-1]:= TStringList.Create;        
          WorkSheet:= WorkBook.Sheets.Item[SheetID] as Excel_TLB._Worksheet;
          SheetName:= AnsiUpperCase(WorkSheet.Name);
          ImpCheck.SetComment( UserID, ThreadData.ID, SheetName); 
          //перевод указателя на последнюю используемую ячейку листа
          usedRng:= WorkSheet.Range['A1', EmptyParam].SpecialCells(xlCellTypeLastCell,EmptyParam);
          rows:= usedRng.Row;   
          cols:= usedRng.Column;
          if cols<1 then begin
            //raise EBOBError.Create('Не указаны аналоги.Проверьте файл для импорта аналогов.');
            ErrMsg[SheetID-1].AddObject('Ошибка '#9+'Лист '+IntToStr(SheetID)+'. Не занесены данные.'+#9+SheetName+{#9+MsgStr+}#9+'A1',
                                         pointer(-15*100000-cols));
            WorkSheet.Range['A1', EmptyParam].Interior.Color:= isErrorCell;
            inc(ErrCount);
            inc(SheetID);
          end
          else 
              if rows=0 then begin
                ErrMsg[SheetID-1].AddObject('Ошибка '#9+'Лист '+IntToStr(SheetID)+'. Не указаны контрагенты.'+#9+SheetName+{#9+MsgStr+}#9+'A1',
                                         pointer(-12*100000-cols));
                WorkSheet.Range['A1', EmptyParam].Interior.Color:= isErrorCell;
                inc(ErrCount);
                inc(SheetID);
              end
              else begin //                if (SubjMes<>'') or (lstBodyMailMes.Count>0) then
                  Percent:= 80;
                  PPercent:=Percent/rows;
                  for irow:= 1 to rows do begin                                         // по строкам**************
//                    prStopProcess( UserID, ThreadData.ID);
//                    TestCssStopException; 
                    ImpCheck.SetProcessPercent( UserID, ThreadData.ID, PPercent);
                    usedRng:= WorkSheet.Range['A'+IntToStr(irow), EmptyParam];
                    FirmName:= fnOleXLCellReader(VarToStr(usedRng.Value2),  false);
                    if FirmName<>'' then begin
                    //поверяем правильность наименования
                      k:= SLFirms.IndexOf(UpperCase(FirmName));// 
                      if k > -1 then begin
                        FirmID:= integer(SLFirms.Objects[k]);
                        firma:= Cache.arFirmInfo[FirmID];
                        Fl:= false;
                        if Role= rolRegional then begin
                          firmMan:= firma.GetFirmManagersString([fmpCode]);
                          if fnInIntArray(UserID,fnArrOfCodesFromString(firmMan))>-1 then Fl:= true;
                        end;
                        if Role= rolSuperRegional then begin
                          for i:=0 to firma.FirmManagers.Count-1 do begin
                            ManID:= firma.FirmManagers[i];
                            if Cache.arEmplInfo[UserId].FaccRegion= Cache.arEmplInfo[ManId].FaccRegion then begin
                              Fl:= true;
                              break;
                            end;
                          end;
                        end;
                        if Role=99 then Fl:= true;
                        prStopProcess( UserID, ThreadData.ID);
                        if Fl= true then begin
                          arFirmCl:= firma.FirmClients;
                          if length(arFirmCl)=0 then begin
                            ErrMsg[SheetID-1].AddObject('Ошибка '#9+'Лист '+IntToStr(SheetID)+'. Не найдено контактное лицо к/а '+FirmName+'.'+#9+SheetName+{#9+MsgStr+}#9+'A'+IntToStr(irow),
                                                 pointer(-6*100000-cols));
                            WorkSheet.Range['A'+IntToStr(irow), EmptyParam].Interior.Color:= isErrorCell;
                            inc(ErrCount);
                          end else begin
                            countC:=0;
                            for i:= 0 to length(arFirmCl)-1 do      
                            if (Cache.ClientExist(arFirmCl[i])) and (not Cache.arClientInfo[arFirmCl[i]].Arhived) then begin
                              try   //3
                                inc(countC);   //Cache.arClientInfo[arFirmCl[i]] not arhive
                                ClMail:= Cache.arClientInfo[arFirmCl[i]].Mail;
                                if fnCheckEmail(ClMail) and (ClMail<>'') then begin//messager
  //                                ss:= n_SysMailSend(ClMail, SubjMes, lstBodyMailMes, nil, '', '', true);    //n_SysMailSend(email, Subj, lstBodyMail, lstAttach, '', '', true);
                                  ss:= n_SysMailSend(ClMail, SubjMes, lstBodyMailMes, nil, cNoReplayEmail, '', true);
                                  if ss='' then begin 
                                    usedRng:= WorkSheet.Range['A'+IntToStr(irow), EmptyParam];
                                    if usedRng.Interior.Color= isErrorCell then
                                      usedRng.Interior.Color:= isWarningCell                   
                                    else usedRng.Interior.Color:= isGreenCell;
                                    inc(LinkAdd);
                                  end
                                  else begin
                                    ErrMsg[SheetID-1].AddObject('Ошибка '#9+'Лист '+IntToStr(SheetID)+'. Контактное лицо: '+Cache.arClientInfo[arFirmCl[i]].Name+'. Не удалось отправить сообщение. '+ss+#9+SheetName+{#9+MsgStr+}#9+'A'+IntToStr(irow),
                                                         pointer(-6*100000-cols));
                                    if WorkSheet.Range['A'+IntToStr(irow), EmptyParam].Interior.Color= isGreenCell then
                                      WorkSheet.Range['A'+IntToStr(irow), EmptyParam].Interior.Color:= isWarningCell                   
                                    else WorkSheet.Range['A'+IntToStr(irow), EmptyParam].Interior.Color:= isErrorCell;
                                    inc(ErrCount);
                                  end;
                                end
                                else begin
                                  ErrMsg[SheetID-1].AddObject('Ошибка '#9+'Лист '+IntToStr(SheetID)+'. Контактное лицо: '+Cache.arClientInfo[arFirmCl[i]].Name+'. Электронный адрес '+ClMail+' не верный или не занесен.'+#9+SheetName+{#9+MsgStr+}#9+'A'+IntToStr(irow),
                                                       pointer(-6*100000-cols));
                                  WorkSheet.Range['A'+IntToStr(irow), EmptyParam].Interior.Color:= isErrorCell;
                                  inc(ErrCount);
                                end;
                              except  //3
                                on E: EStopError do begin ss:= E.Message; raise EStopError.Create(ss); end;
                                on E: Exception do begin
                                  prMessageLOGS(' '+nmProc+': к/а:'+FirmName+'  '+Cache.arClientInfo[arFirmCl[i]].Name+'  конт.лицо:'+E.Message+ 'ErrPos='+IntToStr(ErrPos), 'Import', false);
                                end;  
                              end; //except
                            end;
                            if (countC=0) then begin
                              ErrMsg[SheetID-1].AddObject('Ошибка '#9+'Лист '+IntToStr(SheetID)+'. У к/а '+FirmName+' указанные контактные лица - архивные.'+#9+SheetName+{#9+MsgStr+}#9+'A'+IntToStr(irow),
                                                   pointer(-6*100000-cols));
                              WorkSheet.Range['A'+IntToStr(irow), EmptyParam].Interior.Color:= isErrorCell;
                              inc(ErrCount);
                            end;
                          end;
                        end
                        else begin
                          ErrMsg[SheetID-1].AddObject('Ошибка '#9+'Лист '+IntToStr(SheetID)+'. Это не подотчетный Вам к/а.'+#9+SheetName+{#9+MsgStr+}#9+'A'+IntToStr(irow),
                                               pointer(-6*100000-cols));
                          WorkSheet.Range['A'+IntToStr(irow), EmptyParam].Interior.Color:= isErrorCell;
                          inc(ErrCount);
                        end;
                      end
                      else begin
                        ErrMsg[SheetID-1].AddObject('Ошибка '#9+'Лист '+IntToStr(SheetID)+'. Такой к/а не найден.'+#9+SheetName+{#9+MsgStr+}#9+'A'+IntToStr(irow),
                                             pointer(-6*100000-cols));
                        WorkSheet.Range['A'+IntToStr(irow), EmptyParam].Interior.Color:= isErrorCell;
                        inc(ErrCount);
                      end; 
                    end
                    else begin
                      ErrMsg[SheetID-1].AddObject('Ошибка '#9+'Лист '+IntToStr(SheetID)+'. Не указан к/а.'+#9+SheetName+{#9+MsgStr+}#9+'A'+IntToStr(irow),
                                               pointer(-4*100000-cols));
                      WorkSheet.Range['A'+IntToStr(irow), EmptyParam].Interior.Color:= isErrorCell;
                      inc(ErrCount);
                    end;
                  end;
//                  if ibs.Transaction.Active then ibs.Transaction.Commit;
                end;
            ErrMsg[SheetID-1].AddObject('ИТОГО'#9+IntToStr(LinkAdd)+#9+SheetName+#9+'A1', pointer(1*100000+2));
            lstBodyMail.Add('Отправлено : '+IntToStr(LinkAdd));
            inc(SheetID);// переходим к следующему листу документа
        end; //while SheetID <= 1
      except  //2
        on E: EStopError do begin ss:= E.Message; raise EStopError.Create(ss); end;
        on E: Exception do begin
          prMessageLOGS(' '+nmProc+': '+E.Message+ 'ErrPos='+IntToStr(ErrPos), 'Import', false);
        end;  
      end; //except
    end; //if Assigned(XL) and (not Assigned(WorkBook)) then begin
    //Отправка письма
  except  
    on E: EStopError do begin ss:= E.Message; raise EStopError.Create(ss); end;
    on E: Exception do begin
      prMessageLOGS(' '+nmProc+': '+E.Message+ 'ErrPos='+IntToStr(ErrPos), 'Import', false);
    end;  
  end; //except

  finally      
        // Добавим один новый лист после 
//ErrPos:=5;   
        XL.ActiveWorkbook.Sheets.Add(EmptyParam, WorkBook.Sheets.Item[WorkBook.Sheets.Count], 1, xlWorksheet, lcid);
        WorkSheet:= WorkBook.Sheets.Item[WorkBook.Sheets.Count] as Excel_TLB._Worksheet;
        WorkSheet.Name:= 'Импорт от'+FormatDateTime(' dd.mm hh_nn ',Now);
    
        recs:= 1;
      //-=создаем шапку для лога импорта

        WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= 'Статус  сообщения';
        WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= 'Лист';
        WorkSheet.Range['C'+IntToStr(recs), EmptyParam].Value2:= '   Ячейка   ';
        WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= 'Сообщение';
        usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
        usedRng.EntireRow.RowHeight:= usedRng.EntireRow.RowHeight*2;
        usedRng.Interior.Color:= isHeaderCell;
        usedRng.Font.Color:= cHEXtoINT(cnHeaderText);
        usedRng.Font.Bold:= True;
        usedRng.HorizontalAlignment:= xlCenter;
        usedRng.VerticalAlignment:= xlCenter;
        usedRng.Borders.Color:= cHEXtoINT(cnHeaderBorder);
        usedRng.BorderAround(xlContinuous, xlHairLine, xlColorIndexAutomatic, EmptyParam, EmptyParam);
        XL.ActiveWindow.SplitRow:= 1;
        XL.ActiveWindow.FreezePanes := True;
    //=-шапка создана
        inc(recs);
        Percent:= 10;      
        if High(ErrMsg)>-1 then Percent:= Percent/(High(ErrMsg)+1) else ImpCheck.SetProcessPercent( UserID, ThreadData.ID, Percent);
//ErrPos:=6;
        for j := 0 to High(ErrMsg) do begin
          ErrMsg[j].CustomSort(@SizeCustomSort);
          rows:= ErrMsg[j].Count;
          if rows> 0 then PPercent:= Percent/(rows) else ImpCheck.SetProcessPercent( UserID, ThreadData.ID, Percent);
          for i := 0 to rows-1 do begin
            LogStr:= fnSplitStringChar(ErrMsg[j].Strings[i]);   
            ResCode:= trunc((integer(ErrMsg[j].Objects[i]))/100000);
            Case ResCode of
              -15..-13: begin
                WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                usedRng:= WorkSheet.Range['C'+IntToStr(recs),EmptyParam];
                usedRng.Value2:= LogStr[3];
                WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam, EmptyParam,
                  EmptyParam);
                WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
                usedRng.Interior.Color:= isErrorCell;
              end;            
              -12..-11: begin
                WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                usedRng:= WorkSheet.Range['C'+IntToStr(recs),EmptyParam];
                usedRng.Value2:= LogStr[3];
                WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam, EmptyParam,
                  EmptyParam);
                WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
                usedRng.Interior.Color:= isErrorCell;
              end;            
              -10..-9: begin
                WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                usedRng:= WorkSheet.Range['C'+IntToStr(recs),EmptyParam];
                usedRng.Value2:= LogStr[3];
                WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam, EmptyParam,
                  EmptyParam);
                WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
                usedRng.Interior.Color:= isErrorCell;
              end;
              -8..-7: begin
                WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                usedRng:= WorkSheet.Range['C'+IntToStr(recs),EmptyParam];
                usedRng.Value2:= LogStr[3];
                WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam,EmptyParam,
                  EmptyParam);
                WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
                usedRng.Interior.Color:= isErrorCell;
              end;
              -6..-6: begin
                WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                usedRng:= WorkSheet.Range['C'+IntToStr(recs),EmptyParam];
                usedRng.Value2:= LogStr[3];
                WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam,EmptyParam,
                  EmptyParam);
                WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
                usedRng.Interior.Color:= isErrorCell;
              end;              
              -3..-1: begin
                WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                usedRng:= WorkSheet.Range['C'+IntToStr(recs),EmptyParam];
                usedRng.Value2:= LogStr[3];
                WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam,EmptyParam,
                  EmptyParam);
                WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
                usedRng.Interior.Color:= isErrorCell;
              end;              
              1..2: begin
                WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                usedRng:= WorkSheet.Range['B'+IntToStr(recs), EmptyParam];
                usedRng.Value2:= LogStr[2];      //Excel.ActiveSheet.Hyperlinks.Add(Excel.ActiveWorkBook.WorkSheets[1].Cells[k,1],Excel.ActiveWorkBook.WorkSheets[1].Cells[k,1]);
                WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam,EmptyParam,
                  EmptyParam);
                WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
                usedRng.Interior.Color:= isGreenCell;
              end;
            end;
            inc (recs);
            ImpCheck.SetProcessPercent( UserID, ThreadData.ID, PPercent);
          end;  //i

        end; //j

        usedRng:= WorkSheet.Range['A1', 'D'+IntToStr(recs-1)];
        usedRng.WrapText:= False;
        usedRng.EntireRow.AutoFit;
        usedRng.EntireColumn.AutoFit;
    Subj:= WorkBook.Name+' Рассылка сообщений для фирм (лист 2) от '+FormatDateTime(cDateTimeFormatY2S, Now());
    ContentType:= XMLContentType;
    if ErrCount = 0 then lstBodyMail.Add(MessText(mtkImportSuccess))     
    else lstBodyMail.Add(MessText(mtkImportError)); 
    lstBodyMail.Add(' ');
    if ss<>'' then lstBodyMail.Add(ss);
                         
//  finally
    Workbook.CheckCompatibility := False;
    WorkBook.Save(lcid);
    WorkBook.Close(false,EmptyParam,EmptyParam,lcid);
//    XL.Workbooks.Close(lcid);
    XL.Quit;// закрыть Excel
    XL.Disconnect;
    CoUnInitialize;
    prFree(XL);
    FNameI:= ExtractFilePath(FName)+fnFormRepFileName(IntToStr(ImpCheck.GetImpType(UserID, ThreadData.ID)), FName, constOpImport);                 
    RenameFile(FName, FNameI);
    FName:= FNameI;
    SetLength(LogStr, 0);
    for i:= 0 to High(ErrMsg) do begin
      if ErrMsg[i] <> nil then prFree (ErrMsg[i]);
    end;
    SetLength(ErrMsg,0);
    ImpCheck.SetProcessPercent( UserID, ThreadData.ID, 9);
    prFreeIBSQL(ibs);
    if assigned(ibd) then cntsOrd.SetFreeCnt(ibd, True);
    if assigned(SLFirms) then prFree(SLFirms);
  end;  
end;  
//--============================================================================================--//
procedure prImport62(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,     //рассылка писем 
   ContentType:string; ThreadData: TThreadData);    //import 62
const  nmProc='prImport65'   ;
function GetAddres(s: string; var sMail: string): string;
var mail: string;
    p: integer;
begin
  result:= '';
  while pos(',',s)>0 do begin
    p:= pos(',',s);
    mail:= trim(copy(s,1,p-1));
    if (pos('@',mail)=0) then result:= result+fnIfStr(length(result)>0,',','')+ mail
    else 
      if pos(mail, sMail)=0 then 
        sMail:= sMail+fnIfStr(length(sMail)>0,',','')+mail;
    s:= copy(s, p+1,length(s));
  end;
  if (length(s)<1) or (pos('@',s)=0) then
    result:= result+fnIfStr(length(result)>0,',','')+ s
  else
    if (pos(s, sMail)=0) then 
      sMail:= sMail+fnIfStr(length(sMail)>0,',','')+s;
end;

var XL: TExcelApplication;
    WorkBook: Excel_TLB._Workbook;
    WorkSheet: Excel_TLB._Worksheet;
    isGreenCell: integer;
    isWarningCell: integer;
    isErrorCell: integer;
    isHeaderCell: integer;
    usedRng: Range;   
    ErrMsg: array of TStringList;
    LogStr: Tas;
    i, j, k, ErrCount: integer; 
    rows, cols, irow, recs: integer;
    SheetCount, SheetID: integer;
    SheetName: string;
    countMess: integer;  
    ErrPos, ResCode: integer;   
    ss, s, sMail, mail, FNameI: string;
    Percent,PPercent: real;
    p, EmplDprtID, Role: integer; 
    RoleUser, arFirmCl: tai;
    lstBodyMailMes: TStringList;
    SubjMes: string;
    stopped: boolean;
begin
 PPercent:= 0;
 isGreenCell := cHexToInt(cnGreenCell);
 isHeaderCell := cHexToInt(cnHeaderCell);
 isWarningCell:= cHexToInt(cnYellowCell);
 isErrorCell:= cHEXtoINT(cnRedCell);
 ErrCount:=0;

 EmplDprtID:= Cache.arEmplInfo[UserId].EmplDprtID;   
 RoleUser:= Cache.arEmplInfo[UserId].UserRoles;
 Role:= 0;
 
(*
 for i:= 0 to length(RoleUser)-1 do begin
   if not (RoleUser[i] in [rolRegional, rolSuperRegional]) then begin
     Role:= 99;
     break;
   end;
 end;
 if (Role <>99) and (Role<>rolSuperRegional) then begin        //??????
   if  fnInIntArray(rolRegional, RoleUser)>-1 then Role:= rolRegional;
   if  fnInIntArray(rolSuperRegional, RoleUser)>-1 then Role:= rolSuperRegional;
 end;
 if Role=0 then raise Exception.Create('Недостаточно прав для выполнения рассылки.');   *)
try   //1
ErrPos:= 1;    
try    
    XL:= TExcelApplication.Create(nil);
    WorkBook:= nil;
//--== Инициализируем работу экземпляра Excel
    CoInitializeEx(nil, COINIT_MULTITHREADED);
    XL.ConnectKind:= ckNewInstance;
    XL.Connect;
    XL.Visible[lcid]:= False;
    //XL.AutoQuit:= False;
    XL.ScreenUpdating[lcid]:=False;
    XL.DisplayAlerts[lcid]:= False;
    XL.Calculation[lcid] := xlManual;
//    XL.AlertBeforeOverwriting[lcid]:= false;
 // отменяем автоматическую проверку ошибок в ячейках
    with XL.ErrorCheckingOptions do begin
      BackgroundChecking := False;
      NumberAsText := False;
      InconsistentFormula := False;
    end;
    if copy(FName, length(FName)-5+1,5)='.xlsx' then
      prAutoFilterXLSX(FName);
 // открываем импортируемый файл
    if Assigned(XL) and (not Assigned(WorkBook)) then begin
      WorkBook := XL.Workbooks.Open (FName,     // 1// const Filename: WideString;
                                     0,              // 2// UpdateLinks: OleVariant;
                                     false,          // 3// ReadOnly: OleVariant;
                                     EmptyParam,     // 4// Format: OleVariant;
                                     EmptyParam,     // 5// Password: OleVariant;
                                     EmptyParam,     // 6// WriteResPassword: OleVariant;
                                     true,           // 7// IgnoreReadOnlyRecommended: OleVariant;
                                     EmptyParam,     // 8// Origin: OleVariant;
                                     5,              // 9// Delimiter: OleVariant;
                                     False,          //10// Editable: OleVariant;
                                     false,          //11// Notify: OleVariant;
                                     EmptyParam,     //12// Converter: OleVariant;
                                     EmptyParam,     //13// Local: OleVariant;
                                     EmptyParam,     //14// CorruptLoad: OleVariant;
                                     false,          //15// AddToMru: OleVariant;
                                     lcid);          //16// lcid: Integer): Workbook; safecall;
//ErrPos:=2;                                     
      try  //2
        SetLength(ErrMsg,0);
        SetLength(LogStr,0);
        lstBodyMail:= TStringList.Create;
        lstBodyMailMes:= TStringList.Create;
        SubjMes:='';
        SheetCount:= WorkBook.Worksheets.Count; //количество листов excel
        SetLength(ErrMsg, SheetCount);
        SheetID:= 1;
        WorkSheet:= WorkBook.Sheets.Item[SheetID] as Excel_TLB._Worksheet;  
        usedRng:= WorkSheet.Range['A1', EmptyParam];
//        SubjMes:= fnOleXLCellReader(VarToStr(usedRng.Value2),false);
        usedRng:= WorkSheet.Range['A2', EmptyParam].SpecialCells(xlCellTypeLastCell,EmptyParam);
        rows:= usedRng.Row;
(*        for irow:= 2 to rows do begin
          usedRng:= WorkSheet.Range['A'+IntToStr(irow), EmptyParam];
          lstBodyMailMes.Add(fnOleXLCellReader(VarToStr(usedRng.Value2),false));
        end;
ss:= lstBodyMailMes.CommaText;   
ss:= ''; *)    
(*        if (SubjMes='') then 
          raise Exception.Create('Не указана тема рассылки!'); *)
        SheetID:= 1;
        WorkSheet:= WorkBook.Sheets.Item[SheetID] as Excel_TLB._Worksheet;
        ImpCheck.SetProcessPercent( UserID, ThreadData.ID, 10);
        SetLength(ErrMsg, SheetID);
        while SheetID <= 1{SheetCount} do begin
          ErrMsg[SheetID-1]:= TStringList.Create;        
          WorkSheet:= WorkBook.Sheets.Item[SheetID] as Excel_TLB._Worksheet;
          SheetName:= AnsiUpperCase(WorkSheet.Name);
          ImpCheck.SetComment( UserID, ThreadData.ID, SheetName); 
          //перевод указателя на последнюю используемую ячейку листа
          usedRng:= WorkSheet.Range['A1', EmptyParam].SpecialCells(xlCellTypeLastCell,EmptyParam);
          rows:= usedRng.Row;   
          cols:= usedRng.Column;
          if cols<4 then begin
            //raise EBOBError.Create('Не указаны аналоги.Проверьте файл для импорта аналогов.');
            ErrMsg[SheetID-1].AddObject('Ошибка '#9+'Лист '+IntToStr(SheetID)+'. Недостаточно данных.'+#9+SheetName+{#9+MsgStr+}#9+'A1',
                                         pointer(-15*100000-cols));
            WorkSheet.Range['A1', EmptyParam].Interior.Color:= isErrorCell;
            inc(ErrCount);
            inc(SheetID);
          end
          else 
              if rows<5 then begin
                ErrMsg[SheetID-1].AddObject('Ошибка '#9+'Лист '+IntToStr(SheetID)+'. Недостаточно данных.'+#9+SheetName+{#9+MsgStr+}#9+'A1',
                                         pointer(-12*100000-cols));
                WorkSheet.Range['A1', EmptyParam].Interior.Color:= isErrorCell;
                inc(ErrCount);
                inc(SheetID);
              end
              else begin //                if (SubjMes<>'') or (lstBodyMailMes.Count>0) then
                  Percent:= 80;
                  PPercent:=Percent/(rows-4);
                  for irow:= 5 to rows do begin                                         // по строкам**************
//                    prStopProcess( UserID, ThreadData.ID);
//                    TestCssStopException; 
                    ImpCheck.SetProcessPercent( UserID, ThreadData.ID, PPercent);
                    sMail:= '';
                    usedRng:= WorkSheet.Range['A'+IntToStr(irow), EmptyParam];
                    s:= fnOleXLCellReader(VarToStr(usedRng.Value2),  false);
                    ss:=GetAddres(s, sMail);
                    if ss<>'' then begin
                      ErrMsg[SheetID-1].AddObject('Ошибка '#9+'Лист '+IntToStr(SheetID)+'. Ошибка в адресе: '+ss+#9+SheetName+{#9+MsgStr+}#9+'A'+IntToStr(irow),
                                                         pointer(-6*100000-cols));
                      WorkSheet.Range['A'+IntToStr(irow), EmptyParam].Interior.Color:= isErrorCell;
                      inc(ErrCount);
                    end;
                    usedRng:= WorkSheet.Range['B'+IntToStr(irow), EmptyParam];
                    s:= s+fnIfStr(length(s)>0,',','')+fnOleXLCellReader(VarToStr(usedRng.Value2),  false);
                    s:= fnOleXLCellReader(VarToStr(usedRng.Value2),  false);
                    ss:=GetAddres(s, sMail);
                    if ss<>'' then begin
                      ErrMsg[SheetID-1].AddObject('Ошибка '#9+'Лист '+IntToStr(SheetID)+'. Ошибка в адресе: '+ss+#9+SheetName+{#9+MsgStr+}#9+'B'+IntToStr(irow),
                                                         pointer(-6*100000-cols));
                      WorkSheet.Range['B'+IntToStr(irow), EmptyParam].Interior.Color:= isErrorCell;
                      inc(ErrCount);
                    end;
                    usedRng:= WorkSheet.Range['C'+IntToStr(irow), EmptyParam];
                    s:= s+fnIfStr(length(s)>0,',','')+ fnOleXLCellReader(VarToStr(usedRng.Value2),  false);
                    s:= fnOleXLCellReader(VarToStr(usedRng.Value2),  false);
                    ss:=GetAddres(s, sMail);
                    if ss<>'' then begin
                      ErrMsg[SheetID-1].AddObject('Ошибка '#9+'Лист '+IntToStr(SheetID)+'. Ошибка в адресе: '+ss+#9+SheetName+{#9+MsgStr+}#9+'C'+IntToStr(irow),
                                                         pointer(-6*100000-cols));
                      WorkSheet.Range['C'+IntToStr(irow), EmptyParam].Interior.Color:= isErrorCell;
                      inc(ErrCount);
                    end;
                    ss:='';
                    usedRng:= WorkSheet.Range['E'+IntToStr(irow), EmptyParam];
                    SubjMes:= fnOleXLCellReader(VarToStr(usedRng.Value2),  false);
(*                    while pos(',',s)>0 do begin
                      p:= pos(',',s);
                      mail:= trim(copy(s,1,p-1));
                      if (pos('@',mail)>0) and (pos(mail, sMail)=0) then 
                        sMail:= sMail+fnIfStr(length(sMail)>0,',','')+mail;
                      s:= copy(s, p+1,length(s));
                    end;
                    if (length(s)>1) and (pos('@',s)>0) and (pos(s, sMail)=0) then 
                      sMail:= sMail+fnIfStr(length(sMail)>0,',','')+s;    *)
                    lstBodyMailMes.Clear;
                    usedRng:= WorkSheet.Range['D'+IntToStr(irow), EmptyParam];
                    s:= fnOleXLCellReader(VarToStr(usedRng.Value2),false);
                    if s<>'' then
                      lstBodyMailMes.Add(s);
//                    s:= fnOleXLCellReader(VarToStr(usedRng.Value2),  false);
                    if lstBodyMailMes.Count=0 then begin
                      ErrMsg[SheetID-1].AddObject('Ошибка '#9+'Лист '+IntToStr(SheetID)+'. Не указан текст сообщения! Сообщение не отправлено. '+ss+#9+SheetName+{#9+MsgStr+}#9+'D'+IntToStr(irow),
                                                         pointer(-6*100000-cols));
                      WorkSheet.Range['D'+IntToStr(irow), EmptyParam].Interior.Color:= isErrorCell;
                      inc(ErrCount);
                    end
                    else
                      if length(sMail)=0 then begin
                        ErrMsg[SheetID-1].AddObject('Ошибка '#9+'Лист '+IntToStr(SheetID)+'. Не указано ни одного адреса! Сообщение не отправлено. '+ss+#9+SheetName+{#9+MsgStr+}#9+'A'+IntToStr(irow),
                                                         pointer(-6*100000-cols));
                        WorkSheet.Range['A'+IntToStr(irow), 'C'+IntToStr(irow)].Interior.Color:= isErrorCell;
                        inc(ErrCount);
                      end
                      else begin
                        ss:= n_SysMailSend(sMail, SubjMes, lstBodyMailMes, nil, cNoReplayEmail, '', true);
(*n_SysMailSend(ToAdres, Subj: String; Body: TStrings=nil; Attachments: TStrings=nil;
         From: string =''; nmIniFile: string =''; flSaveToFile: boolean=False): string;
// ToAdres - адрес кому, Subj - тема, Body - строки сообщения, Attachments - список прикрепленных файлов
// From - адрес от кого, nmIniFile - имя ini-файла  *)                      
                        if ss='' then begin 
                           usedRng:= WorkSheet.Range['A'+IntToStr(irow), 'D'+IntToStr(irow)];
                           usedRng.Interior.Color:= isGreenCell;
                           inc(countMess);
                        end
                        else begin
                           ErrMsg[SheetID-1].AddObject('Ошибка '#9+'Лист '+IntToStr(SheetID)+'.  Не удалось отправить сообщение. '+ss+#9+SheetName+{#9+MsgStr+}#9+'A'+IntToStr(irow),
                                                         pointer(-6*100000-cols));
                            WorkSheet.Range['A'+IntToStr(irow), EmptyParam].Interior.Color:= isErrorCell;
                           inc(ErrCount);
                        end;
                      end;
                  end;
//                  if ibs.Transaction.Active then ibs.Transaction.Commit;
                end;
            ErrMsg[SheetID-1].AddObject('ИТОГО'#9+IntToStr(countMess)+#9+SheetName+#9+'A1', pointer(1*100000+2));
            lstBodyMail.Add('Отправлено : '+IntToStr(countMess));
            inc(SheetID);// переходим к следующему листу документа
        end; //while SheetID <= 1
      except  //2
        on E: EStopError do begin ss:= E.Message; raise EStopError.Create(ss); end;
        on E: Exception do begin
          prMessageLOGS(' '+nmProc+': '+E.Message+ 'ErrPos='+IntToStr(ErrPos), 'Import', false);
        end;  
      end; //except
    end; //if Assigned(XL) and (not Assigned(WorkBook)) then begin
    //Отправка письма
  except  
    on E: EStopError do begin ss:= E.Message; raise EStopError.Create(ss); end;
    on E: Exception do begin
      prMessageLOGS(' '+nmProc+': '+E.Message+ 'ErrPos='+IntToStr(ErrPos), 'Import', false);
    end;  
  end; //except

  finally      
        // Добавим один новый лист после 
//ErrPos:=5;   
        XL.ActiveWorkbook.Sheets.Add(EmptyParam, WorkBook.Sheets.Item[WorkBook.Sheets.Count], 1, xlWorksheet, lcid);
        WorkSheet:= WorkBook.Sheets.Item[WorkBook.Sheets.Count] as Excel_TLB._Worksheet;
        WorkSheet.Name:= 'Импорт от'+FormatDateTime(' dd.mm hh_nn ',Now);
    
        recs:= 1;
      //-=создаем шапку для лога импорта

        WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= 'Статус  сообщения';
        WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= 'Лист';
        WorkSheet.Range['C'+IntToStr(recs), EmptyParam].Value2:= '   Ячейка   ';
        WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= 'Сообщение';
        usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
        usedRng.EntireRow.RowHeight:= usedRng.EntireRow.RowHeight*2;
        usedRng.Interior.Color:= isHeaderCell;
        usedRng.Font.Color:= cHEXtoINT(cnHeaderText);
        usedRng.Font.Bold:= True;
        usedRng.HorizontalAlignment:= xlCenter;
        usedRng.VerticalAlignment:= xlCenter;
        usedRng.Borders.Color:= cHEXtoINT(cnHeaderBorder);
        usedRng.BorderAround(xlContinuous, xlHairLine, xlColorIndexAutomatic, EmptyParam, EmptyParam);
        XL.ActiveWindow.SplitRow:= 1;
        XL.ActiveWindow.FreezePanes := True;
    //=-шапка создана
        inc(recs);
        Percent:= 10;      
        if High(ErrMsg)>-1 then Percent:= Percent/(High(ErrMsg)+1) else ImpCheck.SetProcessPercent( UserID, ThreadData.ID, Percent);
//ErrPos:=6;
        for j := 0 to High(ErrMsg) do begin
          ErrMsg[j].CustomSort(@SizeCustomSort);
          rows:= ErrMsg[j].Count;
          if rows> 0 then PPercent:= Percent/(rows) else ImpCheck.SetProcessPercent( UserID, ThreadData.ID, Percent);
          for i := 0 to rows-1 do begin
            LogStr:= fnSplitStringChar(ErrMsg[j].Strings[i]);   
            ResCode:= trunc((integer(ErrMsg[j].Objects[i]))/100000);
            Case ResCode of
              -15..-13: begin
                WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                usedRng:= WorkSheet.Range['C'+IntToStr(recs),EmptyParam];
                usedRng.Value2:= LogStr[3];
                WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam, EmptyParam,
                  EmptyParam);
                WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
                usedRng.Interior.Color:= isErrorCell;
              end;            
              -12..-11: begin
                WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                usedRng:= WorkSheet.Range['C'+IntToStr(recs),EmptyParam];
                usedRng.Value2:= LogStr[3];
                WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam, EmptyParam,
                  EmptyParam);
                WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
                usedRng.Interior.Color:= isErrorCell;
              end;            
              -10..-9: begin
                WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                usedRng:= WorkSheet.Range['C'+IntToStr(recs),EmptyParam];
                usedRng.Value2:= LogStr[3];
                WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam, EmptyParam,
                  EmptyParam);
                WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
                usedRng.Interior.Color:= isErrorCell;
              end;
              -8..-7: begin
                WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                usedRng:= WorkSheet.Range['C'+IntToStr(recs),EmptyParam];
                usedRng.Value2:= LogStr[3];
                WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam,EmptyParam,
                  EmptyParam);
                WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
                usedRng.Interior.Color:= isErrorCell;
              end;
              -6..-6: begin
                WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                usedRng:= WorkSheet.Range['C'+IntToStr(recs),EmptyParam];
                usedRng.Value2:= LogStr[3];
                WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam,EmptyParam,
                  EmptyParam);
                WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
                usedRng.Interior.Color:= isErrorCell;
              end;              
              -3..-1: begin
                WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                usedRng:= WorkSheet.Range['C'+IntToStr(recs),EmptyParam];
                usedRng.Value2:= LogStr[3];
                WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam,EmptyParam,
                  EmptyParam);
                WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
                usedRng.Interior.Color:= isErrorCell;
              end;              
              1..2: begin
                WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                usedRng:= WorkSheet.Range['B'+IntToStr(recs), EmptyParam];
                usedRng.Value2:= LogStr[2];      //Excel.ActiveSheet.Hyperlinks.Add(Excel.ActiveWorkBook.WorkSheets[1].Cells[k,1],Excel.ActiveWorkBook.WorkSheets[1].Cells[k,1]);
                WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam,EmptyParam,
                  EmptyParam);
                WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
                usedRng.Interior.Color:= isGreenCell;
              end;
            end;
            inc (recs);
            ImpCheck.SetProcessPercent( UserID, ThreadData.ID, PPercent);
          end;  //i

        end; //j

        usedRng:= WorkSheet.Range['A1', 'D'+IntToStr(recs-1)];
        usedRng.WrapText:= False;
        usedRng.EntireRow.AutoFit;
        usedRng.EntireColumn.AutoFit;
    Subj:= WorkBook.Name+' Рассылка сообщений от '+FormatDateTime(cDateTimeFormatY2S, Now());
    ContentType:= XMLContentType;
    if ErrCount = 0 then lstBodyMail.Add(MessText(mtkImportSuccess))     
    else lstBodyMail.Add(MessText(mtkImportError)); 
    lstBodyMail.Add(' ');
    if ss<>'' then lstBodyMail.Add(ss);
                         
//  finally
    Workbook.CheckCompatibility := False;
    WorkBook.Save(lcid);
    WorkBook.Close(false,EmptyParam,EmptyParam,lcid);
//    XL.Workbooks.Close(lcid);
    XL.Quit;// закрыть Excel
    XL.Disconnect;
    CoUnInitialize;
    prFree(XL);
    FNameI:= ExtractFilePath(FName)+fnFormRepFileName(IntToStr(ImpCheck.GetImpType(UserID, ThreadData.ID)), FName, constOpImport);                 
    RenameFile(FName, FNameI);
    FName:= FNameI;
    SetLength(LogStr, 0);
    for i:= 0 to High(ErrMsg) do begin
      if ErrMsg[i] <> nil then prFree (ErrMsg[i]);
    end;
    SetLength(ErrMsg,0);
    ImpCheck.SetProcessPercent( UserID, ThreadData.ID, 9);
  end;  
end;  


//==============================================================================
procedure prImp55(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,  //import55
   ContentType:string; ThreadData: TThreadData);
const
 nmProc  = 'fnImpRep55'; // имя процедуры/функции
 RepType = 55; 
 soNone  =0;
 arConstSrc: array [soNone..soTDold] of string = ('', 'Ручной ввод', 'GrossBee','TecDoc (23й импорт )', 'Импорт аналогов из Grossbee',
                                                   'Пакетный импорт из TecDoc', 'Импорт из Excel', 'Импорт из TecDoc (по спецификациям составных товаров)',
                                                   'Импорт из TecDoc (по заменам артикулов)', 'Импорт из TecDoc по старым артикулам');
var IBQuery: TIBSQL;
    IBD: TIBDatabase;
    XL: TExcelApplication;
    WorkBook: Excel_TLB._Workbook;
    WorkSheet, WorkSheet1: Excel_TLB._Worksheet;  
    usedRng: Range;
    SheetCount, SheetC: integer;
    SheetID, rows, irow, cols, i, j, l, iCount: integer;
    s, FNameI, Title, SheetName, WareName, WareStr, sqlText: string;
    FilterData: TStringList;
    isBorderGreenCell, isGreenCell, isGrayCell, isHeaderCell, isHeaderText: integer;
    isWarningCell, isErrorCell, isCellBorder, isModelCell: integer;
    Ware: TWareInfo;
    Node: TAutoTreeNode;
    ModelLine: TModelLine;
    Model: TModelAuto;
    Manuf: TManufacturer;
    Wares, Models, MWareList: TStringList;
    isDupNode, Product, MotoLink2advices: boolean;
    EmplRoles, ImpRoles, Roles: tai;
    arWare: tai;
    SrcID, WareID, NodeID, ModelID, MaxRows: integer;
    Percent: real;
    pIniFile: TINIFile;
begin
    MWareList:= nil;
    MWareList:= TStringList.Create; 
    SetLength(arWare,0);
    IBD:= nil;
    IBQuery:= nil;
    Ware:= nil;
    iCount:= 0;
    SheetCount:= 0;
    WareID:= 0;
    pIniFile:= TINIFile.Create(nmIniFileBOB);
    MaxRows:= pIniFile.ReadInteger('Options', 'maxrows', 1000);
    isGreenCell:= cHexToInt(cnGreenCell);
    isGrayCell:= cHEXtoINT(cnGrayCell);
    isBorderGreenCell:= cHexToInt(cnGreenBorderedCell);
    isHeaderCell:= cHexToInt(cnHeaderCell);
    isHeaderText:= cHEXtoINT(cnHeaderText);
    isWarningCell:= cHexToInt(cnYellowCell);
    isErrorCell:= cHEXtoINT(cnRedCell);
    isCellBorder:= cHEXtoINT(cnCellBorder);
    isModelCell:= cHEXtoINT(cnGrayModel);
  try
    EmplRoles:= fnGetUserRoles(UserID);//Cache.arEmplInfo[UserID].UserRoles;
//  ImpRoles:= Cache.GetImportRoles(ImpCheck.GetImpType(UserID,ThreadData.ID));
    ImpRoles:= Cache.GetRepOrImpRoles(ImpCheck.GetImpType(UserID, ThreadData.ID),False); 
    Roles:= fnGetDuplicateArrayComparisons(impRoles, EmplRoles);
    Product:= (length(Roles)=1) and (Roles[0]=rolProduct);
    if Product then 
      MWareList:= Cache.GetSysManagerWares(0,UserID)
    else  MWareList:= Cache.GetSysManagerWares(0,0);
    j:= 0;
   
    IBD:= cntsORD.GetFreeCnt;
    IBQuery:= fnCreateNewIBSQL(IBD, 'IBQuery_'+nmProc, -1, tpRead, true);
    sqlText:= 'SELECT LDMWCODE, LDMWLDEMCODE, LDMWWARECODE, LDEMTRNACODE, LDEMDMOSCODE, LDMWSRCLECODE, SRCLNAME, LDMWWRONG '#10
                     + 'FROM LINKDETMODWARE left outer join LINKDETAILMODEL on LDMWLDEMCODE=LDEMCODE '#10
                     + 'left outer join SOURCELINK on LDMWSRCLECODE=SRCLCODE '#10
                     + 'where  LDMWWARECODE in ('#10;
         
    XL:= TExcelApplication.Create(nil);
    WorkBook:= nil;
//--== Инициализируем работу экземпляра Excel
    CoInitializeEx(nil, COINIT_MULTITHREADED);
    XL.ConnectKind:= ckNewInstance;
    XL.Connect;
    XL.Visible[lcid]:= False;
    //XL.AutoQuit:= False;
    XL.ScreenUpdating[lcid]:= False;
    XL.DisplayAlerts[lcid]:= False;
    XL.Calculation[lcid] := xlManual;
 // отменяем автоматическую проверку ошибок в ячейках
    with XL.ErrorCheckingOptions do begin
      BackgroundChecking := False;
      NumberAsText := False;
      InconsistentFormula := False;
    end;
    if copy(FName, length(FName)-5+1,5)='.xlsx' then
      prAutoFilterXLSX(FName);
 // создаем файл
    if Assigned(XL) and (not Assigned(WorkBook)) then begin
      prStopProcess( UserID, ThreadData.ID);
      //TestCssStopException;
      WorkBook := XL.Workbooks.Open (FName,     // 1// const Filename: WideString;
                                     0,              // 2// UpdateLinks: OleVariant;
                                     false,          // 3// ReadOnly: OleVariant;
                                     EmptyParam,     // 4// Format: OleVariant;
                                     EmptyParam,     // 5// Password: OleVariant;
                                     EmptyParam,     // 6// WriteResPassword: OleVariant;
                                     true,           // 7// IgnoreReadOnlyRecommended: OleVariant;
                                     EmptyParam,     // 8// Origin: OleVariant;
                                     5,              // 9// Delimiter: OleVariant;
                                     False,          //10// Editable: OleVariant;
                                     false,          //11// Notify: OleVariant;
                                     EmptyParam,     //12// Converter: OleVariant;
                                     EmptyParam,     //13// Local: OleVariant;
                                     EmptyParam,     //14// CorruptLoad: OleVariant;
                                     false,          //15// AddToMru: OleVariant;
                                     lcid);          //16// lcid: Integer): Workbook; safecall;
      SheetCount:= WorkBook.Worksheets.Count; //количество листов excel
      SheetC:= SheetCount;
      SheetID:= 1;
      j:=0;
      SetLength(arWare,20);
      while SheetID <= SheetCount do begin    
        WorkSheet:= WorkBook.Sheets.Item[SheetID] as Excel_TLB._Worksheet;  
        SheetName:= WorkSheet.Name;
        WorkSheet.Name:= fnValidExcelSheetName(SheetName+'1');
//        WorkSheet.Name:= fnValidExcelSheetName('1'+SheetName);
        WorkSheet.Copy(EmptyParam, WorkBook.Sheets.Item[SheetCount+SheetID-1],lcid);
        WorkSheet1:= WorkBook.Sheets.Item[SheetCount+SheetID] as Excel_TLB._Worksheet;
        WorkSheet1.Name:= fnValidExcelSheetName(SheetName);
        
        usedRng:= WorkSheet.Range['A1', EmptyParam].SpecialCells(xlCellTypeLastCell,EmptyParam);
        rows:= usedRng.Row;
        cols:= usedRng.Column; 
        for irow:= 1 to rows do begin                                         // по строкам**************
           prStopProcess( UserID, ThreadData.ID);
           TestCssStopException; 
//           ImpCheck.SetProcessPercent( UserID, ThreadData.ID, PPercent);
           usedRng:= WorkSheet.Range['A'+IntToStr(irow), EmptyParam];
           WareName:= fnOleXLCellReader(VarToStr(usedRng.Value2));
           if MWareList.IndexOf(WareName)>-1 then begin
             i:= MWareList.IndexOf(WareName);
             if Length(arWare)>=j then SetLength(arWare,Length(arWare)+20);
             arWare[j]:= integer(MWareList.Objects[i]);
             inc(j);
           end
           else usedRng.Interior.Color:= isErrorCell;
        end;
        inc(SheetID);
      end;
    end;
    SetLength(arWare,j);
    Percent:= 5;
    ImpCheck.SetProcessPercent( UserID, ThreadData.ID, Percent);
    if j>0 then Percent:= 80/j;
//    SheetCount:= WorkBook.Sheets.Count;

      if SheetCount > 1 then begin
        SheetID:= SheetCount +1;
        SheetName:= 'Данные для импорта';
        WorkSheet:= WorkBook.Sheets.Item[SheetID] as Excel_TLB._Worksheet;
        WorkSheet.Name:= fnValidExcelSheetName(SheetName);
      end else begin
        while SheetCount < 1 do begin
        //Добавим один новый лист после текущего
          XL.ActiveWorkbook.Sheets.Add(EmptyParam, WorkBook.Sheets.Item[WorkBook.Sheets.Count], 1, xlWorksheet, lcid);
          SheetCount:= WorkBook.Sheets.Count;
        end;
        SheetID:= {SheetC+}1;
        SheetName:= 'Данные для импорта';
        WorkSheet:= WorkBook.Sheets.Item[SheetID] as Excel_TLB._Worksheet;
        WorkSheet.Name:= fnValidExcelSheetName(SheetName);
      end;

      usedRng:= WorkSheet.Range['A1', 'E1'];
      usedRng.Cells.WrapText:= True;
      usedRng.Interior.Color:= isHeaderCell;
      usedRng.Font.Color:= isHeaderText;
      usedRng.Font.Bold:= True;
      usedRng.VerticalAlignment:= xlCenter;
      usedRng.HorizontalAlignment:= xlCenter;

      usedRng:= Worksheet.Range['A1', EmptyParam];
      usedRng.Value2:= 'Товар'; //+fnIfStr(TypeSys=constIsAuto, 'АВТО', 'МОТО');
      usedRng.Columns.ColumnWidth:= 19;

      usedRng:= Worksheet.Range['B1', EmptyParam];
      usedRng.Value2:= 'Узел';
      usedRng.Columns.ColumnWidth:= 19;

      usedRng:= Worksheet.Range['C1', EmptyParam];
      usedRng.Value2:= 'Модель / Модельный ряд';
      usedRng.Columns.ColumnWidth:= 33;

      usedRng:= Worksheet.Range['D1', EmptyParam];
      usedRng.Columns.ColumnWidth:= 19;
      usedRng.Value2:= 'Код операции';

      usedRng:= Worksheet.Range['E1', EmptyParam];
      usedRng.Columns.ColumnWidth:= 19;
      usedRng.Value2:= 'Источник данных';

(*      usedRng:= Worksheet.Range['F1', EmptyParam];
       usedRng.Value2:= 'Название критерия';
      usedRng.Columns.ColumnWidth:= 19;

      usedRng:= Worksheet.Range['G1', EmptyParam];
      usedRng.Value2:= 'Значение критерия';
      usedRng.Columns.ColumnWidth:= 19;

      usedRng:= Worksheet.Range['H1', EmptyParam];
      usedRng.Columns.ColumnWidth:= 19;
      usedRng.Value2:= 'Название критерия';

      usedRng:= Worksheet.Range['I1', EmptyParam];
      usedRng.Columns.ColumnWidth:= 19;
      usedRng.Value2:= 'Значение критерия';

      usedRng:= Worksheet.Range['J1', EmptyParam];
      usedRng.Columns.ColumnWidth:= 19;
      usedRng.Value2:= 'Название критерия';

      usedRng:= Worksheet.Range['K1', EmptyParam];
      usedRng.Columns.ColumnWidth:= 19;
      usedRng.Value2:= 'Значение критерия';    
 *)
      WorkSheet.Activate(lcid);
      WorkSheet.Range['F2', 'F2'].Select; 
      XL.ActiveWindow.FreezePanes := True;  
      
      j:= 0;
      iCount:= 0;
      irow:= 2;
      WareName:='';
    try
      while j<length(arWare) do begin
      if (iCount>=MaxRows) then begin
      //  s:='';
        break;      
      end;
        WareStr:='';
        if length(arWare)<=20 then WareStr:= fnArrOfIntToString(arWare)
        else 
        for i:= j to j+20-1 do begin
          if i>length(arWare)-1 then break;
          if arWare[i]>0 then WareStr:= WareStr+fnIfStr(WareStr='','',',')+ IntToStr(arWare[i]);
        end;
        j:= j+20;
        WareStr:= WareStr+ ') order by LDMWWARECODE, LDEMDMOSCODE, LDEMTRNACODE';
        IBQuery.SQL.Text:= sqlText + WareStr;
        IBQuery.ExecQuery;
        while not IBQuery.EOF do begin
          TestCssStopException;
          if  (WareID<>IBQuery.FieldByName('LDMWWARECODE').AsInteger) and (iCount>=MaxRows) then begin
            s:=s+'Количество строк в отчете превышает установленное ограничение. ';
            s:=s+ 'Для получения отчета по остальным товарам следует перезапустить этот импорт со списком товаров, оставшихся необработанными.';
            break;      
          end;
          WareID:= IBQuery.FieldByName('LDMWWARECODE').AsInteger; 
          if cache.WareExist(WareID) then
            ware:= cache.GetWare(WareID);
          NodeID:= IBQuery.FieldByName('LDEMTRNACODE').AsInteger;
          ModelID:= IBQuery.FieldByName('LDEMDMOSCODE').AsInteger;
          Model:=Cache.FDCA.Models.GetModel(ModelID);
          node:= Cache.FDCA.AutoTreeNodesSys[Model.TypeSys][NodeID];
//          SrcID:= IBQuery.FieldByName('SRCLNAME').AsString;
          usedRng:= WorkSheet.Range['E'+IntToStr(irow), EmptyParam];
          usedRng.Value2:= IBQuery.FieldByName('SRCLNAME').AsString;;
          usedRng:= WorkSheet.Range['D'+IntToStr(irow), EmptyParam];
          usedRng.Value2:= fnIfStr(trim(IBQuery.FieldByName('LDMWWRONG').AsString)='T','-1','1');
          usedRng:= WorkSheet.Range['A'+IntToStr(irow), EmptyParam];
          usedRng.Value2:= Ware.Name;
//          if Cache.FDCA.AutoTreeNodesSys[Ware.TypeSys].NodeGet(Node.MainCode, Node) then begin          
          usedRng:= WorkSheet.Range['B'+IntToStr(irow), EmptyParam];  
          isDupNode:= false;
          if Node.ID <> Node.MainCode then begin
            usedRng.Value2:= Node.Name+' (дублирующий узел)'; //+'  ('+IntToStr(ExtNode.CC)+')';
            isDupNode:= true;
          end else begin
            usedRng.Value2:= Node.Name;
          end;
          if Node.IsEnding then begin
            if not isDupNode then begin
              usedRng.Borders.Item[xlDiagonalDown].LineStyle := xlNone;
              usedRng.Borders.Item[xlDiagonalUp].LineStyle := xlNone;
              usedRng.Borders.Item[xlEdgeRight].Color:= fnGetIntFromRGB(fnColorModulator(Node.ID));
              usedRng.Borders.Item[xlEdgeRight].LineStyle:= xlContinuous;
              usedRng.Borders.Item[xlEdgeRight].Weight:= xlThin;
              usedRng.Interior.Color:= isGreenCell;
   (*            //вставляем гиперссылку ячейки на саму себя
                if TypeSys = constIsAuto then
                WorkSheet.Hyperlinks.Add(usedRng,'#'''+SheetName+
                  '''!'+IntToABC(ExtNode.Depth)+IntToStr(j),
                    EmptyParam, EmptyParam, EmptyParam);
  *)
            end else begin
              usedRng.Interior.Color:= isGrayCell;
  (*              if Cache.FDCA.AutoTreeNodesSys[TypeSys].NodeGet(Node.MainCode, Node) then begin
                  m:= TreeList.IndexOfObject(Node);
                  if m > -1 then begin
                    if TypeSys = constIsAuto then
                    WorkSheet.Hyperlinks.Add(usedRng,'#'''+SheetName+
                      '''!'+IntToABC(TExtendedAutoTreeNode(ExtNodesList.items[m]).Depth)+IntToStr(m+1),
                        EmptyParam, EmptyParam, EmptyParam);  
                    usedRng.Interior.Color:= isGrayCell;    
                  end;
                end;*)
            end;
          end;
//          end;
          usedRng:= WorkSheet.Range['C'+IntToStr(irow), EmptyParam]; 
          usedRng.Value2:= Model.ModelMfauName+' '+Model.ModelLineName+' '+Model.Name+' '
                         +fnGetYMBE(Model.Params.pYStart, Model.Params.pMStart, Model.Params.pYEnd, Model.Params.pMEnd, ' - ');
          usedRng.Borders.Item[xlDiagonalDown].LineStyle := xlNone;
          usedRng.Borders.Item[xlDiagonalUp].LineStyle := xlNone;
          usedRng.Borders.Item[xlEdgeRight].Color:= fnGetIntFromRGB(fnColorModulator(Model.ID));
          usedRng.Borders.Item[xlEdgeRight].LineStyle:= xlContinuous;
          usedRng.Borders.Item[xlEdgeRight].Weight:= xlThin;
          usedRng.Interior.Color:= isModelCell;
          usedRng:= WorkSheet.Range['A'+IntToStr(irow), 'E'+IntToStr(irow)];
          usedRng.Interior.Color:= isGreenCell;  
          usedRng:= WorkSheet.Range['D'+IntToStr(irow), EmptyParam]; 
          if usedRng.Value2='-1' then
            usedRng.Interior.Color:= isErrorCell; 
          usedRng:= WorkSheet1.Range['A'+IntToStr(1+fnInIntArray(WareID, arWare)), EmptyParam];    
          usedRng.Interior.Color:= isGreenCell;    
          inc(irow);
          inc(iCount);
          if WareName<>Ware.Name then  ImpCheck.SetProcessPercent( UserID, ThreadData.ID, Percent);
          WareName:=Ware.Name;
          IBQuery.Next;
        end;
        IBQuery.Close;
      end;
    except
      on E: Exception do begin
        prMessageLOGS('Ошибка в процедуре '+nmProc+' '+ E.Message, 'import', false) ;
        prMessageLOGS('Товар: '+Ware.Name, 'import', false) ;
        //s:=  'Ошибка при обработке результатов запроса. ';
        //raise Exception.Create(Title+#13+s+E.Message);
      end;
    end;

  finally
    WorkSheet.Activate(lcid);
    XL.ActiveWindow.SplitRow := 1;
    XL.ActiveWindow.FreezePanes:=True;
    SheetCount:= WorkBook.Sheets.Count;
    if SheetCount>3 then 
    for SheetID:=SheetCount-3+1 to SheetCount do begin
      WorkSheet1:= WorkBook.Sheets.Item[SheetID] as Excel_TLB._Worksheet;
//      WorkSheet1.Name:= fnValidExcelSheetName(copy( WorkSheet1.Name,2,length(WorkSheet1.Name)));
    end; 
    Workbook.CheckCompatibility := False;
    WorkBook.Save(lcid) ;
    WorkBook.Close(false,EmptyParam,EmptyParam,lcid);
    XL.Quit;// закрыть Excel
    XL.Disconnect;
    CoUnInitialize;
    prFree(XL);
    prFreeIBSQL(IBQuery);
    if assigned(IBD) then cntsTDT.SetFreeCnt(IBD, True);
    Title:= 'Связки 3 (товар-узел-модель) по списку товаров';
    Subj:= 'Отчет 55 '+'(по файлу '+ExtractFileName(FName)+')'+FormatDateTime(cDateTimeFormatY2S, Now());
    FNameI:= ExtractFilePath(FName)+fnFormRepFileName(IntToStr(ImpCheck.GetImpType(UserID, ThreadData.ID)), FName, constOpImport);                 
    RenameFile(FName, FNameI);
    FName:= FNameI;
    ContentType:= XMLContentType;
    lstBodyMail:= TStringList.Create;
    lstBodyMail.Add(Title+'. ');
    if s<>'' then lstBodyMail.Add(s);
    prFree(MWareList);
    SetLength(arWare, 0);
    prFree(pIniFile);
    if iCount=0 then begin
      s:= MessText(mtkNotFoundDataUse);
      raise EBOBError.Create(Title+#10+'  '+s)
    end;
  end;

end;  //function fnImpRep55
//==============================================================================
function fnStatistic(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,     //Statistic    37
   ContentType:string; ThreadData: TThreadData; filter_data: string): string;
const
 nmProc = 'fnStatistic'; // имя процедуры/функции
var 
    IBDatabase: TIBDatabase;
    IBSQL: TIBSQL;
    FilterData: TStringList;
    DateStart, DateEnd: TDatetime;   
    s, Title: string;   
    Content, PathFile: string;
    file_csv: textfile;    
    iCount: integer;  
                     timer, timerStart: TDateTime;    
    Percent: real;
    MsgStr: tas;
    flSUF: boolean;
    Pool: TIBCntsPool;
    n, int, CountConn, countOrd, ScountOrd: integer;
    row: string;
    i, FirmID, ManagerID: integer;
    ILFirmClasses: TIntegerList;
    FirmClasses: string;
    SLRep: TStringList;
    stor, Manager, strFaccName, strFaccParentName: string;
    firma: TFirmInfo;
    Contract: TContract;
    arFirm: tai;
    iRep, j: integer;
begin
  timer:= Now;
//timerStart:= Now;
//prMessageLOGS('-----------------fnStatistic.csv--------------------','Log_prg.log' , false);  

  FilterData:=nil;
  s:= '';
  iCount:= 0;
  FilterData:= TStringList.Create;
  SetLength(MsgStr, 0); 
  IBSQL:= nil;
  SLRep:= TStringList.Create;
  
  try
    FilterData.Text:= filter_data;
    DateStart:= StrToDate(FilterData.Values['dop_fromdate'])+StrToTime(fnIfStr(FilterData.Values['dop_fromtime']='','00:00',FilterData.Values['dop_fromtime'])); // получаем DateStart
    DateEnd:= StrToDate(FilterData.Values['dop_todate'])+StrToTime(fnIfStr(FilterData.Values['dop_totime']='','00:00',FilterData.Values['dop_totime']));//StrToDateTime(FilterData.Values['dop_todate']);
//    TimeStart:= StrToDateTime(FilterData.Values['dop_fromtime']); // получаем DateStart
//    TimeEnd:= StrToDateTime(FilterData.Values['dop_totime']);
//int:= 10;
    SetLength(arFirm,length(Cache.arFirmInfo));
    for i:= 0 to length(arFirm)-1 do arFirm[i]:= -1;


    flSUF:= (DateStart < Date) and cntsSUFORD.BaseConnected; // если до вчера - берем с суфлера
    if flSUF then Pool:= cntsSUFORD else Pool:= cntsORD;
    try
      IBDatabase:= Pool.GetFreeCnt;
    except
      exit;
    end;

    try
      if FName='' then begin
        if not GetEmplTmpFilePath(UserID, PathFile, s) then raise EBOBError.Create(s); 
        FName:= PathFile+fnFormRepFileName('Statistic', '.csv', ImpCheck.GetCheckKind(UserID, ThreadData.ID));
      end;
      if FileExists(FName) and not SysUtils.DeleteFile(FName) then begin
        s:= MessText(mtkNotDelPrevFile);
        raise EBOBError.Create(MessText(mtkNotDelPrevFile));
      end;

      AssignFile(file_csv, FName);
      filemode:= fmOpenReadWrite; //назначаем файл
      if FileExists(FName) then Reset(file_csv) else ReWrite(file_csv);
      Append(file_csv);
    //Добавляем шапку:                  
      Title:= 'Статистика за период с '+ FormatDateTime(cDateTimeFormatY4N, DateStart)+' по '+FormatDateTime(cDateTimeFormatY4N, DateEnd);

      Content:= Title;    
      WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
      Content:= 'Склад;Менеджер;Кол-во заказов;ЦФУ ';
      WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
      Content:= '';
//prMessageLOGS('Приготовились'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;      
      Percent:= 3; 
          
      ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);    //шапка добавлена  
      IBSQL:= fnCreateNewIBSQL(IBDatabase,'SQL_'+nmProc, -1, tpRead, true);
      IBSQL.SQL.Add('SELECT 0 as ORDRSTORAGE,0 as ORDRFIRM,0 as ORDRCONTRACT,count(ORDRCONTRACT) as countOrd from ');
      IBSQL.SQL.Add('(SELECT ORDRCONTRACT');
      IBSQL.SQL.Add('FROM ORDERSREESTR');
      IBSQL.SQL.Add('where ORDRTOPROCESSDATE between :pDateStart and :pDateEnd ');
      IBSQL.SQL.Add('group by ORDRSTORAGE, ORDRCONTRACT, ORDRFIRM)');
      IBSQL.SQL.Add('union all');
      IBSQL.SQL.Add('SELECT ORDRSTORAGE, ORDRFIRM, ORDRCONTRACT, count(ORDRCODE) countOrd');
      IBSQL.SQL.Add('FROM ORDERSREESTR');
      IBSQL.SQL.Add('where ORDRTOPROCESSDATE between :pDateStart and :pDateEnd ');
      IBSQL.SQL.Add('group by ORDRSTORAGE, ORDRCONTRACT, ORDRFIRM');

      IBSQL.Prepare;
      IBSQL.ParamByName('pDateStart').AsDate := DateStart;      // Начальная дата
      IBSQL.ParamByName('pDateEnd').AsDate := DateEnd;      // Конечная дата
      IBSQL.ExecQuery;      
      Percent:= 10;   
      ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);
      Percent:= 70;
      if not IBSQL.EOF then begin
        if IBSQL.FieldByName('countOrd').AsInteger>0 then
        Percent:= Percent/IBSQL.FieldByName('countOrd').AsInteger;
        IBSQL.Next;
      end;
      
      i:=0;   
      while not IBSQL.EOF do begin  
        prStopProcess( UserID, ThreadData.ID);
        try
          if cache.FirmExist(IBSQL.FieldByName('ORDRFIRM').AsInteger) then begin
            Firma:= cache.arFirmInfo[IBSQL.FieldByName('ORDRFIRM').AsInteger]; 
            i:= IBSQL.FieldByName('ORDRCONTRACT').AsInteger;
            if cache.Contracts.ItemExists(i) then begin           
              Contract:= firma.GetContract(i);
              ManagerID:= Contract.Manager;
//              i:= Contract.GetСontStoreIndex(IBSQL.FieldByName('ORDRSTORAGE').AsInteger);
              SLRep.AddObject({Contract.ContStorages[i].DprtCode} Cache.GetDprtMainName(IBSQL.FieldByName('ORDRSTORAGE').AsInteger)+';'+Cache.arEmplInfo[ManagerID].EmplShortName+';'
                          +Contract.FaccName{IntToStr(Contract.FacCenter)}+';'+IntToStr(Contract.ID){IntToStr(Contract.FaccParent)},pointer(IBSQL.FieldByName('countOrd').AsInteger));

            end
            else prMessageLOGS(nmProc+': У фирмы '+firma.Name+' не найден контракт ID='+IntToStr(IBSQL.FieldByName('ORDRCONTRACT').AsInteger), 'import', false) ;;
          end
          else prMessageLOGS(nmProc+': Фирма ID='+IBSQL.FieldByName('ORDRFIRM').AsString+' не найдена', 'import', false) ;
        except
          on E: EStopError do begin
            s:= E.Message;
            raise EStopError.Create(E.Message);
          end;
          on E: Exception do begin
            prMessageLOGS('Ошибка в процедуре '+' '+nmProc+IntToStr(IBSQL.FieldByName('ORDRFIRM').AsInteger)+' '+ E.Message, 'import', true) ;
            s:=  'Ошибка при обработке результатов запроса. ';
            //raise Exception.Create(Title+#13+s+E.Message);
          end;
        end;
        ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);
        IBSQL.Next;                 
      end; 
       
      IBSQL.Close;
//s:= SLRep.CommaText;
      SLRep.Sort;
//s:= SLRep.CommaText;      
  
    finally
      prFreeIBSQL(IBSQL);
      if Pool<>nil then Pool.SetFreeCnt(IBDatabase, True);
        
    end;
  finally
    countOrd:= 0;
    ScountOrd:= 0;
    stor:='';
    Manager:='';
    for i:= 0 to SLRep.Count-1 do begin
      MsgStr:= fnSplitString(SLRep[i]);
      if (countOrd>0) and (Manager<>'') and (Manager <> MsgStr[1]) then begin
        Content:=';'+Manager+';'+IntToStr(countOrd)+';'+strFaccName+';'+strFaccParentName;
        WriteLn(file_csv, Content); 
        Content:='';
        ScountOrd:= ScountOrd+ countOrd;
        countOrd:= 0;
        Manager:='';
        strFaccName:='';
        strFaccParentName:='';
        inc(iCount);
      end;
      if (stor<> MsgStr[0]) then begin
        if ScountOrd>0 then begin
          Content:='Итого по складу: '+stor+';'+';'+IntToStr(ScountOrd);
          WriteLn(file_csv, Content);
          Content:='';
          WriteLn(file_csv, Content);
          ScountOrd:= 0;
          stor:='';
        end;
        if (ScountOrd=0) then begin
          Content:='Склад: '+MsgStr[0]+';'+';';
          WriteLn(file_csv, Content); 
          Content:='';
        end;
      end;
      stor:= MsgStr[0];
      Manager:= MsgStr[1];
      countOrd:= countOrd + integer(SLRep.Objects[i]);
      if (pos(MsgStr[2],strFaccName)=0) and (MsgStr[2]<>'') then
        strFaccName:= strFaccName+fnIfStr(strFaccName='','',', ')+MsgStr[2];
      if (pos(MsgStr[3],strFaccParentName)=0) and (MsgStr[3]<>'') then
        strFaccParentName:= strFaccParentName+fnIfStr(strFaccParentName='','',', ')+MsgStr[3];
      strFaccParentName:='';
    end;
    if countOrd>0 then begin
      Content:=';'+Manager+';'+IntToStr(countOrd)+';'+strFaccName+';'+strFaccParentName;
      WriteLn(file_csv, Content); 
      Content:='';
      ScountOrd:= ScountOrd+ countOrd;
      inc(iCount);
    end;
    if ScountOrd>0 then begin
      Content:='Итого по складу: '+stor+';'+';'+IntToStr(ScountOrd);
      WriteLn(file_csv, Content);
      Content:='';
      ScountOrd:= 0;
    end;

    Percent:= 10;   
    ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);      
    if iCount>0 then begin
      Subj:= 'Statistic '+FormatDateTime(cDateTimeFormatY2S, Now());
      ContentType:= CSVContentType;// for Excel(.csv)
      lstBodyMail:= TStringList.Create;
      lstBodyMail.Add(Title);
    end;
    
    CloseFile(file_csv);    
    prFree(FilterData);
    SetLength(MsgStr, 0); 
    if iCount=0 then begin
      s:= MessText(mtkNotFoundDataUse);
        //raise Exception.Create(Title+#10+'  '+s);
      raise EBOBError.Create(Title+#10+'  '+s)
    end;    
    result:= s;
  end; 

end;
//==============================================================================
function fnFirmIP(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,     //FirmID-IP
   ContentType:string; ThreadData: TThreadData; filter_data: string): string;
const
 nmProc = 'fnFirmIP'; // имя процедуры/функции
var 
    LogIBDatabase: TIBDatabase;
    LogIBSQL: TIBSQL;
    FilterData: TStringList;
    DateStartIP, DateEndIP, DateStart, DateEnd: TDatetime;   
    s, Title: string;   
    Content, PathFile: string;
    file_csv: textfile;    
    iCount: integer;  
//                     timer, timerStart: TDateTime;    
    Percent: real;
    MsgStr: tas;
    flSUF: boolean;
    Pool: TIBCntsPool;
    n, int, CountConn, countU: integer;
    row, IP, UserIP, DateIP, login: string;
i, FirmFaceID, FirmID, ClientID: integer;
ILFirmClasses: TIntegerList;
FirmClasses: string;
SLContracts, SLRep, SLRow, SLIns: TStringList;
strFaccName, strFaccParentName, firmName, firmMan: string;
firma: TFirmInfo;
Contract: TContract;
arFirm: tai;
contractID, iRep, j: integer;
begin
//timer:= Now;
//timerStart:= Now;
//prMessageLOGS('-----------------fnFirmIP.csv--------------------','Log_prg.log' , false);  
  ILFirmClasses:= nil;
  FilterData:=nil;
  s:= '';
  iCount:= 0;
  FilterData:= TStringList.Create;
  SetLength(MsgStr, 0); 
  LogIBSQL:= nil;
  SLContracts:= TStringList.Create;
  SLRep:= TStringList.Create;
  SLRow:= TStringList.Create;
  SLIns:= TStringList.Create;
  try
    FilterData.Text:= filter_data;
    DateStart:= StrToDateTime(FilterData.Values['dop_fromdate']); // получаем DateStart
    DateEnd:= StrToDateTime(FilterData.Values['dop_todate']);
//int:= 10;
    SetLength(arFirm,length(Cache.arFirmInfo));
    for i:= 0 to length(arFirm)-1 do arFirm[i]:= -1;


    flSUF:= (DateStart < Date) and cntsSUFLOG.BaseConnected; // если до вчера - берем с суфлера
    if flSUF then Pool:= cntsSufLOG else Pool:= cntsLOG;
    try
      LogIBDatabase:= Pool.GetFreeCnt;
    except
      exit;
    end;

    try
      LogIBSQL:= fnCreateNewIBSQL(LogIBDatabase,'Query_'+nmProc, -1, tpRead, true);

      if FName='' then begin
        if not GetEmplTmpFilePath(UserID, PathFile, s) then raise EBOBError.Create(s); 
        FName:= PathFile+fnFormRepFileName('FirmIP', '.csv', ImpCheck.GetCheckKind(UserID, ThreadData.ID));
      end;
      if FileExists(FName) and not SysUtils.DeleteFile(FName) then begin
        s:= MessText(mtkNotDelPrevFile);
        raise EBOBError.Create(MessText(mtkNotDelPrevFile));
      end;

      AssignFile(file_csv, FName);
      filemode:= fmOpenReadWrite; //назначаем файл
      if FileExists(FName) then Reset(file_csv) else ReWrite(file_csv);
      Append(file_csv);
    //Добавляем шапку:                  
      Title:= 'Таблица соответствий контрагентов и IP-адресов за период с'+ FormatDateTime(cDateFormatY4, DateStart)+' по '+FormatDateTime(cDateFormatY4, DateEnd);

      Content:= Title;    
      WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
      Content:= 'IP;Код контрагента;Наименование контрагента;Менеджер контрагента;ЦФУ';
      WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
      Content:= '';
//prMessageLOGS('Приготовились'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;      
      Percent:= 3; 
          
      ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);    //шапка добавлена  
      LogIBSQL:= fnCreateNewIBSQL(LogIBDatabase,'SQL_'+nmProc, -1, tpRead, true);
      LogIBSQL.SQL.Add('select THLGFIRMID, IPLUIP');
      LogIBSQL.SQL.Add('FROM LOGTHREADS left join  IPLOGUSERS on IPLUCODE=THLGUSERIP');
      LogIBSQL.SQL.Add('where THLGBEGINTIME between :pDateStart and :pDateEnd and not THLGUSERIP is null and not THLGFIRMID is null ');
      LogIBSQL.SQL.Add('group by THLGFIRMID,IPLUIP');
      LogIBSQL.SQL.Add('order by IPLUIP');
      
      LogIBSQL.Prepare;
      LogIBSQL.ParamByName('pDateStart').AsDate := DateStart;      // Начальная дата
      LogIBSQL.ParamByName('pDateEnd').AsDate := DateEnd;      // Конечная дата
      LogIBSQL.ExecQuery;      
   
//      i:=0;   
      while not LogIBSQL.EOF do begin  
        prStopProcess( UserID, ThreadData.ID);
        try
          if (LogIBSQL.FieldByName('IPLUIP').AsString<>IP) then
            if (SLRow.Count<=1) then SLRow.Clear
            else begin
              iRep:= -1;
              for i := 0 to SLRow.Count-1 do begin
                FirmID:= StrToInt(SLRow[i]);
                if arFirm[FirmID]>-1 then begin
                  iRep:= arFirm[FirmID];
//                  j:=i;
                  break;
                end;
//                arFirm[FirmID]:= iCount;
                
(*                if Cache.FirmExist(FirmID) then begin
                  firma:= Cache.arFirmInfo[FirmID];
                  firmName:= firma.Name;
                  firmMan:= firma.GetFirmManagersString([fmpName,fmpShort]);
                end;
                Content:=IP+';'+IntToStr(FirmID)+';'+firmName+';'+firmMan;
                WriteLn(file_csv, Content); 
                Content:='';
                firmName:= '';
                firmMan:= '';  *)
//                inc(iCount);
              end;
              if iRep>-1 then
                for i := 0 to SLRow.Count-1 do begin
                  FirmID:= StrToInt(SLRow[i]);
                  if arFirm[FirmID]=-1 then
                    arFirm[FirmID]:= iRep;
                end
              else  begin
                for i := 0 to SLRow.Count-1 do begin
                  FirmID:= StrToInt(SLRow[i]);
                  arFirm[FirmID]:= iCount;
                end;
                inc(iCount);
              end;
              SLRow.Clear;
//              WriteLn(file_csv, Content);
            end;
          if (LogIBSQL.FieldByName('IPLUIP').AsString='172.20.10.19') or (LogIBSQL.FieldByName('IPLUIP').AsString='172.20.10.18') then LogIBSQL.Next;
          FirmID:= LogIBSQL.FieldByName('THLGFIRMID').AsInteger;
          if Cache.FirmExist(FirmID) and not Cache.arFirmInfo[FirmID].Arhived  then begin 
            SLRow.Add(LogIBSQL.FieldByName('THLGFIRMID').AsString);
            IP:= LogIBSQL.FieldByName('IPLUIP').AsString;
//          FirmID:=LogIBSQL.FieldByName('THLGFIRMID').AsInteger;
          end;
        except
          on E: Exception do begin
            prMessageLOGS('Ошибка в процедуре '+nmProc+' '+ E.Message, 'import', false) ;
            prMessageLOGS('IP= '+IP+';  FIRMID='+ LogIBSQL.FieldByName('THLGFIRMID').AsString, 'import', false) ;            
            s:=  'Ошибка при обработке результатов запроса. ';
            raise Exception.Create(Title+#13+s+E.Message);
          end;
        end;
        LogIBSQL.Next;                 
      end; 
       
      LogIBSQL.Close;
      if (SLRow.Count<=1) then SLRow.Clear
      else begin
        iRep:= -1;
        for i := 0 to SLRow.Count-1 do begin
          FirmID:= StrToInt(SLRow[i]);
          if arFirm[FirmID]>-1 then begin
            iRep:= arFirm[FirmID];
            break;
          end;
        end;
        if iRep>-1 then
          for i := 0 to SLRow.Count-1 do begin
            FirmID:= StrToInt(SLRow[i]);
            if arFirm[FirmID]=-1 then
              arFirm[FirmID]:= iRep;
          end
        else  begin
          for i := 0 to SLRow.Count-1 do begin
            FirmID:= StrToInt(SLRow[i]);
            arFirm[FirmID]:= iCount;
          end;
          inc(iCount);
        end;
        SLRow.Clear;
      end;
      
      for i:=0 to iCount-1 do begin
        for j:= 0 to length(arFirm)-1 do begin
          if arFirm[j]=i then begin
            if Cache.FirmExist(j) then begin
              firma:= Cache.arFirmInfo[j];
              firmName:= firma.Name;
              firmMan:= firma.GetFirmManagersString([fmpName,fmpShort]);
              SLContracts:= firma.GetContracts;
              strFaccName:='';
              strFaccParentName:= '';
              for n:= 0 to SLContracts.Count-1 do begin
                contractID:= integer(SLContracts.Objects[n]);
                Contract:= firma.GetContract(contractID);
                if (pos(Contract.FaccName,strFaccName)=0) and (Contract.FaccName<>'') then
                  strFaccName:= strFaccName+fnIfStr(strFaccName='','',', ')+Contract.FaccName;
                if (pos(Contract.FaccParentName,strFaccParentName)=0) and (Contract.FaccParentName<>'') then
                  strFaccParentName:= strFaccParentName+fnIfStr(strFaccParentName='','',', ')+Contract.FaccParentName;
              end;
              prFree(SLContracts);
            end;
            Content:=IntToStr(i)+';'+IntToStr(j)+';'+firmName+';'+firmMan+';'+strFaccName;
            WriteLn(file_csv, Content); 
            Content:='';
            firmName:= '';
            firmMan:= '';
            strFaccName:= '';
            strFaccParentName:= '';
          end;
        end;
        WriteLn(file_csv, Content);
      end;


      Percent:= 10;   
      ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);      
(*      SLRep.Sort;      
      IP:= '';
      CountConn:= 0;
      LogIBSQL.SQL.Clear;
      LogIBSQL.SQL.Add('SELECT first 1 THLGFIRMID, THLGUSERID, IPLUIP, THLGBEGINTIME, THLGTYPE');
      LogIBSQL.SQL.Add('FROM LOGTHREADS left join  IPLOGUSERS on IPLUCODE=THLGUSERIP');
      LogIBSQL.SQL.Add('where not THLGUSERID is null and THLGBEGINTIME <= :pDateStart and IPLUIP= :pIP'); 
      LogIBSQL.SQL.Add('and not THLGUSERID in (0)');
      LogIBSQL.SQL.Add('order by THLGBEGINTIME desc');  
      Percent:= 70;   
      if SLRep.Count-1>0 then Percent:= Percent/(SLRep.Count-1) else ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);          
      for i := 0 to SLRep.Count-1 do begin
        if (IP<>'') and (IP<>trim(SLRep[i])) then  begin
          if CountConn>int then begin
            for n := 0 to SLIns.count-1 do begin
              WriteLn(file_csv, SLIns[n]);
              inc(icount);
            end;
            if (SLIns.count=1) and (ClientID=0) then begin
              countU:=0;
              DateStartIP:=DateStart;
              LogIBSQL.ParamByName('pIP').AsString:= IP;
              UserIP:= '';
              DateIP:= '';
              row:='';
              DateStartIP:= DateStart;
              LogIBSQL.SQL[3]:=('and not THLGUSERID in (0)');
  //            LogIBSQL.Prepare;
              while countU<3 do begin
                if LogIBSQL.Open then  LogIBSQL.Close;
                if UserIP<>'' then begin
                  LogIBSQL.SQL[3]:=('and not THLGUSERID in ('+row+UserIP+')');
                  row:= row+UserIP+',';
                end;
                if DateIP<>'' then
                  DateStartIP:= StrToDateTime(DateIP);
  //              DateStartIP:= DateStartIP-1;
  //              if DateStartIP<DateStart-30 then break;
                LogIBSQL.ParamByName('pDateStart').AsDate := DateStartIP;      // Начальная дата
                LogIBSQL.ParamByName('pIP').AsString:= IP;
                LogIBSQL.Prepare;
                LogIBSQL.ExecQuery;
                if LogIBSQL.FieldByName('THLGUSERID').AsInteger<>0 then begin
                  UserIP:= trim(LogIBSQL.FieldByName('THLGUSERID').AsString);
                  DateIP:= LogIBSQL.FieldByName('THLGBEGINTIME').AsString;
                  if Cache.FirmExist(LogIBSQL.FieldByName('THLGFIRMID').AsInteger) then begin
                    firma:= Cache.arFirmInfo[LogIBSQL.FieldByName('THLGFIRMID').AsInteger];
                    firmName:= firma.Name;
                    firmMan:= firma.GetFirmManagersString([fmpName,fmpShort]);
                  end;
                  if StrToIntDef(SLRow[3],0)=4 then
                    if Cache.ClientExist(ClientID) then login:= Cache.arClientInfo[ClientID].Login
                    else login:= '';
                  if StrToIntDef(SLRow[3],0)=12 then 
                    if Cache.EmplExist(ClientID) then login:= Cache.arEmplInfo[ClientID].EmplShortName
                    else login:='THLGTYPE=12';

                  Content:='----' +';'+fnIfStr(LogIBSQL.FieldByName('THLGFIRMID').AsString='0','',LogIBSQL.FieldByName('THLGFIRMID').AsString)+';'+firmName+';'
                                      + fnIfStr(LogIBSQL.FieldByName('THLGUSERID').AsString='0','',LogIBSQL.FieldByName('THLGUSERID').AsString)+';'+login+';'+ LogIBSQL.FieldByName('THLGBEGINTIME').AsString+';'+ firmMan;
                  WriteLn(file_csv, Content); 
                  Content:='';
                  firmName:='';
                  firmMan:= '';
                  login:='';
                end
                else begin 
                  LogIBSQL.Close;
                  break;
                end;
                LogIBSQL.Close;
                inc(countU);
              end;
            end;
            inc(icount);
            Content:= Content+'Итого по IP '+IP +';;;;;'+ IntTOStr(CountConn);
            WriteLn(file_csv, Content);
            Content:='';
            WriteLn(file_csv, Content);
            WriteLn(file_csv, Content);
          end;
          CountConn:= 0;
          Content:='';
          SLIns.Clear;
        end;

        SLRow:= TStringList(SLRep.Objects[i]);
        Content:= SLRep[i]+';';

        IP:= trim(SLRep[i]);
        ClientID:= StrToIntDef(SLRow[1],0);
        FirmID:= StrToIntDef(SLRow[0],0);
        CountConn:= CountConn+ StrToIntDef(SLRow[2],0);
        if Cache.FirmExist(FirmID) then begin
          firma:= Cache.arFirmInfo[FirmID];
          firmName:= firma.Name;
          firmMan:= firma.GetFirmManagersString([fmpName,fmpShort]);
        end;
        if StrToIntDef(SLRow[3],0)=4 then
          if Cache.ClientExist(ClientID) then login:= Cache.arClientInfo[ClientID].Login
          else login:= '';
        if StrToIntDef(SLRow[3],0)=12 then 
          if Cache.EmplExist(ClientID) then login:= Cache.arEmplInfo[ClientID].EmplShortName
          else login:='THLGTYPE=12';

        Content:= Content+ fnIfStr(FirmID=0,'',IntToStr(FirmID))+';'+firmName+';'+ fnIfStr(ClientID=0,'',IntToStr(ClientID))+';'+login+';'+SLRow[2]+';'+firmMan;   
        SLIns.Add(Content);
        //WriteLn(file_csv, Content); 
        Content:='';
        firmName:='';
        firmMan:='';
        login:='';
        ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);          
      end;   *)
//prMessageLOGS('Заполнили'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;        
//      Percent:= 50;     
//      ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);      

      if iCount=0 then begin
        s:= MessText(mtkNotFoundDataUse);
        //raise Exception.Create(Title+#10+'  '+s);
        raise EBOBError.Create(Title+#10+'  '+s)
      end;
      Subj:= 'FirmIP '+FormatDateTime(cDateTimeFormatY2S, Now());
      ContentType:= CSVContentType;// for Excel(.csv)
      lstBodyMail:= TStringList.Create;
      lstBodyMail.Add(Title);  
    finally
      prFreeIBSQL(LogIBSQL);
      if Pool<>nil then Pool.SetFreeCnt(LogIBDatabase, True);
      CloseFile(file_csv);  
      prFree(SLRow);
      prFree(SLContracts);
{      for i := 0 to SLRep.Count - 1 do begin
        SLRow := TStringList(SLRep.Objects[i]);
        SlRow.Free;
      end;
      prFree(SLRep);  }
    end;
  finally
    prFree(FilterData);
//    prFree(ILFirmClasses);
    SetLength(MsgStr, 0); 
    result:= s;
  end; 
//prMessageLOGS('Закончили'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;  
    
      //ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);
//prMessageLOGS('Время всего'+': - '+
//        FloatToStr(RoundTo((Now-timerStart)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;  
end; 
//==============================================================================
function fnRep52(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,     //Анализ покрытия автопарка
   ContentType:string; ThreadData: TThreadData; filter_data: string): string;
const
 nmProc = 'fnRep_52'; // имя процедуры/функции
var 
    IBDatabase: TIBDatabase;
    IBSQL: TIBSQL;
    SLManufs, SLModels, FilterData, SLModLineRep: TStringList;
//    DateStart, DateEnd: TDatetime;   
    s, Title: string;   
    Content, PathFile: string;
    file_csv: textfile;    
    iCount: integer;  
//                     timer, timerStart: TDateTime;    
//    Percent: real;
    MsgStr: tas;
    int, cc, mn,ni,m,n,b,{t,}l, i: integer;
    Model: TModelAuto;
    Node{, MNode}: TAutoTreeNode;  
    NodeID, ModelID, ModelLineID, manufID, BrandID, {WareTypeID,} NodeTD, ModelTD, ModelLineTD, ManufTD, WareCount, WareTopCount,TDcount: integer;  
    arWare{, arMainNodes,MNodes}: tai;
    Ware: TWareInfo;
    ModelLine: TModelLine;
    BrandName, TDcountNull, ModelLineName, ModelName, ManufName, NodeName, WareTypeName, txt, txtend: string;
    arMainNode, {arManufID,} arBrands, arBrandTD, arNodes, arWareTypes, arNodeTD, arModels, arWaresRest,arWaresCount: tai;
    Manuf: TManufacturer;
    flMain: boolean;
    {SLWares,} SLModelLines: TStringList; 
    iManuf, iModelLine: integer;
//    dop_model: integer;
    ss, manufStr, modellineStr, modelStr, NodesStr, WareTypesStr, BrandsStr, sNodes, strModels: string;
    OList: TObjectList;
    RestAll: real;
    arNode: tas;
    ErrPos: string;
    Percent, PPercent, PPPercent: real;
//    timerStart: TDateTime;
begin
//timer:= Now;
//timerStart:= Now;
//prMessageLOGS('-----------------Export52.csv--------------------','Log_prg.log' , false);  
cc:= 0;
  FilterData:=nil;
  s:= '';
  iCount:= 0;
  int:= 0;
  mn:= 0;
  ni:= 0;
//  m:= 0;
  n:= 0;
//  l:= 0;
//  NodeID:= -1;
  ModelID:= -1;
  ModelLineID:= -1;
  manufID:= -1;
//  BrandID:= -1;
  NodeTD:= -1;
  ModelTD:= -1;
  ModelLineTD:= -1;
  ManufTD:= -1;
//  WareCount:=0;
//  WareTopCount:=0;
  TDcount:= 0;
  iManuf:= 0;
  iModelLine:= 0;
  flMain:= false;
  FilterData:= TStringList.Create;
  SLManufs:= TStringList.Create;
  SLModelLines:= TStringList.Create;
  SLModels:= TStringList.Create;
  SLModLineRep:= TStringList.Create;
//SLWares:= TStringList.Create; 
  SetLength(arBrands,0); 
  SetLength(arNodes,0); 
  SetLength(arNode,0);
  SetLength(arMainNode,0);
  SetLength(arWareTypes,0); 
  SetLength(MsgStr, 0);
  IBDatabase:= nil;
  IBSQL:= nil;
  txt:='';
  txtend:='';
  ss:='';
//  timer:= Now;
  try
ErrPos:='1';  
    FilterData.Text:= filter_data;
prMessageLOGS(' ', 'import', false) ;
prMessageLOGS('FilterData.Text= '+FilterData.Text, 'import', false) ;    
    manufStr:= FilterData.Values['dop_manuf']; // получаем dop_manufauto
prMessageLOGS('manufStr= '+manufStr, 'import', false) ;    
    if (manufStr='') then
      SLManufs:= Cache.FDCA.Manufacturers.GetSortedList(constIsAuto)
    else SLManufs:= fnSplit(',',manufStr);

    modellineStr:= FilterData.Values['dop_modlineauto'];
    if modellineStr= '-1' then modellineStr:= '';

prMessageLOGS('modellineStr= '+modellineStr, 'import', false) ;    
(*    if modellineStr<>'' then

    if StrToIntDef(modellineStr,-1)>-1 then
      modellineID:= StrToIntDef(FilterData.Values['dop_modlinelistauto'],-1); // получаем dop_modlinelistauto   *)
      
    modelStr:= FilterData.Values['dop_model'];
prMessageLOGS('modelStr= '+modelStr, 'import', false) ;    
    if StrToIntDef(modelStr,-1)>-1 then
      modelID:= StrToIntDef(FilterData.Values['dop_model'],0); // получаем dop_model
    NodesStr:= FilterData.Values['dop_nodes']; // получаем dop_nodes
prMessageLOGS('NodesStr= '+NodesStr, 'import', false) ;    
    i:= 0;
    SetLength(arNode,10);     // nodes
    if NodesStr<>'' then
      while length(NodesStr)>1 do begin
        sNodes:= fnCutFromTo(NodesStr, '{', ',}',true);
        if sNodes='' then break;
        if length(arNode)>=i then  SetLength(arNode,length(arNode)+10);
        arNode[i]:= sNodes;
        inc(i);
      end
    else begin
      m:= 0;
      with Cache.FDCA.AutoTreeNodesSys[constIsAuto].NodesList do begin // Запись дерева
        sNodes:='';
        WareTypesStr:='';
        i:= 0;
        for n:= 0 to Count-1 do begin
          Node:= TAutoTreeNode(Objects[n]);
          if Node.IsEnding and (fnInIntArray(Node.MainCode,arMainNode)<0) then begin 
            WareTypesStr:= WareTypesStr+fnIfStr(WareTypesStr='','',',')+ IntToStr(Node.ID);
            if length(arMainNode)>=m then  SetLength(arMainNode,length(arMainNode)+10);
            arMainNode[m]:= Node.MainCode;
            inc(m);
          end
          else begin
            if (sNodes<>'') and (WareTypesStr<>'') then begin
              if length(arNode)>=i then  SetLength(arNode,length(arNode)+10);
              arNode[i]:= sNodes+','+WareTypesStr; 
              inc(i);
            end;
            WareTypesStr:='';
            sNodes:= IntToStr(Node.ID);
          end;
        end;
      end;
      flMain:= true;
    end;
//    m:= 0;
    SetLength(arNode,i);
    NodesStr:= FilterData.Values['dop_nodes']; // получаем dop_nodes
    
    BrandsStr:= FilterData.Values['dop_brands']; // получаем dop_brands
    b:= 0;  
    if BrandsStr='' then begin       //brands
      SetLength(arBrands,10);
      for i := 2 to Cache.WareBrands.Count-1 do begin
        if TBrandItem(Cache.WareBrands[i]).ID=i then begin
          if length(arBrands)>=b then  SetLength(arBrands,length(arBrands)+10);
          arBrands[b]:=TBrandItem(Cache.WareBrands[i]).ID;
          inc(b);
        end;
      end;
      SetLength(arBrands,b);
    end
    else
      arBrands:= fnArrOfCodesFromString(copy(BrandsStr,1,length(BrandsStr)-1));
//0306    IBDatabase:= cntsTDT.GetFreeCnt;
ErrPos:='11';    
//    if (IBDatabase=nil) then Exit;
    try
(*0306      IBSQL:= fnCreateNewIBSQL(IBDatabase,'Query_'+nmProc, -1, tpRead, true);
      txtend:= 'select * from GETARTCountByParams(:pNodeTD, :pModelLineTD, :pModelTD, :pBrandsTD)';
      IBSQL.SQL.Text:= 'select * from GETARTCountByParams(:pNodeTD, :pModelLineTD, :pModelTD, :pBrandsTD)';
      IBSQL.Prepare;    *)
ErrPos:='111';      
      if FName='' then begin
        if not GetEmplTmpFilePath(UserID, PathFile, s) then raise EBOBError.Create(s); 
        FName:= PathFile+fnFormRepFileName('52', '.csv', ImpCheck.GetCheckKind(UserID, ThreadData.ID));
      end;
      if FileExists(FName) and not SysUtils.DeleteFile(FName) then begin
        s:= MessText(mtkNotDelPrevFile);
        raise EBOBError.Create(MessText(mtkNotDelPrevFile));
      end;
ErrPos:='1111';
      AssignFile(file_csv, FName);
      filemode:= fmOpenReadWrite; //назначаем файл
      if FileExists(FName) then Reset(file_csv) else ReWrite(file_csv);
      Append(file_csv);
ErrPos:='11111';      
    //Добавляем шапку:                  
      Title:= 'Анализ покрытия автопарка ';    

      Content:= Title;    
      WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
      Content:= 'Производитель авто;Модельный ряд;'+fnIfStr(StrToIntDef(modelStr,-1)=-1,'','Модель;')+'Узел;Тип товара;ID;Бренд;Ассортимент TecDoc;Ассортимент GrossBee;Ассортимент GrossBee с остатком;В наличии на складах;Top';
      WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
      Content:= '';
//CheckNotValidModelNodeLinkParams(ModelID, NodeID, Model, Node, SysID, mess)  

//    arBrands:= fnArrOfCodesFromString(copy(BrandsStr,1,length(BrandsStr)-1));

//exit;
ErrPos:='2';
      Percent:= 1; 
      ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);
      Percent:= 90; 
//prMessageLOGS('SLManufs.Count= '+IntToStr(SLManufs.Count), 'import', false) ;      
      if SLManufs.Count>0 then Percent:= Percent/SLManufs.Count else ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);     
      for iManuf:= 0 to SLManufs.Count-1 do begin
        if (manufStr='') then begin
          manuf:= TManufacturer(SLManufs.Objects[iManuf]);
          manufID:= Manuf.ID
        end
        else begin
          manufID:= StrToInt(SLManufs[iManuf]);
          Manuf:=Cache.FDCA.Manufacturers[manufID];
        end;
        ManufName:= Manuf.Name;
        ManufTD:= Manuf.SubCode;
        if modellineStr='' then
          SLModelLines:= Manuf.GetModelLinesList(constIsAuto, false)
        else SLModelLines:=fnSplit(',',modellineStr);
        //SLModelLines.AddObject(IntToStr(modellineID),pointer(modellineID));
ErrPos:='3';  
        PPercent:=0;
//prMessageLOGS('SLModelLines.Count= '+IntToStr(SLModelLines.Count), 'import', false) ;        
        if SLModelLines.Count>0 then PPercent:= Percent/SLModelLines.Count else ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);           
        for iModelLine:= 0 to SLModelLines.Count-1 do begin
          if SLModLineRep.Count>0 then 
            for n := 0 to SLModLineRep.Count-1 do begin
              WriteLn(file_csv, Content);
              inc(iCount);
            end;
          SLModLineRep.Clear;
          
          if assigned(IBSQL) then prFreeIBSQL(IBSQL);
          if assigned(IBDatabase) then cntsTDT.SetFreeCnt(IBDatabase, True);        
          IBDatabase:= cntsTDT.GetFreeCnt;          //0306
          IBSQL:= fnCreateNewIBSQL(IBDatabase,'Query_'+nmProc, -1, tpRead, true);        //0306
          //      txtend:= 'select * from GETARTCountByParams(:pNodeTD, :pModelLineTD, :pModelTD, :pBrandsTD)';
          IBSQL.SQL.Text:= 'select * from GETARTCountByParams(:pNodeTD, :pModelLineTD, :pModelTD, :pBrandsTD)';    //0306
          IBSQL.Prepare;                                                                                           //0306
          if modellineStr='' then 
            ModelLineID:= integer(SLModelLines.Objects[iModelLine])
          else ModelLineID:= StrToInt(SLModelLines[iModelLine]);
          ModelLine:= Cache.FDCA.ModelLines.GetModelLine(ModelLineID);
          ModelLineName:= ModelLine.Name;
          ModelLineTD:= ModelLine.SubCode;
          if StrToIntDef(modelStr,-1)=-1 then begin 
            SLModels:= ModelLine.GetListModels;
            ModelName:='';
          end else begin
            Model:=Cache.FDCA.Models.GetModel(ModelID);
            SLModels.AddObject(Model.Name,pointer(ModelID));
            ModelTD:= Model.SubCode;
            ModelName:= Model.Name;
          end;
          strModels:= '';
          SetLength(arModels,SLModels.Count);
          for i := 0 to SLModels.Count-1 do begin
            Model:=Cache.FDCA.Models.GetModel(integer(SLModels.Objects[i]));
            arModels[i]:= integer(SLModels.Objects[i]);
            ModelTD:= Model.SubCode;
            if StrToIntDef(modelStr,-1)>-1 then
              strModels:= strModels+fnIfStr(strModels='','',',')+ IntToStr(ModelTD);
          end;
          if StrToIntDef(modelStr,-1)>-1 then
            strModels:= ' and MT_ID in ('+ strModels +')';
//          if not IBDatabase.Connected then IBDatabase.Open;          
{          prFreeIBSQL(IBSQL);
          if assigned(IBDatabase) then cntsTDT.SetFreeCnt(IBDatabase, True);
          IBDatabase:= cntsTDT.GetFreeCnt;
//          if (IBDatabase=nil) then Exit;
          IBSQL:= fnCreateNewIBSQL(IBDatabase,'Query_'+nmProc, -1, tpRead, true);}    
//06          txtend:='';
{          txtend:= txtend+'SELECT  count(LAG_ART_NR) as countart FROM GENERIC_ARTICLES, LINK_ART_TO_GA '#10#13;
          txtend:= txtend+'where LAG_GA_ID=GA_ID '#10#13;
          txtend:= txtend+'and LAG_ART_ID in (select LAGT_ART_ID from LINK_ART_GA_TYPE,MODEL_SERIES, MODEL_TYPES, MANUFACTURERS '#10#13;
          txtend:= txtend+'where LAGT_MT_ID=MT_ID and MS_MF_ID=MF_ID and MT_MS_ID=MS_ID and MF_ID=:pManufTD and MS_ID=:pModelLineTD /*and MT_ID in (*/'+strModels+'/*)*/ group by LAGT_ART_ID)'#10#13;
          txtend:= txtend+'and LAG_GA_ID=:pNodeTD /*and upper(GA_DESCR) containing :pWareType */'#10#13;
          txtend:= txtend+'and LAG_SUP_ID in (select DS_ID from DATA_SUPPLIERS where DS_MF_ID in ';  //+brandTD
}
(*          txtend:= txtend+'SELECT  count(LAG_ART_NR) as countart '#10#13;
          txtend:= txtend+'FROM GENERIC_ARTICLES, LINK_ART_TO_GA,-- LINK_ART_GA_TYPE,MODEL_SERIES, MODEL_TYPES, MANUFACTURERS '#10#13;
          txtend:= txtend+'(select LAGT_ART_ID from LINK_ART_GA_TYPE,MODEL_SERIES, MODEL_TYPES, MANUFACTURERS'#10#13;
          txtend:= txtend+'where LAGT_MT_ID=MT_ID and MS_MF_ID=MF_ID and MT_MS_ID=MS_ID and MF_ID=:pManufTD and MS_ID=:pModelLineTD'#10#13;
          txtend:= txtend+strModels+#10#13;
          txtend:= txtend+'group by LAGT_ART_ID) MTST'#10#13;
          
          txtend:= txtend+'where LAG_GA_ID=GA_ID '#10#13;
          txtend:= txtend+'and LAG_ART_ID= MTST.LAGT_ART_ID '#10#13;
//          txtend:= txtend+'and LAGT_MT_ID=MT_ID and MS_MF_ID=MF_ID and MT_MS_ID=MS_ID and MF_ID=:pManufTD and MS_ID=:pModelLineTD '#10#13;
//          txtend:= txtend+strModels+#10#13;
          txtend:= txtend+'and LAG_GA_ID=:pNodeTD '#10#13;
          txtend:= txtend+'and LAG_SUP_ID in (select DS_ID from DATA_SUPPLIERS where DS_MF_ID in ';      *)
(*          txtend:= txtend+'SELECT  count(LAG_ART_NR) as countart '#10#13;
          txtend:= txtend+'from (select LAGT_ART_ID from LINK_ART_GA_TYPE,MODEL_SERIES, MODEL_TYPES, MANUFACTURERS '#10#13;
          txtend:= txtend+'where LAGT_MT_ID=MT_ID and MS_MF_ID=MF_ID and MT_MS_ID=MS_ID and MF_ID=:pManufTD and MS_ID=:pModelLineTD '#10#13;
          txtend:= txtend+strModels+#10#13;
          txtend:= txtend+'group by LAGT_ART_ID) MTST, '#10#13;
          txtend:= txtend+'LINK_ART_TO_GA, GENERIC_ARTICLES '#10#13;
          txtend:= txtend+'where  LAG_ART_ID= MTST.LAGT_ART_ID and LAG_GA_ID=:pNodeTD '#10#13;
          txtend:= txtend+'and LAG_GA_ID=GA_ID '#10#13;
          txtend:= txtend+'and LAG_SUP_ID in (select DS_ID from DATA_SUPPLIERS where DS_MF_ID in '#10#13;   *)
(*06          txtend:= txtend+'select  count(LAG_ART_NR) as countart from ( '#10#13;
          txtend:= txtend+'SELECT  LAG_ART_NR as countart '#10#13;
          txtend:= txtend+'FROM GENERIC_ARTICLES, LINK_ART_TO_GA, LINK_ART_GA_TYPE,MODEL_SERIES, MODEL_TYPES, MANUFACTURERS '#10#13;
          txtend:= txtend+'where LAG_GA_ID=GA_ID '#10#13;
          txtend:= txtend+'and LAG_ART_ID= LAGT_ART_ID '#10#13;
          txtend:= txtend+'and LAGT_MT_ID=MT_ID and MS_MF_ID=MF_ID and MT_MS_ID=MS_ID and MF_ID=:pManufTD and MS_ID=:pModelLineTD '#10#13;
          txtend:= txtend+strModels+#10#13;
          txtend:= txtend+'and LAG_GA_ID=:pNodeTD '#10#13;
          txtend:= txtend+'and LAG_SUP_ID in (select DS_ID from DATA_SUPPLIERS where DS_MF_ID in ';
*)          
          PPPercent:= 0; 
//prMessageLOGS('length(arNode)= '+IntToStr(length(arNode)), 'import', false) ;                  
          if length(arNode)>0 then PPPercent:= PPercent/length(arNode) else ImpCheck.SetProcessPercent(UserId,ThreadData.ID,PPercent);            
          for ni := 0 to length(arNode)-1 do begin
ErrPos:='4';          
            SetLength(arNodes,0);
            arNodes:= fnArrOfCodesFromString(arNode[ni]);  
            NodeID:= arNodes[0];//StrToIntDef(copy(sNodes,1,pos(',',sNodes)),0);
          int:=NodeID;   
            if Cache.FDCA.AutoTreeNodesSys[constIsAuto].NodeGet(NodeId, Node) then 
              NodeName:= Node.Name;
          //if fnInIntArray(2550,arNodes)>-1 then
  
            for n := 1 to length(arNodes)-1 do begin
              if NodesStr<>'' then flMain:= false;
              NodeID:= arNodes[n];
ErrPos:='5';              
              if Cache.FDCA.AutoTreeNodesSys[constIsAuto].NodeGet(NodeId, Node) then begin
                WareTypeName:= Node.Name;
                NodeTD:= Node.SubCode;
                if (NodesStr<>'') and (fnInIntArray(Node.MainCode,arMainNode)<0) then begin
(*                  if length(arMainNode)>=m then  SetLength(arMainNode,length(arMainNode)+10);
                  arMainNode[m]:= Node.MainCode;
                  inc(m);*)
                  flMain:= true;
                end;
//prMessageLOGS('length(arNode)= '+IntToStr(length(arNode)), 'import', false) ;                
                for b := 0 to length(arBrands)-1 do if flMain then begin
                  try  
ErrPos:='6';                  
prStopProcess( UserID, ThreadData.ID);                      
                    BrandID:= arBrands[b];
                    BrandName:=Cache.WareBrands.GetItemName(BrandID);
                    arBrandTD:= TBrandItem(Cache.WareBrands[BrandID]).TDMFcodes;
                    TDcountNull:='';
                    if length(arBrandTD)>0 then begin
                      TDcountNull:= IntToStr(length(arBrandTD));
                      if not Assigned(IBDatabase) or not IBDatabase.Connected then begin   
                          if Assigned(IBSQL) then prFreeIBSQL(IBSQL);
                          if Assigned(IBDatabase) then begin 
                            cntsTDT.SetFreeCnt(IBDatabase, True);
                            IBDatabase:= nil;
                          end;
                          IBDatabase:= cntsTDT.GetFreeCnt;
                          if IBDatabase.Connected then begin
                            IBSQL:= fnCreateNewIBSQL(IBDatabase, 'IBSQL_'+nmProc, -1, tpRead, true);
                            IBSQL.SQL.Text:= txtend;
                          end
                          else exit;
                      end;   
                      if not IBSQL.Transaction.InTransaction then IBSQL.Transaction.StartTransaction;                   
(*06                      IBSQL.SQL.Text:=txtend; //0203Text;
                      IBSQL.SQL.Text:=IBSQL.SQL.Text+'('+fnArrOfIntToString(arBrandTD)+')) group by LAG_ART_NR'+')'#10#13;

                      IBSQL.ParamByName('pManufTD').AsInteger:= ManufTD;
                      IBSQL.ParamByName('pModelLineTD').AsInteger:= ModelLineTD;
              //        IBSQL.ParamByName('pModelTD').AsInteger:= ModelTD;
                      IBSQL.ParamByName('pNodeTD').AsInteger:= NodeTD;   *)
                      IBSQL.ParamByName('pModelLineTD').AsInteger:= ModelLineTD;
                      IBSQL.ParamByName('pModelTD').AsString:= fnIfStr(StrToIntDef(modelStr,-1)>-1,IntToStr(ModelTD),'');
                      IBSQL.ParamByName('pNodeTD').AsInteger:= Node.MainCode;
                      IBSQL.ParamByName('pBrandsTD').AsString:= fnArrOfIntToString(arBrandTD);                      
ErrPos:='7';                      
                      
                      IBSQL.ExecQuery; 
                      
                      TDcount:= 0;  
//                      TDcount:= IBSQL.RecordCount;
                      while not IBSQL.EOF do begin
//06                        TDcount:=TDcount+IBSQL.FieldByName('countart').AsInteger;
                        TDcount:=TDcount+IBSQL.FieldByName('RCOUNT').AsInteger;
//                        inc(TDcount);
                        IBSQL.Next;
                      end; 
                      IBSQL.Close;  
                    end;
ErrPos:='8';                    
                    RestAll:= 0;
                    WareTopCount:=0;
                    WareCount:=0;
                    s:='';
                    setLength(arWaresRest,0);
                    setLength(arWaresCount,0);
                    for m:= 0 to length(arModels)-1 do begin
                      Model:=Cache.FDCA.Models.GetModel(arModels[m]);
                      arWare:= Model.GetModelNodeWares(NodeId);
      
                      for i := 0 to length(arWare)-1 do begin
                        Ware:= Cache.GetWare(arWare[i]);
                        if (Ware.WareBrandID=BrandID) {and (Ware.TypeID=WareTypeID)} then begin
                          WareCount:= length(arWaresCount);
                          prAddItemToIntArray(arWare[i],arWaresCount);
            //              inc(WareCount);
                          if (WareCount< length(arWaresCount)) and (Ware.IsTop) then inc(WareTopCount);
                          OList:= cache.GetWareRestsByStores(arWare[i]);
                          try
                            for l:= 0 to OList.Count-1 do 
                              with TCodeAndQty(OList[l]) do 
                                begin
                                  if Qty>0 then prAddItemToIntArray(arWare[i],arWaresRest);
                                  break;
                                end;
                          finally
                            prFree(OList);
                          end;
                        end;
                      end;
                    end; //for m:= 0 to length(arModels)-1  
                    for i := 0 to length(arWaresRest)-1 do begin 
                      OList:= cache.GetWareRestsByStores(arWaresRest[i]);
                      try
                        for l:= 0 to OList.Count-1 do 
                          with TCodeAndQty(OList[l]) do RestAll:=RestAll+ Qty;
                      finally
                        prFree(OList);
                      end;
                    end;
              //Content:= 'Производитель авто;Модельный ряд;Модель;Узел;Тип товара;Бренд;Ассортимент Tec Doc;Ассортимент Gross Bee;В наличии Gross Bee';      
                    Content:= Manuf.Name+';'+ModelLineName+';'+fnIfStr(StrToIntDef(modelStr,-1)=-1,'',''''+ModelName+';')+NodeName+';'+WareTypeName+';'+IntToStr(NodeID)+';'+BrandName+';'+fnIfStr(TDcountNull='',TDcountNull,IntToStr(TDcount))+';'+IntToStr(length(arWaresCount))+';'+IntToStr(length(arWaresRest))+';'+FloatToStr(RestAll)+';'+IntToStr(WareTopCount);
//prMessageLOGS('Content=' +Content , 'import', false) ;
                    if (TDcount>0) or (length(arWaresCount)>0) then begin
                      SLModLineRep.Add(Content);
{010715                      WriteLn(file_csv, Content);
                      inc(iCount);  }
                      if fnInIntArray(Node.MainCode,arMainNode)<0 then begin
                        if length(arMainNode)<=mn then  SetLength(arMainNode,length(arMainNode)+10);
                        arMainNode[mn]:= Node.MainCode;
                        inc(mn);
                      end;
                  
                    end;
{                    Content:='';
                    TDcount:= 0;
                    WareCount:= 0;
                    WareTopCount:=0;
                    RestAll:= 0; }
                  except
                    on E: EStopError do begin ss:= E.Message; raise EStopError.Create(ss); end;
                    on E: EBOBError do begin
                      prMessageLOGS(' ', 'import', false) ;        
                      prMessageLOGS('Процедура '+nmProc+' '+ E.Message, 'import', false) ;
                      //abort;
                    end;
                    on E: Exception do begin
                      prMessageLOGS(' ', 'import', false) ;        
                      prMessageLOGS('Ошибка в процедуре '+nmProc+' '+ E.Message, 'import', false) ; 
                      prMessageLOGS('ErrPos= '+ErrPos, 'import', false) ;       
{                      prMessageLOGS('BrandName= '+BrandName+' BrandId='+ IntToStr(BrandId), 'import', false) ;      
                      prMessageLOGS('NodeName= '+NodeName+' NodeID='+ IntToStr(int)+' TypeID='+ IntToStr(NodeID), 'import', false) ;  
                      prMessageLOGS('ModelLineName= '+ModelLineName+' ModelLineID='+ IntToStr(ModelLineID), 'import', false) ; 
                      prMessageLOGS('ManufName= '+ManufName+' ManufID='+ IntToStr(ManufID), 'import', false) ; 
                      prMessageLOGS('IBSQL.SQL.Text= '+IBSQL.SQL.Text, 'import', false) ;  }
                    end;  
                  end;
                end; //for b 
              end; // Cache.FDCA.AutoTreeNodesSys[constIsAuto].NodeGet(NodeId, Node)   
            end; //for n
            ImpCheck.SetProcessPercent(UserId,ThreadData.ID,PPPercent);
          end; //ni := 0 to length(arNode)-1 do begin
        end; //for iModelLine:= 0 to SLModelLines.Count-1 do begin
      end; // for imanuf:= 0 to SLManufs.Count-1 do begin
    except
      on E: EStopError do begin ss:= E.Message; raise EStopError.Create(ss); end;
      on E: Exception do begin
        prMessageLOGS(' ', 'import', false) ;        
        prMessageLOGS('Ошибка в процедуре II '+nmProc+' '+ E.Message, 'import', false) ; 
{        prMessageLOGS('ErrPos= '+ErrPos, 'import', false) ;       
        prMessageLOGS('BrandName= '+BrandName+' BrandId='+ IntToStr(BrandId), 'import', false) ;      
        prMessageLOGS('NodeName= '+NodeName+' NodeID='+ IntToStr(int)+' TypeID='+ IntToStr(NodeID), 'import', false) ;  
        prMessageLOGS('ModelLineName= '+ModelLineName+' ModelLineID='+ IntToStr(ModelLineID), 'import', false) ; 
        prMessageLOGS('ManufName= '+ManufName+' ManufID='+ IntToStr(ManufID), 'import', false) ; }
      end;
    end;
  finally
    if SLModLineRep.Count>0 then 
        for n := 0 to SLModLineRep.Count-1 do begin
          WriteLn(file_csv, Content);
          inc(iCount);
        end;
    SLModLineRep.Clear;  
    if iCount=0 then begin
prMessageLOGS('iCount=0, ErrPos='+ErrPos, 'import', false) ; 
prMessageLOGS('Content=' +Content , 'import', false) ;   
      s:= MessText(mtkNotFoundDataUse);
        //raise Exception.Create(Title+#10+'  '+s);
      raise EBOBError.Create(Title+#10+'  '+s)
    end;
    Subj:= 'Отчет  '+FormatDateTime(cDateTimeFormatY2S, Now());
    ContentType:= CSVContentType;// for Excel(.csv)
    lstBodyMail:= TStringList.Create;
    if (ss<>'') or (iCount>0) then begin
      lstBodyMail.Add(Title);
      lstBodyMail.Add(' ');
      if ss<>'' then  lstBodyMail.Add(ss);
    end;
    prFreeIBSQL(IBSQL);
    if assigned(IBDatabase) then cntsTDT.SetFreeCnt(IBDatabase, True);
    CloseFile(file_csv);  
    prFree(FilterData);
    if assigned(SLModLineRep) then prFree(SLModLineRep);
    if manufStr<>'' then prFree(SLManufs);
    //if StrToIntDef(modellineStr,-1)<>-1 then 
    prFree(SLModelLines);
    if StrToIntDef(modelStr,-1)<>-1 then prFree(SLModels);
    prFree(OList);
    SetLength(MsgStr, 0);
    SetLength(arBrands,0); 
    SetLength(arNode,0);
    SetLength(arNodeTD,0);
    SetLength(arNodes,0); 
    SetLength(arWareTypes,0); 
    SetLength(arModels,0);
    setLength(arWaresCount,0);
    setLength(arWaresRest,0);
    setLength(arWare,0);
    result:= s;
  end; 
end;
//==============================================================================
function fnRep50(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,     //50
   ContentType:string; ThreadData: TThreadData; filter_data: string): string;
const
 nmProc = 'fnRep_50'; // имя процедуры/функции
var 
    IBDatabase: TIBDatabase;
    IBSQL: TIBSQL;
    FilterData: TStringList;
    DateStart, DateEnd: TDatetime;   
    s, Title: string;   
    Content, PathFile: string;
    file_csv: textfile;    
    iCount: integer;  
//    timer, timerStart: TDateTime;    
    Percent: real;
    MsgStr: tas;
    FirmID, ClientID: integer;
    firmName, firmType, login, Man, doc, UserName: string;
    firma: TFirmInfo;
//    ILMan: TIntegerList;
begin
//timer:= Now;
//timerStart:= Now;
//prMessageLOGS('-----------------Export50.csv--------------------','Log_prg.log' , false);  
  FilterData:=nil;
  s:= '';
  iCount:= 0;
  firmName:= '';
  Man:='';
  FilterData:= TStringList.Create;
  SetLength(MsgStr, 0); 
//  IBDatabase:= nil;
  IBSQL:= nil;
  doc:='';
  try
    FilterData.Text:= filter_data;

    DateStart:= StrToDateTime(FilterData.Values['dop_fromdate']); // получаем DateStart
    DateEnd:= StrToDateTime(FilterData.Values['dop_todate']); // получаем DateStart
//DateStart:= StrToDateTime('12.11.2014');
//DateEnd:= StrToDateTime('13.11.2014');

    IBDatabase:= cntsOrd.GetFreeCnt;
//    if (IBDatabase=nil) then Exit;

    try
      IBSQL:= fnCreateNewIBSQL(IBDatabase,'Query_'+nmProc, -1, tpRead, true);

      if FName='' then begin
        if not GetEmplTmpFilePath(UserID, PathFile, s) then raise EBOBError.Create(s); 
        FName:= PathFile+fnFormRepFileName('50', '.csv', ImpCheck.GetCheckKind(UserID, ThreadData.ID));
      end;
      if FileExists(FName) and not SysUtils.DeleteFile(FName) then begin
        s:= MessText(mtkNotDelPrevFile);
        raise EBOBError.Create(MessText(mtkNotDelPrevFile));
      end;

      AssignFile(file_csv, FName);
      filemode:= fmOpenReadWrite; //назначаем файл
      if FileExists(FName) then Reset(file_csv) else ReWrite(file_csv);
      Append(file_csv);
    //Добавляем шапку:                  
      Title:= 'Запросы по Оригинальным каталогам автопроизводителей за период с '+ FormatDateTime(cDateFormatY4, DateStart)+' по '+FormatDateTime(cDateFormatY4, DateEnd);    

      Content:= Title;    
      WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
      Content:= 'Дата;Наименование контрагента;Логин;Пользователь;МП;Тип клиента;Марка автомобиля;VIN/Frame;№;Наименование;Модель;Двигатель;Дата выпуска;Для региона;КП;Цвет салона;Цвет кузова;'
               +'Категория товара;Узел;Артикул, OEM;Наименование;Остаток на складе по умолчанию;Остаток на видимых складах;Выбрана деталь';
      WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
      Content:= '';
      IBSQL.SQL.Add('SELECT null LSPOLSP, null LSPUPDTIME, null LSPFIRMID, count(LSPUSERID) LSPUSERID, null LMMANUFNAME, null LVFVINORFRAME, null LVFISVIN,');
      IBSQL.SQL.Add('null LVVEHINAME, null LVVEHIMODEL, null LVENGINE, null LVENGINENO, null LVTRANSMIS, null LVVEHIDATE, null LVDESTREGION, null LVFRAMECOLOR, null LVTRIMCOLOR,');
      IBSQL.SQL.Add('null CatName, null NodeName, null  ORNWORIGNUMWARE,null  LNDNAME, null  LSPOQTYDEF, null  LSPOQTYVIS, null  LSPOCLICK');
      IBSQL.SQL.Add('FROM LAXIMOSEARCHPROTOCOL left join LAXIMOVEHICLES on LSPVEHICLE=LVCODE');
      IBSQL.SQL.Add('left join LAXIMOVINANDFRAMES on LSPVINORFRAME= LVFCODE');
      IBSQL.SQL.Add('left join LAXIMONODEDETAILS Categ on LSPCATEGORY=Categ.lndcode');
      IBSQL.SQL.Add('left join LAXIMONODEDETAILS Node on LSPNODE=Node.lndcode');
      IBSQL.SQL.Add('left join LAXIMOSEARCHPROTOCOLON on LSPCODE= LSPOLSP');
      IBSQL.SQL.Add('left join LAXIMONODEDETAILS on  LSPODETAIL=LNDCODE');
      IBSQL.SQL.Add('left join LAXIMOMANUFS on LMCODE= LSPOLAXMANUF');
      IBSQL.SQL.Add('left join ORIGINALNUMWARE on ORNWCODE= LSPOON');
      IBSQL.SQL.Add('where  LSPUPDTIME between :pDateStart and :pDateEnd');
      IBSQL.SQL.Add('union');
      IBSQL.SQL.Add('SELECT LSPOLSP, LSPUPDTIME, LSPFIRMID, LSPUSERID, LMMANUFNAME, LVFVINORFRAME, LVFISVIN,');
      IBSQL.SQL.Add('LVVEHINAME, LVVEHIMODEL, LVENGINE, LVENGINENO, LVTRANSMIS, LVVEHIDATE, LVDESTREGION, LVFRAMECOLOR, LVTRIMCOLOR,');
      IBSQL.SQL.Add('Categ.LNDNAME CatName, Node.LNDNAME NodeName, ORNWORIGNUMWARE,LNDNAME, LSPOQTYDEF, LSPOQTYVIS, LSPOCLICK');
      IBSQL.SQL.Add('FROM LAXIMOSEARCHPROTOCOL left join LAXIMOVEHICLES on LSPVEHICLE=LVCODE');
      IBSQL.SQL.Add('left join LAXIMOVINANDFRAMES on LSPVINORFRAME= LVFCODE');
      IBSQL.SQL.Add('left join LAXIMONODEDETAILS Categ on LSPCATEGORY=Categ.lndcode');
      IBSQL.SQL.Add('left join LAXIMONODEDETAILS Node on LSPNODE=Node.lndcode');
      IBSQL.SQL.Add('left join LAXIMOSEARCHPROTOCOLON on LSPCODE= LSPOLSP');
      IBSQL.SQL.Add('left join LAXIMONODEDETAILS on  LSPODETAIL=LNDCODE');
      IBSQL.SQL.Add('left join LAXIMOMANUFS on LMCODE= LSPOLAXMANUF');
      IBSQL.SQL.Add('left join ORIGINALNUMWARE on ORNWCODE= LSPOON');
      IBSQL.SQL.Add('where  LSPUPDTIME between :pDateStart and :pDateEnd');
//      IBSQL.SQL.Add('order by  3,1');
//      LogIBSQL.SQL.Add('order by  LDLPBEGTIME, LDLPUSERID, LDLPFIRMID');
//      LogIBSQL.SQL.Add('order by  LDLPFIRMID, LDLPUSERID, LDLPBEGTIME');
      
      IBSQL.Prepare;
      IBSQL.ParamByName('pDateStart').AsDate := DateStart;      // Начальная дата
      IBSQL.ParamByName('pDateEnd').AsDate := DateEnd+1;      // Конечная дата

      IBSQL.ExecQuery;
      Percent:= 10;
      ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);
      Percent:= 80;
      if not IBSQL.EOF then begin
        if IBSQL.FieldByName('LSPUSERID').AsInteger>0 then
        Percent:= Percent/IBSQL.FieldByName('LSPUSERID').AsInteger;
        IBSQL.Next;
      end;
      while not IBSQL.EOF do begin  
        try
          prStopProcess( UserID, ThreadData.ID);        
          FirmID:= IBSQL.FieldByName('LSPFIRMID').AsInteger;
          login:= '';
          UserName:='';          
          if Cache.FirmExist(FirmID) then begin
            firma:= Cache.arFirmInfo[FirmID];
            firmName:= firma.Name;    //firma.FirmTypeName
            Man:=firma.GetFirmManagersString([fmpName,fmpShort]);
            firmType:= firma.FirmTypeName;
            ClientID:= IBSQL.FieldByName('LSPUSERID').AsInteger;
            if cache.ClientExist(ClientID) then begin
              login:=Cache.arClientInfo[ClientID].Login;
              UserName:= Cache.arClientInfo[ClientID].Name;
            end;
          end 
          else 
            if cache.EmplExist(IBSQL.FieldByName('LSPUSERID').AsInteger) then begin
              login:=Cache.arEmplInfo[IBSQL.FieldByName('LSPUSERID').AsInteger].ServerLogin;
              UserName:= Cache.arEmplInfo[IBSQL.FieldByName('LSPUSERID').AsInteger].EmplShortName;
              if Cache.arEmplInfo[IBSQL.FieldByName('LSPUSERID').AsInteger].UserRoleExists(10) then 
                firmType:= 'Сотр. отдела по работе с клиенатми';
            end;
          if (doc<>'') and (IBSQL.FieldByName('LSPOLSP').AsString<> doc) then
            WriteLn(file_csv, Content);
//'Дата;Наименование контрагента;МП;Тип клиента;Марка автомобиля;VIN/Frame;№;Наименование;Модель;Двигатель;Дата выпуска;Для региона;КП;Цвет салона;Цвет кузова;'
//+'Категория товара;Узел;Артикул, OEM;Наименование;Остаток на складе по умолчанию;Остаток на видимых складах;Click'; 
          if trim(IBSQL.FieldByName('ORNWORIGNUMWARE').AsString)<>'' then begin
            Content:= FormatDateTime('dd.mm.yyyy hh:nn:ss', StrToDateTime(IBSQL.FieldByName('LSPUPDTIME').AsString))+';'
                    + firmName+';'+login+';'+UserName+';'+Man+';'+firmType+';'+IBSQL.FieldByName('LMMANUFNAME').AsString+';'
                    + fnIfStr(IBSQL.FieldByName('LVFISVIN').AsString='T','VIN',fnIfStr(IBSQL.FieldByName('LVFISVIN').AsString='F','Frame',''))+';'+IBSQL.FieldByName('LVFVINORFRAME').AsString+';'
                    + stringreplace(stringreplace(stringreplace(IBSQL.FieldByName('LVVEHINAME').AsString,'&quot;','"',[rfReplaceAll]),'&lt;','<',[rfReplaceAll]),';',',',[rfReplaceAll])+';'
                    + stringreplace(stringreplace(stringreplace(IBSQL.FieldByName('LVVEHIMODEL').AsString,'&quot;','"',[rfReplaceAll]),'&lt;','<',[rfReplaceAll]),';',',',[rfReplaceAll])+';'
                    + stringreplace(stringreplace(stringreplace(fnIfStr(IBSQL.FieldByName('LVENGINE').AsString='',IBSQL.FieldByName('LVENGINENO').AsString,IBSQL.FieldByName('LVENGINE').AsString),'&quot;','"',[rfReplaceAll]),'&lt;','<',[rfReplaceAll]),';',',',[rfReplaceAll])+';'
                    + stringreplace(stringreplace(stringreplace(IBSQL.FieldByName('LVVEHIDATE').AsString,'&quot;','"',[rfReplaceAll]),'&lt;','<',[rfReplaceAll]),';',',',[rfReplaceAll])+';'+stringreplace(stringreplace(stringreplace(IBSQL.FieldByName('LVDESTREGION').AsString,'&quot;','"',[rfReplaceAll]),'&lt;','<',[rfReplaceAll]),';',',',[rfReplaceAll])+';' 
                    + stringreplace(stringreplace(stringreplace(IBSQL.FieldByName('LVTRANSMIS').AsString,'&quot;','"',[rfReplaceAll]),'&lt;','<',[rfReplaceAll]),';',',',[rfReplaceAll])+';'
                    + stringreplace(stringreplace(stringreplace(IBSQL.FieldByName('LVTRIMCOLOR').AsString,'&quot;','"',[rfReplaceAll]),'&lt;','<',[rfReplaceAll]),';',',',[rfReplaceAll])+';'
                    + stringreplace(stringreplace(stringreplace(IBSQL.FieldByName('LVFRAMECOLOR').AsString,'&quot;','"',[rfReplaceAll]),'&lt;','<',[rfReplaceAll]),';',',',[rfReplaceAll])+';'
                    + stringreplace(stringreplace(stringreplace(IBSQL.FieldByName('CATNAME').AsString,'&quot;','"',[rfReplaceAll]),'&lt;','<',[rfReplaceAll]),';',',',[rfReplaceAll])+';'
                    + stringreplace(stringreplace(stringreplace(IBSQL.FieldByName('NODENAME').AsString,'&quot;','"',[rfReplaceAll]),'&lt;','<',[rfReplaceAll]),';',',',[rfReplaceAll])+';'
                    + IBSQL.FieldByName('LMMANUFNAME').AsString+' '+ IBSQL.FieldByName('ORNWORIGNUMWARE').AsString+';'
                    + StringReplace(IBSQL.FieldByName('LNDNAME').AsString, ';',' ', [rfReplaceAll])+';'
                    + fnIfStr(IBSQL.FieldByName('LSPOQTYDEF').AsString='-1','',IBSQL.FieldByName('LSPOQTYDEF').AsString)+';'+fnIfStr(IBSQL.FieldByName('LSPOQTYVIS').AsString='-1','',IBSQL.FieldByName('LSPOQTYVIS').AsString)+';'
                    + fnIfStr(IBSQL.FieldByName('LSPOCLICK').AsString='F','','+')+';';
            WriteLn(file_csv, Content);
            inc(iCount);
          end;
          Content:='';
          firmName:= '';
          firmType:= '';
          Man:='';
          doc:= IBSQL.FieldByName('LSPOLSP').AsString;
        except
          on E: EStopError do begin
            s:= E.Message;
            raise EStopError.Create(E.Message);
          end;
          on E: Exception do begin
            prMessageLOGS('Ошибка в процедуре '+nmProc+' '+ E.Message, 'import', false) ;
            s:=  'Ошибка при обработке результатов запроса. ';
            raise Exception.Create(Title+#13+s+E.Message);
          end;
        end;
        ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);
        IBSQL.Next;                 
      end;  
    finally      
      IBSQL.Close;
//      ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);

      Subj:= 'Отчет 50 '+FormatDateTime(cDateTimeFormatY2S, Now());
      ContentType:= CSVContentType;// for Excel(.csv)
      lstBodyMail:= TStringList.Create;
      lstBodyMail.Add(Title); 

      prFreeIBSQL(IBSQL);
      if assigned(IBDatabase) then cntsORD.SetFreeCnt(IBDatabase, True);
      CloseFile(file_csv);
      if iCount=0 then begin
        s:= MessText(mtkNotFoundDataUse);
        //raise Exception.Create(Title+#10+'  '+s);
        raise EBOBError.Create(Title+#10+'  '+s)
      end;
    end;
  finally
    
    prFree(FilterData);
    SetLength(MsgStr, 0); 
    result:= s;
  end; 
//prMessageLOGS('Закончили'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;  
    
      //ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);
//prMessageLOGS('Время всего'+': - '+
//        FloatToStr(RoundTo((Now-timerStart)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;  
end;
//==============================================================================
function fnRep49(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,     //49
   ContentType:string; ThreadData: TThreadData; filter_data: string): string;
const
 nmProc = 'fnRep_49'; // имя процедуры/функции
var 
    LogIBDatabase: TIBDatabase;
    LogIBSQL: TIBSQL;
    FilterData, SLContracts: TStringList;
    DateStart, DateEnd: TDatetime;   
    s, Title: string;   
    Content, PathFile: string;
    file_csv: textfile;    
    iCount: integer;  
//    timer, timerStart: TDateTime;    
    Percent: real;
    MsgStr: tas;
    flSUF: boolean;
    Pool: TIBCntsPool;
    n, i, contractID, FirmID, ClientID: integer;
    strFaccName, strFaccParentName, firmName, firmFace, login, Man: string;
    firma: TFirmInfo;
    EmplDprtID,Role, RegionalID:integer; 
    RoleUser: tai;
    ILMan: TIntegerList;
    Contract: TContract;
begin
//timer:= Now;
//timerStart:= Now;
//prMessageLOGS('-----------------Export49.csv--------------------','Log_prg.log' , false);  
  FilterData:=nil;
  s:= '';
  iCount:= 0;
  FilterData:= TStringList.Create;
  SetLength(MsgStr, 0); 
  LogIBSQL:= nil;
  firma:= nil;
  Percent:= 1;
  try
    FilterData.Text:= filter_data;

    DateStart:= StrToDateTime(FilterData.Values['dop_fromdate']); // получаем DateStart
    DateEnd:= StrToDateTime(FilterData.Values['dop_todate']); // получаем DateStart
//DateStart:= StrToDateTime('12.11.2014');
//DateEnd:= StrToDateTime('13.11.2014');

    EmplDprtID:= Cache.arEmplInfo[UserId].EmplDprtID;   
    RoleUser:= Cache.arEmplInfo[UserId].UserRoles;
    Role:= 0;

    for i:= 0 to length(RoleUser)-1 do begin
      if not (RoleUser[i] in [rolRegional, rolSuperRegional]) then begin
        Role:= 99;
        break;
      end;
    end;
    if Role <>99 then begin
      if  fnInIntArray(rolRegional, RoleUser)>-1 then Role:= rolRegional;
      if  fnInIntArray(rolSuperRegional, RoleUser)>-1 then Role:= rolSuperRegional;
    end;
    
    flSUF:= (DateEnd < Date) and cntsSUFLOG.BaseConnected; // если до вчера - берем с суфлера
    if flSUF then Pool:= cntsSufLOG else Pool:= cntsLOG;
    try
      LogIBDatabase:= Pool.GetFreeCnt;
    except
      exit;
    end;

    try
      LogIBSQL:= fnCreateNewIBSQL(LogIBDatabase,'Query_'+nmProc, -1, tpRead, true);

      if FName='' then begin
        if not GetEmplTmpFilePath(UserID, PathFile, s) then raise EBOBError.Create(s); 
        FName:= PathFile+fnFormRepFileName('49', '.csv', ImpCheck.GetCheckKind(UserID, ThreadData.ID));
      end;
      if FileExists(FName) and not SysUtils.DeleteFile(FName) then begin
        s:= MessText(mtkNotDelPrevFile);
        raise EBOBError.Create(MessText(mtkNotDelPrevFile));
      end;

      AssignFile(file_csv, FName);
      filemode:= fmOpenReadWrite; //назначаем файл
      if FileExists(FName) then Reset(file_csv) else ReWrite(file_csv);
      Append(file_csv);
    //Добавляем шапку:                  
      Title:= 'Скачивание прайс-листа за период с '+ FormatDateTime(cDateFormatY4, DateStart)+' по '+FormatDateTime(cDateFormatY4, DateEnd);    

      Content:= Title;    
      WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
      Content:= 'Дата;Код контрагента;Наименование контрагента;Должностное лицо контрагента;Логин пользователя;Код пользователя;Менеджер по продажам;Успешность;ЦФУ';
      WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
      Content:= '';
      LogIBSQL.SQL.Add('SELECT 0 LDLPFIRMID, count(LDLPCODE) as LDLPUSERID, null as LDLPBEGTIME, null as Succes');
      LogIBSQL.SQL.Add('FROM LOGDETAILSLOADPRICE,');
      LogIBSQL.SQL.Add('(select THLGCODE from LOGTHREADS where THLGBEGINTIME between :pDateStart and :pDateEnd and THLGCOMMAND=1064 /*and THLGPARAMS containing "Succes=true"*/)');
      LogIBSQL.SQL.Add('where  LDLPBEGTIME between :pDateStart and :pDateEnd and LDLPCODE= THLGCODE');
      LogIBSQL.SQL.Add('union');
      LogIBSQL.SQL.Add('SELECT LDLPFIRMID, LDLPUSERID, LDLPBEGTIME, Succes');
      LogIBSQL.SQL.Add('FROM LOGDETAILSLOADPRICE,');
      LogIBSQL.SQL.Add('(select THLGCODE, iif (THLGPARAMS containing "Succes=true",1,0) as Succes from LOGTHREADS where THLGBEGINTIME between :pDateStart and :pDateEnd and THLGCOMMAND=1064 /*and THLGPARAMS containing "Succes=true"*/)');
      LogIBSQL.SQL.Add('where  LDLPBEGTIME between :pDateStart and :pDateEnd and LDLPCODE= THLGCODE');
      LogIBSQL.SQL.Add('order by  3,1');
//      LogIBSQL.SQL.Add('order by  LDLPBEGTIME, LDLPUSERID, LDLPFIRMID');
//      LogIBSQL.SQL.Add('order by  LDLPFIRMID, LDLPUSERID, LDLPBEGTIME');
      
      LogIBSQL.Prepare;
      LogIBSQL.ParamByName('pDateStart').AsDate := DateStart;      // Начальная дата
      LogIBSQL.ParamByName('pDateEnd').AsDate := DateEnd+1;      // Конечная дата

      LogIBSQL.ExecQuery;
      Percent:= 10;
      ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);
      Percent:= 80;
      if not LogIBSQL.EOF then begin
        if LogIBSQL.FieldByName('LDLPUSERID').AsInteger>0 then
        Percent:= Percent/LogIBSQL.FieldByName('LDLPUSERID').AsInteger;
        LogIBSQL.Next;
      end;
      while not LogIBSQL.EOF do begin  
        prStopProcess( UserID, ThreadData.ID);
        try
          FirmID:= LogIBSQL.FieldByName('LDLPFIRMID').AsInteger;
          if Cache.FirmExist(FirmID) then begin
            firma:= Cache.arFirmInfo[FirmID];
            firmName:= firma.Name;
            firmFace:=Cache.arClientInfo[firma.SUPERVISOR].Name;
            SLContracts:= firma.GetContracts;
            strFaccName:='';
            strFaccParentName:= '';
            for n:= 0 to SLContracts.Count-1 do begin
              contractID:= integer(SLContracts.Objects[n]);
              Contract:= firma.GetContract(contractID);
              if (pos(Contract.FaccName,strFaccName)=0) and (Contract.FaccName<>'') then
                strFaccName:= strFaccName+fnIfStr(strFaccName='','',', ')+Contract.FaccName;
              if (pos(Contract.FaccParentName,strFaccParentName)=0) and (Contract.FaccParentName<>'') then
                strFaccParentName:= strFaccParentName+fnIfStr(strFaccParentName='','',', ')+Contract.FaccParentName;
            end;
            prFree(SLContracts);
//            end;
//            Content:=IntToStr(i)+';'+IntToStr(j)+';'+firmName+';'+firmMan+';'+strFaccName+';'+strFaccParentName;
          end; 
          ClientID:= LogIBSQL.FieldByName('LDLPUSERID').AsInteger;
          if cache.ClientExist(ClientID) then 
            login:=Cache.arClientInfo[ClientID].Login
          else login:=''; 

          if role=99 then begin
            Man:=firma.GetFirmManagersString([fmpName,fmpShort]);
          end
          else if Cache.FirmExist(FirmID) then begin
            ILMan:= Cache.arFirmInfo[firmID].FirmManagers;
            if (Role = rolRegional) and (ILMan.IndexOf(UserID)>-1)  then begin

              RegionalID:= UserID;
              if Cache.EmplExist(RegionalID) then Man:= Cache.arEmplInfo[RegionalID].EmplShortName
              else Man:= 'Менеджер не определен';  
            end;
            if Role = rolSuperRegional  then begin     
              for i := 0 to ILMan.Count-1 do 
                if EmplDprtID=Cache.arEmplInfo[ILMan[i]].EmplDprtID then 
                  Man:= Man+fnIfStr(Man='','',',')+ Cache.arEmplInfo[ILMan[i]].EmplShortName;
            end;
          end;
          Content:= FormatDateTime('dd.mm.yyyy hh:nn:ss', StrToDateTime(LogIBSQL.FieldByName('LDLPBEGTIME').AsString))+';'+IntToStr(FirmID)+';'+ firmName+';'+firmFace
                  +';'+login+';' +IntToStr(ClientID)+';' +Man+';' +fnIfStr(LogIBSQL.FieldByName('Succes').AsInteger=1,'Успешно','')+';'+strFaccName; 
(*          if Role = rolRegional  then
            if (Cache.arFirmInfo[LogIBSQL.FieldByName('rFIRMID').AsInteger].Regional=UserID) then begin 
              WriteLn(file_csv, Content);
              inc(iCount);                  
            end;
          if Role = rolSuperRegional  then
            // 121213 if (EmplDprtID=Cache.arFirmInfo[LogIBSQL.FieldByName('rFIRMID').AsInteger].FilialID) then begin 
            if (EmplDprtID=Cache.arEmplInfo[RegionalID].EmplDprtID) then begin

              WriteLn(file_csv, Content);
              inc(iCount);                  
            end;
          if Role = 99 then  begin
             WriteLn(file_csv, Content);
             inc(iCount);                  
           end;   *) 
          if (Man<>'') or (Role=99) then  begin
            WriteLn(file_csv, Content);
            inc(icount);            
          end;
          Content:='';
          firmName:='';
          firmFace:='';
          Man:='';
        except
          on E: EStopError do begin
            s:= E.Message;
            raise EStopError.Create(E.Message);
          end;
          on E: Exception do begin
            prMessageLOGS('Ошибка в процедуре '+nmProc+' '+ E.Message, 'import', false) ;
            s:=  'Ошибка при обработке результатов запроса. ';
            raise Exception.Create(Title+#13+s+E.Message);
          end;
        end;
        ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);
        LogIBSQL.Next;                 
      end;  
    finally      
      LogIBSQL.Close;
      ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);
      if iCount=0 then begin
        s:= MessText(mtkNotFoundDataUse);
        //raise Exception.Create(Title+#10+'  '+s);
        raise EBOBError.Create(Title+#10+'  '+s)
      end;
      Subj:= 'Отчет 49 '+FormatDateTime(cDateTimeFormatY2S, Now());
      ContentType:= CSVContentType;// for Excel(.csv)
      lstBodyMail:= TStringList.Create;
      lstBodyMail.Add(Title); 

      prFreeIBSQL(LogIBSQL);
      if Pool<>nil then Pool.SetFreeCnt(LogIBDatabase, True);
      CloseFile(file_csv);  
    end;
  finally
    prFree(FilterData);
    prFree(SLContracts);
    SetLength(MsgStr, 0); 
    result:= s;
  end; 
//prMessageLOGS('Закончили'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;  
    
      //ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);
//prMessageLOGS('Время всего'+': - '+
//        FloatToStr(RoundTo((Now-timerStart)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;  
end; 


//==============================================================================
function fnPriLoadCount(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,     //30_6
   ContentType:string; ThreadData: TThreadData; filter_data: string): string;
const
 nmProc = 'fnPriLoadCount_30_6'; // имя процедуры/функции
var 
    LogIBDatabase: TIBDatabase;
    LogIBSQL: TIBSQL;
    FilterData, SLContracts: TStringList;
    DateStart: TDatetime;   
    s, Title: string;   
    Content, PathFile: string;
    file_csv: textfile;    
    iCount: integer;  
//                     timer, timerStart: TDateTime;    
//    Percent: real;
    MsgStr: tas;
    flSUF: boolean;
    Pool: TIBCntsPool;
    int, n: integer;
//    row, IP, UserIP, DateIP, login: string;
    FirmID, contractID: integer;
    firmName, firmMan, strFaccName, strFaccParentName: string;
    firma: TFirmInfo;
    Contract: TContract;
begin
//timer:= Now;
//timerStart:= Now;
//prMessageLOGS('-----------------Export30_6.csv--------------------','Log_prg.log' , false);  
  FilterData:=nil;
  s:= '';
  iCount:= 0;
  FilterData:= TStringList.Create;
  SetLength(MsgStr, 0); 
  LogIBSQL:= nil;

  try
    FilterData.Text:= filter_data;
    Int:= StrToIntDef(FilterData.Values['dop_qty'],-1);// максимальное допустимое кол-во 
    if Int=-1 then raise EBOBError.Create('Укажите правильно количество.');
    DateStart:= StrToDateTime(FilterData.Values['dop_fromdate']); // получаем DateStart
//DateStart:= StrToDateTime('08.01.2015'); 
//int:= 10;
    
    flSUF:= (DateStart < Date) and cntsSUFLOG.BaseConnected; // если до вчера - берем с суфлера
    if flSUF then Pool:= cntsSufLOG else Pool:= cntsLOG;
    try
      LogIBDatabase:= Pool.GetFreeCnt;
    except
      exit;
    end;

    try
      LogIBSQL:= fnCreateNewIBSQL(LogIBDatabase,'Query_'+nmProc, -1, tpRead, true);

      if FName='' then begin
        if not GetEmplTmpFilePath(UserID, PathFile, s) then raise EBOBError.Create(s); 
        FName:= PathFile+fnFormRepFileName('30_6', '.csv', ImpCheck.GetCheckKind(UserID, ThreadData.ID));
      end;
      if FileExists(FName) and not SysUtils.DeleteFile(FName) then begin
        s:= MessText(mtkNotDelPrevFile);
        raise EBOBError.Create(MessText(mtkNotDelPrevFile));
      end;

      AssignFile(file_csv, FName);
      filemode:= fmOpenReadWrite; //назначаем файл
      if FileExists(FName) then Reset(file_csv) else ReWrite(file_csv);
      Append(file_csv);
    //Добавляем шапку:                  
      Title:= 'Превышение количества скачивания прайс-листа ('+IntToStr(int)+') за '+ FormatDateTime(cDateFormatY4, DateStart);

      Content:= Title;    
      WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
      Content:= 'Код контрагента;Наименование контрагента;Кол-во загрузок;Менеджер клиента;ЦФУ';
      WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
      Content:= '';
(*      LogIBSQL.SQL.Add('SELECT LUCFIRMID, sum(LUCLOADPRICE) CountLoad');
      LogIBSQL.SQL.Add('FROM LOGUSERCOUNTS');
      LogIBSQL.SQL.Add('where LUCDATE between :pDateStart and :pDateEnd and LUCLOADPRICE>0');
      LogIBSQL.SQL.Add('group by LUCFIRMID');
      LogIBSQL.SQL.Add('having sum(LUCLOADPRICE)>:pCountLoad');                       
      LogIBSQL.SQL.Add('order by LUCFIRMID'); *)
      LogIBSQL.SQL.Add('SELECT THLGFIRMID LUCFIRMID, count(THLGCODE) CountLoad');
      LogIBSQL.SQL.Add('from LOGTHREADS');
      LogIBSQL.SQL.Add('where THLGBEGINTIME between :pDateStart and :pDateEnd and THLGCOMMAND=1064 and THLGPARAMS containing "Succes=true"');
      LogIBSQL.SQL.Add('group by THLGFIRMID');
      LogIBSQL.SQL.Add('having count(THLGCODE)> :pCountLoad');
      LogIBSQL.SQL.Add('order by THLGFIRMID');
      
      LogIBSQL.Prepare;
      LogIBSQL.ParamByName('pDateStart').AsDate := DateStart;      // Начальная дата
      LogIBSQL.ParamByName('pDateEnd').AsDate := DateStart+1;      // Конечная дата
      LogIBSQL.ParamByName('pCountLoad').AsInteger:= int;
      LogIBSQL.ExecQuery;
      while not LogIBSQL.EOF do begin  
        prStopProcess( UserID, ThreadData.ID);
        try
          FirmID:= LogIBSQL.FieldByName('LUCFIRMID').AsInteger;
          if Cache.FirmExist(FirmID) then begin
            firma:= Cache.arFirmInfo[FirmID];
            firmName:= firma.Name;
            firmMan:= firma.GetFirmManagersString([fmpName,fmpShort]);
            SLContracts:= firma.GetContracts;
            strFaccName:='';
            strFaccParentName:= '';
            for n:= 0 to SLContracts.Count-1 do begin
              contractID:= integer(SLContracts.Objects[n]);
              Contract:= firma.GetContract(contractID);
              if (pos(Contract.FaccName,strFaccName)=0) and (Contract.FaccName<>'') then
                strFaccName:= strFaccName+fnIfStr(strFaccName='','',', ')+Contract.FaccName;
              if (pos(Contract.FaccParentName,strFaccParentName)=0) and (Contract.FaccParentName<>'') then
                strFaccParentName:= strFaccParentName+fnIfStr(strFaccParentName='','',', ')+Contract.FaccParentName;
            end;
            prFree(SLContracts);
//            end;
//            Content:=IntToStr(i)+';'+IntToStr(j)+';'+firmName+';'+firmMan+';'+strFaccName+';'+strFaccParentName;
          end; 
          Content:= IntToStr(FirmID)+';'+ firmName+';'+LogIBSQL.FieldByName('CountLoad').AsString+';'+firmMan+';'+strFaccName; 
          WriteLn(file_csv, Content);
          Content:='';
          firmName:='';
          firmMan:='';
          inc(icount);
        except
          on E: Exception do begin
            prMessageLOGS('Ошибка в процедуре '+nmProc+' '+ E.Message, 'import', false) ;
            s:=  'Ошибка при обработке результатов запроса. ';
            raise Exception.Create(Title+#13+s+E.Message);
          end;
        end;
        LogIBSQL.Next;                 
      end;  
      LogIBSQL.Close;
      
      if iCount=0 then begin
        s:= MessText(mtkNotFoundDataUse);
        //raise Exception.Create(Title+#10+'  '+s);
        raise EBOBError.Create(Title+#10+'  '+s)
      end;
      Subj:= 'Отчет 30_6 '+FormatDateTime(cDateTimeFormatY2S, Now());
      ContentType:= CSVContentType;// for Excel(.csv)
      lstBodyMail:= TStringList.Create;
      lstBodyMail.Add(Title);  
    finally
      prFreeIBSQL(LogIBSQL);
      if Pool<>nil then Pool.SetFreeCnt(LogIBDatabase, True);
      CloseFile(file_csv);  
    end;
  finally
    prFree(FilterData);
    prFree(SLContracts);
    SetLength(MsgStr, 0); 
    result:= s;
  end; 
//prMessageLOGS('Закончили'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;  
    
      //ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);
//prMessageLOGS('Время всего'+': - '+
//        FloatToStr(RoundTo((Now-timerStart)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;  
end; 

//==============================================================================
function fnConnectIP(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,     //30_5
   ContentType:string; ThreadData: TThreadData; filter_data: string): string;
const
 nmProc = 'fnConnectIP_30_5'; // имя процедуры/функции
var 
    LogIBDatabase: TIBDatabase;
    LogIBSQL: TIBSQL;
    FilterData: TStringList;
    DateStartIP, DateStart: TDatetime;   
    s, Title: string;   
    Content, PathFile: string;
    file_csv: textfile;    
    iCount: integer;  
//                     timer, timerStart: TDateTime;    
    Percent: real;
    MsgStr: tas;
    flSUF: boolean;
    Pool: TIBCntsPool;
    n, int, CountConn, countU, ncont: integer;
    row, IP, UserIP, DateIP, login, strFaccName, strFaccParentName: string;
    i, FirmID, ClientID, ContractID: integer;
    ILFirmClasses: TIntegerList;
    SLRep, SLRow, SLIns, SLContracts: TStringList;
    firmName, firmMan: string;
    firma: TFirmInfo;
    Contract: TContract;
begin
//timer:= Now;
//timerStart:= Now;
//prMessageLOGS('-----------------Export30_5.csv--------------------','Log_prg.log' , false);  
  ILFirmClasses:= nil;
  FilterData:=nil;
  s:= '';
  iCount:= 0;
  ClientID:= 0;
  FilterData:= TStringList.Create;
  SetLength(MsgStr, 0); 
  LogIBSQL:= nil;
  SLRep:= TStringList.Create;
  SLRow:= TStringList.Create;
  SLIns:= TStringList.Create;
  try
    FilterData.Text:= filter_data;
    Int:= StrToIntDef(FilterData.Values['dop_qty'],-1);// максимальное допустимое кол-во 
    if Int=-1 then raise EBOBError.Create('Укажите правильно количество.');
    DateStart:= StrToDateTime(FilterData.Values['dop_fromdate']); // получаем DateStart
//DateStart:= StrToDateTime('23.10.2014');
//int:= 10;
    
    flSUF:= (DateStart < Date) and cntsSUFLOG.BaseConnected; // если до вчера - берем с суфлера
    if flSUF then Pool:= cntsSufLOG else Pool:= cntsLOG;
    try
      LogIBDatabase:= Pool.GetFreeCnt;
    except
      exit;
    end;

    try
      LogIBSQL:= fnCreateNewIBSQL(LogIBDatabase,'Query_'+nmProc, -1, tpRead, true);

      if FName='' then begin
        if not GetEmplTmpFilePath(UserID, PathFile, s) then raise EBOBError.Create(s); 
        FName:= PathFile+fnFormRepFileName('30_5', '.csv', ImpCheck.GetCheckKind(UserID, ThreadData.ID));
      end;
      if FileExists(FName) and not SysUtils.DeleteFile(FName) then begin
        s:= MessText(mtkNotDelPrevFile);
        raise EBOBError.Create(MessText(mtkNotDelPrevFile));
      end;

      AssignFile(file_csv, FName);
      filemode:= fmOpenReadWrite; //назначаем файл
      if FileExists(FName) then Reset(file_csv) else ReWrite(file_csv);
      Append(file_csv);
    //Добавляем шапку:                  
      Title:= 'Превышение количества обращений ('+IntToStr(int)+') по IP за '+ FormatDateTime(cDateFormatY4, DateStart);

      Content:= Title;    
      WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
      Content:= 'IP;Код контрагента;Наименование контрагента;Код пользователя;Логин пользователя;Кол-во обращений;Менеджер клиента;ЦФУ';
      WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
      Content:= '';
//prMessageLOGS('Приготовились'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;      
      Percent:= 3; 
          
      ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);    //шапка добавлена  
      LogIBSQL:= fnCreateNewIBSQL(LogIBDatabase,'SQL_'+nmProc, -1, tpRead, true);
      LogIBSQL.SQL.Add('SELECT THLGFIRMID, THLGUSERID, IPLUIP, THLGTYPE, count(THLGCODE) CountConn');
      LogIBSQL.SQL.Add('FROM LOGTHREADS left join  IPLOGUSERS on IPLUCODE=THLGUSERIP');
      LogIBSQL.SQL.Add('where THLGBEGINTIME between :pDateStart and :pDateEnd and not THLGUSERIP is null /*and not THLGFIRMID is null*/');
      LogIBSQL.SQL.Add('group by THLGUSERID, THLGFIRMID, THLGTYPE, IPLUIP');
      LogIBSQL.SQL.Add('order by IPLUIP, THLGFIRMID, THLGUSERID');
      
      LogIBSQL.Prepare;
      LogIBSQL.ParamByName('pDateStart').AsDate := DateStart;      // Начальная дата
      LogIBSQL.ParamByName('pDateEnd').AsDate := DateStart+1;      // Конечная дата
      LogIBSQL.ExecQuery;      
   
      i:=0;   
      while not LogIBSQL.EOF do begin  
        prStopProcess( UserID, ThreadData.ID);
        try
          row:= LogIBSQL.FieldByName('THLGFIRMID').AsString+';' +LogIBSQL.FieldByName('THLGUSERID').AsString+';'+LogIBSQL.FieldByName('CountConn').AsString+';'+LogIBSQL.FieldByName('IPLUIP').AsString;
          SLRep.AddObject(fnIfStr(LogIBSQL.FieldByName('THLGUSERID').AsString<>'', LogIBSQL.FieldByName('IPLUIP').AsString+' ',LogIBSQL.FieldByName('IPLUIP').AsString), TStringList.Create);
          SLRow := TStringList(SLRep.Objects[i]);
          SLRow.Add(LogIBSQL.FieldByName('THLGFIRMID').AsString);
          SLRow.Add(LogIBSQL.FieldByName('THLGUSERID').AsString);
          SLRow.Add(LogIBSQL.FieldByName('CountConn').AsString);
          SLRow.Add(LogIBSQL.FieldByName('THLGTYPE').AsString);
          inc(i);
        except
          on E: Exception do begin
            prMessageLOGS('Ошибка в процедуре '+nmProc+' '+ E.Message, 'import', false) ;
            s:=  'Ошибка при обработке результатов запроса. ';
            raise Exception.Create(Title+#13+s+E.Message);
          end;
        end;
        LogIBSQL.Next;                 
      end;  
      LogIBSQL.Close;
(*      Percent:= 10;   
      ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);
      LogIBSQL.SQL.Clear;
      LogIBSQL.SQL.Add('SELECT THLGFIRMID, THLGUSERID, IPLUIP, count(THLGCODE) CountConn');
      LogIBSQL.SQL.Add('FROM LOGTHREADS left join  IPLOGUSERS on IPLUCODE=THLGUSERIP');
      LogIBSQL.SQL.Add('where THLGBEGINTIME between :pDateStart and :pDateEnd and not THLGUSERIP is null and THLGFIRMID is null');
      LogIBSQL.SQL.Add('group by THLGUSERID, THLGFIRMID, IPLUIP');
      LogIBSQL.SQL.Add('order by IPLUIP');
      
      LogIBSQL.Prepare;
      LogIBSQL.ParamByName('pDateStart').AsDate := DateStart;      // Начальная дата
      LogIBSQL.ParamByName('pDateEnd').AsDate := DateStart+1;      // Конечная дата
      LogIBSQL.ExecQuery;
      while not LogIBSQL.EOF do begin  
        prStopProcess( UserID, ThreadData.ID);
        try
          IP:= LogIBSQL.FieldByName('IPLUIP').AsString;
          CountConn:= LogIBSQL.FieldByName('CountConn').AsInteger;
          
          if SLRep.IndexOf(IP+' ')>-1 then begin
            n:= SLRep.IndexOf(IP+' ');
            SLRep.InsertObject(n, IP, TStringList.Create);//SLIns);
            SLRow := TStringList(SLRep.Objects[n]);
            SLRow.Add(LogIBSQL.FieldByName('THLGFIRMID').AsString);
            SLRow.Add(LogIBSQL.FieldByName('THLGUSERID').AsString);
            SLRow.Add(IntToStr(CountConn));
            SLRow.Add(LogIBSQL.FieldByName('IPLUIP').AsString);

          end
          else begin
            SLRep.AddObject(IP, TStringList.Create);
            SLRow := TStringList(SLRep.Objects[SLRep.Count-1]);
            SLRow.Add(LogIBSQL.FieldByName('THLGFIRMID').AsString);
            SLRow.Add(LogIBSQL.FieldByName('THLGUSERID').AsString);
            SLRow.Add(LogIBSQL.FieldByName('CountConn').AsString);
            SLRow.Add(LogIBSQL.FieldByName('IPLUIP').AsString);
          end;
          
        except
          on E: Exception do begin
            prMessageLOGS('Ошибка в процедуре '+nmProc+' '+ E.Message, 'import', false) ;
            s:=  'Ошибка при обработке результатов запроса. ';
            raise Exception.Create(Title+#13+s+E.Message);
          end;
        end;
        LogIBSQL.Next;                 
      end;
      LogIBSQL.Close;  *)
      Percent:= 10;   
      ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);      
      SLRep.Sort;      
      IP:= '';
      CountConn:= 0;
      LogIBSQL.SQL.Clear;
      LogIBSQL.SQL.Add('SELECT first 1 THLGFIRMID, THLGUSERID, IPLUIP, THLGBEGINTIME, THLGTYPE');
      LogIBSQL.SQL.Add('FROM LOGTHREADS left join  IPLOGUSERS on IPLUCODE=THLGUSERIP');
      LogIBSQL.SQL.Add('where not THLGUSERID is null and THLGBEGINTIME <= :pDateStart and IPLUIP= :pIP'); 
      LogIBSQL.SQL.Add('and not THLGUSERID in (0)');
      LogIBSQL.SQL.Add('order by THLGBEGINTIME desc');  
      Percent:= 70;   
      if SLRep.Count-1>0 then Percent:= Percent/(SLRep.Count-1) else ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);          
      for i := 0 to SLRep.Count-1 do begin
        if (IP<>'') and (IP<>trim(SLRep[i])) then  begin
          if CountConn>int then begin
            for n := 0 to SLIns.count-1 do begin
              WriteLn(file_csv, SLIns[n]);
              inc(icount);
            end;
            if (SLIns.count=1) and (ClientID=0) then begin
              countU:=0;
              LogIBSQL.ParamByName('pIP').AsString:= IP;
              UserIP:= '';
              DateIP:= '';
              row:='';
              DateStartIP:= DateStart;
              LogIBSQL.SQL[3]:=('and not THLGUSERID in (0)');
  //            LogIBSQL.Prepare;
              while countU<3 do begin
                if LogIBSQL.Open then  LogIBSQL.Close;
                if UserIP<>'' then begin
                  LogIBSQL.SQL[3]:=('and not THLGUSERID in ('+row+UserIP+')');
                  row:= row+UserIP+',';
                end;
                if DateIP<>'' then
                  DateStartIP:= StrToDateTime(DateIP);
  //              DateStartIP:= DateStartIP-1;
  //              if DateStartIP<DateStart-30 then break;
                LogIBSQL.ParamByName('pDateStart').AsDate := DateStartIP;      // Начальная дата
                LogIBSQL.ParamByName('pIP').AsString:= IP;
                LogIBSQL.Prepare;
                LogIBSQL.ExecQuery;
                if LogIBSQL.FieldByName('THLGUSERID').AsInteger<>0 then begin
                  UserIP:= trim(LogIBSQL.FieldByName('THLGUSERID').AsString);
                  DateIP:= LogIBSQL.FieldByName('THLGBEGINTIME').AsString;
                  if Cache.FirmExist(LogIBSQL.FieldByName('THLGFIRMID').AsInteger) then begin
                    firma:= Cache.arFirmInfo[LogIBSQL.FieldByName('THLGFIRMID').AsInteger];
                    firmName:= firma.Name;
                    firmMan:= firma.GetFirmManagersString([fmpName,fmpShort]);
                    SLContracts:= firma.GetContracts;
                    strFaccName:='';
                    strFaccParentName:= '';
                    for ncont:= 0 to SLContracts.Count-1 do begin
                      contractID:= integer(SLContracts.Objects[ncont]);
                      Contract:= firma.GetContract(contractID);
                      if (pos(Contract.FaccName,strFaccName)=0) and (Contract.FaccName<>'') then
                        strFaccName:= strFaccName+fnIfStr(strFaccName='','',', ')+Contract.FaccName;
                      if (pos(Contract.FaccParentName,strFaccParentName)=0) and (Contract.FaccParentName<>'') then
                        strFaccParentName:= strFaccParentName+fnIfStr(strFaccParentName='','',', ')+Contract.FaccParentName;
                    end;
                    prFree(SLContracts);
//            end;
//            Content:=IntToStr(i)+';'+IntToStr(j)+';'+firmName+';'+firmMan+';'+strFaccName+';'+strFaccParentName;
                  end;
                  if StrToIntDef(SLRow[3],0)=4 then
                    if Cache.ClientExist(ClientID) then login:= Cache.arClientInfo[ClientID].Login
                    else login:= '';
                  if StrToIntDef(SLRow[3],0)=12 then begin
                    if Cache.EmplExist(ClientID) then login:= Cache.arEmplInfo[ClientID].EmplShortName
                    else login:='THLGTYPE=12';
                    strFaccName:='';
                    strFaccParentName:='';
                  end;
(*                  if Cache.ClientExist(StrToInt(UserIP)) then login:= Cache.arClientInfo[StrToInt(UserIP)].Login
                  else if Cache.EmplExist(StrToInt(UserIP)) then login:= Cache.arEmplInfo[StrToInt(UserIP)].EmplShortName
                  else login:='';*)
                  Content:='----' +';'+fnIfStr(LogIBSQL.FieldByName('THLGFIRMID').AsString='0','',LogIBSQL.FieldByName('THLGFIRMID').AsString)+';'+firmName+';'
                                      + fnIfStr(LogIBSQL.FieldByName('THLGUSERID').AsString='0','',LogIBSQL.FieldByName('THLGUSERID').AsString)+';'+login+';'+ LogIBSQL.FieldByName('THLGBEGINTIME').AsString+';'+ firmMan
                                      +';'+strFaccName;
                  WriteLn(file_csv, Content); 
                  Content:='';
                  firmName:='';
                  firmMan:= '';
                  login:='';
                end
                else begin 
                  LogIBSQL.Close;
                  break;
                end;
                LogIBSQL.Close;
                inc(countU);
              end;
            end;
            inc(icount);
            Content:= Content+'Итого по IP '+IP +';;;;;'+ IntTOStr(CountConn);
            WriteLn(file_csv, Content);
            Content:='';
            WriteLn(file_csv, Content);
            WriteLn(file_csv, Content);
          end;
          CountConn:= 0;
          Content:='';
          SLIns.Clear;
        end;

        SLRow:= TStringList(SLRep.Objects[i]);
        Content:= SLRep[i]+';';

        IP:= trim(SLRep[i]);
        ClientID:= StrToIntDef(SLRow[1],0);
        FirmID:= StrToIntDef(SLRow[0],0);
        CountConn:= CountConn+ StrToIntDef(SLRow[2],0);
        if Cache.FirmExist(FirmID) then begin
          firma:= Cache.arFirmInfo[FirmID];
          firmName:= firma.Name;
          firmMan:= firma.GetFirmManagersString([fmpName,fmpShort]);
          SLContracts:= firma.GetContracts;
          strFaccName:='';
          strFaccParentName:= '';
          for ncont:= 0 to SLContracts.Count-1 do begin
            contractID:= integer(SLContracts.Objects[ncont]);
            Contract:= firma.GetContract(contractID);
            if (pos(Contract.FaccName,strFaccName)=0) and (Contract.FaccName<>'') then
              strFaccName:= strFaccName+fnIfStr(strFaccName='','',', ')+Contract.FaccName;
            if (pos(Contract.FaccParentName,strFaccParentName)=0) and (Contract.FaccParentName<>'') then
              strFaccParentName:= strFaccParentName+fnIfStr(strFaccParentName='','',', ')+Contract.FaccParentName;
          end;
          prFree(SLContracts);
        end;
        if StrToIntDef(SLRow[3],0)=4 then
          if Cache.ClientExist(ClientID) then login:= Cache.arClientInfo[ClientID].Login
          else login:= '';
        if StrToIntDef(SLRow[3],0)=12 then begin
          if Cache.EmplExist(ClientID) then login:= Cache.arEmplInfo[ClientID].EmplShortName
          else login:='THLGTYPE=12';
          strFaccName:='';
          strFaccParentName:='';
        end;
        
(*        if Cache.ClientExist(ClientID) then login:= Cache.arClientInfo[ClientID].Login
        else if Cache.EmplExist(ClientID) then login:= Cache.arEmplInfo[ClientID].EmplShortName
        else login:='';   *)
        Content:= Content+ fnIfStr(FirmID=0,'',IntToStr(FirmID))+';'+firmName+';'+ fnIfStr(ClientID=0,'',IntToStr(ClientID))+';'+login+';'+SLRow[2]+';'+firmMan
                +';'+strFaccName;   
        SLIns.Add(Content);
        //WriteLn(file_csv, Content); 
        Content:='';
        firmName:='';
        firmMan:='';
        login:='';
        strFaccName:='';
        strFaccParentName:='';
        ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);          
      end;
//prMessageLOGS('Заполнили'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;        
//      Percent:= 50;     
//      ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);      

      if iCount=0 then begin
        s:= MessText(mtkNotFoundDataUse);
        //raise Exception.Create(Title+#10+'  '+s);
        raise EBOBError.Create(Title+#10+'  '+s)
      end;
      Subj:= 'Отчет 30_5 '+FormatDateTime(cDateTimeFormatY2S, Now());
      ContentType:= CSVContentType;// for Excel(.csv)
      lstBodyMail:= TStringList.Create;
      lstBodyMail.Add(Title);  
    finally
      prFreeIBSQL(LogIBSQL);
      if Pool<>nil then Pool.SetFreeCnt(LogIBDatabase, True);
      CloseFile(file_csv);  
      for i := 0 to SLRep.Count - 1 do begin
        SLRow := TStringList(SLRep.Objects[i]);
        SlRow.Free;
      end;
      prFree(SLRep);
    end;
  finally
    prFree(FilterData);
    prFree(SLContracts);
    SetLength(MsgStr, 0); 
    result:= s;
  end; 
//prMessageLOGS('Закончили'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;  
    
      //ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);
//prMessageLOGS('Время всего'+': - '+
//        FloatToStr(RoundTo((Now-timerStart)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;  
end; 
//==============================================================================
function fnRepNotific48(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,
   ContentType:string; ThreadData: TThreadData; filter_data: string): string;
const
 nmProc = 'fnConnectCountUser'; // имя процедуры/функции
var 
    OrdIBDatabase: TIBDatabase;
    OrdIBSQL: TIBSQL;
    FilterData: TStringList;
    DateStart, DateEnd: TDatetime;   
    s, Title: string;   
    Content, PathFile: string;
    file_csv: textfile;
    iCount: integer;  
//    timer, timerStart: TDateTime;    
    Percent: real;
    MsgStr: tas;
    i, FirmFaceID, FirmID: integer;
    ILFirmClasses: TIntegerList;
    FirmClasses: string;
    firma: TFirmInfo;       
begin
//timer:= Now;
//timerStart:= Now;
//prMessageLOGS('-----------------Export48.csv--------------------','Log_prg.log' , false);  
//  ILFirmClasses:= nil;
  FilterData:=nil;
  s:= '';
  iCount:= 0;
  FilterData:= TStringList.Create;
  SetLength(MsgStr, 0); 
  OrdIBSQL:= nil;
//  ILFirmClasses:= TIntegerList.Create;
  try
    FilterData.Text:= filter_data;
    DateStart:= StrToDateTime(FilterData.Values['dop_fromdate']); // получаем DateStart
    DateEnd:= StrToDateTime(FilterData.Values['dop_todate']); // получаем DateStart
    OrdIBDatabase:= cntsOrd.GetFreeCnt;

//    if (OrdIBDatabase=nil) then Exit;

    try
      OrdIBSQL:= fnCreateNewIBSQL(OrdIBDatabase,'Query_'+nmProc, -1, tpRead, true);

      if FName='' then begin
        if not GetEmplTmpFilePath(UserID, PathFile, s) then raise EBOBError.Create(s); 
        FName:= PathFile+fnFormRepFileName('48_', '.csv', ImpCheck.GetCheckKind(UserID, ThreadData.ID));
      end;
      if FileExists(FName) and not SysUtils.DeleteFile(FName) then begin
        s:= MessText(mtkNotDelPrevFile);
        raise EBOBError.Create(MessText(mtkNotDelPrevFile));
      end;

      AssignFile(file_csv, FName);
      filemode:= fmOpenReadWrite; //назначаем файл
      if FileExists(FName) then Reset(file_csv) else ReWrite(file_csv);
      Append(file_csv);
    //Добавляем шапку:                  
      Title:= 'С уведомлением ознакомились в период с '+ FormatDateTime(cDateFormatY4, DateStart)+' по '+ FormatDateTime(cDateFormatY4, DateEnd);

      Content:= Title;    
      WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
//      Content:= 'Дата;Должностное лицо контрагента;Наименование к/а;Филиал к/а;Тип к/а;Категория к/а;Система учета(авто/мото);Текстовое сообщение';
      Content:= 'Дата;Должностное лицо контрагента;Наименование к/а;Филиал к/а;Тип к/а;Категория к/а;Текстовое сообщение';
      WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
      Content:= '';
//prMessageLOGS('Приготовились'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;      
      Percent:= 3;     
      ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);    //шапка добавлена  
      OrdIBSQL:= fnCreateNewIBSQL(OrdIBDatabase,'SQL_'+nmProc, -1, tpRead, true);
      OrdIBSQL.SQL.Add('SELECT NOTETEXT, WOFRSUPERVISOR, WOCLFIRMCODE, NOCLVIEWTIME');
      OrdIBSQL.SQL.Add('FROM NOTIFIEDCLIENTS left join  NOTIFICATIONS on NOTECODE= NOCLNOTE');
      OrdIBSQL.SQL.Add('left join WEBORDERCLIENTS on WOCLCODE= NOCLCLIENT');
      OrdIBSQL.SQL.Add('left join WEBORDERFIRMS on WOFRCODE= WOCLFIRMCODE');
      OrdIBSQL.SQL.Add('where (NOCLVIEWTIME between :pDateBegin and :pDateEnd)');
      OrdIBSQL.SQL.Add('order by NOCLVIEWTIME');
      
      OrdIBSQL.Prepare;
      OrdIBSQL.ParamByName('pDateBegin').AsDate := DateStart;      // Начальная дата
      OrdIBSQL.ParamByName('pDateEnd').AsDate := DateEnd+1;      // Конечная дата
      OrdIBSQL.ExecQuery;      
//      Percent:= 30;   
      ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);      
      while not OrdIBSQL.EOF do begin  
        prStopProcess( UserID, ThreadData.ID);
        try
          FirmFaceID:= OrdIBSQL.FieldByName('WOFRSUPERVISOR').AsInteger;
          FirmID:= OrdIBSQL.FieldByName('WOCLFIRMCODE').AsInteger;
          firma:= Cache.arFirmInfo[FirmID];                         
          ILFirmClasses:= firma.FirmClasses;
//          ILFirmClasses:= Cache.arFirmInfo[FirmID].FirmClasses; 
          FirmClasses:='';
          for i := 0 to ILFirmClasses.Count-1 do begin
            FirmClasses:= FirmClasses+fnIfStr(length(FirmClasses)>0,',','')+Cache.GetFirmClassName(ILFirmClasses[i]);
          end;
          if length(FirmClasses)>0 then FirmClasses:= FirmClasses+',';

          Content:= OrdIBSQL.FieldByName('NOCLVIEWTIME').AsString+';'+ Cache.arClientInfo[FirmFaceID].Name+';'
                  + firma.Name+';'+Cache.arDprtInfo[firma.GetDefContract.Filial].ShortName+';'             
                  + firma.FirmTypeName+';'+ FirmClasses +';'                                               
//                  + fnIfStr(firma.CheckSysType(constIsAUTO), 'AUTO', 'MOTO')+';'
(*                  + Cache.arFirmInfo[FirmID].Name+';'+Cache.arDprtInfo[Cache.arFirmInfo[FirmID].FilialID].ShortName+';'
                  + Cache.arFirmInfo[FirmID].FirmTypeName+';'+ FirmClasses +';'
                  + fnIfStr(Cache.arFirmInfo[FirmID].IsAUTOFirm,'AUTO','MOTO')+';'   *)
                  + OrdIBSQL.FieldByName('NOTETEXT').AsString; 
          WriteLn(file_csv, Content); 
          inc(iCount);
          Content:=''
        except
          on E: EStopError do begin
            s:= E.Message;
            raise EStopError.Create(E.Message);
          end;
          on E: Exception do begin
            prMessageLOGS('Ошибка в процедуре '+nmProc+' '+ E.Message, 'import', false) ;
            s:=  'Ошибка при обработке результатов запроса. ';
            raise Exception.Create(Title+#13+s+E.Message);
          end;
        end;
        OrdIBSQL.Next;                 
      end;  
      OrdIBSQL.Close;
    finally      
(*      if SLAll.Count>0 then begin
        Content:= 'с '+Format('%.2d', [Hour])+':'+Format('%.2d', [Minute])+' по '+Format('%.2d', [Hour])+':'+Format('%.2d', [Minute+Int-1])+';'
                      + IntToStr(SLWeb.Count)+';'+ IntToStr(SLWebArm.Count)+';'+ IntToStr(SLVlad.Count)+';'+ IntToStr(SLAll.Count)+';';
        WriteLn(file_csv, Content); 
        Content:='';      
      end;              *)
//prMessageLOGS('Заполнили'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;        
      Percent:= 50;     
      ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);      

      if iCount=0 then begin
        s:= MessText(mtkNotFoundDataUse);
        //raise Exception.Create(Title+#10+'  '+s);
        raise EBOBError.Create(Title+#10+'  '+s)
      end;
      Subj:= 'Отчет 48 '+FormatDateTime(cDateTimeFormatY2S, Now());
      ContentType:= CSVContentType;// for Excel(.csv)
      lstBodyMail:= TStringList.Create;
      lstBodyMail.Add(Title);  

      prFreeIBSQL(OrdIBSQL);
      cntsOrd.SetFreeCnt(OrdIBDatabase, True);
      CloseFile(file_csv);  
    end;
  finally
    prFree(FilterData);
//    prFree(ILFirmClasses);
    SetLength(MsgStr, 0); 
    result:= s;
  end; 
//prMessageLOGS('Закончили'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;  
    
      //ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);
//prMessageLOGS('Время всего'+': - '+
//        FloatToStr(RoundTo((Now-timerStart)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;  
end; 
//==============================================================================
function fnConnectCountUser(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,
   ContentType:string; ThreadData: TThreadData; filter_data: string): string;
const
 nmProc = 'fnConnectCountUser'; // имя процедуры/функции
var 
    LogIBDatabase: TIBDatabase;
    LogIBSQL: TIBSQL;
    FilterData: TStringList;
    DateStart: TDatetime;   
    s, Title: string;   
    Content, PathFile: string;
    file_csv: textfile;    
    iCount: integer;  
//    timer, timerStart: TDateTime;    
    Percent: real;
    MsgStr: tas;
    Pool: TIBCntsPool;
    flSUF: boolean;
    SLAll,SLWeb,SLWebArm,SLVlad: TStringList; 
    Int,HOUR,MINUTE: integer;    
begin
//timer:= Now;
//timerStart:= Now;
//prMessageLOGS('-----------------Export43.csv--------------------','Log_prg.log' , false);  
  SLAll:=nil;
  SLWeb:=nil;
  SLWebArm:=nil;
  SLVlad:=nil;  
  FilterData:=nil;
  s:= '';
  iCount:= 0;
  FilterData:= TStringList.Create;
  SetLength(MsgStr, 0); 
  LogIBSQL:= nil;
  HOUR:=0;
  MINUTE:=0;
  try
    FilterData.Text:= filter_data;
    Int:= StrToInt(FilterData.Values['dop_qty']);// максимальное допустимое кол-во 
//    GroupFirst := StrToInt(FilterData.Values['dop_groupby']);
    DateStart:= StrToDateTime(FilterData.Values['dop_fromdate']); // получаем DateStart
    flSUF:= (DateStart < Date) and cntsSUFLOG.BaseConnected; // если до вчера - берем с суфлера
    if flSUF then Pool:= cntsSufLOG else Pool:= cntsLOG;
    try
      LogIBDatabase:= Pool.GetFreeCnt;
    except
      exit;
    end;

    try
      LogIBSQL:= fnCreateNewIBSQL(LogIBDatabase,'Query_'+nmProc, -1, tpRead, true);

      if FName='' then begin
        if not GetEmplTmpFilePath(UserID, PathFile, s) then raise EBOBError.Create(s); 
        FName:= PathFile+fnFormRepFileName('43_', '.csv', ImpCheck.GetCheckKind(UserID, ThreadData.ID));
      end;
      if FileExists(FName) and not SysUtils.DeleteFile(FName) then begin
        s:= MessText(mtkNotDelPrevFile);
        raise EBOBError.Create(MessText(mtkNotDelPrevFile));
      end;

      AssignFile(file_csv, FName);
      filemode:= fmOpenReadWrite; //назначаем файл
      if FileExists(FName) then Reset(file_csv) else ReWrite(file_csv);
      Append(file_csv);
    //Добавляем шапку:                  
      Title:= 'Количество пользователей, обратившихся к базе за '+ FormatDateTime(cDateFormatY4, DateStart)
              +' (интервал '+IntToStr(Int)+' мин.)';    

      Content:= Title;    
      WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
      Content:= 'Интервал времени;Web;WebArm;Vlad;Итого';
      WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
      Content:= '';
//prMessageLOGS('Приготовились'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;      
      Percent:= 3;     
      ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);    //шапка добавлена  
      LogIBSQL:= fnCreateNewIBSQL(LogIBDatabase,'SQL_'+nmProc, -1, tpRead, true);

      SLAll:=fnCreateStringList(True,dupIgnore);
      SLWeb:=fnCreateStringList(True,dupIgnore);
      SLWebArm:=fnCreateStringList(True,dupIgnore);
      SLVlad:=fnCreateStringList(True,dupIgnore);

      LogIBSQL.SQL.Add('SELECT EXTRACT (HOUR FROM THLGBEGINTIME) DHOUR, EXTRACT (minute FROM THLGBEGINTIME) Dminute,');
      LogIBSQL.SQL.Add('THLGTYPE, THLGUSERID');
      LogIBSQL.SQL.Add('FROM LOGTHREADS');  
      LogIBSQL.SQL.Add('where   THLGBEGINTIME between :pDateStart and :pDateStart+1  and  THLGTYPE in (4,12,9) and not THLGUSERID is null');
      LogIBSQL.SQL.Add('group by EXTRACT (HOUR FROM THLGBEGINTIME),EXTRACT (minute FROM THLGBEGINTIME),THLGTYPE, THLGUSERID'); 
{
      LogIBSQL.SQL.Add('SELECT THLGTYPE, THLGUSERID');
      LogIBSQL.SQL.Add('FROM LOGTHREADS');
      LogIBSQL.SQL.Add('where   THLGBEGINTIME between :pDateStart and :pDateStart+1  and  THLGTYPE in (4,12,9) and not THLGUSERID is null');
      LogIBSQL.SQL.Add('and EXTRACT (HOUR FROM THLGBEGINTIME)=:pHOUR and EXTRACT (minute FROM THLGBEGINTIME) between :pMINUTE and :pMINUTE+:pInt');
      LogIBSQL.SQL.Add('group by THLGTYPE, THLGUSERID');
}    
      LogIBSQL.Prepare;
      LogIBSQL.ParamByName('pDateStart').AsDate := DateStart;      // Начальная дата
//      LogIBSQL.ParamByName('pInt').AsInteger := Int;      // interval

//    while true do begin
//if Hour>=24 then break;   

//      LogIBSQL.ParamByName('pHour').AsInteger := Hour;
//      LogIBSQL.ParamByName('pMinute').AsInteger := Minute;
      LogIBSQL.ExecQuery;      


//      Percent:= 30;   
      ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);      
      while not LogIBSQL.EOF do begin  
        prStopProcess( UserID, ThreadData.ID);
        try
          if (LogIBSQL.FieldByName('DMINUTE').AsInteger>=Minute+int) or (LogIBSQL.FieldByName('DHOUR').AsInteger<>HOUR) then begin
            if SLAll.Count>0 then begin 
              Content:= 'с '+Format('%.2d', [Hour])+':'+Format('%.2d', [Minute])+' по '+Format('%.2d', [Hour])+':'+Format('%.2d', [Minute+Int-1])+';'
                            + IntToStr(SLWeb.Count)+';'+ IntToStr(SLWebArm.Count)+';'+ IntToStr(SLVlad.Count)+';'+ IntToStr(SLAll.Count)+';';
              WriteLn(file_csv, Content); 
              Content:='';
              inc(iCount);
              SLAll.Clear;
              SLWeb.Clear;
              SLWebArm.Clear;
              SLVlad.Clear;
              Minute:=Minute+Int;
              if Minute>=60 then begin
                Minute:=0;
                Hour:=Hour+1;
              end;
            end;
            if LogIBSQL.FieldByName('DHour').AsInteger>Hour then begin 
              Hour:=  LogIBSQL.FieldByName('DHour').AsInteger;
              Minute:= 0;          
            end;
            while (LogIBSQL.FieldByName('DMINUTE').AsInteger>=minute+int) {or (LogIBSQL.FieldByName('DMINUTE').AsInteger>0 and LogIBSQL.FieldByName('DMINUTE').AsInteger< int and LogIBSQL.FieldByName('DMINUTE').AsInteger+60>minute+int)} do begin
              Minute:=Minute+Int;
              if Minute>=60 then begin
                Minute:=0;
                Hour:=Hour+1;
              end;
            end;

          end;

            SLAll.Add(LogIBSQL.FieldByName('THLGUSERID').AsString);
            if LogIBSQL.FieldByName('THLGTYPE').AsInteger=4 then SLWeb.Add(LogIBSQL.FieldByName('THLGUSERID').AsString);
            if LogIBSQL.FieldByName('THLGTYPE').AsInteger=12 then SLWebArm.Add(LogIBSQL.FieldByName('THLGUSERID').AsString);
            if LogIBSQL.FieldByName('THLGTYPE').AsInteger=9 then SLVlad.Add(LogIBSQL.FieldByName('THLGUSERID').AsString);
        except
          on E: EStopError do begin
            s:= E.Message;
            raise EStopError.Create(E.Message);
          end;
          on E: Exception do begin
            prMessageLOGS('Ошибка в процедуре '+nmProc+' '+ E.Message, 'import', false) ;
            s:=  'Ошибка при обработке результатов запроса. ';
            raise Exception.Create(Title+#13+s+E.Message);
          end;
        end;
        
        LogIBSQL.Next;                 
      end;  
    finally
      LogIBSQL.Close;
      if SLAll.Count>0 then begin
        Content:= 'с '+Format('%.2d', [Hour])+':'+Format('%.2d', [Minute])+' по '+Format('%.2d', [Hour])+':'+Format('%.2d', [Minute+Int-1])+';'
                      + IntToStr(SLWeb.Count)+';'+ IntToStr(SLWebArm.Count)+';'+ IntToStr(SLVlad.Count)+';'+ IntToStr(SLAll.Count)+';';
        WriteLn(file_csv, Content); 
        Content:='';      
      end;
//prMessageLOGS('Заполнили'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;        
      Percent:= 50;     
      ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);      
      Title:= 'Количество пользователей, обратившихся к базе за '+ FormatDateTime(cDateFormatY4, DateStart)
              +' (интервал '+IntToStr(Int)+' мин.)';
      if iCount=0 then begin
        s:= MessText(mtkNotFoundDataUse);
        //raise Exception.Create(Title+#10+'  '+s);
        raise EBOBError.Create(Title+#10+'  '+s)
      end;
      Subj:= 'Отчет 43 '+FormatDateTime(cDateTimeFormatY2S, Now());
      ContentType:= CSVContentType;// for Excel(.csv)
      lstBodyMail:= TStringList.Create;
      lstBodyMail.Add(Title); 
      lstBodyMail.Add(' ');
(*      lstBodyMail.Add('Начало выполнения: '+FormatDateTime(cDateTimeFormatTSnD, timerStart));
      lstBodyMail.Add('Завершение выполнения: '+ FormatDateTime(cDateTimeFormatTSnD,Now));
      lstBodyMail.Add('Общее время выполнения: '+ FormatDateTime('hh:nn:ss',Now-timerStart));      *) 
    
      prFreeIBSQL(LogIBSQL);
      if Pool<>nil then Pool.SetFreeCnt(LogIBDatabase, True);
      CloseFile(file_csv);  
    end;
  finally
    prFree(FilterData);
    prFree(SLAll);
    prFree(SLWeb);
    prFree(SLWebArm);
    prFree(SLVlad);
    SetLength(MsgStr, 0); 
    result:= s;
  end; 
//prMessageLOGS('Закончили'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;  
    
      //ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);
//prMessageLOGS('Время всего'+': - '+
//        FloatToStr(RoundTo((Now-timerStart)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;  
end; 
//==============================================================================
procedure prImportSATELLITES(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,    //импорт 41
   ContentType:string; ThreadData: TThreadData);
const  nmProc='prImport'   ;
var XL: TExcelApplication;
    WorkBook: Excel_TLB._Workbook;
    WorkSheet: Excel_TLB._Worksheet;
    isGreenCell: integer;
    isWarningCell: integer;
    isErrorCell: integer;
    isHeaderCell: integer;
    usedRng: Range;   
    ErrMsg: array of TStringList;
    LogStr: Tas;
//    MsgStr: string;
    WareID, CrossID: integer;
    beg, i, j, k, n, ErrCount: integer; 
    rows, cols, irow, {icol, }recs: integer;
    SheetCount, SheetID: integer;
    SheetName: string;
    param, ss, s, FNameI, WareName, AName: string;
    ManWaresList, AWaresList: TStringList;
    LinkAdd, LinkDel, LinkWrong, ResCode: integer;
    ErrPos: integer;    
    Percent, PPercent: real;
begin
 isGreenCell := cHexToInt(cnGreenCell);
 isHeaderCell := cHexToInt(cnHeaderCell);
 isWarningCell:= cHexToInt(cnYellowCell);
 isErrorCell:= cHEXtoINT(cnRedCell);
 LinkAdd:= 0;
 LinkDel:= 0;
 LinkWrong:= 0;
 ErrCount:=0;
 ss:='';
 WareID:= -1;
  try   //1
    ManWaresList:= Cache.GetSysManagerWares(0, UserID);
    AWaresList:= Cache.GetSysManagerWares();
    if ManWaresList.Count<1 then raise EBOBError.Create('У менеджера '+Cache.arEmplInfo[UserID].EmplShortName+' нет товаров'); 
    prStopProcess( UserID, ThreadData.ID);
//    TestCssStopException; 
ErrPos:= 1;    
try    
    XL:= TExcelApplication.Create(nil);
    WorkBook:= nil;
//--== Инициализируем работу экземпляра Excel
    CoInitializeEx(nil, COINIT_MULTITHREADED);
    XL.ConnectKind:= ckNewInstance;
    XL.Connect;
    XL.Visible[lcid]:= False;
    //XL.AutoQuit:= False;
    XL.ScreenUpdating[lcid]:=False;
    XL.DisplayAlerts[lcid]:= False;
    XL.Calculation[lcid] := xlManual;
//    XL.AlertBeforeOverwriting[lcid]:= false;
 // отменяем автоматическую проверку ошибок в ячейках
    with XL.ErrorCheckingOptions do begin
      BackgroundChecking := False;
      NumberAsText := False;
      InconsistentFormula := False;
    end;
    prStopProcess( UserID, ThreadData.ID);
    //TestCssStopException; 
    if copy(FName, length(FName)-5+1,5)='.xlsx' then
      prAutoFilterXLSX(FName);
 // открываем импортируемый файл
    if Assigned(XL) and (not Assigned(WorkBook)) then begin
//      prStopProcess( UserID, ThreadData.ID);
      //TestCssStopException;
      WorkBook := XL.Workbooks.Open (FName,     // 1// const Filename: WideString;
                                     0,              // 2// UpdateLinks: OleVariant;
                                     false,          // 3// ReadOnly: OleVariant;
                                     EmptyParam,     // 4// Format: OleVariant;
                                     EmptyParam,     // 5// Password: OleVariant;
                                     EmptyParam,     // 6// WriteResPassword: OleVariant;
                                     true,           // 7// IgnoreReadOnlyRecommended: OleVariant;
                                     EmptyParam,     // 8// Origin: OleVariant;
                                     5,              // 9// Delimiter: OleVariant;
                                     False,          //10// Editable: OleVariant;
                                     false,          //11// Notify: OleVariant;
                                     EmptyParam,     //12// Converter: OleVariant;
                                     EmptyParam,     //13// Local: OleVariant;
                                     EmptyParam,     //14// CorruptLoad: OleVariant;
                                     false,          //15// AddToMru: OleVariant;
                                     lcid);          //16// lcid: Integer): Workbook; safecall;
//ErrPos:=2; 
Percent:= 10;
ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);                                     
      try

        SetLength(ErrMsg,0);
        SetLength(LogStr,0);
        lstBodyMail:= TStringList.Create;
        SheetCount:= WorkBook.Worksheets.Count; //количество листов excel
        SetLength(ErrMsg, SheetCount);
        SheetID:= 1;
        Percent:= 10;
        if SheetCount>0 then  Percent:= Percent/SheetCount;
        while SheetID <= SheetCount do begin
          ErrMsg[SheetID-1]:= TStringList.Create;        
          WorkSheet:= WorkBook.Sheets.Item[SheetID] as Excel_TLB._Worksheet;
          SheetName:= AnsiUpperCase(WorkSheet.Name);
          ImpCheck.SetComment( UserID, ThreadData.ID, SheetName); 
//          prStopProcess( UserID, ThreadData.ID);
          //TestCssStopException;        
          //перевод указателя на последнюю используемую ячейку листа
          usedRng:= WorkSheet.Range['A1', EmptyParam].SpecialCells(xlCellTypeLastCell,EmptyParam);
          rows:= usedRng.Row;   
          if rows>0 then PPercent:= Percent/rows;
          cols:= usedRng.Column;
          if cols<2 then begin
            //raise EBOBError.Create('Не указаны аналоги.Проверьте файл для импорта аналогов.');
            ErrMsg[SheetID-1].AddObject('Ошибка '#9+'Лист '+IntToStr(SheetID)+'. Не указаны товары.'+#9+SheetName+{#9+MsgStr+}#9+'A1',
                                         pointer(-15*100000-cols));
            WorkSheet.Range['A1', EmptyParam].Interior.Color:= isErrorCell;
            inc(ErrCount);
            inc(SheetID);
          end
          else if rows>0 then begin 
//ErrPos:=3;          
            Percent:= 80;
            for irow:= 1 to rows do begin                                         // по строкам**************
//              prStopProcess( UserID, ThreadData.ID);
              beg:= 0;
              usedRng:= WorkSheet.Range[IntToABC(beg)+IntToStr(irow), EmptyParam];
              param:= trim(uppercase(fnOleXLCellReader(VarToStr(usedRng.Value2))));
              if (param='УДАЛИТЬ') or (param='') then beg:= 1;
              
              usedRng:= WorkSheet.Range[IntToABC(beg)+IntToStr(irow), EmptyParam];
              AName:= fnOleXLCellReader(VarToStr(usedRng.Value2));
              AName:= StringReplace(AName, cWebSpace, ' ', [rfReplaceAll]);
              AName:= ConvertKod(AName,#160,#32);
              if AName<>'' then begin
              //поверяем правильность наименования и принадлежности товара
                k:= ManWaresList.IndexOf(AName);//ManWaresList.IndexOf(WareName);
                if k > -1 then begin
                  CrossID:= integer(ManWaresList.Objects[k]);
                  if Cache.arWareInfo[CrossID].IsWare then 
                    if Cache.arWareInfo[CrossID].IsINFOgr then begin
                      ErrMsg[SheetID-1].AddObject('Ошибка '#9+'Сопутствующий товар "'+AName+'" - это товар из инфо-группы.'+#9+SheetName+{#9+MsgStr+}#9+'A'+IntToStr(irow),
                                             pointer(-13*100000-irow));
                      WorkSheet.Range[IntToABC(beg)+IntToStr(irow), EmptyParam].Interior.Color:= isErrorCell;
                      inc(ErrCount);
                    end else begin
                      if cols-beg>0 then PPercent:= Percent/(cols-beg) else ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);
                      for j:= beg+1 to cols-1 do begin
                        prStopProcess( UserID, ThreadData.ID);
                        usedRng:= WorkSheet.Range[IntToABC(j)+IntToStr(irow), EmptyParam];
                        WareName:= fnOleXLCellReader(VarToStr(usedRng.Value2));
                        WareName:= StringReplace(WareName, cWebSpace, ' ', [rfReplaceAll]);
                        WareName:= ConvertKod(WareName,#160,#32);
                        if (WareName<>'') then begin
                          if (WareName = AName) then begin
                            ErrMsg[SheetID-1].AddObject('Ошибка '#9+'Сопутствующий товар "'+AName+'" Товар и сопутствующий товар  совпадают.'+#9+SheetName+{#9+MsgStr+}#9+IntToABC(j)+IntToStr(irow),
                                             pointer(-13*100000-irow));
                            WorkSheet.Range[IntToABC(j)+IntToStr(irow), EmptyParam].Interior.Color:= isErrorCell;
                            inc(ErrCount);
                          end
                          else begin
                            n:= AWaresList.IndexOf(WareName);
                            if n > -1 then  begin
                              WareID:= integer(AWaresList.Objects[n]);
                              if Cache.arWareInfo[WareID].IsWare then
                                begin
                                     
  //CheckWareSatelliteLink(pWareID, pSatelID: Integer;   // добавить/удалить линк товара с сопут.товаром (Excel, вручную)
  //             var ResCode: Integer; srcID: Integer=0; UserID: Integer=0): String;  
  //                                usedRng:= WorkSheet.Range['A'+IntToStr(irow), EmptyParam];
  //                                strResCode:= UpperCase(fnOleXLCellReader(VarToStr(usedRng.Value2)));
                                  ResCode:= fnIfInt(param='УДАЛИТЬ',resDeleted,resAdded);
                                  s:=Cache.CheckWareSatelliteLink(WareID, CrossID, ResCode, soExcel,UserID);
  //ErrPos:=4;                                
                                  Case ResCode of
                                    resError: begin
                                        ErrMsg[SheetID-1].AddObject('Ошибка '#9+'Сопутствующий товар "'+AName+'" не удалось  '+
                                          'добавить в связку к товару "'+WareName+'" '#10+s+#9+SheetName+#9+IntToABC(j)+IntToStr(irow),
                                          pointer(-9*100000-irow));
                                        WorkSheet.Range[IntToABC(j)+IntToStr(irow), EmptyParam].Interior.Color:= isErrorCell;
                                        inc(ErrCount);
                                        end;
                                    resDoNothing: begin
                                        ErrMsg[SheetID-1].AddObject('Внимание'#9+
                                          'Операция была выполнена ранее' +' '#10+s+#9+
                                        SheetName+#9+IntToABC(j)+IntToStr(irow), pointer(-11*100000-irow));
                                        //inc(NotEditLink2Count);
                                        WorkSheet.Range[IntToABC(j)+IntToStr(irow), EmptyParam].Interior.Color:= isGreenCell;
                                        end;
                                    resAdded: begin
                                        inc(LinkAdd);
                                        WorkSheet.Range[IntToABC(j)+IntToStr(irow), EmptyParam].Interior.Color:= isGreenCell;
                                        end;  //resAdded
                                    resDeleted: begin
                                        inc(LinkDel);
                                        WorkSheet.Range[IntToABC(j)+IntToStr(irow), EmptyParam].Interior.Color:= isGreenCell;
                                        end;  //resAdded    
                                  end;
                                end
                              else begin
                               ErrMsg[SheetID-1].AddObject('Ошибка '#9+'"'+WareName+'" не указан как товар.'+#9+SheetName+{#9+MsgStr+}#9+IntToABC(j)+IntToStr(irow),
                                               pointer(-13*100000-irow));
                                  WorkSheet.Range[IntToABC(j)+IntToStr(irow), EmptyParam].Interior.Color:= isErrorCell;
                                  inc(ErrCount);
                              end; 
                            end
                            else begin
                              ErrMsg[SheetID-1].AddObject('Ошибка '#9+'В списке товаров наименование"'+WareName+'" не обнаружено.'+#9+SheetName+{#9+MsgStr+}#9+'B'+IntToStr(irow),
                                  pointer(-3*100000-irow));
                              WorkSheet.Range[IntToABC(j)+IntToStr(irow), EmptyParam].Interior.Color:= isErrorCell;
                              inc(ErrCount);
                            end;
                          end; //else (WareName = AName)
                        end;
                        ImpCheck.SetProcessPercent(UserId,ThreadData.ID,PPercent);
                      end;
                    end
                  else begin
                    ErrMsg[SheetID-1].AddObject('Ошибка '#9+'Сопутствующий товар "'+AName+'" не указан как товар.'+#9+SheetName+{#9+MsgStr+}#9+IntToABC(beg)+IntToStr(irow),
                                 pointer(-13*100000-irow));
                    WorkSheet.Range[IntToABC(beg)+IntToStr(irow), EmptyParam].Interior.Color:= isErrorCell;
                    inc(ErrCount);
                  end;
                end
                else begin
                  ErrMsg[SheetID-1].AddObject('Ошибка '#9+'В списке Ваших товаров наименование"'+AName+'" не обнаружено.'+#9+SheetName+{#9+MsgStr+}#9+IntToABC(beg)+IntToStr(irow),
                                          pointer(-5*100000-irow));
                  WorkSheet.Range[IntToABC(beg)+IntToStr(irow), EmptyParam].Interior.Color:= isErrorCell;
                  inc(ErrCount);
                end;
              end;   
//              ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);           
            end;
            ErrMsg[SheetID-1].AddObject('ИТОГО'#9+'Добавлено сопутствующих товаров: '+IntToStr(LinkAdd)+#9+SheetName+#9+'A1', pointer(1*100000+2));
            ErrMsg[SheetID-1].AddObject('ИТОГО'#9+'Удалено сопутствующих товаров: '+IntToStr(LinkDel)+#9+SheetName+#9+'A1', pointer(1*100000+2));
            //ErrMsg[SheetID-1].AddObject('ИТОГО'#9+'из них ошибочных: '+IntToStr(LinkWrong)+#9+SheetName+#9+'A1', pointer(1*100000+1));            
            lstBodyMail.Add('Добавлено сопутствующих товаров: '+IntToStr(LinkAdd));
            lstBodyMail.Add('Удалено сопутствующих товаров: '+IntToStr(LinkDel));
            //lstBodyMail.Add('из них ошибочных: '+IntToStr(LinkWrong));
            inc(SheetID);// переходим к следующему листу документа
          end 
          else
            inc(SheetID);
        end;
      except  //2
        on E: EStopError do ss:= E.Message;
        on E: Exception do begin
          prMessageLOGS(' '+nmProc+': '+E.Message+ 'ErrPos='+IntToStr(ErrPos), 'Import', false);
        end;  
      end; //except
    end; //if Assigned(XL) and (not Assigned(WorkBook)) then begin
    //Отправка письма
except  
  on E: EStopError do ss:= E.Message;
  on E: Exception do begin
    prMessageLOGS(' '+nmProc+': '+E.Message+ 'ErrPos='+IntToStr(ErrPos), 'Import', false);
  end;  
end; //except 
  finally        
        // Добавим один новый лист после 
//ErrPos:=5;   
        XL.ActiveWorkbook.Sheets.Add(EmptyParam, WorkBook.Sheets.Item[WorkBook.Sheets.Count], 1, xlWorksheet, lcid);
        WorkSheet:= WorkBook.Sheets.Item[WorkBook.Sheets.Count] as Excel_TLB._Worksheet;
        WorkSheet.Name:= 'Импорт от'+FormatDateTime(' dd.mm hh_nn ',Now);
    
        recs:= 1;
      //-=создаем шапку для лога импорта

        WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= 'Статус  сообщения';
        WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= 'Лист';
        WorkSheet.Range['C'+IntToStr(recs), EmptyParam].Value2:= '   Ячейка   ';
        WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= 'Сообщение';
        usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
        usedRng.EntireRow.RowHeight:= usedRng.EntireRow.RowHeight*2;
        usedRng.Interior.Color:= isHeaderCell;
        usedRng.Font.Color:= cHEXtoINT(cnHeaderText);
        usedRng.Font.Bold:= True;
        usedRng.HorizontalAlignment:= xlCenter;
        usedRng.VerticalAlignment:= xlCenter;
        usedRng.Borders.Color:= cHEXtoINT(cnHeaderBorder);
        usedRng.BorderAround(xlContinuous, xlHairLine, xlColorIndexAutomatic, EmptyParam, EmptyParam);
        XL.ActiveWindow.SplitRow:= 1;
        XL.ActiveWindow.FreezePanes := True;
//        prStopProcess( UserID, ThreadData.ID);
        //TestCssStopException; 
    //=-шапка создана
        inc(recs);
        //Percent:= 30;      
        //if High(ErrMsg)>-1 then Percent:= Percent/(High(ErrMsg)+1) else ImpCheck.SetProcessPercent( UserID, ThreadData.ID, Percent);
//ErrPos:=6;
        for j := 0 to High(ErrMsg) do begin
          ErrMsg[j].CustomSort(@SizeCustomSort);
          rows:= ErrMsg[j].Count;
          //if rows> 0 then PPercent:= Percent/(rows) else ImpCheck.SetProcessPercent( UserID, ThreadData.ID, Percent);
          for i := 0 to rows-1 do begin
//           prStopProcess( UserID, ThreadData.ID);
           //TestCssStopException;
          //  ErrMsg[j][i]:=IntToStr(j)+'|'+IntToStr(integer(ErrMsg[j].Objects[i]))+'|'+ErrMsg[j][i];
  //          LogStr:= SplitString(ErrMsg[j].Strings[i]);
            LogStr:= fnSplitStringChar(ErrMsg[j].Strings[i]);   
            ResCode:= trunc((integer(ErrMsg[j].Objects[i]))/100000);
            Case ResCode of
              -15..-14: begin
                WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                usedRng:= WorkSheet.Range['C'+IntToStr(recs),EmptyParam];
                usedRng.Value2:= LogStr[3];
                WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam, EmptyParam,
                  EmptyParam);
                WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
                usedRng.Interior.Color:= isErrorCell;
              end;            
              -13..-12: begin
                WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                usedRng:= WorkSheet.Range['C'+IntToStr(recs),EmptyParam];
                usedRng.Value2:= LogStr[3];
                WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam, EmptyParam,
                  EmptyParam);
                WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
                usedRng.Interior.Color:= isErrorCell;
              end;            
              -11..-10: begin
                WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                usedRng:= WorkSheet.Range['C'+IntToStr(recs),EmptyParam];
                usedRng.Value2:= LogStr[3];
                WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam, EmptyParam,
                  EmptyParam);
                WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
                usedRng.Interior.Color:= isWarningCell;
              end;
              -9..-6: begin
                WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                usedRng:= WorkSheet.Range['C'+IntToStr(recs),EmptyParam];
                usedRng.Value2:= LogStr[3];
                WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam,EmptyParam,
                  EmptyParam);
                WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
                usedRng.Interior.Color:= isErrorCell;
              end;
              -5..-4: begin
                WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                usedRng:= WorkSheet.Range['C'+IntToStr(recs),EmptyParam];
                usedRng.Value2:= LogStr[3];
                WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam,EmptyParam,
                  EmptyParam);
                WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
                usedRng.Interior.Color:= isErrorCell;
              end;              
              -3..-1: begin
                WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                usedRng:= WorkSheet.Range['C'+IntToStr(recs),EmptyParam];
                usedRng.Value2:= LogStr[3];
                WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam,EmptyParam,
                  EmptyParam);
                WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
                usedRng.Interior.Color:= isErrorCell;
              end;              
              1..2: begin
                WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                usedRng:= WorkSheet.Range['B'+IntToStr(recs), EmptyParam];
                usedRng.Value2:= LogStr[2];      //Excel.ActiveSheet.Hyperlinks.Add(Excel.ActiveWorkBook.WorkSheets[1].Cells[k,1],Excel.ActiveWorkBook.WorkSheets[1].Cells[k,1]);
                WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam,EmptyParam,
                  EmptyParam);
                WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
                usedRng.Interior.Color:= isGreenCell;
              end;
            end;
            inc (recs);
            //ImpCheck.SetProcessPercent( UserID, ThreadData.ID, PPercent);
          end;  //i

        end; //j

        usedRng:= WorkSheet.Range['A1', 'D'+IntToStr(recs-1)];
        usedRng.WrapText:= False;
        usedRng.EntireRow.AutoFit;
        usedRng.EntireColumn.AutoFit;
//        prStopProcess( UserID, ThreadData.ID);
        //TestCssStopException; 
        //ImpCheck.SetProcessPercent( UserID, ThreadData.ID, 30);      

(*      except  //2
        on E: Exception do begin
          prMessageLOGS(' '+nmProc+': '+E.Message+ 'ErrPos='+IntToStr(ErrPos), 'Import', false);
        end;  
      end; //except
    end; //if Assigned(XL) and (not Assigned(WorkBook)) then begin
    //Отправка письма
except  
  on E: Exception do begin
    prMessageLOGS(' '+nmProc+': '+E.Message+ 'ErrPos='+IntToStr(ErrPos), 'Import', false);
  end;  
end; //except    *)
    Subj:= WorkBook.Name+' Загрузка сопутствующих товаров от '+FormatDateTime(cDateTimeFormatY2S, Now());
    ContentType:= XMLContentType;
    if ErrCount = 0 then lstBodyMail.Add(MessText(mtkImportSuccess))     
    else lstBodyMail.Add(MessText(mtkImportError));
    lstBodyMail.Add(' ');
    if ss<>'' then lstBodyMail.Add(ss);
    
//  finally
    Workbook.CheckCompatibility := False;
    WorkBook.Save(lcid);
    WorkBook.Close(false,EmptyParam,EmptyParam,lcid);
//    XL.Workbooks.Close(lcid);
    XL.Quit;// закрыть Excel
    XL.Disconnect;
    CoUnInitialize;
    prFree(XL);
    prFree (ManWaresList);
    prFree (AWaresList);
//    FN:= fnFormRepFileName('23_'+ImpCheck.GetCheckComment(UserID, ThreadData.ID),ExtractFileName(FName),constOpImport);   //ImpCheck.GetCheckComment()
//    PF:= ExtractFilePath(FName);
    FNameI:= ExtractFilePath(FName)+fnFormRepFileName(IntToStr(ImpCheck.GetImpType(UserID, ThreadData.ID)), FName, constOpImport);                 
    RenameFile(FName, FNameI);
    FName:= FNameI;
    SetLength(LogStr, 0);
    for i:= 0 to High(ErrMsg) do begin
      if ErrMsg[i] <> nil then prFree (ErrMsg[i]);
    end;
    SetLength(ErrMsg,0);
    ImpCheck.SetProcessPercent( UserID, ThreadData.ID, 9);
    
  end;  
end;  

//------------------------------------------------------------------------------ 
function fnRepCrossAnalogs1(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,  //  analogs   42
   ContentType:string; ThreadData: TThreadData; filter_data: string): string;
const nmProc = 'fnRepCrossAnalogs'; // имя процедуры/функции
type TQRec = record          //RN_ART_NR, RN_ART_ID, DS_MF_ID as RN_SUP_ID, Ds_Bra, RN_MF_ID,MF_SHORT, RN_SORT, RN_REF_NR
  RN_ART_NR: string;
  RN_SUP_ID: integer;
  Ds_Bra: string;
  RN_REF_NR: string;
  RN_MF_ID: integer;
  MF_SHORT: string;
end;
var SQLText,Content, PathFile, ss: string;
    IBD: TIBDatabase;
    IBQuery: TIBSQL;
    FilterData, BrandList, QWareList, ATDWareList, MWareList, NotWareList, NotAWareList, SearchList: TStringList;
    Ware, AWare: TWareInfo;
    ib,TDBrandID, ip, iq, ii, i, j, ManID: integer;
    AWareList: TObjectList;
    file_csv: textfile; 
    Manager, Name_NR, AWName: string;
    EmplRoles, ImpRoles, Roles: tai;
    Product: boolean;
    arRec: tas;
    Percent: real;
    NotWare, WareList, BrandSys: boolean;
    arMBrands: tai;  
//    timerStart: TDateTime;
//MBrandList: TStringList;   
// Функция получения товаров по заданному бренду
  function fnGetWareList(SearchList: TStringList; WName: string; Sort: boolean = false): TStringList;
  var
    i: integer;
    recs: integer;
    BWare: TWareInfo;
  begin
    Result:= TStringList.Create;
    try
      recs:= SearchList.Count -1;
    
      for i:= 0 to recs do begin
        BWare:= Cache.GetWare(integer(SearchList.Objects[i]),True);
        if (BWare.WareSupName=WName)  then 
            Result.AddObject(BWare.WareSupName, pointer(BWare.ID));
      end;
      if Sort then begin
        Result.Sort;
      end;
    except
      on E:Exception do begin
        raise Exception.Create('fnGetWareListByBrand1: '+E.Message);
      end;
    end;
  
  end;

  function fnGetWareListByBrandTD(BrandTD: integer; Product: integer=-1; Sort: boolean = false): TStringList;
  var
    i, j: integer;
    BMWareList: TStringList;
    BWare: TWareInfo;
    arBrandID: tai;
  begin
    Result:= TStringList.Create;
    BMWareList:= TStringList.Create;
    SetLength(arBrandID,Cache.WareBrands.Count);
    j:=0;
  try  
    try
      for i := 0 to Cache.WareBrands.ItemsList.Count-1 do begin
        if fnInIntArray(BrandTD, TBrandItem(Cache.WareBrands.ItemsList[i]).TDMFcodes)>-1 then begin    
          arBrandID[j]:=TBrandItem(Cache.WareBrands.ItemsList[i]).ID;
          inc(j);
        end;
      end;
      if Length(arBrandID)> j then SetLength(arBrandID,j);
      if Length(arBrandID)=0 then exit;
    
      if Product>-1 then
        BMWareList:= Cache.GetSysManagerWares(0,Product)
      else BMWareList:= Cache.GetSysManagerWares();
    
      for i := 0 to BMWareList.Count-1 do begin
        BWare:= Cache.GetWare(integer(BMWareList.Objects[i]),True);
        if (fnInIntArray(BWare.WareBrandID, arBrandID)>-1) then
         Result.AddObject(BWare.WareSupName, pointer(BWare.ID));
      end;
    except
      on E:Exception do begin
        raise Exception.Create('fnGetWareListByBrandTD: '+E.Message);
      end;
    end;
  finally  
    prFree(BMWareList);
  end;

  end;
begin
//  timerStart:= Now;
  FilterData:=nil; 
  BrandList:=nil; 
  QWareList:=nil;
  ATDWareList:=nil;
  MWareList:=nil;
  NotWareList:=nil;
  NotAWareList:=nil;
  SearchList:=nil;
  IBD:= nil;
  iq:= 0;
  i:= 0;
  if not GetEmplTmpFilePath(UserID, PathFile, ss) then raise EBOBError.Create(ss);
  EmplRoles:= fnGetUserRoles(UserID);//Cache.arEmplInfo[UserID].UserRoles;
//  ImpRoles:= Cache.GetImportRoles(ImpCheck.GetImpType(UserID,ThreadData.ID));
  ImpRoles:= Cache.GetRepOrImpRoles(ImpCheck.GetImpType(UserID, ThreadData.ID)); 
  Roles:= fnGetDuplicateArrayComparisons(impRoles, EmplRoles);
  Product:= (length(Roles)=1) and (Roles[0]=rolProduct);
  if Product then begin
    SetLength(arMBrands,0);
    MWareList:= Cache.GetSysManagerWares(0,UserID);
    for i := 0 to MWareList.Count-1 do begin
      Ware:= Cache.GetWare(integer(MWareList.Objects[i]),True);
      prAddItemToIntArray(Ware.ArtSupTD,arMBrands);
    end;
    i:=0;
    MWareList.Clear; 
  end;
  
  //FName:= PathFile+'Export32'+FormatDateTime('_dd.mm_(hh.nn)',Now)+'.csv';
  NotWare:= false;   // выводить ли не найденные товары
  IBQuery:= nil;    
  try
    QWareList:= TStringList.Create;
    SearchList:= TStringList.Create;     
    NotWareList:= TStringList.Create;
    NotWareList.Duplicates:=dupIgnore;
    NotWareList.Sorted:=True;
    NotAWareList:= TStringList.Create;
    BrandList:= TStringList.Create;
    FilterData:= TStringList.Create;
    FilterData.Text:= filter_data;
    BrandSys:= (StrToIntDef(FilterData.Values['dop_info'],0)=0); //признак, брать ли не наши бренды 
    WareList:= false;
    
    IBD:= nil;
    IBD:= cntsTDT.GetFreeCnt;   
    IBQuery:= fnCreateNewIBSQL(IBD, 'IBQuery_'+nmProc, -1, tpRead, true);
    ii:= 0;
    if BrandSys then         //забрать
      for i := 0 to Cache.BrandTDList.Count-1  do  begin
        if Product then  ii:= fnInIntArray(integer(Cache.BrandTDList.Objects[i]),arMBrands);
        if ii>-1 then
        BrandList.AddObject(Cache.BrandTDList[i],Cache.BrandTDList.Objects[i])
      end
    else begin
      SQLText:= 'SELECT MF_ID, iif(ICN_NEWDESCR is null, MF_SHORT, ICN_NEWDESCR) mfName'#10+
              'FROM MANUFACTURERS'#10+
              'left join IMPORT_CHANGE_NAMES on ICN_TAB_ID = 100 and ICN_KE_KEY = MF_ID'#10+
              'where  MF_COMP=1 and not exists (SELECT DS_MF_ID FROM DATA_SUPPLIERS where DS_MF_ID=MF_ID)'; 
      IBQuery.SQL.Text:= SQLText;
      IBQuery.Prepare; 
      IBQuery.ExecQuery;
      while not IBQuery.EOF do begin   
        if Product then  ii:= fnInIntArray(integer(Cache.BrandTDList.Objects[i]),arMBrands);
        if ii>-1 then
        BrandList.AddObject(Trim(IBQuery.FieldByName('mfName').asString), Pointer(IBQuery.FieldByName('mfID').asInteger));
        cntsTDT.TestSuspendException;
        IBQuery.Next;
      end;
      IBQuery.Close;
    end; 
    SetLength(arMBrands,0);
      
    SQLText:= 'SELECT /*first 1000*/ RN_ART_NR, RN_ART_ID, S.DS_MF_ID as RNSUPID, Ds_Bra, RN_MF_ID,/*MF_SHORT,*/ RN_REF_NR '#10+
     'FROM REF_NUMBERS inner join ARTICLES A on RN_ART_ID= a.ART_ID and A.ART_WARECODE>0'#10+
//     'inner join MANUFACTURERS  on  RN_MF_ID= MF_ID and MF_comp=1'#10+
//     'left outer join ARTICLES W on RN_REF_NR= w.art_nr'#10+
     'left outer join DATA_SUPPLIERS S on  RN_SUP_ID= S.DS_ID'#10+
     'where RN_MF_ID= :TDBrandID '#10+
     'and not exists(select art_id from ARTICLES, DATA_SUPPLIERS DS where ART_NR=RN_REF_NR and ART_SUP_ID=DS.DS_ID and DS.DS_MF_ID=RN_MF_ID )'#10+
     'ORDER BY RN_ART_NR';
    IBQuery.SQL.Text:= SQLText;
    IBQuery.Prepare;
    ImpCheck.SetProcessPercent( UserID, ThreadData.ID, 10);
    Percent:= 80;
ip:= 0;    
    if BrandList.Count>0 then Percent:= Percent/BrandList.Count else ImpCheck.SetProcessPercent( UserID, ThreadData.ID, Percent);
    for ib := 0 to BrandList.Count-1  do begin
//      if IBD.Connected=False then begin                       
      if not Assigned(IBD) or not IBD.Connected then begin      
        prFreeIBSQL(IBQuery);                                   
        if Assigned(IBD) then cntsTDT.SetFreeCnt(IBD, True);    

        IBD:= cntsTDT.GetFreeCnt;
          IBQuery:= fnCreateNewIBSQL(IBD, 'IBQuery_'+nmProc, -1, tpRead, true);
          IBQuery.SQL.Text:= SQLText;
          IBQuery.Prepare;
      end;
      TDBrandID:=integer(BrandList.Objects[ib]);  
      IBQuery.ParamByName('TDBrandID').AsInteger:= TDBrandID;
//if TDBrandID=876 then        
      IBQuery.ExecQuery;
      try 
        //SetLength(arQRec,100000);
        Name_NR:='';
        while not IBQuery.EOF do begin
          if Name_NR<> IBQuery.FieldByName('RN_ART_NR').AsString then begin
            WareList:= false;
            MWareList:= Cache.SearchWaresByTDSupAndArticle(IBQuery.FieldByName('RNSUPID').AsInteger,IBQuery.FieldByName('RN_ART_NR').AsString,True);//товары, связанные с артикулом

            {ss:= IBQuery.FieldByName('RN_ART_NR').AsString+';'+IBQuery.FieldByName('RN_SUP_ID').AsString+';'+
                 IBQuery.FieldByName('Ds_Bra').AsString+';'+ IBQuery.FieldByName('RN_REF_NR').AsString+';'+
                 IBQuery.FieldByName('RN_MF_ID').AsString+';'+ BrandList[ib]; //IBQuery.FieldByName('MF_SHORT').AsString;
            QWareList.Add(ss);}
            WareList:= (MWareList.Count>0);
          end;
          MWareList.Clear; 
          prStopProcess( UserID, ThreadData.ID);         
          if WareList then begin
            ss:= IBQuery.FieldByName('RN_REF_NR').AsString+';'+ IBQuery.FieldByName('RN_MF_ID').AsString+';'+ 
                 BrandList[ib]+';'+
                 IBQuery.FieldByName('RN_ART_NR').AsString+';'+IBQuery.FieldByName('RNSUPID').AsString+';'+
                 IBQuery.FieldByName('Ds_Bra').AsString;
           { ss:= IBQuery.FieldByName('RN_ART_NR').AsString+';'+IBQuery.FieldByName('RN_SUP_ID').AsString+';'+
                 IBQuery.FieldByName('Ds_Bra').AsString+';'+ IBQuery.FieldByName('RN_REF_NR').AsString+';'+
                 IBQuery.FieldByName('RN_MF_ID').AsString+';'+ BrandList[ib]; //IBQuery.FieldByName('MF_SHORT').AsString;}
            QWareList.Add(ss);
          end;
          Name_NR:= IBQuery.FieldByName('RN_ART_NR').AsString;            
          IBQuery.Next;
        end;
        IBQuery.Close;
      except
        on E: EStopError do begin ss:= E.Message; raise EStopError.Create(ss); end;
        on E: Exception do prMessageLOGS(nmProc +': ib='+IntToStr(ib) +' '+E.Message  ,'Log_prg.log' , false);
      end;
      QWareList.Sort;         
      try  
//        ip:=1;
//        if QWareList.Count>0 then Percent:= Percent/(QWareList.Count/1000) else ImpCheck.SetProcessPercent( UserID, ThreadData.ID, Percent);
    //    while not IBQuery.EOF do begin
        if Product then ManID:= UserID
        else ManID:= -1;
        if QWareList.Count>0 then SearchList:= fnGetWareListByBrandTD(TDBrandID, ManID);
        Name_NR:='';
        for iq := 0 to QWareList.Count-1 do begin
          prStopProcess( UserID, ThreadData.ID);
          arRec:= fnSplitString(QWareList[iq]);
    // arQRec=RN_ART_NR;RN_SUP_ID;Ds_Bra; RN_REF_NR; RN_MF_ID; MF_SHORT: string; 
          if arRec[0]<>Name_NR then begin
            MWareList.Clear;
            MWareList:= fnGetWareList(SearchList, arRec[0]);
          end;
          if (MWareList.Count>0) {and (MWareList.IndexOf(IBQuery.FieldByName('RN_REF_NR').AsString)>-1)} then begin
            for ii := 0 to MWareList.Count-1 do begin
            //проверить аналоги
              Ware:= Cache.GetWare(integer(MWareList.Objects[ii]),True); 
              prStopProcess( UserID, ThreadData.ID);
              if not Ware.IsINFOgr then begin
                AWareList:= Ware.GetSrcAnalogs(ca_GR_Ex_TD);// аналоги товара
                ATDWareList:= Cache.SearchWaresByTDSupAndArticle({IBQuery.FieldByName('RN_SUP_ID').AsInteger}fnStrToIntDef(arRec[4],-1),arRec[3]{IBQuery.FieldByName('RN_ART_NR').AsString});//товары, связанные с артикулом
                //if AWareList.Count=0 then begin
                  //ss:= Ware.Name+';';
                  for i := 0 to ATDWareList.Count-1 do begin
                    if ATDWareList[i]=Ware.Name then continue;
                    AWare:= Cache.GetWare(integer(ATDWareList.Objects[i]),True);
                    prStopProcess( UserID, ThreadData.ID);
                    if not AWare.IsINFOgr then  begin
                      for j := 0 to AWareList.Count-1 do begin
                        if AWare.ID=TTwoCodes(AWareList[j]).ID1 then break;
                      end;
                      if j> AWareList.Count-1  then begin
                        if cache.EmplExist(AWare.ManagerID) then Manager:= Cache.arEmplInfo[AWare.ManagerID].EmplShortName
                        else Manager:='Менеджер не определен';
{190214                        if cache.EmplExist(Ware.ManagerID) then Manager:= Cache.arEmplInfo[Ware.ManagerID].EmplShortName
                        else Manager:='Менеджер не определен'; }   
                        if AWare.TypeID<>Ware.TypeID then ss:= 'Внимание!Несоответствие типов! Тип '+ AWare.TypeName+' и тип '+Ware.TypeName
                        else ss:='';
                    
                        NotAWareList.AddObject(ATDWareList[i]+';'+Ware.Name+';'+arRec[0]+';'+Manager+';'+ss,pointer(Ware.ID));
    //1501                    NotAWareList.AddObject(ATDWareList[i],pointer(Ware.ID));
                      end;
                    end;
                  end;
                  //if ss<>'' then NotAWareList.Add(ss);
                AWareList.Clear;  
                ATDWareList.Clear;
                //MWareList.Clear;
                //SetLength(arQRec,0);
              end;
            end;
          end
          else  // не нашли товар
            if NotWare then
            NotWareList.Add(arRec[3]+';'+arRec[4]+';'+arRec[5]+';'+arRec[0]+';'+arRec[1]+';'+arRec[2]);//(QWareList[iq]);//(arRec[3]+';'+arRec[5]+';'+arRec[4]+';'+arRec[0]+';'+arRec[2]+';'+arRec[1]);
          Name_NR:= arRec[0];
          SetLength(arRec,0);          
        end;
        iq:= 0;
    //    IBQuery.Close;
      except
        on E: EStopError do begin ss:= E.Message; raise EStopError.Create(ss); end;
        on E: Exception do prMessageLOGS(nmProc +': ib='+IntToStr(ib) +' iq='+IntToStr(iq)+' '+E.Message  ,'Log_prg.log' , false);
      end;  
      QWareList.Clear; 
      SearchList.Clear;
      ImpCheck.SetProcessPercent( UserID, ThreadData.ID, Percent);
//      TestCssStopException;
      prStopProcess( UserID, ThreadData.ID);
    end;    
  finally    
    if ((NotWareList.Count>0) and NotWare) or (NotAWareList.Count>0) then begin
      FName:= PathFile+fnFormRepFileName('42_', '.csv', ImpCheck.GetCheckKind(UserID, ThreadData.ID));
      if FileExists(FName) and not SysUtils.DeleteFile(FName) then begin
        ss:= MessText(mtkNotDelPrevFile);
        raise EBOBError.Create(MessText(mtkNotDelPrevFile));
      end;
      AssignFile(file_csv, FName);
      filemode:= fmOpenReadWrite; //назначаем файл
      if FileExists(FName) then Reset(file_csv) else ReWrite(file_csv);
      Append(file_csv);
      if NotAWareList.Count>0 then begin
        NotAWareList.Sort;
        //Добавляем шапку:
        Content:= 'Товары и предполагаемые аналоги '; 
        WriteLn(file_csv, Content);
        Content:= 'Аналог;Наименование товара ;Наименование товара по TecDoc; Менеджер; Замечания';
        WriteLn(file_csv, Content);
        AWName:= '';
        ss:='';
        for i := 0 to NotAWareList.Count-1 do begin
(*          if (AWName<> NotAWareList[i]) then begin
            if (ss<>'') then WriteLn(file_csv, ss);
            ss:= NotAWareList[i]+';';
          end;
          Ware:= Cache.GetWare(integer(NotAWareList.Objects[i]),True);
          if fnInStrArray(Ware.Name,fnSplitString(ss))=-1 then
          ss:= ss+ Ware.Name+';'{+ IntToStr(Ware.ManagerID)+';'};   *)
          WriteLn(file_csv, NotAWareList[i]);
          AWName:= NotAWareList[i]
        end;
        WriteLn(file_csv, '');
      end;
      
      
      if (NotWareList.Count>0) and NotWare then begin
        NotWareList.Sort;
        //Добавляем шапку:
        Content:= 'Товары, не занесенные в GrossBee (Данные из TecDoc)'; 
        WriteLn(file_csv, Content);
        Content:= 'Товар; Менеджер товара; Производитель; Товар TecDoc ';
        WriteLn(file_csv, Content);
        Name_NR:='';
        for i := 0 to NotWareList.Count-1 do begin
//WriteLn(file_csv, NotWareList[i]+';'+'NotWareList');        
          arRec:= fnSplitString(NotWareList[i]);
          if Name_NR<>arRec[0] then begin
            ATDWareList.Clear;
            ATDWareList:= Cache.SearchWaresByTDSupAndArticle(fnStrToIntDef(arRec[1],-1),arRec[0]);//товары, связанные с артикулом
          end;
          for j := 0 to ATDWareList.Count-1 do begin 
            Ware:= Cache.GetWare(integer(ATDWareList.Objects[j]),True);
            if not Ware.IsINFOgr then  begin
              if cache.EmplExist(Ware.ManagerID) then Manager:= Cache.arEmplInfo[Ware.ManagerID].EmplShortName
              else Manager:='Менеджер не определен';
              WriteLn(file_csv, ATDWareList[j]+';'+Manager+';'+arRec[5]+';'+arRec[3]);
//1501            WriteLn(file_csv, ATDWareList[j]+';'+arRec[0]+';'+arRec[2]+';'+arRec[3]+';'+arRec[5]);
            end;
          end;
          //WriteLn(file_csv, NotWareList[i]);
          Name_NR:= arRec[0];
        end;
      end; 
      Subj:= 'Отчет  '+FormatDateTime(cDateTimeFormatY2S, Now());
      ContentType:= CSVContentType;// for Excel(.csv)
      lstBodyMail:= TStringList.Create;
      lstBodyMail.Add('Отчет  '); 
      CloseFile(file_csv);   
      ImpCheck.SetProcessPercent( UserID, ThreadData.ID, 5);  
    end;

    if Assigned(IBQuery) then prFreeIBSQL(IBQuery);
    if Assigned(IBD) then cntsTDT.SetFreeCnt(IBD, True);
    prFree(NotWareList);
    prFree(NotAWareList);
    prFree(MWareList);
    prFree(BrandList);
    prFree(ATDWareList);                     
    SetLength(ImpRoles, 0);
    SetLength(EmplRoles, 0);                  
    SetLength(Roles, 0);                     
    prFree(FilterData);                      
    prFree(AWareList);                       
    prFree(QWareList);
    SetLength(arRec,0);  
    prFree(SearchList);  
    result:= ss;
  end;
end;
//------------------------------------------------------------------------------
function fnRepWebArmSystemStatistic(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,  //  Статистика
   ContentType:string; ThreadData: TThreadData; filter_data: string): string;
const nmProc = 'fnRepWebArmSystemStatistic'; // имя процедуры/функции
type
  TWebStatRec = record
    ManagerFIO, ManagerDPRT: string;
    FirmQty, LiveFirmQty, More5OrderQty, OrderQty, OrderVladQty, AccQty, AccFirstHandQty: integer;
  end;
var ibd: TIBDatabase;
    ibs: TIBSQL;
    FromDate, ToDate, d: TDateTime;
    ManagerCodes: Tai;
    ManagerData: array of TWebStatRec;
    s, CurDepartment: string;
    i, ii, j, EmplId, TotalRows, FilialFirmQty, FilialLiveFirmQty, FilialMore5OrderQty,
    FilialOrderQty, FilialOrderVladQty, FilialAccQty, FilialAccFirstHandQty,
    TotalFirmQty, TotalLiveFirmQty, TotalMore5OrderQty, TotalOrderQty,
    TotalOrderVladQty, TotalAccQty, TotalAccFirstHandQty: integer;
    flDirector, flSuperReg, flSUF: boolean;
    Pool: TIBCntsPool;
    
    FilterData: TStringList;
    iCount: integer;
    PathFile, Title, Content: string;
    file_csv: textfile; 
    Percent: real;
//    timerStart: TDateTime;
    Roles: tai;    
{  //--------------------------------------
  function AddNotFoundManager(kod: integer): integer;
  begin
    Result:= Length(ManagerCodes);
    SetLength(ManagerCodes, Result+1);
    SetLength(ManagerData,Result+1);
    ManagerCodes[Result]:= kod;
    with ManagerData[Result] do begin
      ManagerFIO:= 'Неизв.сотр. с кодом '+IntToStr(kod);
      ManagerDPRT:= '0';
      FirmQty:= 0;
      LiveFirmQty:= 0;
      More5OrderQty:= 0;
      OrderQty:= 0;
      AccQty:= 0;
      AccFirstHandQty:= 0;
    end;
  end;
  //--------------------------------------   }
begin
//  timerStart:= Now;
  SetLength(ManagerCodes, 0);
  SetLength(ManagerData, 0);
  FilterData:=nil;
  ibs:= nil;
  ibd:= nil;
  try
    EmplId:= UserID;
    FilterData:= TStringList.Create;
    FilterData.Text:= filter_data;
    FromDate:= StrToDateTime(FilterData.Values['dop_fromdate']); // получаем DateStart   
    ToDate:= StrToDateTime(FilterData.Values['dop_todate']); // получаем DateEnd
    prSetThLogParams(ThreadData, 0, EmplId, 0, 'FromDate='+FormatDateTime(cDateFormatY2, FromDate)+
      #13#10'ToDate='+FormatDateTime(cDateFormatY2, ToDate)); // логирование

    if FromDate>ToDate then begin // если начальная дата > конечной - меняем местами
      d:= FromDate;
      FromDate:= ToDate;
      ToDate:= d;
    end;
    if ((ToDate-FromDate)>100) then
      raise EBOBError.Create('Диапазон статистики не должен превышать 100 дней.');

    if not Cache.EmplExist(EmplId) then raise EBOBError.Create(MessText(mtkNotEmplExist));
    iCount:= 0;
    if not GetEmplTmpFilePath(UserID, PathFile, s) then raise EBOBError.Create(s);  

    FName:= PathFile+fnFormRepFileName('37', '.csv', ImpCheck.GetCheckKind(UserID, ThreadData.ID));
    if FileExists(FName) and not SysUtils.DeleteFile(FName) then begin
      s:= MessText(mtkNotDelPrevFile);
      raise EBOBError.Create(MessText(mtkNotDelPrevFile));
    end;
    AssignFile(file_csv, FName);
    filemode:= fmOpenReadWrite; //назначаем файл
    if FileExists(FName) then Reset(file_csv) else ReWrite(file_csv);
    Append(file_csv); 
    //Добавляем шапку:                  
    Title:= 'Статистика за период '+FormatDateTime(cDateFormatY4, FromDate)+'-'+FormatDateTime(cDateFormatY4, ToDate); ; 
    Content:= Title;   
    WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
    Content:= '';
    Content:= 'Регионал;Кол-во контрагентов;из них "живых";5 заказов;Кол-во заказов;в т.ч. "Vlad";Первичных счетов;Всего счетов';
    WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
    Content:= '';
  //шапка добавлена 
    flDirector:= Cache.arEmplInfo[EmplId].UserRoleExists(rolSaleDirector); 
    if not flDirector then begin
      Roles:= Cache.arEmplInfo[EmplId].UserRoles;
      for i := 0 to length(Roles)-1 do begin
        flDirector:= (Roles[i]<>rolSuperRegional) and (Roles[i]<>rolRegional);
        if flDirector then break;
      end;
    end;
    flSuperReg:= Cache.arEmplInfo[EmplId].UserRoleExists(rolSuperRegional);
    if not (Cache.arEmplInfo[EmplId].UserRoleExists(rolRegional) or flSuperReg or flDirector) then // проверяем право пользователя
      raise EBOBError.Create(MessText(mtkNotRightExists));

    if flDirector then
      ManagerCodes:= Cache.GetEmplCodesByShortName(0, rolRegional)
    else if flSuperReg then
      ManagerCodes:= Cache.GetEmplCodesByShortName(Cache.arEmplInfo[EmplId].EmplDprtID, rolRegional)
    else begin // if Cache.arEmplInfo[EmplId].EmplRoleExists(rolRegional) then
      SetLength(ManagerCodes, 1);
      ManagerCodes[0]:= EmplId;
    end;
    ImpCheck.SetProcessPercent(UserID,ThreadData.ID,5);
    prStopProcess( UserID, ThreadData.ID);
    SetLength(ManagerData, Length(ManagerCodes));
    for j:= Low(ManagerCodes) to High(ManagerCodes) do with ManagerData[j] do begin
      i:= ManagerCodes[j];
      ManagerFIO:= Cache.arEmplInfo[i].EmplShortName;
      ManagerDPRT:= IntToStr(Cache.arEmplInfo[i].EmplDprtID);
      FirmQty:= 0;
      LiveFirmQty:= 0;
      More5OrderQty:= 0;
      OrderQty:= 0;
      AccQty:= 0;
      AccFirstHandQty:= 0;
    end;

    try
      ibd:= cntsORD.GetFreeCnt;
//      if not Assigned(ibd) then raise EBOBError.Create(MessText(mtkErrConnectToDB));
      ibs:= fnCreateNewIBSQL(ibd, 'ibs_'+nmProc, ThreadData.ID, tpRead, True);
                                     // 1-й круг - статистика по новым клиентам
      ibs.SQL.Text:= 'SELECT w.WOFRCODE, (select rOrdCountAll'+
        ' from GetFirmOrdCount(w.WOFRCODE, :DateFrom, :DateTo1)) rOrdCountAll'+
        ' FROM WEBORDERFIRMS w WHERE w.WOFRCREATETIME between :DateFrom and :DateTo';;
      ibs.ParamByName('DateFrom').AsDateTime:= FromDate;
      ibs.ParamByName('DateTo').AsDateTime:= ToDate+1;
      ibs.ParamByName('DateTo1').AsDateTime:= Tomorrow;
      ibs.ExecQuery;
      while not ibs.EOF do begin
        j:= ibs.FieldByName('WOFRCODE').AsInteger;
        if Cache.FirmExist(j) then i:= Cache.arFirmInfo[j].Regional else i:= 0;
        if i>0 then begin
          ii:= fnInIntArray(i, ManagerCodes);
//          if flDirector and (ii<0) then ii:= AddNotFoundManager(i);
          i:= ii;
        end else i:= -1;
        if (i>-1) then with ManagerData[i] do begin
          Inc(FirmQty);
          j:= ibs.FieldByName('rOrdCountAll').AsInteger;
          if j>0 then Inc(LiveFirmQty);
          if j>5 then Inc(More5OrderQty);
        end;
        TestCssStopException;
        ibs.Next;
      end;                   // закончен 1-й круг - статистика по новым клиентам
      ibs.Close;
      ImpCheck.SetProcessPercent(UserID,ThreadData.ID,20);
                                    // 2-й круг - статистика по заказам
      ibs.SQL.Text:= 'select rORDRFIRM, rOrdCountAll, rOrdCountVlad'+
        ' from GetOrdersCount(:DateFrom,:DateTo)';
      ibs.ParamByName('DateFrom').AsDateTime:= FromDate;
      ibs.ParamByName('DateTo').AsDateTime:= ToDate+1;
      ibs.ExecQuery;
      while not ibs.EOF do begin
        j:= ibs.FieldByName('rORDRFIRM').AsInteger;
        if Cache.FirmExist(j) then i:= Cache.arFirmInfo[j].Regional else i:= 0;     
        if i>0 then begin
          ii:= fnInIntArray(i, ManagerCodes);
//          if flDirector and (ii<0) then ii:= AddNotFoundManager(i);
          i:= ii;
        end else i:= -1;
        if i>-1 then with ManagerData[i] do begin
          OrderQty:= OrderQty+ibs.FieldByName('rOrdCountAll').AsInteger;
          OrderVladQty:= OrderVladQty+ibs.FieldByName('rOrdCountVlad').AsInteger;
        end;
        TestCssStopException;
        ibs.Next;
      end;
      ibs.Close;        // закончен 2-й круг - статистика по заказам
    finally
      prFreeIBSQL(ibs);
      cntsORD.SetFreeCnt(ibd, True);
    end;
    ImpCheck.SetProcessPercent(UserID,ThreadData.ID,20);         
    flSUF:= (Today>ToDate) and cntsSUF.BaseConnected; // если ToDate до вчера - берем с суфлера
    if flSUF then Pool:= cntsSUF else Pool:= cntsGRB;

    try
      ibd:= Pool.GetFreeCnt;
    except
      exit;
    end;
//    if not Assigned(ibd) then raise EBOBError.Create(MessText(mtkErrConnectToDB));
    try                         // 3-й круг - статистика по счетам
      ibs:= fnCreateNewIBSQL(ibd, 'ibs_'+nmProc, ThreadData.ID, tpRead, True);
      ibs.SQL.Text:= 'select kEmplCode, sum(rFirstAcc) FirstAcc, sum(rAllAcc) AllAcc'+
        ' from Vlad_CSS_GetStatAccByEmpl(:DateFrom, :DateTo) group by kEmplCode';
      ibs.ParamByName('DateFrom').AsDateTime:= FromDate;
      ibs.ParamByName('DateTo').AsDateTime:= ToDate+1;
      ibs.ExecQuery;
      while not ibs.EOF do begin
        j:= ibs.FieldByName('kEmplCode').AsInteger;
        if j>0 then begin
          ii:= fnInIntArray(j, ManagerCodes);
//          if flDirector and (ii<0) then ii:= AddNotFoundManager(j);
          i:= ii;
        end else i:= -1;
        if i>-1 then with ManagerData[i] do begin
          AccQty:= AccQty+ibs.FieldByName('AllAcc').AsInteger; // статистика по всем счетам
          if ibs.FieldByName('FirstAcc').AsInteger>0 then      // статистика по первичным (непорожденным) счетам
            AccFirstHandQty:= AccFirstHandQty+ibs.FieldByName('FirstAcc').AsInteger;
        end;
        TestCssStopException;
        ibs.Next;
      end;
      ibs.Close;       // закончен 3-й круг - статистика по счетам
    finally
      prFreeIBSQL(ibs);
      Pool.SetFreeCnt(ibd, True);
    end;
    ImpCheck.SetProcessPercent(UserID,ThreadData.ID,20);
    TotalRows:= 0;
    FilialFirmQty:= 0;
    FilialLiveFirmQty:= 0;
    FilialMore5OrderQty:= 0;
    FilialOrderQty:= 0;
    FilialOrderVladQty:= 0;
    FilialAccQty:= 0;
    FilialAccFirstHandQty:= 0;

    TotalFirmQty:= 0;
    TotalLiveFirmQty:= 0;
    TotalMore5OrderQty:= 0;
    TotalOrderQty:= 0;
    TotalOrderVladQty:= 0;
    TotalAccQty:= 0;
    TotalAccFirstHandQty:= 0;
    CurDepartment:= ManagerData[0].ManagerDPRT;
    Percent:= 20;
    if High(ManagerCodes)>0 then Percent:= Percent/High(ManagerCodes) else ImpCheck.SetProcessPercent(UserID,ThreadData.ID,Percent);
    for i:= Low(ManagerCodes) to High(ManagerCodes) do with ManagerData[i] do begin
      if (CurDepartment<>ManagerDPRT) then begin
        j:= StrToIntDef(CurDepartment, 0);
        if Cache.DprtExist(j) then Content:='Итого по '+Cache.GetDprtShortName(j)
                else Content:='Итого по неизвестному филиалу с кодом '+CurDepartment;
        Content:= Content+';'+IntToStr(FilialFirmQty)+';'+IntToStr(FilialLiveFirmQty)+';'+IntToStr(FilialMore5OrderQty)+';'+
                  IntToStr(FilialOrderQty)+';'+IntToStr(FilialOrderVladQty)+';'+IntToStr(FilialAccFirstHandQty)+';'+IntToStr(FilialAccQty);
        WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
        Content:= '';
        WriteLn(file_csv, Content);
        Inc(TotalRows);
        TotalFirmQty:= FilialFirmQty+TotalFirmQty;
        TotalLiveFirmQty:= FilialLiveFirmQty+TotalLiveFirmQty;
        TotalMore5OrderQty:= FilialMore5OrderQty+TotalMore5OrderQty;
        TotalOrderQty:= FilialOrderQty+TotalOrderQty;
        TotalOrderVladQty:= FilialOrderVladQty+TotalOrderVladQty;
        TotalAccQty:= FilialAccQty+TotalAccQty;
        TotalAccFirstHandQty:= FilialAccFirstHandQty+TotalAccFirstHandQty;
        FilialFirmQty:= 0;
        FilialLiveFirmQty:= 0;
        FilialMore5OrderQty:= 0;
        FilialOrderQty:= 0;
        FilialOrderVladQty:= 0;
        FilialAccQty:= 0;
        FilialAccFirstHandQty:= 0;
        CurDepartment:= ManagerDPRT;
      end;
      Content:= ManagerFIO+';'+IntToStr(FirmQty)+';'+IntToStr(LiveFirmQty)+';'+IntToStr(More5OrderQty)+';'+
                IntToStr(OrderQty)+';'+IntToStr(OrderVladQty)+';'+IntToStr(AccFirstHandQty)+';'+IntToStr(AccQty);
      WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
      Content:= '';
      FilialFirmQty:= FilialFirmQty+FirmQty;
      FilialLiveFirmQty:= FilialLiveFirmQty+LiveFirmQty;
      FilialMore5OrderQty:= FilialMore5OrderQty+More5OrderQty;
      FilialOrderQty:= FilialOrderQty+OrderQty;
      FilialOrderVladQty:= FilialOrderVladQty+OrderVladQty;
      FilialAccQty:= FilialAccQty+AccQty;
      FilialAccFirstHandQty:= FilialAccFirstHandQty+AccFirstHandQty;
      Inc(TotalRows);
      ImpCheck.SetProcessPercent(UserID,ThreadData.ID,Percent);
    end;

    if (flDirector or flSuperReg) then begin
      j:= StrToIntDef(CurDepartment, 0);
      if Cache.DprtExist(j) then Content:='Итого по '+Cache.GetDprtShortName(j)
              else Content:='Итого по неизвестному филиалу с кодом '+CurDepartment;
      Content:= Content+';'+IntToStr(FilialFirmQty)+';'+IntToStr(FilialLiveFirmQty)+';'+IntToStr(FilialMore5OrderQty)+';'+
                IntToStr(FilialOrderQty)+';'+IntToStr(FilialOrderVladQty)+';'+IntToStr(FilialAccFirstHandQty)+';'+IntToStr(FilialAccQty);
      WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
      Content:= '';
      WriteLn(file_csv, Content);
      Inc(TotalRows);
      if flDirector then begin
//        Stream.WriteStr('ИТОГО по Компании');
        TotalFirmQty:= FilialFirmQty+TotalFirmQty;
        TotalLiveFirmQty:= FilialLiveFirmQty+TotalLiveFirmQty;
        TotalMore5OrderQty:= FilialMore5OrderQty+TotalMore5OrderQty;
        TotalOrderQty:= FilialOrderQty+TotalOrderQty;
        TotalOrderVladQty:= FilialOrderVladQty+TotalOrderVladQty;
        TotalAccQty:= FilialAccQty+TotalAccQty;
        TotalAccFirstHandQty:= FilialAccFirstHandQty+TotalAccFirstHandQty;
        Content:= 'ИТОГО по Компании'+';'+IntToStr(TotalFirmQty)+';'+IntToStr(TotalLiveFirmQty)+';'+IntToStr(TotalMore5OrderQty)+';'+
                  IntToStr(TotalOrderQty)+';'+IntToStr(TotalOrderVladQty)+';'+IntToStr(TotalAccFirstHandQty)+';'+IntToStr(TotalAccQty);
        WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
        Content:= '';
        Inc(TotalRows);
      end;
    end;

      if TotalRows=0 then begin
      s:= MessText(mtkNotFoundDataUse);
      raise EBOBError.Create(s);
    end;  
    Subj:= 'Отчет  '+FormatDateTime(cDateTimeFormatY2S, Now());
    ContentType:= CSVContentType;// for Excel(.csv)
    lstBodyMail:= TStringList.Create;
    lstBodyMail.Add(Title);
(*    lstBodyMail.Add(' ');
    lstBodyMail.Add('Начало выполнения: '+FormatDateTime(cDateTimeFormatTSnD, timerStart));
    lstBodyMail.Add('Завершение выполнения: '+ FormatDateTime(cDateTimeFormatTSnD,Now));
    lstBodyMail.Add('Общее время выполнения: '+ FormatDateTime('hh:nn:ss',Now-timerStart));    *)
  finally
    ImpCheck.SetProcessPercent(UserID,ThreadData.ID,5);
    SetLength(ManagerData, 0);
    SetLength(ManagerCodes, 0);
    prFree(FilterData);
    CloseFile(file_csv);
  end;
  
end;
//------------------------------------------------------------------------------
function fnReport38(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,     //38
   ContentType:string; ThreadData: TThreadData; filter_data: string):string;  
const nmProc = 'fnReport38'; // имя процедуры/функции
      TypesNull = 0;
      AnalogGBTypes = 1;
      AnalogTypes = 2;
      AnalogONTypes = 3;
var FilterData: TStringList;
    s: string;
    TypeRep: integer;
begin
  FilterData:= TStringList.Create;
  try
    FilterData.Text:= filter_data;
    TypeRep := StrToInt(FilterData.Values['dop_type']); // тип отчета
    try
    if TypeRep = TypesNull then s:= fnRepTypesNull(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData, filter_data);
    if TypeRep = AnalogGBTypes then s:= fnRepAnalogGBTypes(UserID, lstBodyMail, FName, Subj,ContentType, ThreadData, filter_data);//fnRepCountRequest(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData, filter_data);
    if TypeRep = AnalogTypes then s:= fnRepAnalogTypes(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData, filter_data);//fnRepCountRequestWare(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData, filter_data);
    if TypeRep = AnalogONTypes then s:= fnRepAnalogONTypes(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData, filter_data);//fnRepCountRequestWareQTY(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData, filter_data);
    except
      on E: EStopError do s:= E.Message;
      on E: Exception do begin             
        //s:= MessText(mtkNotFoundDataUse);
        if (Pos(s, E.Message)>0) then raise EBOBError.Create(s) else raise;
      end;
    end;
  finally
    prFree(FilterData);
    result:= s;
  end;
end;

//------------------------------------------------------------------------------  
function fnRepAnalogONTypes(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,  //  Аналоги по ON, у которых разные типы
   ContentType:string; ThreadData: TThreadData; filter_data: string): string;                //38(3)
const nmProc ='fnRepAnalogONTypes';
var TypeName, PathFile, Manager, s, Title, Content: string; 
    ONtype, LenON, ManagerID, i, j, iCount, iCountON: integer;
    file_csv: textfile;
    AWare, Ware: TWareInfo;
    arAWare: array of boolean;
    rep, Product: boolean;
    CountAON, Source: integer;
    AnalogsArr,AnalogsON: tai;
    arON: arTOE;
    LAnalogs: TObjectList;
//    ACodes: TTwoCodes; // ID1 - код товара, ID2: srcID
    AWareID, AsrcID, MID: integer;
    EmplRoles, ImpRoles, Roles: tai;
    Percent: real;
//    timerStart: TDateTime;
begin
//timer:= Now;
//timerStart:= Now;
//prMessageLOGS('-----------------RepAnalogONTypes.csv--------------------','Log_prg.log' , false);
  LAnalogs:=nil;
  LAnalogs:= TObjectList.Create(true);    
  s:= '';
//  i:= 0;
  iCount:= 0;
  iCountON:= 0;
  if not GetEmplTmpFilePath(UserID, PathFile, s) then raise EBOBError.Create(s);  

  //FName:= PathFile+'Export32'+FormatDateTime('_dd.mm_(hh.nn)',Now)+'.csv';
  FName:= PathFile+fnFormRepFileName('38(3)', '.csv', ImpCheck.GetCheckKind(UserID, ThreadData.ID));
  if FileExists(FName) and not SysUtils.DeleteFile(FName) then begin
    s:= MessText(mtkNotDelPrevFile);
    raise EBOBError.Create(MessText(mtkNotDelPrevFile));
  end;
  AssignFile(file_csv, FName);
  filemode:= fmOpenReadWrite; //назначаем файл
  if FileExists(FName) then Reset(file_csv) else ReWrite(file_csv);
  Append(file_csv); 
  //Добавляем шапку:                  
  Title:= 'Товары разных типов, привязанные к одному оригинальному номеру '; 
  Content:= Title;   
  WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
  Content:= '';
  Content:= 'Оригинальный номер;Товар;Тип;Менеджер;Источник;Комментарии';
  WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
  Content:= '';
  //шапка добавлена  
  try
    //Product:= (length(cache.arEmplInfo[UserID].UserRoles)=1) and (cache.arEmplInfo[UserID].UserRoleExists(rolProduct)); 
    EmplRoles:= fnGetUserRoles(UserID);//Cache.arEmplInfo[UserID].UserRoles;    
//    ImpRoles:= Cache.GetImportRoles(ImpCheck.GetImpType(UserID,ThreadData.ID));
    ImpRoles:= Cache.GetRepOrImpRoles(ImpCheck.GetImpType(UserID, ThreadData.ID));
    Roles:= fnGetDuplicateArrayComparisons(impRoles, EmplRoles);
    Product:= (length(Roles)=1) and (Roles[0]=rolProduct);
    arON:= Cache.FDCA.arOriginalNumInfo;  
    LenON:= Length(arON);
    SetLength(arAWare,Length(Cache.arWareInfo));
    ImpCheck.SetProcessPercent(UserID,ThreadData.ID,5);
    prStopProcess( UserID, ThreadData.ID);
    Percent:= 80;
    if  LenON>0 then Percent:= Percent/LenON else  ImpCheck.SetProcessPercent(UserID,ThreadData.ID,Percent);
    
    for i:=0 to Length(Cache.arWareInfo)-1 do  begin
      arAWare[i]:= false;
    end; 
    try
      for i:=0 to LenON-1 do begin
        prStopProcess( UserID, ThreadData.ID);
        ONtype:= arON[i].TypeID;
       
        rep:= false;
        MID:= 0;
        CountAON:= 0;
        if Assigned(arON[i]) then
          CountAON:= arON[i].Links.LinkCount;        
      
        {AnalogsON:= arON[i].ArAnalogs;
        arON[i].Links.GetLinkCodes
        CountAON:= length(AnalogsON);}
        if (CountAON>1) {and (ONtype<>0)} then begin 
          for j:= 0 to CountAON-1 do begin
            AWare:= GetLinkPtr(arON[i].Links.ListLinks[j]);
            AWareID:= AWare.ID;
            AsrcID:=  GetLinkSrc(arON[i].Links.ListLinks[j]);
            LAnalogs.Add(TTwoCodes.Create(AWareID, AsrcID));
          end; //for j:= 0 to CountAON-1 do begin
          
          for j:= 0 to CountAON-1 do begin
            AWare:= Cache.GetWare(TTwoCodes(LAnalogs[j]).ID1);
            if AWare.IsWare and AWare.HasFixedType and (AWare.TypeID<>0) and (ONtype <> AWare.TypeID) {and not(arAWare[AWare.ID])}
            then begin
              if Product and (AWare.ManagerID=UserID) then 
                MID:= UserID; 
              rep:= true;
              //break;
            end;
          end; //for j:= 0 to length(AnalogsON)-1 do begin

          if rep and ((not Product and (MID=0)) 
                    or(Product and (MID<>0))) then begin      //запись
            if iCount>0 then begin
              WriteLn(file_csv, Content);
              WriteLn(file_csv, Content);
            end;
            Content:= FormatStrForCSV(arON[i].ManufName)+', '+arON[i].OriginalNum ;// Ware.Name+';'+TypeName+';'+Manager+';'+FormatStrForCSV(Ware.Comment);
            WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
            Content:= '';
            inc(iCountON);
            for j := 0 to CountAON-1 do begin
              AWare:= Cache.GetWare(TTwoCodes(LAnalogs[j]).ID1);
              if AWare.IsWare and AWare.HasFixedType and (AWare.TypeID<>0) then begin
                ManagerID:= AWare.ManagerID;
                if Cache.EmplExist(ManagerID) then
                  Manager:= Cache.arEmplInfo[ManagerID].EmplShortName
                else Manager:= 'Менеджер не определен';
                TypeName:= Cache.GetWareTypeName(AWare.TypeID);
                Source:= TTwoCodes(LAnalogs[j]).ID2;
                Content:= ';'+AWare.Name+';'+TypeName+';'+Manager+';'+Cache.FDCA.GetArLinkSources[Source] +';'+FormatStrForCSV(AWare.Comment);
                WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
                Content:= '';
                inc(iCount);
                arAWare[AWare.ID]:= true;// отметить как напечатанный              
              end;
            end; //for j := 0 to CountAON-1 do begin
          end; //if rep then begin
        end;  //if CountAON>0 and (ONtype<>0) then begin 
        LAnalogs.Clear;
        ImpCheck.SetProcessPercent(UserID,ThreadData.ID,Percent);
      end;  //for i:=0 to LenON-1 do  begin
    except
      on E: EStopError do s:= E.Message;
      on E: Exception do prMessageLOGS(nmProc +': '+E.Message+' Ware.Name='+Ware.Name+' Ware.ID='+IntToStr(Ware.ID)  ,'Log_prg.log' , false);
    end;
  finally
    if iCount>0 then begin
      Subj:= 'Отчет  '+FormatDateTime(cDateTimeFormatY2S, Now());
      ContentType:= CSVContentType;// for Excel(.csv)
      lstBodyMail:= TStringList.Create;
      lstBodyMail.Add(Title);
      lstBodyMail.Add('ON= '+ IntToStr(iCountON));
      lstBodyMail.Add('Analogs= '+ IntToStr(iCount));
    end;  
    ImpCheck.SetProcessPercent(UserID,ThreadData.ID,5);
    SetLength(AnalogsON,0);
    SetLength(AnalogsArr,0);
    SetLength(arAWare,0);
    FreeAndNil(LAnalogs);
    CloseFile(file_csv);
    SetLength(EmplRoles,0); 
    SetLength(ImpRoles,0);
    SetLength(Roles,0);
    if iCount=0 then begin
      s:= MessText(mtkNotFoundDataUse);
      raise EBOBError.Create(s);
    end;    
  end;
end;

function fnRepAnalogTypes(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,  //  Аналоги односторонние, у которых разные типы
   ContentType:string; ThreadData: TThreadData; filter_data: string): string;              //38(2)
const nmProc ='fnRepAnalogTypes';
var ATypeName, TypeName, PathFile, Manager, AManager, s, Title, Content: string; 
    Wtype, LenWare, ManagerID, AManagerID, i, j, iCount: integer;
    file_csv: textfile;
    AWare, Ware: TWareInfo;
    OLAWare: TObjectList;
    OAWare: TTwoCodes;
    rep, Product: boolean;
    Source: integer;
    MWareList: TStringList;
    EmplRoles, ImpRoles, Roles: tai; 
    Percent: real;
//    timerStart: TDateTime;
begin    
//timer:= Now;
//timerStart:= Now;
//prMessageLOGS('-----------------RepAnalogTypes.csv--------------------','Log_prg.log' , false); 
  MWareList:=nil;
  s:= '';
  iCount:= 0;
  Ware:= nil;
  if not GetEmplTmpFilePath(UserID, PathFile, s) then raise EBOBError.Create(s);  

  //FName:= PathFile+'Export32'+FormatDateTime('_dd.mm_(hh.nn)',Now)+'.csv';
  FName:= PathFile+fnFormRepFileName('38(2)', '.csv', ImpCheck.GetCheckKind(UserID, ThreadData.ID));
  if FileExists(FName) and not SysUtils.DeleteFile(FName) then begin
    s:= MessText(mtkNotDelPrevFile);
    raise EBOBError.Create(MessText(mtkNotDelPrevFile));
  end;
  AssignFile(file_csv, FName);
  filemode:= fmOpenReadWrite; //назначаем файл
  if FileExists(FName) then Reset(file_csv) else ReWrite(file_csv);
  Append(file_csv); 
  //Добавляем шапку:                  
  Title:= 'Односторонние аналоги, у которых разные типы '; 
  Content:= Title;   
  WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
  Content:= '';
  Content:= 'Товар;Тип;Аналог;Тип;Менеджер;Источник';//'Товар;Тип;Менеджер;Аналог;Тип;Менеджер;Источник';
  WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
  Content:= '';
  //шапка добавлена  
  try
    //Product:= (length(cache.arEmplInfo[UserID].UserRoles)=1) and (cache.arEmplInfo[UserID].UserRoleExists(rolProduct)); 
    EmplRoles:= fnGetUserRoles(UserID);//Cache.arEmplInfo[UserID].UserRoles;    
//    ImpRoles:= Cache.GetImportRoles(ImpCheck.GetImpType(UserID,ThreadData.ID));
    ImpRoles:= Cache.GetRepOrImpRoles(ImpCheck.GetImpType(UserID, ThreadData.ID));
    Roles:= fnGetDuplicateArrayComparisons(impRoles, EmplRoles);
    Product:= (length(Roles)=1) and (Roles[0]=rolProduct);

    if Product then 
      MWareList:= Cache.GetSysManagerWares(0,UserID)
    else  MWareList:= Cache.GetSysManagerWares(); 

    LenWare:= MWareList.Count; //Length(Cache.arWareInfo);         
    OLAWare:= nil;
    OLAWare:= TObjectList.Create;
    ImpCheck.SetProcessPercent(UserID,ThreadData.ID,5);
    Percent:= 70;
    if LenWare>0 then Percent:= Percent/ LenWare else ImpCheck.SetProcessPercent(UserID,ThreadData.ID,Percent);
    prStopProcess( UserID, ThreadData.ID);
    //GetArLinkSources
    try
      for i:=0 to LenWare-1 do  begin
        prStopProcess( UserID, ThreadData.ID);
        Ware:= Cache.GetWare(integer(MWareList.Objects[i])); //Cache.arWareInfo[i];
//        rep:= false;
        OLAWare:= nil;
        if Ware.IsWare and Ware.HasFixedType and (Ware.TypeID>0) 
           {and (cache.arEmplInfo[UserID].UserRoleExists(rolProductDirector) or               
                     (cache.arEmplInfo[UserID].UserRoleExists(rolProduct) and (Ware.ManagerID=UserID)))} then begin
          Wtype:= Ware.TypeID;
          OLAWare:= Ware.GetSrcAnalogs(ca_Ex_TD);
          try      
            for j := 0 to OLAWare.Count-1 do begin
              AWare:= Cache.GetWare(TTwoCodes(OLAWare[j]).ID1);
              if AWare.IsWare and (Wtype<>0) and (AWare.TypeID<>0) and (Wtype <> AWare.TypeID) then begin
                ManagerID:= Ware.ManagerID;
                if Cache.EmplExist(ManagerID) then
                  Manager:= Cache.arEmplInfo[ManagerID].EmplShortName
                else Manager:= 'Менеджер не определен';
                TypeName:= Cache.GetWareTypeName(WType);
                AManagerID:= AWare.ManagerID;
                if Cache.EmplExist(AManagerID) then
                  AManager:= Cache.arEmplInfo[ManagerID].EmplShortName
                else AManager:= 'Менеджер не определен';
                ATypeName:= Cache.GetWareTypeName(AWare.TypeID);
                Source:= TTwoCodes(OLAWare[j]).ID2;
    //Cache.FDCA.GetArLinkSources[Source];                
                Content:= Ware.Name+';'+TypeName+';'+{Manager+';'+}AWare.Name+';'+ATypeName+';'+Manager+';'+{IntToStr(Source)+';'+}Cache.FDCA.GetArLinkSources[Source];
                WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
                Content:= '';
                inc(iCount);
              end;
              prFree(OAWare);//
            end; //for j := 0 to OLAWare.Count-1 do begin
          except
            on E: Exception do prMessageLOGS(nmProc +': '+E.Message,'Log_prg.log' , false);
          end;
          prFree(OLAWare);
        end; //if Ware.IsWare and Ware.HasFixedType and (Ware.TypeID>0) and not(arAWare[Ware.ID]) then begin
        ImpCheck.SetProcessPercent(UserID,ThreadData.ID,Percent);
      end;  //for i:=0 to LenWare-1 do  begin
    except
      on E: EStopError do s:= E.Message;
      on E: Exception do prMessageLOGS(nmProc +': '+E.Message+' Ware.Name='+Ware.Name+' Ware.ID='+IntToStr(Ware.ID)  ,'Log_prg.log' , false);
    end;

  finally
    if iCount>0 then begin
      Subj:= 'Отчет  '+FormatDateTime(cDateTimeFormatY2S, Now());
      ContentType:= CSVContentType;// for Excel(.csv)
      lstBodyMail:=nil;
      lstBodyMail:= TStringList.Create;
      lstBodyMail.Add(Title);
    end;
    ImpCheck.SetProcessPercent(UserID,ThreadData.ID,5);
    if Assigned(OLAWare) then prFree(OLAWare);
    if Assigned(MWareList) then prFree(MWareList);
    CloseFile(file_csv);
    SetLength(EmplRoles,0); 
    SetLength(ImpRoles,0);
    SetLength(Roles,0);
    if iCount=0 then begin
      s:= MessText(mtkNotFoundDataUse);
      raise EBOBError.Create(s);
    end;    
  end;
end;

function fnRepAnalogGBTypes(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,  //  Аналоги ГБ, у которых разные типы
   ContentType:string; ThreadData: TThreadData; filter_data: string): string;     //38(1)
const nmProc ='fnRepAnalogGBTypes';
var TypeName, PathFile, Manager, s, Title, Content: string; 
    Wtype, LenWare, ManagerID, i, j, iCount: integer;
    file_csv: textfile;
    AWare, Ware: TWareInfo;
    arAWare: array of boolean;
    OLAWare: TObjectList;
//    OAWare: TTwoCodes;
    rep, Product: boolean;
    MID: integer;
    ImpRoles, EmplRoles, Roles: tai;
    Percent: real;
//    timerStart: TDateTime;
begin  
//timer:= Now;
//timerStart:= Now;
//prMessageLOGS('-----------------RepAnalogGBTypes.csv--------------------','Log_prg.log' , false); 
  Ware:= nil; 
  s:= '';
  iCount:= 0;
  if not GetEmplTmpFilePath(UserID, PathFile, s) then raise EBOBError.Create(s);  

  //FName:= PathFile+'Export32'+FormatDateTime('_dd.mm_(hh.nn)',Now)+'.csv';
  FName:= PathFile+fnFormRepFileName('38(1)', '.csv', ImpCheck.GetCheckKind(UserID, ThreadData.ID));
  if FileExists(FName) and not SysUtils.DeleteFile(FName) then begin
    s:= MessText(mtkNotDelPrevFile);
    raise EBOBError.Create(MessText(mtkNotDelPrevFile));
  end;
  AssignFile(file_csv, FName);
  filemode:= fmOpenReadWrite; //назначаем файл
  if FileExists(FName) then Reset(file_csv) else ReWrite(file_csv);
  Append(file_csv); 
  //Добавляем шапку:                  
  Title:= 'Аналоги GB, у которых разные типы '; 
  Content:= Title;   
  WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
  Content:= '';
  Content:= 'Товар;Тип;Менеджер;Комментарии';
  WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
  Content:= '';
  //шапка добавлена  
  try
    //Product:= (length(cache.arEmplInfo[UserID].UserRoles)=1) and (cache.arEmplInfo[UserID].UserRoleExists(rolProduct)); 
    EmplRoles:= fnGetUserRoles(UserID);//Cache.arEmplInfo[UserID].UserRoles;    
//    ImpRoles:= Cache.GetImportRoles(ImpCheck.GetImpType(UserID,ThreadData.ID));
    ImpRoles:= Cache.GetRepOrImpRoles(ImpCheck.GetImpType(UserID, ThreadData.ID));
    Roles:= fnGetDuplicateArrayComparisons(impRoles, EmplRoles);
    Product:= (length(Roles)=1) and (Roles[0]=rolProduct);
    
    LenWare:= Length(Cache.arWareInfo);
    SetLength(arAWare,LenWare);
    for i:=0 to LenWare-1 do  begin
      arAWare[i]:= false;
    end;
    OLAWare:= nil;
    OLAWare:= TObjectList.Create;
    ImpCheck.SetProcessPercent(UserID,ThreadData.ID,5);
    Percent:= 70;
    if LenWare>0 then Percent:= Percent/LenWare else ImpCheck.SetProcessPercent(UserID,ThreadData.ID,Percent);
    
    try
    for i:=0 to LenWare-1 do  begin
      prStopProcess( UserID, ThreadData.ID);
      Ware:= Cache.arWareInfo[i];
      rep:= false;
      MID:= 0;
      OLAWare:= nil;
      if Ware.IsWare and Ware.HasFixedType and (Ware.TypeID>0){and not Ware.IsINFOgr} and not(arAWare[Ware.ID]) then begin
        Wtype:= Ware.TypeID;
        OLAWare:= Ware.GetSrcAnalogs(ca_GR);
        try
          for j := 0 to OLAWare.Count-1 do begin
            AWare:= Cache.GetWare(TTwoCodes(OLAWare[j]).ID1);
            //AWare:= Cache.arWareInfo[OAWare.ID1];
            //AType:=  AWare.TypeID;
            if AWare.IsWare and (Wtype<>0) and (AWare.TypeID<>0) and (Wtype <> AWare.TypeID) and not(arAWare[AWare.ID])then begin
              if Product and (AWare.ManagerID=UserID) then 
                MID:= UserID; 
              rep:= true;
                //break;
            end;
          end; //for j := 0 to OLAWare.Count-1 do begin
        except
          on E: Exception do prMessageLOGS(nmProc +': '+E.Message,'Log_prg.log' , false);
        end;
        if rep and ((not Product and (MID=0)) 
                    or(Product and (MID<>0)))then begin      //запись
          if iCount>0 then begin
            WriteLn(file_csv, Content);
            WriteLn(file_csv, Content);
          end;
          ManagerID:= Ware.ManagerID;
          if Cache.EmplExist(ManagerID) then
            Manager:= Cache.arEmplInfo[ManagerID].EmplShortName
          else Manager:= 'Менеджер не определен';
          TypeName:= Cache.GetWareTypeName(WType);
          Content:= Ware.Name+';'+TypeName+';'+Manager+';'+FormatStrForCSV(Ware.Comment);
          WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
          Content:= '';
          inc(iCount);
          arAWare[Ware.ID]:= True;// отметить как напечатанный
          for j := 0 to OLAWare.Count-1 do begin
            //OAWare:= TTwoCodes(OLAWare[j]);
            AWare:= Cache.GetWare(TTwoCodes(OLAWare[j]).ID1);;
            if AWare.IsWare and AWare.HasFixedType and (AWare.TypeID>0) and not(arAWare[AWare.ID]) then begin
              ManagerID:= AWare.ManagerID;
              if Cache.EmplExist(ManagerID) then
                Manager:= Cache.arEmplInfo[ManagerID].EmplShortName
              else Manager:= 'Менеджер не определен';
              TypeName:= Cache.GetWareTypeName(AWare.TypeID);
              Content:= AWare.Name+';'+TypeName+';'+Manager+';'+FormatStrForCSV(AWare.Comment);
              WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
              Content:= '';
              inc(iCount);
              arAWare[AWare.ID]:= true;// отметить как напечатанный              
            end;

          end; //for j := 0 to OLAWare.Count-1 do begin

        end;  
        FreeAndNil(OLAWare);
      end; //if Ware.IsWare then begin
      ImpCheck.SetProcessPercent(UserID,ThreadData.ID,Percent);
    end; // for i:=0 to LenWare-1 do  begin
    except
      on E: EStopError do s:= E.Message;
      on E: Exception do prMessageLOGS(nmProc +': '+E.Message+' Ware.Name='+Ware.Name+' Ware.ID='+IntToStr(Ware.ID)  ,'Log_prg.log' , false);
    end;  

  finally
    if iCount>0 then begin
      Subj:= 'Отчет  '+FormatDateTime(cDateTimeFormatY2S, Now());
      ContentType:= CSVContentType;// for Excel(.csv)
      lstBodyMail:= TStringList.Create;
      lstBodyMail.Add(Title);
    end;
    ImpCheck.SetProcessPercent(UserID,ThreadData.ID,5);
    if Assigned(OLAWare) then prFree(OLAWare);
    SetLength(arAWare,0);
    CloseFile(file_csv);
    SetLength(EmplRoles,0); 
    SetLength(Roles,0);
    SetLength(ImpRoles,0);
    if iCount=0 then begin
      s:= MessText(mtkNotFoundDataUse);
      raise EBOBError.Create(s);
    end;    
  end;
end;
  
function fnRepTypesNull(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,  //  Товары, у которых не указан тип
   ContentType:string; ThreadData: TThreadData; filter_data: string): string;      //38(0)
const nmProc ='fnRepTypeNull';
var PathFile, Manager, s, Title, Content: string; 
    ManagerID, i, iCount: integer;  
    file_csv: textfile;
    Ware: TWareInfo;
    FilterData: TStringList;
    InfoGr, Product: boolean;
    MWareList: TStringList;
    LenWare: integer;
    Percent: real;
//    timerStart: TDateTime;
begin     
//timer:= Now;
//timerStart:= Now;
//prMessageLOGS('-----------------Export_TypesNull.csv--------------------','Log_prg.log' , false);    
  s:= '';
  iCount:= 0;
  FilterData:=nil;
  FilterData:= TStringList.Create;
  FilterData.Text:= filter_data;
  //InfoGr:= (fnStrToIntDef(FilterData.Values['dop_info'],-1)>0);
  InfoGr:= (FilterData.Values['dop_info']='on');
  if not GetEmplTmpFilePath(UserID, PathFile, s) then raise EBOBError.Create(s);  

  //FName:= PathFile+'Export32'+FormatDateTime('_dd.mm_(hh.nn)',Now)+'.csv';
  FName:= PathFile+fnFormRepFileName('38(0)', '.csv', ImpCheck.GetCheckKind(UserID, ThreadData.ID));
  if FileExists(FName) and not SysUtils.DeleteFile(FName) then begin
    s:= MessText(mtkNotDelPrevFile);
    raise EBOBError.Create(MessText(mtkNotDelPrevFile));
  end;
  AssignFile(file_csv, FName);
  filemode:= fmOpenReadWrite; //назначаем файл
  if FileExists(FName) then Reset(file_csv) else ReWrite(file_csv);
  Append(file_csv); 
  //Добавляем шапку:                  
  Title:= 'Товары, у которых не указан тип '; 
  Content:= Title;   
  WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
  Content:= '';
  Content:= 'Товар;Менеджер;Комментарии';
  WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
  Content:= '';
  //шапка добавлена  
  ImpCheck.SetProcessPercent(UserID,ThreadData.ID,5);
  try
    try
      Product:= (length(cache.arEmplInfo[UserID].UserRoles)=1) and (cache.arEmplInfo[UserID].UserRoleExists(rolProduct)); 

      if Product then 
        MWareList:= Cache.GetSysManagerWares(0,UserID)
      else  MWareList:= Cache.GetSysManagerWares(); 

      LenWare:= MWareList.Count; //Length(Cache.arWareInfo);
      prStopProcess( UserID, ThreadData.ID);
      Percent:= 70;
      if LenWare>0 then Percent:= Percent/LenWare else ImpCheck.SetProcessPercent(UserID,ThreadData.ID,Percent);
      for i:= 0 to LenWare-1 do begin
        prStopProcess( UserID, ThreadData.ID);
        Ware:= Cache.GetWare(integer(MWareList.Objects[i])); //Cache.arWareInfo[i];
        //if (Ware.IsWare) and (Ware.IsINFOgr=InfoGr) and (Ware.TypeID=0) then begin
        if (Ware.IsWare) and (not Ware.IsINFOgr or InfoGr) and (Ware.TypeID=0) then begin
          ManagerID:= Ware.ManagerID;
          {if (cache.arEmplInfo[UserID].UserRoleExists(rolProductDirector)) or               
             ((cache.arEmplInfo[UserID].UserRoleExists(rolProduct)) and (ManagerID=UserID)) then begin}
            if Cache.EmplExist(ManagerID) then
              Manager:= Cache.arEmplInfo[ManagerID].EmplShortName
            else Manager:= 'Менеджер не определен';
            Content:= Ware.Name+';'+ Manager+';'+FormatStrForCSV(Ware.Comment);
            WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
            Content:= '';
            inc(iCount);
          {end;}
        end;
        ImpCheck.SetProcessPercent(UserID,ThreadData.ID,Percent);
      end;
    except
      on E: EStopError do s:= E.Message;
      on E: Exception do prMessageLOGS(nmProc +': '+E.Message);
    end;

  finally
    if iCount>0 then begin  
      Subj:= 'Отчет  '+FormatDateTime(cDateTimeFormatY2S, Now());
      ContentType:= CSVContentType;// for Excel(.csv)
      lstBodyMail:= TStringList.Create;
      lstBodyMail.Add(Title);
    end;

    ImpCheck.SetProcessPercent(UserID,ThreadData.ID,5);
    CloseFile(file_csv);
    if Assigned(MWareList) then prFree(MWareList);
    if Assigned(FilterData) then prFree(FilterData);
    if iCount=0 then begin 
      s:= MessText(mtkNotFoundDataUse);
      raise EBOBError.Create(s);
    end;    
  end;
   
end;

function ConvertKod(s,KodOld, KodNew: string): string;
begin
if Pos( KodOld, s)>0 then 
  s:= StringReplace(s,#160{chr(KodOld)},#32{chr(KodNew)},[rfReplaceAll]);
Result:= s;
end; 

{----------------------------------------------------------------------------------------}
{        Получение списка товара по условию, Бренд, Группа, строка поиска
{----------------------------------------------------------------------------------------}
procedure prProductWareSearchOld(Stream: TBoBMemoryStream; ThreadData: TThreadData);
const nmProc = 'prProductWareSearch'; // имя процедуры/функции
var UserId: integer;
    lstSearchWare: TStringList;     // коды найденных товаров
    Template: string;          // строка поиска
    idxTemplate: integer;         // код бренда/группы для отбора товара
    IgnoreSpec: byte;
    TypeList: byte;            // Тип возвращаемого списка 0 - краткий, 1 - полный
    CheckUser: byte;            // Проверять менеджера у товара? 0 - нет, 1 да
  //----------- возвращает массив кодов товаров, отсортированных по наименованию
  procedure prSearchWareNames;
  var i: integer;
      fl: boolean;
      s, ss: String;
  begin
    lstSearchWare:=nil;
    fl:= False;
    if Template = '' then Exit;
    s:= AnsiUpperCase(Template);
    if IgnoreSpec > 0 then ss:= fnDelSpcAndSumb(s);
    lstSearchWare:= fnCreateStringList(true, dupIgnore);
    with Cache do for i:= 1 to length(arWareInfo)-1 do begin
      if not WareExist(i) or not (arWareInfo[i].IsWare) then Continue;
      if Boolean(CheckUser) and (arWareInfo[i].ManagerID <> UserId) then Continue;
      case IgnoreSpec of
        0: fl:= pos(s,arWareInfo[i].Name)>0;
        1: fl:= pos(ss,arWareInfo[i].NameBS)>0;
        2: fl:= (pos(s,arWareInfo[i].Name)>0) or (pos(ss,arWareInfo[i].NameBS)>0);
      end;
      if fl then lstSearchWare.AddObject(arWareInfo[i].Name, pointer(i));
    end;
  end;
  //-------------------------- поиск товара по коду бренда/группы   //поиск товаров бренда/группы по коду товара
  procedure prSearchWareBGCode;
  var i: integer;
      fl, isBG: boolean;
  begin
    if idxTemplate = 0 then exit;
    with Cache do begin
      isBG:= Cache.arWareInfo[idxTemplate].IsGrp;
      lstSearchWare:= TStringList.Create;
      lstSearchWare.Sorted:= True;
      for i:= 1 to length(arWareInfo)-1 do begin
        if not WareExist(i) or (arWareInfo[i].PgrID < 1) then Continue;
        if Boolean(CheckUser) and (arWareInfo[i].ManagerID <> UserId) then Continue;
        if (arWareInfo[i].PgrID=pgrDeliv) then Continue; // пропускаем доставки
        if Cache.arWareInfo[i].IsArchive then Continue;
        if isBG then fl:= arWareInfo[i].GrpID = idxTemplate
                else fl:= arWareInfo[i].PgrID = idxTemplate;
        if fl then lstSearchWare.AddObject(arWareInfo[i].Name, pointer(i));
      end;
    end;
  end;
 //-------------------------- Записать списка найденного товара в поток
  procedure prSaveResultToStream;
  var i, idx: integer;
      s: string;
  begin
    Stream.WriteInt(lstSearchWare.Count);
    for i:= 0 to lstSearchWare.Count-1 do begin // Запись списка в поток
      idx:= Integer(lstSearchWare.Objects[i]);
      Stream.WriteInt(idx);
      case TypeList of
        1: begin
             s:= Cache.arWareInfo[idx].GrpName;
             Stream.WriteStr(s);
             s:= Cache.arWareInfo[idx].PgrName;
             Stream.WriteStr(s);
           end;
      else
        Stream.WriteInt(Cache.arWareInfo[idx].GrpID);
        Stream.WriteInt(Cache.arWareInfo[idx].PgrID);
      end; // case
      Stream.WriteStr(Cache.arWareInfo[idx].Name);
    end;
  end;
  //--------------------------
begin
  Stream.Position:= 0;
  lstSearchWare:= nil;
  try
    try
      UserID:= Stream.ReadInt;
      prSetThLogParams(ThreadData,0,UserId);

      if not Cache.EmplExist(UserID) then raise EBOBError.Create(MessText(mtkNotClientExist));
      if (fnInIntArray(rolProduct, Cache.arEmplInfo[UserId].UserRoles)=-1) then
        raise EBOBError.Create(MessText(mtkNotRightExists));

      CheckUser:= Stream.ReadByte;  // Проверка менеджера у товара
      TypeList:= Stream.ReadByte;  // Тип списка

      if Stream.ReadByte = 1 then begin // Поиск по строке
        IgnoreSpec:= Stream.ReadByte;
        Template:= Stream.ReadStr;
        if length(Template)<constMinSearchCharQty then
          raise EBOBError.Create('Строка поиска должна быть не менее '+
            IntToStr( constMinSearchCharQty)+'-х символов.');
        TestCssStopException;
        prSearchWareNames;
      end else begin // поиск по коду бренда/группы
        TestCssStopException;
        idxTemplate:= Stream.ReadInt;
        prSearchWareBGCode;
      end;

      if lstSearchWare.Count = 0 then
        raise EBOBError.Create('По Вашему запросу "'+Template+'" товар не найден.');

      Stream.Clear;
      Stream.WriteInt(aeSuccess);
      TestCssStopException;
      prSaveResultToStream;  // запись результата в поток
    except
      on E: EBOBError do begin
        Stream.Clear;
        Stream.WriteInt(aeCommonError);
        Stream.WriteStr(E.Message);
        fnWriteToLog(ThreadData, lgmsUserError, nmProc, '', E.Message, '');
      end;
      on E: Exception do begin
        Stream.Clear;
        Stream.WriteInt(aeCommonError);
        Stream.WriteStr(MessText(mtkErrProcess));
        fnWriteToLog(ThreadData, lgmsSysError, nmProc, '', E.Message, '');
      end;
    end;
  finally
    prFree(lstSearchWare);
    //prFree(lstSearchWare);
    Stream.Position:= 0;
  end;
end;
{----------------------------------------------------------------------------------------}
{ Страница продукт-менджера, получение списка товара по условию, Бренд, Группа, строка поиска
{----------------------------------------------------------------------------------------}
procedure prProductPageOld(Stream: TBoBMemoryStream; ThreadData: TThreadData);
const nmProc = 'prProductPage'; // имя процедуры/функции
var UserId: integer;
  lstBrand: TStringList;  // Список брендов (0-уровень дерева)
  lstGroup: TStringList;  // Список групп бренда (1-уровень вложения дерева) 
  ArLinkSources: tas;
  //--------------------- Освобождение памяти от списка брендов и групп (дерево)
  procedure prClearBrandList;
  var i: integer;  // loop local var
      list: TStringList;
  begin
    try
      for i:= 0 to lstBrand.Count-1 do
        if Assigned(lstBrand.Objects[i]) then begin                                 
          list:= TStringList(lstBrand.Objects[i]);                                  
          prFree(List);  // Освобождение списка групп                               
        end;
    except
     on E: Exception do fnWriteToLog(ThreadData, lgmsUserError, nmProc, '', E.Message, 'prClearBrandList');
    end;
    prFree(lstBrand);  // Освобождение списка брендов
  end;

  function fnGetTreeGroupWare: integer;
  var i, idxBrand: integer;
      Ware: TWareInfo;
  begin
    Result:= 0;
    lstBrand:= fnCreateStringList(true, dupIgnore);
    if Cache.WareCacheUnLocked then begin
      for i:= 0 to Length(Cache.arWareInfo)-1 do try
        if not Cache.WareExist(i)  then Continue;
        Ware:=Cache.GetWare(i);
        if Ware.IsArchive then Continue;
        if not Ware.isWare then Continue;
//        if (Ware.PgrID = pgrDeliv) then Continue; // пропускаем доставки
        if (Ware.ManagerID <> UserId) {and not (Ware.isInfoGr and Cache.arEmplInfo[UserId].UserRoleExists(rolModelManageAuto))} then Continue;
        idxBrand:= lstBrand.IndexOf(Ware.GrpName + '=' + IntToStr(Ware.GrpID));
        if idxBrand < 0 then begin
          lstGroup:= fnCreateStringList(true, dupIgnore);
          idxBrand:= lstBrand.AddObject(Ware.GrpName+'='+IntToStr(Ware.GrpID), lstGroup);
        end else lstGroup:= TStringList(lstBrand.Objects[idxBrand]);
        if idxBrand < 0 then Continue;
        lstGroup.AddObject(Ware.PgrName, pointer(Ware.PgrID));
      except
        Result:= -1;
      end;
    end else Result:= 1;
  end;
  //-------------------------- Запись списка брендов и групп (дерево) в поток
  procedure prSaveResultToStream;
  var i, j: integer;  // loop local var
  begin
    Stream.WriteInt(lstBrand.Count);
    for i:= 0 to lstBrand.Count-1 do begin // Запись бредов в поток
      Stream.WriteInt(StrToInt(copy(lstBrand[i], Length(lstBrand.Names[i])+2 ,MaxInt)));
      Stream.WriteStr(lstBrand.Names[i]);

      if not Assigned(lstBrand.Objects[i]) then  // правка существования списка групп
        Stream.WriteInt(0)
      else with TStringList(lstBrand.Objects[i]) do begin //Запись групп в поток
        Stream.WriteInt(Count);
        for j:= 0 to Count-1 do begin
          Stream.WriteInt(Integer(Objects[j]));
          Stream.WriteStr(Strings[j]);
        end;
      end; // with
    end; // for
  end;
  //-------------------------- Запись массива строк в поток
  procedure prSaveTasToStream(_arTas: Tas; Stream: TBOBMemoryStream; pSort: Boolean = False);
  var i, CountIdx: Integer;
      position: int64;
      lstSort: TStringList;
  begin
    CountIdx:= 0;
    Position:= Stream.Position;
    Stream.WriteInt(0);
    if pSort then begin
      lstSort:= fnCreateStringList(true, dupIgnore);
      try
        for i:= 0 to Length(_arTas)-1 do if _arTas[i]<>'' then
          lstSort.AddObject(_arTas[i], pointer(i));
        for i:= 0 to lstSort.Count-1 do begin
          Stream.WriteInt(Integer(lstSort.Objects[i]));
          Stream.WriteStr(lstSort[i]);
        end;
        CountIdx:= lstSort.Count;
      finally
        prFree(lstSort);
      end;
    end else for i:= 0 to Length(_arTas)-1 do if _arTas[i]<>'' then begin
      Stream.WriteInt(i);
      Stream.WriteStr(_arTas[i]);
      inc(CountIdx);
    end;
    Stream.Position:= position;
    Stream.WriteInt(CountIdx);
    Stream.Position:= Stream.Size;
  end;
  //--------------------------
begin
  Stream.Position:= 0;
  lstBrand:= nil;
  try
    try
      UserID:= Stream.ReadInt;
      prSetThLogParams(ThreadData,0,UserId);

      if not Cache.EmplExist(UserID) then raise EBOBError.Create(MessText(mtkNotClientExist));
      if (fnInIntArray(rolProduct, Cache.arEmplInfo[UserId].UserRoles)=-1) then
        raise EBOBError.Create(MessText(mtkNotRightExists));
      TestCssStopException;
      case fnGetTreeGroupWare of
        0: if lstBrand.Count<1 then raise EBOBError.Create('Дерево брендов и групп пустое.');
        1: raise EBOBError.Create('Ошибка формирование дерева - Кеш заблокирован.');
      else raise EBOBError.Create('Неопределенная ошибка формирования дерева брендов и групп');
      end;

      if lstBrand.Count<1 then raise EBOBError.Create('Дерево брендов и групп пустое.');

      Stream.Clear;
      Stream.WriteInt(aeSuccess);
      TestCssStopException;
      prSaveResultToStream;      // Запись дерева в поток
      TestCssStopException;
      ArLinkSources:= Cache.FDCA.GetArLinkSources;
      prSaveTasToStream(ArLinkSources,  Stream); // Запись справочника источников в поток;
    except
      on E: EBOBError do begin
        Stream.Clear;
        Stream.WriteInt(aeCommonError);
        Stream.WriteStr(E.Message);
        fnWriteToLog(ThreadData, lgmsUserError, nmProc, '', E.Message, '');
      end;
      on E: Exception do begin
        Stream.Clear;
        Stream.WriteInt(aeCommonError);
        Stream.WriteStr(MessText(mtkErrProcess));
        fnWriteToLog(ThreadData, lgmsSysError, nmProc, '', E.Message, '');
      end;
    end;
  finally
    SetLength(ArLinkSources,0);
    if lstBrand<>nil then prClearBrandList;
    Stream.Position:= 0;
  end;
end;
//--============================================================================================--//
function fnWareSearchWithValidation(aWareName: string; aCondition: string; aBrandName: string=''): Tai;
const cndtn1 = ' ';
var i, count: integer;
    FindWares: Tai;
    isBrandWare: boolean;
    ware: TWareInfo;
begin
  isBrandWare:= false;
  SetLength(Result, 0);
  SetLength(FindWares, 0);
  count:= 0;
  if aBrandName <> '' then isBrandWare:= True;

  FindWares:= SearchWareNames(aWareName, 1);

  if Length(FindWares)>0 then begin
    SetLength(Result, Length(FindWares));
    for i:= 0 to High(FindWares) do begin
      TestCssStopException;
      ware:= Cache.GetWare(FindWares[i]);
    //при необходимости проверяем относится ли данный товар к искомому бренду:
      if isBrandWare and (ware.WareBrandName <> aBrandName) then Continue;
      if (aWareName = ware.Name) or (aWareName = AnsiUpperCase(Ware.Name)) then begin
        Result[count]:= FindWares[i];
        inc(count);
        Continue;
      end;
      if aWareName = Trim(copy(ware.Name, pos('/', ware.Name)+1, Length(Ware.Name))) then begin
        Result[count]:= FindWares[i];
        inc(count);
      end;
      if Pos(aWareName+cndtn1, ware.Name) = 0 then Continue
      else begin
        Result[count]:= FindWares[i];
        inc(count);
      end;
    end;
    SetLength(Result, count);
  end;
//Очистка
  for i:= 0 to High(FindWares) do begin
    FindWares[i]:= 0;
  end;
  SetLength(FindWares, 0);
end;
//--============================================================================================--//
function fnGetModelsListWithTDCodes (pManufID: integer): TStringList;
var i: integer;
    ModelsList: TStringList;
    Model: TModelAuto;
begin
  ModelsList:=nil;
//  Result:=nil;
  Result:= TStringList.Create;
  ModelsList:= Cache.FDCA.Manufacturers.Items[pManufID].GetModelsList(constIsAuto);
  try
    for i:= 0 to ModelsList.Count-1 do begin
      TestCssStopException;
      Model:= Cache.FDCA.Models.GetModel(integer(ModelsList.Objects[i]));
      Result.AddObject(IntToStr(Model.SubCode), Model);
    end;
  finally
    prFree(ModelsList);
  end;
end;
//--============================================================================================--//
function fnGetWareAnaliticsDataObjects(aWareList: TStringList; aRepType, aRole, aTypeSys: integer): TObjectList;
var Image, Descr: string;
    i: integer;
    WareAnaliticsData: TWareAnaliticsData;
    Ware: TWareInfo;
begin
//  WareAnaliticsData:=nil;
//  Result:=nil;
  Result:= TObjectList.Create(true);
  Result.Capacity:= aWareList.Capacity;

  case aRepType of
    16: begin
        Image:= GetIniParam(nmIniFileBOB, 'Options', 'wareimages', '');   
        Descr:= GetIniParam(nmIniFileBOB, 'Options', 'waredescript', ''); 
      end;
  end;

  for i:= 0 to aWareList.Count-1 do begin
    TestCssStopException;
    Ware:= Cache.GetWare(integer(aWareList.Objects[i]));

    if not Ware.IsINFOgr then begin
      WareAnaliticsData:= TWareAnaliticsData.Create(Ware, aRole, aTypeSys);
      if not assigned(WareAnaliticsData) then Continue;
      WareAnaliticsData.FillSelfData(aRepType);
      case aRepType of
        16: WareAnaliticsData.CheckImgDescrExist(Image, Descr);
      end;
      Result.Add(WareAnaliticsData);

    end else if (aRole = 9) then begin
      WareAnaliticsData:= TWareAnaliticsData.Create(Ware, aRole, aTypeSys);
      if not assigned(WareAnaliticsData) then Continue;
      WareAnaliticsData.FillSelfData(aRepType);
      case aRepType of
        16: WareAnaliticsData.CheckImgDescrExist(Image, Descr);
      end;
      Result.Add(WareAnaliticsData);
    end;
   
  end;

end;
//--============================================================================================--//
function fnPrimaryUserRole(UserID: integer; var aTypeSys: integer): integer;
var i: integer;
    Roles: Tai;
begin
  Result:= 0;
  SetLength(Roles, 0);
  try
    Roles:= fnGetUserRoles(UserID);
    for i:= 0 to High(Roles) do begin
      TestCssStopException;
      Case Roles[i] of
        9: begin
            Result:= 9;
          end;
        17: begin
            Result:= 17;
            aTypeSys:= constIsAuto;
          end;
        18: begin
            Result:= 18;
            aTypeSys:= constIsMoto;
          end;
        19: begin
            Result:= 19;
            aTypeSys:= constIsAuto;
          end;
      end;// Case Roles[i] of
    end;
  except
    on E: Exception do prMessageLOGS('fnPrimaryUserRole: '+E.Message);
  end;
end;    
//--============================================================================================--//
//----- Поиск артикулов TecDoc, соответствующих товару Grossbee по имени(группе)
function SearchWareGBInTecDoc(Ware: TWareInfo; ThreadData: TThreadData): TStringList;
const nmProc='SearchWareGBInTecDoc';
var s, s1: String;
    lstWares, lstAddon: TStringList;
//    i, j, Count: Integer;
    IBQuery: TIBSQL;
    IBD: TIBDatabase;
  //=== Получение наименование товара с отбошеным префиксом Бренда и окончания с P
  function GetCutNameForSearchTD(pName: String): String;
  begin
    Result:= fnGetStrPart('   ', Trim(pName));
    Result:= fnGetStrPart(' ', Result, 1);
  end;

begin
  Result:= fnCreateStringList(True, dupIgnore);
  lstAddon:= nil;
  lstWares:= nil;
  IBD:= nil;
  IBQuery:= nil;
  try  
    try
      lstWares:= fnCreateStringList(True, dupIgnore);
      IBD:= cntsTDT.GetFreeCnt;
      IBQuery:= fnCreateNewIBSQL(IBD, 'IBQuery_'+nmProc, -1, tpRead, true);

     { if Ware.IsINFOgr then  begin
        with Ware do begin
          lstWares.Append(NameBS);     //
          lstWares.Append(AnsiUpperCase(fnDelSpcAndSumb(WareSupName)));     //           select DS_MF_ID from DATA_SUPPLIERS where ART_SUP_ID=DS_ID
        end;
        s:= fnGetDelimiterText(lstWares,',',' ');
        IBQuery.SQL.Text:= 'SELECT  DS_MF_ID, ART_NR FROM ARTICLES, DATA_SUPPLIERS '#10+
           'WHERE ART_SUP_ID=DS_ID and ("'+s+'" CONTAINING ART_SEARCH)'#10+
           'ORDER BY ART_NR';      
      end
      else begin }
        with Ware do begin
          lstWares.Append(Name);
          lstWares.Append(NameBS);
          lstWares.Append(AnsiUpperCase(WareSupName));
    //1511      lstWares.Append(GetCutNameForSearchTD(Name));  //GetCutNameForSearchTD - Получение наименование товара с отброшеным префиксом Бренда и окончания с P
          lstWares.Append(AnsiUpperCase(fnDelSpcAndSumb(WareSupName)));
    //      lstWares.Append(AnsiUpperCase(fnDelSpcAndSumb(Name)));
        end;
        if not Assigned(lstWares) then exit;

    (*    case Ware.WareBrandID of

          brandCONTITECH: begin   // CONTITECH
              lstAddon:= GetLstPrefixAddon(Ware.WareBrandID);  // Prefix
              Count:=lstWares.Count-1;
              for i:= 0 to lstAddon.Count-1 do
                for j:= 0 to Count do lstWares.Add(lstAddon[i]+lstWares[j]);
              prFree(lstAddon);

              lstAddon:= GetLstSufixAddon(Ware.WareBrandID);  // Sufix
              Count:=lstWares.Count-1;
              for i:= 0 to lstAddon.Count-1 do
                for j:= 0 to Count do lstWares.Add(lstWares[j]+lstAddon[i]);
              prFree(lstAddon);
            end;
    {      43394: begin   // HANS PRIES
              lstFound:= SearchWareGBInTecDocBasic(lstWares, lstBrands, ThreadData);;
              if lstFound.Count=0 then begin
                lstSearch.Clear;
      //          s:= GetCutNameForSearchTD(Cache.GetWare(pWareID).Name);
                s1:= fnDelSpcAndSumb(s,'');
                if (Length(s1)=9) and (s[4]=' ') and (s[8]=' ') then System.Delete(s1, 7, MaxInt);
                lstSearch.Add(s1);
                prFree(lstFound);
                lstFound:= SearchWareGBInTecDocBasic(lstSearch, lstBrands, ThreadData);
              end;
              if lstFound.Count>1 then ChoiceFromMany(lstFound, plstTwice, lstWares);
              Result.Assign(lstFound);
            end; }
        end; // case
    *)
        //Result:= fnCreateStringList(True, dupIgnore);

        s:= fnGetDelimiterText(lstWares,',',' ');
    //    prMessageLOGS(s, 'Import', false);
        s1:= fnArrOfIntToString(TBrandItem(Cache.WareBrands[Ware.WareBrandID]).TDMFcodes);
    //    prMessageLOGS(s1, 'Import', false);
        IBQuery.SQL.Text:= 'SELECT DS_MF_ID, ART_NR FROM ARTICLES, DATA_SUPPLIERS '#10+
           'WHERE (ART_SUP_ID=DS_ID) and DS_MF_ID IN ('+s1+')'#10+
           'and ( ("'+s+'" CONTAINING ART_SEARCH) or ("'+s+'" CONTAINING (ART_NR))) '#10+
    //1511      'WHERE ((ART_SEARCH in ('+s+')) OR ART_NR in ('+s+')) and '#10+
          'ORDER BY ART_SUP_BRA, ART_NR';
  {    end; }
      IBQuery.Prepare;
      IBQuery.ExecQuery;
      while not IBQuery.EOF do begin
        TestCssStopException;
        Result.Add(IBQuery.FieldByName('DS_MF_ID').AsString+'|'+IBQuery.FieldByName('ART_NR').asString);
        if cntsTDT.Suspend then raise EBOBError.Create(MessText(mtkExitBySuspend));
        IBQuery.Next;
      end;
      IBQuery.close;
    except
      on E: Exception do begin
        fnWriteToLog(ThreadData, lgmsSysError, nmProc, '', E.Message, '');
      end;
    end;
  finally  
    prFree(lstAddon);
    prFree(lstWares);
    if assigned(IBQuery) then prFreeIBSQL(IBQuery);
    if assigned(IBD) then cntsTDT.SetFreeCnt(IBD, True);
  end;  
end;
//--============================================================================================--//
function fnAddUsageClausefromRecord (aLink3usageClause: Link3CritData; var aMsgStr: string): integer;
var ResCode: integer;
begin
  ResCode:= resAdded;
  aMsgStr:= Cache.FDCA.CheckWareModelNodeUsage(aLink3usageClause.wareID, aLink3usageClause.ModelID,
    aLink3usageClause.nodeID, aLink3usageClause.UsageClauseName, aLink3usageClause.UsageClauseValue,
      ResCode, soExcel, aLink3usageClause.userID);
  Result:= ResCode;
end;
//--============================================================================================--//
function fnAddLink3fromRecord (aLink3record: Link3data; var aMsgStr: string): integer;
var ResCode: integer;
begin
  ResCode:= aLink3record.Oper; //0406 resAdded;
  if ResCode=-1 then begin
    ResCode:= resWrong;
  end;
  aMsgStr:= Cache.FDCA.CheckWareModelNodeLink(aLink3record.wareID, aLink3record.modelID,
    aLink3record.NodeID, ResCode, soExcel, aLink3record.UserID);
  Result:= ResCode;
end;
//--============================================================================================--//
function fnAddLink2fromReport (aLink3record: Link3data; var aMsgStr: string): integer;
// вид операции: Value='' - удаление, Value<>'': связка есть - редактирование, связки нет - добавление
// ResCode на выходе: resError- ошибка, resDoNothing - не менялось,
// resAdded - добавление, resEdited - редактирование, resDeleted - удаление
begin
  Result:= 0;
  if aLink3record.Oper = -100500 then begin
    Result:= -1;
    aMsgStr:= 'Не удалось разпознать код операции.';
  end
  else if aLink3record.Oper <> 1 then begin
    Result:= resAdded;
    aMsgStr:= '';
  end
  else if aLink3record.L2Qty = -100500 then begin
    Result:= -1;
    aMsgStr:= 'Не удалось разпознать числовое значение для создания связи модели и узла.';
  end else begin
    aMsgStr:= Cache.FDCA.CheckModelNodeLinkDup(aLink3record.modelID, aLink3record.NodeID,
      FloatToStr(aLink3record.L2Qty), Result, soExcel, aLink3record.UserID);
    Result:= Result;
  end;
end;
//--============================================================================================--//
function fnSumDigits (aInt: integer): integer;
begin
  Result:= 0;
  while aInt<>0 do begin
    Result:= Result + (aInt mod 10);
    aInt:= aInt div 10;
  end;
  Result:= Result;
end;
//--============================================================================================--//
function fnColorModulator (pCode: integer): intRGB;
begin
  if pCode > (cnBaseColorInt * cnBaseColorInt) then
    raise Exception.Create ('Код выходит за рамки допустимого диапазона!');
  Result.R:= cnBaseColorInt - (pCode div cnBaseColorInt);
  Result.G:= cnBaseColorInt - (pCode mod cnBaseColorInt);
  Result.B:= cnBaseColorInt - fnSumDigits(pCode*pCode);
end;
//--============================================================================================--//
function fnColorDemodulator (pIntColor: integer): integer;
var Color: intRGB;
    Code: integer;
begin
  Color:= fnGetRGBfromInt(pIntColor);
  Code:= (cnBaseColorInt - Color.R)*cnBaseColorInt + (cnBaseColorInt - Color.G);
  if fnSumDigits(Code*Code) = (cnBaseColorInt - Color.B) then Result:= Code
  else Result:= -1;
end;
//--============================================================================================--//
function fnLink2Reader (aCellValue: string): string;
const cnND = 'Н/Д';
      cnNearly ='~';
begin
  Result:= aCellValue;
  Result:= StringReplace(Result, cnND, '0', [rfReplaceAll]);
  Result:= StringReplace(Result, cnNearly, '-', [rfReplaceAll]);
end;
//--============================================================================================--//
{function fnGetUserRoles (pUSERID: integer): Tai;
var Empl: TEmplInfoItem;
begin
  SetLength(Result, 0);
  if not Cache.EmplExist(pUSERID) then exit; 
  Empl:= Cache.arEmplInfo[pUserID];
  Result:= Empl.UserRoles;
end;  }
function fnGetUserRoles (pUSERID: integer): Tai;
var Empl: TEmplInfoItem;
    i: Integer;                   
begin
  SetLength(Result, 0);
  if not Cache.EmplExist(pUSERID) then exit;
  Empl:= Cache.arEmplInfo[pUserID];
  SetLength(Result, Length(Empl.UserRoles));     
  for i:= 0 to High(Empl.UserRoles) do Result[i]:= Empl.UserRoles[i];  
//  Result:= Empl.UserRoles;                                             
end;
//--============================================================================================--//
function fnUserRolesEntree(pReportType: integer; pUserRoles: tai): boolean;
var i, RoleID: integer;
    access: boolean;
begin
  Result:= False;
  access:= False;
  case pReportType of
    45,16, 18, 19, 22, 55: begin
      for i:= 0 to High(pUserRoles) do begin
        RoleID:= pUserRoles[i];
        case RoleID of
          9: begin
              Result:= False;
              access:= true;
            end;
          17, 18, 19: begin
              Result:= True;
              access:= true;
            end;
        end;
      end;
    end;
  end;
  if not access then begin
    raise EBOBError.Create (MessText(mtkNotRightExists));
  end;
  Result:= Result AND access;
end;
//--============================================================================================--//
function fnGetModelWares(aNodeIDs: Tai; aModel: TModelAuto): arTas;
var i, j, k: integer;
    NodeWares: Tai;
    Link2: TSecondLink;
    List: TList;
begin
  SetLength (NodeWares, 0);
  SetLength (Result, Length(aNodeIDs));
  for i:= 0 to (Length(Result)-1) do SetLength(Result[i], 0);
  List:= aModel.GetModelNodesList;
  try
    for k:= 0 to List.Count-1 do begin
      TestCssStopException;
      Link2:= List[k];
      i:= fnInIntArray(Link2.LinkID, aNodeIDs);  //Link2.LinkID - id ноды
      if i > -1 then try
        NodeWares:= Link2.GetWareCodes;
        if Length(NodeWares)>0 then begin        //  SetLength(Result[i], Length(NodeWares));
          if Length(NodeWares)>(Length(Result[i])) then
            SetLength(Result, Length(aNodeIDs), Length(NodeWares));   // ???  
          for j:= 0 to High(NodeWares) do Result[i][j]:= Cache.GetWare(NodeWares[j]).Name;
        end;
      finally
        SetLength (NodeWares, 0);
      end;
    end;
  finally
    prFree(List);
    SetLength (NodeWares, 0);
  end;
end;
//--============================================================================================--//
function fnDeclareXMLcols (aWidthArray: tai): string;
var i, cols, L: integer;
begin
  Result:= '';
  cols:= Length(aWidthArray)-1;
  for i:= 0 to cols do begin
    Result:= Result+'<Column ss:AutoFitWidth="0" ss:Width="';
    L:= aWidthArray[i];
    Case L of
      0..9   : Result:= Result+'45"/>'#10;
      10..17 : Result:= Result+IntToStr((L-4)*8)+'"/>'#10;
      18..25 : Result:= Result+IntToStr((L-3)*7)+'"/>'#10;
      26..255: Result:= Result+IntToStr(L*6)+'"/>'#10;
    end;
  end;
// DeclareCols:= DeclareCols+'<Column ss:AutoFitWidth="0" ss:Width="'+IntToStr((WidthArray[j])*5)+'"/>'#10;
end;
//--============================================================================================--//
function fnWrkShtNameSpotter (aWrkShtName: string): string;
const LengthLim = 31;
      ForbCharArr: array[0..5] of char = ('?','[',']',':','/','\');
var i: integer;
    ch: char;
begin
  Result:= aWrkShtName;
  for i:= 0 to High(ForbCharArr) do begin
    ch:= ForbCharArr[i];
    if Pos(ch, Result) > 0 then
      Case ch of
        '?': Result:= StringReplace(Result, '?', ' ', [rfReplaceAll]);
        '[': Result:= StringReplace(Result, '[', '{', [rfReplaceAll]);
        ']': Result:= StringReplace(Result, ']', '}', [rfReplaceAll]);
        ':': Result:= StringReplace(Result, ':', '_', [rfReplaceAll]);
        '/': Result:= StringReplace(Result, '/', '|', [rfReplaceAll]);
        '\': Result:= StringReplace(Result, '\', '|', [rfReplaceAll]);
      end;
  end;
  if Length(Result) > LengthLim then Result:= copy(Result, 1, LengthLim);
end;
//--============================================================================================--//
function fnGetTreeNodes(aNodeIDs: Tai; aTypeSys: integer): arTas;
var nodeParentID, lnght, hgh, i, j, CurrentDepth, MaxDepth: integer;
    TreeNodeCodes_array: arTai;
    nodeBranch: Tai;
    Units: Tas;
begin
  MaxDepth:= 1; //на этой глубине в массиве могут быть только корневые элементы-предки
  lnght:= Length(aNodeIDs);
  hgh:= High(aNodeIDs);
  SetLength(Result, 0);
  SetLength(TreeNodeCodes_array, 0);
  SetLength(nodeBranch, lnght);
  SetLength(Units, lnght);
  try
    for i:= 0 to hgh do begin
      nodeBranch[i]:= aNodeIDs[i];
      Units[i]:= Cache.GetMeasName(Cache.FDCA.AutoTreeNodesSys[aTypeSys][(aNodeIDs[i])].MeasID);
    end;
    //вычисляем максимальную глубину узлов дерева
    for i:=0 to hgh do begin
      CurrentDepth:= 1;
      nodeParentID:= Cache.FDCA.AutoTreeNodesSys[aTypeSys][(nodeBranch[i])].ParentID;
      while nodeParentID > 0 do begin
        nodeParentID:= Cache.FDCA.AutoTreeNodesSys[aTypeSys][nodeParentID].ParentID;
        inc (CurrentDepth);
        if CurrentDepth > MaxDepth then MaxDepth:= CurrentDepth;
      end;
    end;

    SetLength(TreeNodeCodes_array, lnght, MaxDepth);
    for i:= 0 to hgh do
      if (Cache.FDCA.AutoTreeNodesSys[aTypeSys][(nodeBranch[i])].ParentID >= 0) then begin
        TestCssStopException;
        TreeNodeCodes_array[i, 0]:= nodeBranch[i];
        while Cache.FDCA.AutoTreeNodesSys[aTypeSys][(TreeNodeCodes_array[i, 0])].ParentID > 0 do begin
          for j:= (MaxDepth-1) downto 1 do TreeNodeCodes_array[i, j]:= TreeNodeCodes_array[i, j-1];
  //        TreeNodeCodes_array[i, 0]:= Cache.FDCA.AutoTreeNodesSys[aTypeSys][(TreeNodeCodes_array[i, j])].ParentID;
          TreeNodeCodes_array[i, 0]:= Cache.FDCA.AutoTreeNodesSys[aTypeSys][(TreeNodeCodes_array[i, 1])].ParentID; 
        end;
      end;

    SetLength(Result, lnght, MaxDepth+1);
    for i:= 0 to hgh do begin
      for j:= 0 to MaxDepth-1 do
        if TreeNodeCodes_array[i, j] > 0 then
          Result[i, j]:= Cache.FDCA.AutoTreeNodesSys[aTypeSys][(TreeNodeCodes_array[i, j])].NameSys
        else Result[i, j]:= '';
      Result[i, MaxDepth]:= Units[i];
    end;
  finally
    for i:= 0 to High(TreeNodeCodes_array) do SetLength (TreeNodeCodes_array[i], 0);  
    SetLength (TreeNodeCodes_array, 0);
    SetLength (Units, 0);
    SetLength (nodeBranch, 0);
  end;
end;
//--============================================================================================--//
function fnNodeParamsByTypeSysDecision (aTypeSys: integer): integer;
begin
  Result:= 0;
  Case aTypeSys of
    constIsMoto: Result:= ThisIsAllNodes;
    constIsAuto: Result:= ThisIsUsedNodes;
  end;
end;
//--============================================================================================--//
function fnLink23NodeParams (aIncomingString: String; aWhatNodesNeed: integer; aTypeSys: integer): Tai;
const nmproc = 'fnLink23NodeParams';
var i, counter: integer;
    Arr: Tas;
    OrdIBDatabase: TIBDatabase;
    OrdIBQuery: TIBSQL;
    TreeList: TStringList;
begin
  SetLength(Result, 0);
  TreeList:=nil;
  counter:= 0;
  OrdIBQuery:= nil;
  try
  //проверка пустой строки
    if (Trim(aIncomingString) = '') then begin
      SetLength(Result, 50);
      Case aWhatNodesNeed of

        ThisIsUsedNodes: begin
          OrdIBDatabase:= cntsOrd.GetFreeCnt;
//          if (OrdIBDatabase=nil) then raise EBOBError.Create('Ошибка cntsOrd.GetFreeCnt.');
          try
            OrdIBQuery:= fnCreateNewIBSQL(OrdIBDatabase,'OrdIBQuery_'+nmProc,0, tpRead, True);
{            OrdIBQuery.SQL.Text:= 'SELECT LDEMTRNACODE FROM LINKDETAILMODEL ldm'#10+
                                  'INNER JOIN dirmodels dm ON dm.dmoscode = ldm.ldemdmoscode'#10+
                                  'INNER JOIN dirmodellines dml ON dml.drmlcode = dm.dmosdrmlcode'#10+
                                  'INNER JOIN treenodesauto tna ON ldm.ldemtrnacode = tna.trnacode'#10+
                                  'WHERE dml.drmldtsycode = '+IntToStr(aTypeSys)+' and tna.trnacode = tna.trnamaincode'#10+
                                  'Group by LDEMTRNACODE';  }

            OrdIBQuery.SQL.Text:= 'SELECT tna.trnacode FROM treenodesauto tna'+
              ' WHERE tna.trnadtsycode = '+IntToStr(aTypeSys)+' and tna.trnacode = tna.trnamaincode'+
              ' and exists(select * from LINKDETAILMODEL ldm where LDEMTRNACODE = tna.trnacode)'+
              ' order by trnacode';

            OrdIBQuery.ExecQuery;
            while not OrdIBQuery.Eof do begin
              TestCssStopException;
              if High(Result) < counter then SetLength(Result, Length(Result)+50);
              Result[counter]:= OrdIBQuery.FieldByName('LDEMTRNACODE').AsInteger;
              inc(counter);
              OrdIBQuery.Next;
            end;
            SetLength(Result, counter);
          finally
            prFreeIBSQL(OrdIBQuery);
            cntsOrd.SetFreeCnt(OrdIBDatabase, True);
          end;
        end;// ThisIsUsedNodes: begin

        ThisIsAllNodes: begin
          SetLength(Result, 50);
          TreeList:= Cache.FDCA.AutoTreeNodesSys[aTypeSys].NoteGetTree;
          try
            with TreeList do for i:= 0 to Count-1 do
              if not assigned(TAutoTreeNode(Objects[i]).Children) or
                (TAutoTreeNode(Objects[i]).Children.Count < 1) then begin
                TestCssStopException;
                if High(Result) < counter then SetLength(Result, Length(Result)+50);
                Result[counter]:= TAutoTreeNode(TreeList.Objects[i]).ID;
                inc(counter);
              end;// if not assigned(TAutoTreeNode(Objects[i]).Children) or...
          finally
            prFree(TreeList);
          end;
          SetLength(Result, counter);
        end;
      end;// Case aWhatNodesNeed of

    end else begin// if (Length(Arr) = 1) and (Arr[0] = '') then begin
      SetLength(arr, 0);
      Arr:= fnSplitStringChar(aIncomingString);
      try
        SetLength(Result, Length(Arr));
        for i:= 0 to High(Arr) do begin
          TestCssStopException;
          Result[i]:= StrToInt(Arr[i]);
          Arr[i]:= '';
        end;
      finally
        SetLength(Arr, 0); 
      end;
    end;// else of if (Length(Arr) = 1) and (Arr[0] = '')
  except
    on E: Exception do prMessageLOGS(nmProc+': '+E.Message, 'Import', false);
  end;
end;
//--============================================================================================--//
function fnTypeSysDecision (UserID: integer): integer;
var NotValidAutoUser, NotValidMotoUser: boolean;
    ErrMess1, ErrMess2: string;
begin
  ErrMess1:= '';
  ErrMess2:= '';
  NotValidAutoUser:= CheckNotValidModelManage(UserID, constIsAuto, ErrMess1);
  NotValidMotoUser:= CheckNotValidModelManage(UserID, constIsMoto, ErrMess2);
  if (ErrMess1<>'') and (ErrMess2<>'') then Raise EBOBError.Create (ErrMess1);
  if not (NotValidAutoUser Xor NotValidMotoUser) then
    Raise EBOBError.Create (MessText(mtkNotFoundTypeSys));
  if NotValidAutoUser then Result:= constIsMoto else Result:= constIsAuto;
end;
//--============================================================================================--//
procedure apImportOriginalNums(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,
   ContentType: string; aThreadData: TThreadData);
const nmProc = 'apImportOriginalNums';
var
  XL: TExcelApplication;
  WorkBook: Excel_TLB._Workbook;
  WorkSheet: Excel_TLB._Worksheet;
  usedRng: Range;
  isGreenCell, isErrorCell, isWarningCell, isHeaderCell, SheetCount, WSid, WareID: integer;
  ss, FNameI, SheetName, WareName, MsgStr, Manufacturer, OriginalNum: string;
  ErrMsg: TASL;
  LogStr: Tas;
  Total, AddOrigs, ResCode, ErrCount, rows, cols, recs, i, j, k, m, w, actionCode: integer;
  Ware: TWareInfo;
  ListWares, ListManufs: TStringList;
  Percent, PPercent: real;
begin
  ss:= '';
  Total:= 0;
  ErrCount:= 0;
  ListWares:=nil;
//  ListManufs:=nil;
  isGreenCell:= cHexToInt(cnGreenCell);
  isHeaderCell:= cHexToInt(cnHeaderCell);
  isWarningCell:= cHexToInt(cnYellowCell);
  isErrorCell:= cHEXtoINT(cnRedCell);
  PPercent:= 0;
try  
  try
    WorkBook:= nil;
    XL:= TExcelApplication.Create(nil);
//--== Инициализируем работу экземпляра Excel
    CoInitializeEx(nil, COINIT_MULTITHREADED);
    XL.ConnectKind:= ckNewInstance;
    XL.Connect;
    XL.Visible[lcid]:= False;
    //XL.AutoQuit:= False;
    XL.ScreenUpdating[lcid]:=False;
    XL.DisplayAlerts[lcid]:= False;
    XL.Calculation[lcid]:= xlManual;
//    XL.AlertBeforeOverwriting[lcid]:= false;
 // отменяем автоматическую проверку ошибок в ячейках
    with XL.ErrorCheckingOptions do begin
      BackgroundChecking:= False;
      NumberAsText:= False;
      InconsistentFormula:= False;
    end;
    if copy(FName, length(FName)-5+1,5)='.xlsx' then
      prAutoFilterXLSX(FName);
 // открываем импортируемый файл
    if Assigned(XL) and (not Assigned(WorkBook)) then begin
      WorkBook:= XL.Workbooks.Open (FName,     // 1// const Filename: WideString;
                                     0,              // 2// UpdateLinks: OleVariant;
                                     false,          // 3// ReadOnly: OleVariant;
                                     EmptyParam,     // 4// Format: OleVariant;
                                     EmptyParam,     // 5// Password: OleVariant;
                                     EmptyParam,     // 6// WriteResPassword: OleVariant;
                                     true,           // 7// IgnoreReadOnlyRecommended: OleVariant;
                                     EmptyParam,     // 8// Origin: OleVariant;
                                     5,              // 9// Delimiter: OleVariant;
                                     False,          //10// Editable: OleVariant;
                                     false,          //11// Notify: OleVariant;
                                     EmptyParam,     //12// Converter: OleVariant;
                                     EmptyParam,     //13// Local: OleVariant;
                                     EmptyParam,     //14// CorruptLoad: OleVariant;
                                     false,          //15// AddToMru: OleVariant;
                                     lcid);          //16// lcid: Integer): Workbook; safecall;
    //  WorkBook.CheckCompatibility:= false;
    end;
//=- импортируемый Excel-файл готов к обработке
    SetLength(ErrMsg,0);
    SetLength(LogStr,0);

  //получаем список товаров по менеджеру:
    ListWares:= TStringList.Create;
    k:= 50;
    ListWares.Capacity:= k;
    j:= 0;
    for i:= 0 to High(Cache.arWareInfo) do begin
      if not Cache.WareExist(i) then Continue;
      Ware:= Cache.GetWare(i);
      if Ware.ManagerID<>UserID then Continue;
      inc(j);
      if j = ListWares.Capacity then ListWares.Capacity:= ListWares.Capacity+50;
      ListWares.AddObject(AnsiUpperCase(Ware.Name), Ware);
    end;

    ListManufs:= Cache.FDCA.Manufacturers.GetSortedList(constIsAuto);

    WSid:= 1; //ставим указатель на первый лист импортируемого документа
    SheetCount:= WorkBook.Sheets.Count; //определяем количество листов в книге Excel
    SetLength(ErrMsg, SheetCount);
    Percent:= 70;    
    if SheetCount<1 then  ImpCheck.SetProcessPercent( UserID, aThreadData.ID, Percent) else Percent:= Percent/SheetCount;

    while WSid <= SheetCount do begin
      AddOrigs:= 0;
      k:= WSid-1;
      ErrMsg[k]:= TStringList.Create;
      WorkSheet:= WorkBook.Sheets.Item[WSid] as Excel_TLB._Worksheet;
      SheetName:= WorkSheet.Name;
    //перевод указателя на последнюю используемую ячейку листа
      usedRng:= WorkSheet.Range['A1', EmptyParam].SpecialCells(xlCellTypeLastCell, EmptyParam);
      rows:= usedRng.Row;
      if rows<1 then  ImpCheck.SetProcessPercent( UserID, aThreadData.ID, Percent) else PPercent:= Percent/SheetCount;
      for i:= 1 to rows do begin
        prStopProcess( UserID, aThreadData.ID);
        ImpCheck.SetProcessPercent( UserID, aThreadData.ID, PPercent);  
        usedRng:= WorkSheet.Range['B'+IntToStr(i), EmptyParam];
        WareName:= fnOleXLCellReader(usedRng.Value2);

        if WareName <> '' then begin
          w:= ListWares.IndexOf(WareName);
          if w > -1 then begin
            WareID:= TWareInfo(ListWares.Objects[w]).ID;
            usedRng:= WorkSheet.Range['B'+IntToStr(i), EmptyParam].End_[xlToRight];
            cols:= usedRng.Column-1;
            j:= 2;
            while j<= cols do begin
 //             if usedRng.Interior.Color <> isGreenCell then begin
              Manufacturer:= fnOleXLCellReader(WorkSheet.Range[IntToABC(j)+IntToStr(i), EmptyParam].Value2, true);
              inc(j);
              m:= ListManufs.IndexOf(Manufacturer);
              if m > -1 then begin
                usedRng:= WorkSheet.Range[IntToABC(j)+IntToStr(i), EmptyParam];
                inc(j);//переходим указатель на следующего производителя
                if usedRng.Interior.Color <> isGreenCell then begin
                  OriginalNum:= fnOleXLCellReader(usedRng.Value2, false);
                  if OriginalNum <> '' then begin
                    ResCode:= resAdded;
                    actionCode:= 0;
                    MsgStr:= Cache.FDCA.CheckOrigNumLink(ResCode, WareID,
                      TManufacturer(ListManufs.Objects[m]).ID, actionCode, OriginalNum, soExcel, userID);
                    Case ResCode of
                      resError: begin
                        ErrMsg[k].AddObject('Ошибка'#9+'Не удалось привязать оригинальный номер. '#10+
                          MsgStr+#9+SheetName+#9+IntToABC(j-1)+IntToStr(i),pointer(-3*(100000+i)));
                      //  TDataCacheAdditionASON.CheckOrigNumLink(var ResCode: Integer; WareID, pManufID,
                      //  onID: Integer;
                      //  pOrigNum: String=''; srcID: Integer=0; userID: Integer=0): String;
                        usedRng:= WorkSheet.Range[IntToABC(j-2)+IntToStr(i),IntToABC(j-1)+IntToStr(i)];
                        usedRng.Interior.Color:= isErrorCell;
                        inc(ErrCount);
                      end;
                      resDoNothing: begin
                        usedRng:= WorkSheet.Range[IntToABC(j-2)+IntToStr(i),IntToABC(j-1)+IntToStr(i)];
                        usedRng.Interior.Color:= isGreenCell;
                        ErrMsg[k].AddObject('Внимание'#9+'Привязка данного оригинального номера уже существует.'#9+
                          SheetName+#9+IntToABC(j-1)+IntToStr(i),pointer(-10*(100000+i)));
                        inc(ErrCount);
                      end;
                      resAdded: begin
                        usedRng:= WorkSheet.Range[IntToABC(j-2)+IntToStr(i),IntToABC(j-1)+IntToStr(i)];
                        usedRng.Interior.Color:= isGreenCell;
                        inc(AddOrigs);
                      end;
                    end;// Case ResCode of
                  end;// if OriginalNum <> '' then
                end;//if usedRng.Interior.Color <> isGreenCell then //защита от повторного занесения данных

              end else begin //не найден производитель
                inc(j);// пропускаем ячейку с оригинальным номером, т.к. укзанный производитель не найден в списке
                inc(ErrCount);
                ErrMsg[k].AddObject('Ошибка'#9+'Неизвестый производитель.'#9+
                  SheetName+#9+IntToABC(j-2)+IntToStr(i), pointer(-2*(100000+i)));
              end;
//              end;// if usedRng.Interior.Color <> isGreenCell
            end;// while j<= cols do

          end else begin //не найден товар
            inc(ErrCount);
            ErrMsg[k].AddObject('Ошибка'#9+'Товар '+WareName+' не найден в базе.'#9+
              SheetName+#9+'B'+IntToStr(i), pointer(-1*(100000+i)));
          end;
        end;// if WareName <> '' then
      end;// for i:= 1 to rows do

      Total:= Total+AddOrigs;
      ErrMsg[k].AddObject('ИТОГО'#9+'Добавлено привязок оригинальных номеров: '+
        IntToStr(AddOrigs)+#9+SheetName+#9+'A1', pointer(1*100000));
      inc (WSid);
    end; //while WSid < SheetCount do
  except
    on E: EStopError do ss:= E.Message;
    on E: Exception do prMessageLOGS(nmProc+': '+E.Message, 'Import', false);
    
  end;
finally
    lstBodyMail:= TStringList.Create;

    if ErrCount > 0 then begin
   // Добавим один новый лист после текущего
      XL.ActiveWorkbook.Sheets.Add(EmptyParam, WorkBook.Sheets.Item[WorkBook.Sheets.Count], 1, xlWorksheet, lcid);
      WorkSheet:= WorkBook.Sheets.Item[WorkBook.Sheets.Count] as Excel_TLB._Worksheet;
      WorkSheet.Name:= 'Импорт от'+FormatDateTime(' dd.mm hh_nn ',Now);

      recs:= 1;
    //-=создаем шапку для лога импорта
      WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= 'Статус  сообщения';
      WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= 'Лист';
      WorkSheet.Range['C'+IntToStr(recs), EmptyParam].Value2:= '   Ячейка   ';
      WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= 'Сообщение';
      usedRng:=WorkSheet.Range['A'+IntToStr(recs), 'D'+IntToStr(recs)];
      usedRng.EntireRow.RowHeight:= usedRng.EntireRow.RowHeight*2;
      usedRng.Interior.Color:= isHeaderCell;
      usedRng.Font.Color:= cHEXtoINT(cnHeaderText);
      usedRng.Font.Bold:= True;
      usedRng.HorizontalAlignment:= xlCenter;
      usedRng.VerticalAlignment:= xlCenter;
      usedRng.Borders.Color:= cHEXtoINT(cnHeaderBorder);
      usedRng.BorderAround(xlContinuous, xlHairLine, xlColorIndexAutomatic, EmptyParam, EmptyParam);
      XL.ActiveWindow.SplitRow:= 1;
      XL.ActiveWindow.FreezePanes:= True;
  //=-шапка создана
      inc(recs);
      Percent:= 20;    
      if High(ErrMsg)<1 then  ImpCheck.SetProcessPercent( UserID, aThreadData.ID, Percent) else Percent:= Percent/High(ErrMsg); 
      for j:= 0 to High(ErrMsg) do begin
        ErrMsg[j].CustomSort(@SizeCustomSort);
        rows:= ErrMsg[j].Count;
        if rows<1 then  ImpCheck.SetProcessPercent( UserID, aThreadData.ID, Percent) else PPercent:= Percent/rows;        
        for i:= 0 to rows-1 do begin
//          TestCssStopException;
        //  ErrMsg[j][i]:=IntToStr(j)+'|'+IntToStr(integer(ErrMsg[j].Objects[i]))+'|'+ErrMsg[j][i];
          LogStr:= fnSplitStringChar(ErrMsg[j].Strings[i]);
          try
            ResCode:= trunc((integer(ErrMsg[j].Objects[i]))/100000);
            ImpCheck.SetProcessPercent( UserID, aThreadData.ID, PPercent);
            Case ResCode of
              -10: begin
                WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                usedRng:= WorkSheet.Range['C'+IntToStr(recs), EmptyParam];
                usedRng.Value2:= LogStr[3];
                WorkSheet.Hyperlinks.Add(usedRng, '#'''+LogStr[2]+'''!'+LogStr[3], EmptyParam, EmptyParam, EmptyParam);
                WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                usedRng:= WorkSheet.Range['A'+IntToStr(recs), 'D'+IntToStr(recs)];
                usedRng.Interior.Color:= isWarningCell;
              end;
              -3..-1: begin
                WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                usedRng:= WorkSheet.Range['C'+IntToStr(recs), EmptyParam];
                usedRng.Value2:= LogStr[3];
                WorkSheet.Hyperlinks.Add(usedRng, '#'''+LogStr[2]+'''!'+LogStr[3], EmptyParam, EmptyParam, EmptyParam);
                WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                usedRng:= WorkSheet.Range['A'+IntToStr(recs), 'D'+IntToStr(recs)];
                usedRng.Interior.Color:= isErrorCell;
              end;
              1: begin
                WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                usedRng:= WorkSheet.Range['B'+IntToStr(recs), EmptyParam];
                usedRng.Value2:= LogStr[2];
                WorkSheet.Hyperlinks.Add(usedRng, '#'''+LogStr[2]+'''!'+LogStr[3], EmptyParam, EmptyParam, EmptyParam);
                WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                usedRng:= WorkSheet.Range['A'+IntToStr(recs), 'D'+IntToStr(recs)];
                usedRng.Interior.Color:= isGreenCell;
              end;
            end;
            inc (recs);
          finally
            SetLength(LogStr, 0); 
          end;
        end;
      end;
      usedRng:= WorkSheet.Range['A1', 'D'+IntToStr(recs-1)];
      usedRng.Cells.WrapText:= False;
      usedRng.EntireRow.AutoFit;
      usedRng.EntireColumn.AutoFit;

      //Отправка письма
      lstBodyMail.Add(MessText(mtkImportError));
    end else lstBodyMail.Add(MessText(mtkImportSuccess));

    lstBodyMail.Add('Всего было добавлено '+IntToStr(Total)+' привязок оригинальных номеров к товарам');
    lstBodyMail.Add(' ');
    if ss<>'' then lstBodyMail.Add(ss);
    
    Subj:= WorkBook.Name+'. Импорт привязок оригинальных номеров от '+FormatDateTime(cDateTimeFormatY2S, Now());
    ContentType:= XMLContentType;
  
  Workbook.CheckCompatibility := False;
  WorkBook.Save(lcid);
  WorkBook.Close(false,EmptyParam,EmptyParam,lcid);
  XL.Quit;// закрыть Excel
  XL.Disconnect;
  prFree(XL);
  FNameI:= ExtractFilePath(FName)+fnFormRepFileName(IntToStr(ImpCheck.GetImpType(UserID, aThreadData.ID)), FName, constOpImport);                 
  RenameFile(FName, FNameI);
  FName:= FNameI;
  SetLength(LogStr, 0);
  for i:= 0 to High(ErrMsg) do if ErrMsg[i]<>nil then prFree(ErrMsg[i]);
  SetLength(ErrMsg, 0);
  prFree(ListWares);
end;
end;
//--============================================================================================--//
function fnAddHeaderMergedCells(aXmlStyle: TXmlReportStyle; aMrgDown: integer=0;
                                aHeaderCommaString: string=cnMMM): String;
var i: integer;
    Texts: Tas;
begin
  Result:= '';
  Texts:= fnSplitString(aHeaderCommaString);
  try
    for i:= 0 to High(Texts) do
      if aMrgDown>0 then
        Result:= Result+fnGenerateXMLcell(Texts[i], aXmlStyle, '', '', aMrgDown)
      else
        Result:= Result+fnGenerateXMLcell(Texts[i], aXmlStyle);
  finally
    SetLength(Texts, 0);
  end;
end;
//--============================================================================================--//
function fnGetModelLinks2ByNodesQty(aModel: TModelAuto; aNodes: Tai): tas;
const nmProc = 'fnGetModelLinks2ByNodesQty';
var
  NodesList: TList;
  nodes, pos, i: integer;
  Link2: TSecondLink;
  Str, Chr: string;
  NeedCut: boolean;
begin
  NodesList:=nil;
  SetLength(Result, Length(aNodes));
  NodesList:= aModel.GetModelNodesList;
  try
    nodes:= NodesList.Count-1;
    for i:= 0 to nodes do begin
      TestCssStopException;
      Link2:= NodesList.Items[i];
      Str:= '';
      Chr:= '';
      NeedCut:= true;
      if ( (Link2.IsLinkNode) and (TAutoTreeNode(Link2.LinkPtr).Children = nil) or (TAutoTreeNode(Link2.LinkPtr).IsEnding) ) then begin
        pos:= fnInIntArray(Link2.LinkID, aNodes);
        if pos >-1 then begin
          Result[pos]:= FormatFloat('#0.000',Link2.Qty);
          Str:= Result[pos];
          while NeedCut do begin
            Chr:= Copy(Str, Length(Str),1);
            if ( (Length(Str)>1) and ((Chr='0') or (Chr=FormatSettings.DecimalSeparator)) )then begin
              Str:= Copy(Str, 1, Length(Str)-1);
            end else begin
              Result[pos]:= Str;
              NeedCut:= False;
            end;
          end;// while NeedCut do begin

          Result[pos]:= StringReplace(Str,'-','~',[rfReplaceAll]);
          if Result[pos] = '0' then begin
            Result[pos]:= 'н/д';
          end;
        end;

      end else if ( (Link2.IsLinkNode) and (TAutoTreeNode(Link2.LinkPtr).Children <> nil) ) then
        prMessageLOGS(nmProc+' Обнаружена подозрительная связка в узле с кодом "'+
          IntToStr(Link2.LinkID)+'"', 'Import', false);
    end;
  finally
    prFree(NodesList);
  end;
end;
//--============================================================================================--//
procedure apGetLink2forModels(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,  //отчет 17
    ContentType, s: string; ThreadData: TThreadData; pNodes: String = ''; pModels: String = ''); 
const nmProc = 'apGetLink2forModels'; // имя процедуры/функции
var
  XmlDoc: TStringList;  //собственно текст xml-документа
  TypeSys: integer;      //тип системы авто/мото
  i, j, k, {nodes, pos, Collector,} cols, ColCount, garbage, ssIndex, MrgDown, l: integer;
  Manufs, Models: integer;
  XmlHeader, CellType, SeveranceStr, {DeclareColsString,} XmlString, PathFile, ss: string;
//  Link2: TSecondLink;
  lstManuf, lstModel: TStringList;
  actModel: TModelAuto;
  aModelLine: TModelLine;
  Link2nodes_ar, WidthArray: tai;
  ModelLinks2_ar: Tas;
  TreeNodesHeader: arTas;
  CellStylesArray: TXmlCellStylesArray; //Массив стилей оформления документа
  HeaderStyle, BoldHeaderStyle, NumberStyle: TXmlReportStyle;  //Стили оформления документа
  SubHeaderStyle, NameStyle, SideHeaderEmptines: TXmlReportStyle;
  Percent: real; 
//  timerStart: TDateTime;                                                                  
begin
  XmlDoc:= TStringList.Create;
  SetLength(WidthArray, 3);// 3 - кол-во колонок, задействованных для "произв./мод. ряд/модель"
  SetLength(Link2nodes_ar, 0);
  SetLength(TreeNodesHeader, 0, 0);
  SetLength(ModelLinks2_ar, 0);
  lstModel:= nil;
  MrgDown:= 0;
//  lstManuf:=nil;
//  timerStart:= Now;
try
  try
    if not GetEmplTmpFilePath(UserID, PathFile, ss) then raise EBOBError.Create(ss); 

//    FName:= PathFile+'Links2_report'+FormatDateTime('_dd.mm_(hh.nn)',Now)+'.xml';
    FName:= PathFile+fnFormRepFileName('17', '.xml', constOpExport);                 

    if FileExists(FName) and not SysUtils.DeleteFile(FName) then
      raise EBOBError.Create(MessText(mtkNotDelPrevFile));
//-=Модуль опеределия типа системы
    TypeSys:= fnTypeSysDecision(UserID);
//=-тип системы определен

//-=Получим список производителей моделей (по типу системы)
    lstManuf:= Cache.FDCA.Manufacturers.GetSortedList(TypeSys);

//-=Получим список конечных узлов по типу системы
    Link2nodes_ar:= fnLink23NodeParams(pNodes, fnNodeParamsByTypeSysDecision(TypeSys), TypeSys);
    SetLength (WidthArray, Length(Link2nodes_ar));
    for i:= 0 to High(WidthArray) do
      WidthArray[i]:= Length(TAutoTreeNode(Cache.FDCA.AutoTreeNodesSys[TypeSys].Items[Link2nodes_ar[i]]).NameSys);

    CellStylesArray:= TXmlCellStylesArray.Create;
//--== создаем и инициализируем стили ячеек отчета
    HeaderStyle:= CellStylesArray.AddStyle(TXmlReportStyle.Create(cnHeaderCell,
                         'Center', 'Center', [], cnHeaderText, true, true, cnHeaderBorder));
    BoldHeaderStyle:= CellStylesArray.AddStyle(TXmlReportStyle.Create(cnHeaderCell,
                         'Center', 'Center', [fsBold], cnHeaderText, true, true, cnHeaderBorder));
    SubHeaderStyle:= CellStylesArray.AddStyle(TXmlReportStyle.Create(cnGreenBorderedCell,
                         'Center', 'Bottom', [fsBold], '', false, true));
    SideHeaderEmptines:= CellStylesArray.AddStyle(TXmlReportStyle.Create(cnHeaderCell,
                         'Center', 'Center', [], cnHeaderText, true));
    NameStyle:= CellStylesArray.AddStyle(TXmlReportStyle.Create(cnGreenBorderedCell,
                         'Left', 'Bottom', [fsBold], '', false, true));
    NumberStyle:= CellStylesArray.AddStyle(TXmlReportStyle.Create(cnGreenCell,
                         'Center', 'Bottom'));
  //по полученным узлам формируем шапку отчета
    TreeNodesHeader:= fnGetTreeNodes(Link2nodes_ar, TypeSys);
    cols:= Length(Link2nodes_ar)-1;
    Manufs:= lstManuf.Count-1;
    ColCount:= Length(WidthArray)-1;

    prStopProcess( UserID, ThreadData.ID);
    ImpCheck.SetProcessPercent( UserID, ThreadData.ID, 1);
    Percent:= 98;
    if Manufs > -1 then Percent:= Percent/Manufs+1
    else ImpCheck.SetProcessPercent( UserID, ThreadData.ID, Percent); 

    if Manufs > -1 then begin
      XmlDoc.Add(cEX_Doc_Begin);
      XmlDoc.Add(cEX_Workbook_Begin);
      XmlDoc.Add(CellStylesArray.GetXmlStyles);
      XmlHeader:= ''; //инициализируем строку в которую запишем декларацию колонок
  //-=Сформируем xml-шапку
//      ssIndex:= 0;
      MrgDown:= Length(TreeNodesHeader[0])-1;
    //работаем с первой строкой
      XmlHeader:= XmlHeader + '<Row ss:Height="27">'#10; //открываем первую строку
      XmlHeader:= XmlHeader + fnAddHeaderMergedCells(BoldHeaderStyle, MrgDown);
      for i:= 0 to cols do
        XmlHeader:= XmlHeader + fnGenerateXMLcell(TreeNodesHeader[i, 0], HeaderStyle);
      XmlHeader:= XmlHeader + '</Row>'#10; //закрываем первую строку

    //работаем с оставшимися строками заголовка
//      ssIndex:= Length(fnSplitString(cnMMM))+1;     
      ModelLinks2_ar:= fnSplitString(cnMMM);  
      ssIndex:= Length(ModelLinks2_ar)+1;     
      SetLength(ModelLinks2_ar, 0);           

      for j:= 1 to MrgDown do begin

        if j<MrgDown-1 then begin
          XmlHeader:= XmlHeader + '<Row ss:Height="27">'#10; //начало новой строки
          if TreeNodesHeader[0, j+1] <>'' then
            XmlHeader:= XmlHeader+fnGenerateXMLcell(TreeNodesHeader[0, j], HeaderStyle, '', '', 0, 0, ssIndex)
          else
            XmlHeader:= XmlHeader+fnGenerateXMLcell(TreeNodesHeader[0, j], BoldHeaderStyle, '', '', 0, 0, ssIndex);
        end else if j=MrgDown then begin
          XmlHeader:= XmlHeader+'<Row>'#10;
          XmlHeader:= XmlHeader+fnGenerateXMLcell(TreeNodesHeader[0, j], HeaderStyle, '', '', 0, 0, ssIndex);
        end else begin
          XmlHeader:= XmlHeader+'<Row ss:Height="27">'#10;
          XmlHeader:= XmlHeader+fnGenerateXMLcell(TreeNodesHeader[0, j], BoldHeaderStyle, '', '', 0, 0, ssIndex);
        end;

        for i:= 1 to cols do begin
          if j<MrgDown-1 then begin
            if TreeNodesHeader[i, j+1] <>'' then
              XmlHeader:= XmlHeader+fnGenerateXMLcell(TreeNodesHeader[i, j], HeaderStyle)
            else
              XmlHeader:= XmlHeader+fnGenerateXMLcell(TreeNodesHeader[i, j], BoldHeaderStyle);
          end else if j=MrgDown then
            XmlHeader:= XmlHeader+fnGenerateXMLcell(TreeNodesHeader[i, j], HeaderStyle)
          else
            XmlHeader:= XmlHeader+fnGenerateXMLcell(TreeNodesHeader[i, j], BoldHeaderStyle);
        end;
        XmlHeader:= XmlHeader + '</Row>'#10; //конец новой строки
      end;
  //=-Xml-шапка сформирована

  //-=Сформируем Xml-текст для строк-перегородок
      SeveranceStr:= '';
      SeveranceStr:= SeveranceStr + '<Row>'#10;
      for i:= 0 to ColCount do
        SeveranceStr:= SeveranceStr + fnGenerateXMLcell('', SideHeaderEmptines);
      SeveranceStr:= SeveranceStr + '</Row>'#10;
  //=-Строка-перегородка создана
      for i:= 0 to Manufs do try
      //получаем список моделей производителя (по типу системы)
        lstModel:= TManufacturer(lstManuf.Objects[i]).GetModelsList(TypeSys);
      //получаем количество моделей у данного производителя по типу системы
        Models:= lstModel.Count-1;

        if Models > -1 then begin
        //открываем worksheet
          XmlDoc.Add(fnOpenWorkSheet(fnWrkShtNameSpotter(TManufacturer(lstManuf.Objects[i]).Name)));
          WidthArray[0]:= Length(TManufacturer(lstManuf.Objects[i]).Name);
        //создадим строку в которую в конце запишем декларацию колонок листа
          XmlDoc.Add('DeclareCols');
        //добавляем шапку листа
          XmlDoc.Add(XmlHeader);
          for j:= 0 to Models do try
            prStopProcess( UserID, ThreadData.ID);                                           
            actModel:= Cache.FDCA.Models.GetModel(integer(lstModel.Objects[j]));
            XmlString:= '';
            ModelLinks2_ar:= fnGetModelLinks2ByNodesQty(actModel, Link2nodes_ar);
          //Заполняем строку со "связкой 2"
            XmlString:= XmlString+'<Row>'#10;
          //производитель
            XmlString:= XmlString+''+fnGenerateXMLcell(TManufacturer(lstManuf.Objects[i]).Name, SubHeaderStyle);
          //модельный ряд
            aModelLine:= Cache.FDCA.ModelLines.GetModelLine(actModel.ModelLineID);
            XmlString:= XmlString+fnGenerateXMLcell(aModelLine.Name, SubHeaderStyle);
            l:= Length(aModelLine.Name);
            if l>WidthArray[1] then WidthArray[1]:= l;
          //модель
            XmlString:= XmlString+''+fnGenerateXMLcell(actModel.Name, SubHeaderStyle);
            l:= Length(actModel.Name);
            if l>WidthArray[2] then WidthArray[2]:= l;

            for k:= 0 to cols do begin
              try
                StrToFloat(StringReplace(ModelLinks2_ar[k], FormatSettings.DecimalSeparator, '.', [rfReplaceAll]));
                CellType:= cnXmlNumber;
              except
                CellType:= cnXmlString;
              end;
              XmlString:= XmlString+fnGenerateXMLcell(ModelLinks2_ar[k], SubHeaderStyle, '', '', 0, 0, 0, CellType);
            end;
            XmlString:= XmlString+'</Row>';

            XmlDoc.Add(XmlString);
            XmlDoc.Add(SeveranceStr);
          finally
            for garbage:= 0 to High(ModelLinks2_ar) do ModelLinks2_ar[garbage]:= '';
            SetLength(ModelLinks2_ar, 0); 
          end; // for j:= 0 to Models

        //Теперь декларируем колонки с известными окончательными размерами текстов в них
          XmlDoc[XmlDoc.IndexOf('DeclareCols')]:= fnDeclareXMLcols(WidthArray);

        //Закрываем worksheet с закреплением областей верхней и боковой шапок
          XmlDoc.Add(fnCloseWorkSheet(fnGetWorkSheetOptions(ssIndex-1,MrgDown+1)));
        //Обнуляем длину колонок с наименованиями "произв./мод. ряд/модель"
          WidthArray[0]:= 0;
          WidthArray[1]:= 0;
          WidthArray[2]:= 0;
        end;
        ImpCheck.SetProcessPercent( UserID, ThreadData.ID, Percent);
      finally
        //if Assigned(lstModel) then 
        prFree(lstModel);
      end;
    end; //if Manufs > -1
  except
    on E: Exception do s:= nmProc+' '+E.Message;
  end;
finally  
  if XmlDoc.count>0 then begin

    if XmlDoc[XmlDoc.count-1]<>fnCloseWorkSheet(fnGetWorkSheetOptions(ssIndex-1,MrgDown+1)) then
      if XmlDoc[XmlDoc.count-1]<>SeveranceStr then
        if pos('</Row>',XmlDoc[XmlDoc.count-1])=0 then XmlDoc.Add('</Row>')
      else XmlDoc.Add(SeveranceStr)
    else XmlDoc.Add(fnCloseWorkSheet(fnGetWorkSheetOptions(ssIndex-1,MrgDown+1)));   
//    XmlDoc[XmlDoc.IndexOf('DeclareCols')]:= fnDeclareXMLcols(WidthArray);    
    XmlDoc.Add(cEX_Workbook_End);
    SaveToFile(XmlDoc,FName);
//{$Ifdef Ver140} XmlDoc.SaveToFile(FName) {$ELSE} XmlDoc.SaveToFile(FName, TEncoding.UTF8) {$EndIf};      

    Subj:= 'Данные по "Связке 2" от '+FormatDateTime(cDateTimeFormatY2S, Now());
    ContentType:= XMLContentType;
    lstBodyMail:= TStringList.Create;
(*    lstBodyMail.Add('Начало выполнения: '+FormatDateTime(cDateTimeFormatTSnD, timerStart));
    lstBodyMail.Add('Завершение выполнения: '+ FormatDateTime(cDateTimeFormatTSnD,Now));
    lstBodyMail.Add('Общее время выполнения: '+ FormatDateTime('hh:nn:ss',Now-timerStart));  *)
  end;
  prFree(XmlDoc);
  prFree(CellStylesArray);
  for i:= 0 to High(TreeNodesHeader) do SetLength(TreeNodesHeader[i], 0);
  SetLength(TreeNodesHeader, 0);
  SetLength(WidthArray, 0);
  SetLength(Link2nodes_ar, 0);
  SetLength(ModelLinks2_ar, 0);
  prFree(lstModel);
end;
end;
//============================================================================================--//
procedure apGetLinkDetModWareFile(UserID: integer; var lstBodyMail: TStringList; //отчет 12
          var FName, Subj, ContentType, s: string; ThreadData: TThreadData;  
          pNodes: String = ''; pModels: String = '');
const nmProc = 'apGetLinkDetModWareFile'; // имя процедуры/функции
      cnMotoHeader = 'Бренд;Модельный ряд;Модель';
var CellStylesArray: TXmlCellStylesArray;
    ModWares, TopHeader: arTas;
    Link2Qty: Tas;
    heir_branches_array: Tai; // массив кодов "небезтоварных" узлов дерева
    WidthArray: Tai; //массив для хранения ширин столбцов worksheet'ов
    HeaderWidthArray: Tai; //массив для хранения ширин столбцов заголовков
    Model: TModelAuto;
    List, ModelsList, Models: TStringList;
    ManufLists: TASL;
    {ManufCount,} MLcount, ModCount, offset, AllModels, i, j, k, count, wares: integer;
icount, TypeSys, nodes, AllCols, TopHeaderCols, {SideHeaderCols,} MrgDown, ssIndex, recs: integer;
    PathFile, SideHeader, DeclareCols, somestring, {xmlDataType,} CellType, ss: string;
    HeaderStyle, BoldHeaderStyle, TextStyle: TXmlReportStyle;
    NumberStyle, SubHeaderStyle, NameStyle, SideHeaderEmptines: TXmlReportStyle;
    Percent, PPercent: real;  
//    timerStart: TDateTime;  
//    stopped: boolean;                                                     
  //---------------------------------------------
  function SideHeaderCreate(aHeaderCommaString: string=''+';'+''+';'+''; aDepth: integer=0): String;
  var ii: integer;
      Texts: Tas;
  begin
    Result:= '';
    Texts:= fnSplitString(aHeaderCommaString);
    try
      if aDepth>0 then begin
        MrgDown:= aDepth-1;
        for ii:= 0 to High(Texts) do begin
          Result:= Result+fnGenerateXMLcell(Texts[ii], BoldHeaderStyle, '', '', MrgDown);
          inc(ssIndex);
        end;
      end else for ii:= 0 to High(Texts) do
        Result:= Result+fnGenerateXMLcell(Texts[ii], SideHeaderEmptines);
    finally
      SetLength(Texts, 0);
    end;
  end;
  //---------------------------------------------
begin
  ssIndex:= 1;
  AllModels:= 0;
  PPercent:= 0;
  List:=nil;
  ModelsList:=nil;
  Models:=nil;
  Model:= nil;
  count:= 0;
  OffSet:= 0;
  k:= 0;
//  timerStart:= Now;
//  stopped:= false;
  ModCount:= 0;
try  
 try
    if not GetEmplTmpFilePath(UserID, PathFile, ss) then raise EBOBError.Create(ss); 

//    FName:= PathFile+'Links_Model_Node_Ware_of'+FormatDateTime('_dd.mm_(hh.nn)',Now)+'.xml';
    FName:= PathFile+fnFormRepFileName('12', '.xml', constOpExport);                 

    if FileExists(FName) and not SysUtils.DeleteFile(FName) then
      raise EBOBError.Create(MessText(mtkNotDelPrevFile));

//-=Модуль опеределия типа системы
    TypeSys:= fnTypeSysDecision(UserID);
//=-тип системы определен.
    if TypeSys = constIsAuto then
      raise EBOBError.Create('В данный момент этот отчет для Авто не выдается...');

    List:= TStringList.Create;
    List.Add(cEX_Doc_Begin);
    List.Add(cEX_Workbook_Begin);

    CellStylesArray:= TXmlCellStylesArray.Create;
//--== создаем и инициализируем стили ячеек отчета
    HeaderStyle:= CellStylesArray.AddStyle(TXmlReportStyle.Create(cnHeaderCell,
                  'Center', 'Center', [], cnHeaderText, true, true, cnHeaderBorder));
    BoldHeaderStyle:= CellStylesArray.AddStyle(TXmlReportStyle.Create(cnHeaderCell,
                  'Center', 'Center', [fsBold], cnHeaderText, true, true, cnHeaderBorder));
    SubHeaderStyle:= CellStylesArray.AddStyle(TXmlReportStyle.Create(cnGreenBorderedCell,
                  'Center', 'Bottom', [fsBold], '', false, true));
    SideHeaderEmptines:= CellStylesArray.AddStyle(TXmlReportStyle.Create(cnHeaderCell,
                  'Center', 'Center', [], cnHeaderText, true));
    NameStyle:= CellStylesArray.AddStyle(TXmlReportStyle.Create(cnGreenBorderedCell,
                  'Left', 'Bottom', [fsBold], '', false, true));
    NumberStyle:= CellStylesArray.AddStyle(TXmlReportStyle.Create(cnGreenCell, 'Center', 'Bottom'));
    TextStyle:= CellStylesArray.AddStyle(TXmlReportStyle.Create);
//==--
    SetLength(ManufLists, 0);
    SetLength(heir_branches_array, 0);
    SetLength(HeaderWidthArray, 0);
    SetLength(Link2Qty, 0);
//--== Формируем заголовок с деревом узлов

//  Сперва узнаем кол-во конечных узлов, т.к. оно определяет кол-во столбцов отчета
    heir_branches_array:= fnLink23NodeParams(pNodes, fnNodeParamsByTypeSysDecision(TypeSys), TypeSys);
    SetLength (HeaderWidthArray, Length(heir_branches_array));
    for i:= 0 to High(HeaderWidthArray) do begin
      k:= heir_branches_array[i];
      HeaderWidthArray[i]:= Length(TAutoTreeNode(Cache.FDCA.AutoTreeNodesSys[TypeSys][k]).NameSys);
    end;

    SetLength (TopHeader, 0, 0);
    TopHeaderCols:= Length(heir_branches_array);
  //по массиву кодов узлов дерева получаем верхний заголовок
    TopHeader:= fnGetTreeNodes(heir_branches_array, TypeSys);
  //формируем боковой заголовок
    SideHeader:= SideHeaderCreate(cnMotoHeader, Length(TopHeader[0])); //получаем уже в виде xml-текста

    offset:= ssIndex-1;
    AllCols:= TopHeaderCols + offset;
  //инициализируем массив, определяющий ширины колонок
    SetLength(WidthArray, AllCols);

    ModelsList:= Cache.FDCA.Manufacturers.GetSortedList(TypeSys);
    nodes:= ModelsList.Count-1;
    SetLength (ManufLists, ModelsList.Count);

    ImpCheck.SetProcessPercent(UserID, ThreadData.ID, 10);
    Percent:= 85;
    if nodes > -1 then Percent:= Percent/(nodes+1) else ImpCheck.SetProcessPercent(UserID, ThreadData.ID,Percent); 

    for count:= 0 to nodes do begin
    //Обнуляем переменные для xml-текста worksheet'ов
      somestring:= '';
      DeclareCols:= '';
    //получаем список моделей производителя по типу системы
      Models:= TManufacturer(ModelsList.Objects[count]).GetModelsList(TypeSys);
      try
      //узнаем их количество
        ModCount:= Models.Count-1;
    (*
      <Cell ss:StyleID="s66"><Data ss:Type="String">???? ?????????????</Data><Comment
        ss:Author="ar_yurchuk"><ss:Data xmlns="http://www.w3.org/TR/REC-html40"><B><Font
           html:Face="Tahoma" x:CharSet="1" html:Size="9" html:Color="#000000">ar_yurchuk:</Font></B><Font
          html:Face="Tahoma" x:CharSet="1" html:Size="9" html:Color="#000000">&#10;sgssxhx&#10;</Font></ss:Data></Comment></Cell>
    *)
        if ModCount > -1 then PPercent:= Percent/(ModCount+1)
        else ImpCheck.SetProcessPercent(UserID, ThreadData.ID,Percent); 

        if ModCount > -1 then begin
//          TestCssStopException;
          ManufLists[count]:= TStringList.Create;
        //задаем имя, открываем таблицу
    //      WorkSheets:= WorkSheets+fnOpenWorksheet(TManufacturer(ModelsList.Objects[count]).Name, 15);
          ManufLists[count].Add(fnOpenWorksheet(fnWrkShtNameSpotter(TManufacturer(ModelsList.Objects[count]).Name), 15));    //0
        //создаем пустой item для дальнейшей записи в него декларации колонок
          ManufLists[count].Add('');                                                                    //1
        //задаем значения "по умолчанию" для ширин колонок:
          for j:= 0 to offset-1 do WidthArray[j]:= 16;
          for j:= offset to AllCols-1 do
            if HeaderWidthArray[j-offset]>26 then
              WidthArray[j]:= HeaderWidthArray[j-offset]
            else WidthArray[j]:= 26;
    //--== Создаем шапку Worksheet'а
          somestring:= '<Row ss:Height="27">'#10+SideHeader; //начало первой строки
          for i:= 0 to AllCols-ssIndex do
            somestring:= somestring+fnGenerateXMLcell(TopHeader[i, 0], HeaderStyle);
          somestring:= somestring+'</Row>'#10; //конец первой строки

          for j:= 1 to MrgDown do begin
            if j<MrgDown-1 then begin
              somestring:= somestring+'<Row ss:Height="27">'#10;  //начало новой строки
              if TopHeader[0, j+1] <>'' then somestring:= somestring+
                fnGenerateXMLcell(TopHeader[0, j], HeaderStyle, '', '', 0, 0, ssIndex)
              else somestring:= somestring+
                fnGenerateXMLcell(TopHeader[0, j], BoldHeaderStyle, '', '', 0, 0, ssIndex);
            end else if j=MrgDown then somestring:= somestring+'<Row>'#10+
                fnGenerateXMLcell(TopHeader[0, j], HeaderStyle, '', '', 0, 0, ssIndex)
            else somestring:= somestring+'<Row ss:Height="27">'#10+
                fnGenerateXMLcell(TopHeader[0, j], BoldHeaderStyle, '', '', 0, 0, ssIndex);

            for i:= 1 to AllCols-ssIndex do
              if j<MrgDown-1 then begin
                if TopHeader[i, j+1] <>'' then
                     somestring:= somestring+fnGenerateXMLcell(TopHeader[i, j], HeaderStyle)
                else somestring:= somestring+fnGenerateXMLcell(TopHeader[i, j], BoldHeaderStyle);
              end else if j=MrgDown then
                   somestring:= somestring+fnGenerateXMLcell(TopHeader[i, j], HeaderStyle)
              else somestring:= somestring+fnGenerateXMLcell(TopHeader[i, j], BoldHeaderStyle);
            somestring:= somestring+'</Row>'#10; //конец новой строки
            ManufLists[count].Add(somestring);
            somestring:='';
          end;
    //==-- шапка создана
//vv          ManufLists[count].Add(somestring);

          for k:= 0 to ModCount do try
          try
            SetLength (ModWares, 0, 0);
//            TestCssStopException;
            prStopProcess( UserID, ThreadData.ID);                                         

            Model:= Cache.FDCA.Models.GetModel(integer(Models.Objects[k]));
            
            Link2Qty:= fnGetModelLinks2ByNodesQty(Model, heir_branches_array);
          //Формируем xml-строку со связкой2 для конкретной модели
    //        somestring:= somestring+'<Row>'#10;
            ManufLists[count].Add('<Row>'#10);
    //        somestring:= somestring+
    //        fnGenerateXMLcell(TManufacturer(ModelsList.Objects[count]).Name, NameStyle);
            ManufLists[count].Add(fnGenerateXMLcell(TManufacturer(ModelsList.Objects[count]).Name, NameStyle));

            if (Length(TManufacturer(ModelsList.Objects[count]).Name) > WidthArray[0]) then
              WidthArray[0]:= Length(TManufacturer(ModelsList.Objects[count]).Name);
    //        somestring:= somestring+
    //          fnGenerateXMLcell(TModelLine(Cache.FDCA.ModelLines.GetModelLine(Model.ModelLineID)).Name,
    //            NameStyle);
            ManufLists[count].Add(fnGenerateXMLcell(TModelLine(Cache.FDCA.ModelLines.GetModelLine(Model.ModelLineID)).Name, NameStyle));

            if (Length(TModelLine(Cache.FDCA.ModelLines.GetModelLine(Model.ModelLineID)).Name)>WidthArray[1]) then
              WidthArray[1]:= Length(TModelLine(Cache.FDCA.ModelLines.GetModelLine(Model.ModelLineID)).Name);
    //        somestring:= somestring+ fnGenerateXMLcell(Model.Name, NameStyle);
            ManufLists[count].Add(fnGenerateXMLcell(Model.Name, NameStyle));

            if (Length(Model.Name) > WidthArray[2]) then WidthArray[2]:= Length(Model.Name);

            for i:= OffSet to AllCols-1 do begin
  //          somestring:= somestring+ fnGenerateXMLcell(StringReplace(Link2Qty[i-offset],',','.',
  //            [rfReplaceAll]), SubHeaderStyle,'','',0,0,0, cnXmlNumber);
              try
                StrToFloat(StringReplace(Link2Qty[i-offset], FormatSettings.DecimalSeparator, '.', [rfReplaceAll]));
                CellType:= cnXmlNumber;
              except
                CellType:= cnXmlString;
              end;
              ManufLists[count].Add(fnGenerateXMLcell(Link2Qty[i-offset], SubHeaderStyle, '', '', 0, 0, 0, CellType));
//              ManufLists[count].Add(fnGenerateXMLcell(StringReplace(Link2Qty[i-offset],',','.', [rfReplaceAll]), SubHeaderStyle,'','',0,0,0, cnXmlNumber));
            end;
    //        somestring:= somestring+ '</Row>'#10;
            ManufLists[count].Add('</Row>'#10);
//      inc(icount);
            ModWares:= fnGetModelWares(heir_branches_array, Model);
            wares:= Length(ModWares[0])-1;
            if wares>-1 then inc(AllModels);

            for j:= 0 to wares do begin
              ManufLists[count].Add('<Row>'#10);
              ManufLists[count].Add(SideHeaderCreate);
              for i:= OffSet to AllCols-1 do begin
                ManufLists[count].Add(fnGenerateXMLcell(ModWares[i-OffSet, j], TextStyle));
              end;
              ManufLists[count].Add('</Row>'#10);
//      inc(icount);              
            end;

            ImpCheck.SetProcessPercent(UserID, ThreadData.ID,PPercent); 
          except
            on E: EStopError do begin 
              s:= E.Message;
              raise EStopError.Create(s);
            end;
            on E: EBOBError do  begin
              s:= E.Message;
              raise EBOBError.Create(s);
            end;
            on E: Exception do begin
              s:= nmProc+': '+ 'ModelID='+IntToStr(Model.ID)+';  '+E.Message;
              prMessageLOGS(s, 'Import', false);
            end;
          end;                    
          finally                                        
            recs:= Length(heir_branches_array)-1;
            if length(Link2Qty)>0 then
              for i:= 0 to recs do Link2Qty[i]:= '';
            SetLength(Link2Qty, 0);                     
          end;                                

          //Задаем ширину колонок
          for j:= 0 to AllCols-1 do begin  // <Column ss:AutoFitWidth="0" ss:Width="..."/>
            DeclareCols:= DeclareCols+'<Column ss:AutoFitWidth="0" ss:Width="'+IntToStr((WidthArray[j])*5)+'"/>'#10;
          end;
        //Дописываем полный текст в уже открытый Worksheet и закрываем его перед объявлением следующего
          ManufLists[count].Strings[1]:= DeclareCols;
          ManufLists[count].Add(fnCloseWorkSheet(fnGetWorkSheetOptions(OffSet, MrgDown+1)));
                    
        end;
      finally
        prFree(Models);
      end;
    end;
 except
  on E: EStopError do begin 
    s:= E.Message;
    raise EStopError.Create(s);
  end; 
  on E: EBOBError do  begin
    s:= E.Message;
    raise EBOBError.Create(s);
  end;
  on E: Exception do begin
    s:= nmProc+' '+E.Message;
    prMessageLOGS ('Ошибка на модели номер: '+IntToStr(k)+#10+' Всего моделей у производителя '+TManufacturer(
        ModelsList.Objects[count]).Name+': '+IntToStr(ModCount+1)+#10, 'Import', false);
  end;
 end;
finally
//if ManufLists[count].Add(fnCloseWorkSheet(fnGetWorkSheetOptions(OffSet, MrgDown+1))); then
  if assigned(List) then begin

    List.Add(CellStylesArray.GetXmlStyles);
  //    List.Add(WorkSheets);
      for i:= 0 to nodes do
        if assigned(ManufLists[i]) then begin
          MLcount:= ManufLists[i].Count-1;
          List.Capacity:= List.Capacity+ManufLists[i].Count;
          for j:= 0 to MLcount do 
            List.Add(ManufLists[i].Strings[j]);
          if ManufLists[i].Strings[ManufLists[i].Count-1]<> fnCloseWorkSheet(fnGetWorkSheetOptions(OffSet, MrgDown+1)) then begin
            List.Capacity:= List.Capacity+1;
            if pos('</Row>'#10,ManufLists[i].Strings[ManufLists[i].Count-1])=0 then begin
              List.Add('</Row>'#10);
              List.Capacity:= List.Capacity+1;
            end;
            List.Add(fnCloseWorkSheet(fnGetWorkSheetOptions(OffSet, MrgDown+1))); 
          end;  
        end;
    
      List.Add(cEX_Workbook_End);
      SaveToFile(List,FName);
      //List.SaveToFile(FName);

      Subj:= 'Данные по "Связке 2,3" от '+FormatDateTime(cDateTimeFormatY2S, Now());
      ContentType:= XMLContentType;
      lstBodyMail:= TStringList.Create;
      if s<>'' then  lstBodyMail.Add(s);
      lstBodyMail.Add(' ');
      lstBodyMail.Add('Кол-во моделей с товарами составляет: '+IntToStr(AllModels));  
  end;    
(*    lstBodyMail.Add(' ');
    lstBodyMail.Add('Начало выполнения: '+FormatDateTime(cDateTimeFormatTSnD, timerStart));
    lstBodyMail.Add('Завершение выполнения: '+ FormatDateTime(cDateTimeFormatTSnD,Now));
    lstBodyMail.Add('Общее время выполнения: '+ FormatDateTime('hh:nn:ss',Now-timerStart));   *)

//--==  prFree section;
  prFree(List);
  for i:= 0 to High(ManufLists) do if assigned(ManufLists[i]) then try  
    prFree(ManufLists[i]);                                    
  except end;                                                           
  SetLength(ManufLists, 0);
  for i:= 0 to High(TopHeader) do SetLength(TopHeader[i], 0);             
  SetLength(TopHeader, 0);
  for i:= 0 to High(ModWares) do SetLength(ModWares[i], 0);             
  SetLength(ModWares, 0);
  SetLength(WidthArray, 0);
  SetLength(Link2Qty, 0);
  SetLength(HeaderWidthArray, 0);
  SetLength(heir_branches_array, 0);
  //if assigned(CellStylesArray) then 
  prFree(CellStylesArray);
end;  
end;
//--============================================================================================--//
procedure apGetAttrFile(UserID: integer; var lstBodyMail: TStringList;           //отчет 10
          var FName, Subj, ContentType: string; ThreadData: TThreadData;  s: string);
const nmProc = 'apGetAttrFile'; // имя процедуры/функции
var
  CellStylesArray: TXmlCellStylesArray;
  HeaderStyle, TextStyle, NumberStyle: TXmlReportStyle;
  PathFile, somestring, xmlDataType, DeclareCols, WorkSheets, ss: string;
  AttrGrArray: TASL;
  AttrList: TList;
  List, AttrValuesList: TStringList;
  i, j, rec, cols, rows: integer;
  arWareCount, AttrGrCount: integer;
  WareNameLength, WidthArray, AttrCodesArray: Tai;
  Percent, PPercent: real; 
//  timerstart:TDateTime;                                                        
begin
  PPercent:= 0;
  AttrList:= nil;
  AttrValuesList:= nil;
//  timerStart:= Now;
  try
    if not GetEmplTmpFilePath(UserID, PathFile, ss) then raise EBOBError.Create(ss);  

//    FName:=PathFile+'AttrValues_of'+FormatDateTime('_dd.mm_(hh.nn)',Now)+'.xml';
    FName:= PathFile+fnFormRepFileName('10', '.xml', constOpExport);                 

    if FileExists(FName) and not SysUtils.DeleteFile(FName) then
      raise EBOBError.Create(MessText(mtkNotDelPrevFile));

    List:= TStringList.Create;
    List.Add(cEX_Doc_Begin);
    List.Add(cEX_Workbook_Begin);

    CellStylesArray:= TXmlCellStylesArray.Create;
    SetLength(WareNameLength, 0);
    SetLength(AttrGrArray, 0);

    prStopProcess( UserID, ThreadData.ID);
    ImpCheck.SetProcessPercent( UserID, ThreadData.ID, 16);                        

    arWareCount:= Length(Cache.arWareInfo)-1;
    // получение товаров менеджера с разбивкой по группам атрибутов
    for i:= 0 to arWareCount do
      if Cache.WareExist(i) and (Cache.GetWare(i).ManagerID = UserID)
        and (Cache.GetWare(i).AttrGroupID > 0) and (not Cache.GetWare(i).IsArchive) then begin
        //если длина массива меньше кода группы, увеличиваем длину массива
        if  Length(AttrGrArray) <= (Cache.GetWare(i).AttrGroupID)  then begin
          SetLength(AttrGrArray, (Cache.GetWare(i).AttrGroupID+1));
          SetLength(WareNameLength, (Cache.GetWare(i).AttrGroupID+1));
        end;
        //если не создан СтрингЛист под данную группу - создаем его
        if AttrGrArray[Cache.GetWare(i).AttrGroupID] = nil then begin
          AttrGrArray[Cache.GetWare(i).AttrGroupID]:= TStringList.Create;
          AttrGrArray[Cache.GetWare(i).AttrGroupID].Sorted:= true;
          WareNameLength[Cache.GetWare(i).AttrGroupID]:= 19;
        end;
        //добавляем товар в соответствующий СтрингЛист
        AttrGrArray[Cache.GetWare(i).AttrGroupID].AddObject(Cache.GetWare(i).Name, pointer(i));
        if Length(Cache.GetWare(i).Name) > WareNameLength[Cache.GetWare(i).AttrGroupID] then
          WareNameLength[Cache.GetWare(i).AttrGroupID]:= Length(Cache.GetWare(i).Name);
      end;
//получено

    prStopProcess( UserID, ThreadData.ID);
    ImpCheck.SetProcessPercent( UserID, ThreadData.ID, 6);
    AttrGrCount:= Length(AttrGrArray)-1;

    WorkSheets:='';
    HeaderStyle:= CellStylesArray.AddStyle(TXmlReportStyle.Create(cnHeaderCell,
                  'Center', 'Center', [], cnHeaderText));
    NumberStyle:= CellStylesArray.AddStyle(TXmlReportStyle.Create(cnGreenCell, 'Center', 'Bottom'));
    TextStyle:= CellStylesArray.AddStyle(TXmlReportStyle.Create);

    Percent:= 57;
    if AttrGrCount>0 then Percent:= Percent/AttrGrCount
    else ImpCheck.SetProcessPercent( UserID, ThreadData.ID, Percent); 

    for i:= 0 to AttrGrCount do if (AttrGrArray[i]<>nil) then begin
//--==  формируем WorkSheet
      somestring:= '';
      DeclareCols:= '';
      //задаем имя, открываем таблицу
      WorkSheets:= WorkSheets+fnOpenWorksheet(fnWrkShtNameSpotter(Cache.AttrGroups.GetAttrGroup(i).Name));

      AttrList:= Cache.Attrgroups.GetAttrGroup(Cache.AttrGroups.GetAttrGroup(i).ID).GetListGroupAttrs;
      try
        cols:= AttrList.Count;
        SetLength(WidthArray, cols+1);
        SetLength(AttrCodesArray, cols);
        WidthArray[0]:= WareNameLength[i];
        somestring:= '<Row>'#10+fnGenerateXMLcell('Наименование товара', HeaderStyle, '', '', 1)+
                     fnGenerateXMLcell('Атрибуты', HeaderStyle, '', '', 0, cols-1)+'</Row>'#10+'<Row>'#10+
                     fnGenerateXMLcell(TAttributeItem(AttrList.Items[0]).Name, HeaderStyle, '', '', 0, 0, 2);
        for j:= 1 to cols-1 do
          somestring:= somestring+fnGenerateXMLcell(TAttributeItem(AttrList.Items[j]).Name, HeaderStyle);
        somestring:= somestring+'</Row>'#10;

        for j:= 1 to cols do begin
          WidthArray[j]:= Length(TAttributeItem(AttrList.Items[j-1]).Name);
          AttrCodesArray[j-1]:= TAttributeItem(AttrList.Items[j-1]).ID;
        end;

        rows:= AttrGrArray[i].Count-1;
        if rows>-1 then PPercent:= Percent/(rows+1)
        else ImpCheck.SetProcessPercent( UserID, ThreadData.ID, Percent);

        for rec:= 0 to rows do begin
  //        TestCssStopException;
          prStopProcess( UserID, ThreadData.ID);                                           
          somestring:= somestring+'<Row>'#10+fnGenerateXMLcell(AttrGrArray[i].Strings[rec], TextStyle);

          AttrValuesList:= Cache.GetWare(integer(AttrGrArray[i].Objects[rec])).GetWareAttrValuesByCodes(AttrCodesArray);
          try
            //получаем записи по атрибутам товара
            for j:= 1 to cols do begin
              if Length(AttrValuesList.Strings[j-1]) > WidthArray[j] then
                WidthArray[j]:= Length(AttrValuesList.Strings[j-1]);

              if TAttributeItem(AttrList.Items[j-1]).TypeAttr in [1, 3] then begin
                try
                  StrToFloat(Trim(AttrValuesList.Strings[j-1]));
                  xmlDataType:= cnXmlNumber;
                except
                  xmlDataType:= cnXmlString;
                end;
                 //
    //  AttrValuesList.Strings[j-1]
                somestring:= somestring+fnGenerateXMLcell(Trim(StringReplace(AttrValuesList.Strings[j-1],
                  FormatSettings.DecimalSeparator, '.', [])), NumberStyle, '', '', 0, 0, 0, xmlDataType);
              end;
              if TAttributeItem(AttrList.Items[j-1]).TypeAttr = 2 then
                somestring:= somestring+fnGenerateXMLcell(AttrValuesList.Strings[j-1],TextStyle);
            end;
          finally
            prFree(AttrValuesList);
          end;
          somestring:= somestring+'</Row>'#10;
          ImpCheck.SetProcessPercent( UserID, ThreadData.ID, PPercent);
        end;

        prStopProcess( UserID, ThreadData.ID);

        for j:= 0 to cols do    //      <Column ss:AutoFitWidth="0" ss:Width="..."/>
          DeclareCols:= DeclareCols+'<Column ss:AutoFitWidth="0" ss:Width="'+
                        IntToStr((WidthArray[j]+4)*5)+'"/>'#10;

        WorkSheets:= WorkSheets+DeclareCols+somestring;
        //строка для теста пустого worksheeta
        //WorkSheets:= WorkSheets + '<Row>'+#10+'<Cell>'+#10+'</Cell>'+#10+'</Row>'+#10;
        WorkSheets:= WorkSheets+fnCloseWorkSheet(fnGetWorkSheetOptions(1, 2));//закрываем worksheet;
      finally
        prFree(AttrList);
        SetLength(WidthArray, 0);
        SetLength(AttrCodesArray, 0);
      end;
    end;
    List.Add(CellStylesArray.GetXmlStyles);
    List.Add(WorkSheets);
    List.Add(cEX_Workbook_End);
    SaveToFile(List,FName);
    //List.SaveToFile(FName);

    prStopProcess( UserID, ThreadData.ID);
    ImpCheck.SetProcessPercent( UserID, ThreadData.ID, 1);                          

    Subj:= 'Данные в разрезе значений атрибутов от '+FormatDateTime(cDateTimeFormatY2S, Now());
    ContentType:= XMLContentType;
    lstBodyMail:= TStringList.Create;
    lstBodyMail.Add('Данные по значениям атрибутов в приложенном файле.');
(*    lstBodyMail.Add(' ');
    lstBodyMail.Add('Начало выполнения: '+FormatDateTime(cDateTimeFormatTSnD, timerStart));
    lstBodyMail.Add('Завершение выполнения: '+ FormatDateTime(cDateTimeFormatTSnD,Now));
    lstBodyMail.Add('Общее время выполнения: '+ FormatDateTime('hh:nn:ss',Now-timerStart));  *)
  except
    on E: EStopError do begin 
      s:= E.Message;
      raise EStopError.Create(s);
    end;
    on E: Exception do s:= E.Message;
  end;
  prFree(List);
  SetLength(WareNameLength, 0);
  SetLength(WidthArray, 0);     
  SetLength(AttrCodesArray, 0); 
//------------------- 
  for i:= 0 to High(AttrGrArray) do if AttrGrArray[i]<>nil then try
    prFree(AttrGrArray[i]);
  except end;
//------------------- 
  SetLength(AttrGrArray, 0);
  prFree(CellStylesArray);
  //if Assigned(AttrList) then 
  prFree(AttrList);
  //if Assigned(AttrValuesList) then 
  prFree(AttrValuesList);
end; //fnGetAttrFile
//==============================================================================
procedure apImportGBandTecDocWareLinks(UserID: integer; var lstBodyMail: TStringList; var FName, Subj, //импорт 18,22
   ContentType: string; aThreadData: TThreadData);
const nmProc = 'apImportGBandTecDocWareLinks'; // имя процедуры/функции
      TypeSys = 1;
      RepType = 18;
var
  XL: TExcelApplication;
  WorkBook: Excel_TLB._Workbook;
  WorkSheet: Excel_TLB._Worksheet;
  usedRng: Range;
  FNameI, SheetName, MsgStr, BrandName, TDArtName, GBArtName, CellValue: string;
  ii, isGreenCell, isWarningCell, isErrorCell, isHeaderCell, i, j, k, l: integer;
  SheetCount, WSid, finded, TDMF, cols, usedCols, rows, recs, ErrCount: integer;
  LinkAdd, LinkWrong, addLink3, addLinkON, AddedLinks3, AddedLinksOn: integer;
  ResCode, ActionCode: integer;
  isNewBrand, isAllWares: boolean;
  Percent, PPercent: real;                                                         
  ErrMsg: TASL;
  LogStr: Tas;
  SuppliersList, AutoWaresList: TStringList;
  Ware: TWareInfo;
vers: TOleEnum;  
ss: string;
begin
  isGreenCell:= cHexToInt(cnGreenCell);
  isHeaderCell:= cHexToInt(cnHeaderCell);
  isWarningCell:= cHexToInt(cnYellowCell);
  isErrorCell:= cHEXtoINT(cnRedCell);
  PPercent:= 0;
  usedCols:= 0;
  ErrCount:= 0;
  AutoWaresList:= nil;
//  SuppliersList:= nil;
  try
    WorkBook:= nil;
    XL:= TExcelApplication.Create(nil);
//--== Инициализируем работу экземпляра Excel
    CoInitializeEx(nil, COINIT_MULTITHREADED);
    XL.ConnectKind:= ckNewInstance;
    XL.Connect;
    XL.Visible[lcid]:= False;
    //XL.AutoQuit:= False;
    XL.ScreenUpdating[lcid]:=False;
    XL.DisplayAlerts[lcid]:= False;
    XL.Calculation[lcid]:= xlManual;
//    XL.AlertBeforeOverwriting[lcid]:= false;
 // отменяем автоматическую проверку ошибок в ячейках
    with XL.ErrorCheckingOptions do begin
      BackgroundChecking:= False;
      NumberAsText:= False;
      InconsistentFormula:= False;
    end;
    prStopProcess( UserID, aThreadData.ID);
    ImpCheck.SetProcessPercent( UserID, aThreadData.ID, 15); 
    if copy(FName, length(FName)-5+1,5)='.xlsx' then
      prAutoFilterXLSX(FName);                        
 // открываем импортируемый файл
    if Assigned(XL) and (not Assigned(WorkBook)) then begin
      WorkBook:= XL.Workbooks.Open (FName,     // 1// const Filename: WideString;
                                     0,              // 2// UpdateLinks: OleVariant;
                                     false,          // 3// ReadOnly: OleVariant;
                                     EmptyParam,     // 4// Format: OleVariant;
                                     EmptyParam,     // 5// Password: OleVariant;
                                     EmptyParam,     // 6// WriteResPassword: OleVariant;
                                     true,           // 7// IgnoreReadOnlyRecommended: OleVariant;
                                     EmptyParam,     // 8// Origin: OleVariant;
                                     5,              // 9// Delimiter: OleVariant;
                                     False,          //10// Editable: OleVariant;
                                     false,          //11// Notify: OleVariant;
                                     EmptyParam,     //12// Converter: OleVariant;
                                     EmptyParam,     //13// Local: OleVariant;
                                     EmptyParam,     //14// CorruptLoad: OleVariant;
                                     false,          //15// AddToMru: OleVariant;
                                     lcid);          //16// lcid: Integer): Workbook; safecall;

    //  WorkBook.CheckCompatibility:= false;
    end;
   
//==-- импортируемый Excel-файл готов к обработке
//    prStopProcess( UserID, aThreadData.ID);
    ImpCheck.SetProcessPercent( UserID, aThreadData.ID, 3);                          
    SetLength(ErrMsg, 0);
    SetLength(LogStr, 0);
    try
      lstBodyMail:= TStringList.Create;

      SuppliersList:= Cache.BrandTDList;
        
      SheetCount:= WorkBook.Worksheets.Count;

      Percent:= 75;
      if  SheetCount>0 then Percent:= Percent/SheetCount else ImpCheck.SetProcessPercent( UserID, aThreadData.ID, Percent); 

      for WSid:= 1 to SheetCount do begin
        isNewBrand:= false;
        TDMF:= -1;
        LinkAdd:= 0;
        //LinkDel:= 0;
        LinkWrong:= 0;
        SetLength(ErrMsg, WSid);
        l:= WSid-1;
        ErrMsg[l]:= TStringList.Create;

        WorkSheet:= WorkBook.Sheets.Item[WSid] as Excel_TLB._Worksheet;
        SheetName:= WorkSheet.Name;
    //перевод указателя на последнюю используемую ячейку листа
        usedRng:= WorkSheet.Range['A1', EmptyParam].SpecialCells(xlCellTypeLastCell, EmptyParam);
        cols:= usedRng.Column;
        rows:= usedRng.Row;
        i:= 1;
    //проверка корректности определения колонок и строк
        usedRng:= WorkSheet.Range['A'+IntToStr(i), EmptyParam].End_[xlToRight];
        if usedRng.Column > usedCols then usedCols:= usedRng.Column;

        isAllWares:= fnUserRolesEntree(RepType, fnGetUserRoles(UserID));

        if isAllWares then AutoWaresList:= Cache.GetSysManagerWares(TypeSys)
        else               AutoWaresList:= Cache.GetSysManagerWares(TypeSys, UserID);
        inc(i);
        try
          AddedLinks3:= 0;
          AddedLinksOn:= 0;
          BrandName:= '';

          if rows>0 then PPercent:= Percent/rows
          else ImpCheck.SetProcessPercent( UserID, aThreadData.ID, Percent);  

          while i <= rows do begin
//            TestCssStopException;
            usedRng:= WorkSheet.Range['B'+IntToStr(i), EmptyParam];
            CellValue:= fnOleXLCellReader(VarToStr(usedRng.Value2));
            if (usedRng.Interior.Color <> isHeaderCell) and (CellValue <> '') then begin
           //(usedRng.Interior.Color <> isGreenCell) and
              if BrandName <> CellValue then begin
                BrandName:= CellValue;
                k:= SuppliersList.IndexOf(BrandName);
                isNewBrand:= true;
                if (k > -1) then TDMF:= integer(SuppliersList.Objects[k]);
              end;
            //Если бренд найден будем работать с товарами
              if (TDMF > -1) then begin
   (*           s1:=fnArrOfIntToString(TBrandItem(Cache.WareBrands[Ware.WareBrandID]).TDMFcodes);  *)
                usedRng:= WorkSheet.Range['C'+IntToStr(i), EmptyParam];
                GBArtName:='';
                TDArtName:= '';
                if usedRng.Interior.Color <> isGreenCell then begin
                  TDArtName:= fnOleXLCellReader(VarToStr(usedRng.Value2), false);
                  GBArtName:= fnOleXLCellReader(VarToStr(WorkSheet.Range['A'+IntToStr(i), EmptyParam].Value2));
                  ii:= i-1;
                  while GBArtName='' do begin
                    GBArtName:= fnOleXLCellReader(VarToStr(WorkSheet.Range['A'+IntToStr(ii), EmptyParam].Value2));
                    ii:= ii-1;
                  end;
                end;

                if (GBArtName <> '') AND (TDArtName <> '') then begin
                  usedRng:= WorkSheet.Range['D'+IntToStr(i), EmptyParam];
                  CellValue:= fnOleXLCellReader(VarToStr(usedRng.Value2), false);

                  if CellValue <> '' then begin
                    if usedRng.Interior.Color <> isGreenCell then begin
                      finded:= AutoWaresList.IndexOf(GBArtName);
                      prStopProcess( UserID, aThreadData.ID);
                      //TestCssStopException;
                      if finded > -1 then begin
                        Ware:= Cache.GetWare(integer(AutoWaresList.Objects[finded]));
                        ActionCode:= StrToIntDef(CellValue, -100500);
                        try
                          Case ActionCode of
                            resAdded: begin
                              ResCode:= resAdded;
                              MsgStr:= Ware.CheckArticleLink(TDArtName, TDMF, ResCode, UserID);
                            end;
                        
                            -2: begin  // пометка ошибочной связи без удаления информации из ТекДок 
                              ResCode:= resWrong;
                              MsgStr:= Ware.CheckArticleLink(TDArtName, TDMF, ResCode, UserID,False);
                            end;
                        
                            resNotWrong: begin
                              ResCode:= resNotWrong;
                              MsgStr:= Ware.CheckArticleLink( TDArtName, TDMF, ResCode, UserID);
                            end;
                            -1{resWrong}: begin
                              ResCode:= resWrong;
                              MsgStr:= Ware.CheckArticleLink(TDArtName, TDMF, ResCode, UserID);
                            end;
                            -100500: begin
                              ErrMsg[l].AddObject('Ошибка'#9+'Указан неизвестный или неверный статус привязки: "'+
                                CellValue+'"'#9+SheetName+#9+'D'+IntToStr(i), pointer(-4*(100000+i)));
                              usedRng.Interior.Color:= isErrorCell;
                              inc(ErrCount);
                              ResCode:= -2;
                            end;
                          end;
                        except
                          on E: EBOBError do begin ResCode:= resError; MsgStr:= E.Message; end;
                          on E: Exception do begin ResCode:= resError; MsgStr:= E.Message; end;
                        end;
                        usedRng:= WorkSheet.Range['A'+IntToStr(i), 'E'+IntToStr(i)];

                        Case ResCode of
                          resError: begin
                            usedRng.Interior.Color:= isErrorCell;
                            ErrMsg[l].AddObject('Ошибка'#9+'Не удалось провести операцию! '+MsgStr+#9+
                              SheetName+#9+'B'+IntToStr(i), pointer(-5*(100000+i)));
                            inc(ErrCount);
                          end;
                          resDoNothing: begin
                            usedRng.Interior.Color:= isGreenCell;
                            ErrMsg[l].AddObject('Сообщение'#9+MsgStr+ #9+SheetName+#9+'D'+IntToStr(i), pointer(-11*(100000+i)));
                          end;
                          resAdded, resNotWrong: begin
                            usedRng.Interior.Color:= isGreenCell;
                            inc(LinkAdd);
                            addLink3:= 0;
                            addLinkON:= 0;
                          //добавляем TECDOC-ые связки "2, 3" для вновьпривязанного товара

                            MsgStr:= LoadWareLinksUsesCrisTextsFromTDT(Ware.ID, userID, addLink3, addLinkON); // n_TD_functions
                            if Trim(MsgStr) <> '' then begin
                              ErrMsg[l].AddObject('Сообщение'#9+MsgStr+#9+SheetName+#9+'A'+
                                IntToStr(i), pointer(-6*(100000+i)));
                              prMessageLOGS(MsgStr, 'Import', false);
                              inc(ErrCount);
  //                            usedRng.Interior.Color:= isErrorCell;
                            end;
                            AddedLinks3:= AddedLinks3 + addLink3;
                            AddedLinksOn:= AddedLinksOn + addLinkON;
                          end;
                        (*
                          resDeleted: begin
                            ErrMsg[l].AddObject('Сообщение'#9+
                                'Данная привязка товаров TecDoc и GrossBee удалена из базы'#9+
                                 SheetName+#9+'D'+IntToStr(i), pointer(-10*(100000+i)));
                            usedRng.Interior.Color:= isGreenCell;
                            inc(LinkDel);
                          end;
                        *)
                          resWrong: begin
                            usedRng.Interior.Color:= isGreenCell;
                            ErrMsg[l].AddObject('Сообщение'#9+'Данная привязка товаров TecDoc и GrossBee'+
                              ' помечена как ложная'#9+SheetName+#9+'D'+IntToStr(i), pointer(-10*(100000+i)));
                            usedRng.Interior.Color:= isGreenCell;
                            inc(LinkWrong);
                          end;
                        end;

                      end else begin
                        ErrMsg[l].AddObject('Ошибка'#9+'Товар "'+GBArtName+'" не найден в GrossBee'#9+
                          SheetName+#9+'A'+IntToStr(i), pointer(-3*(100000+i)));
                        usedRng.Interior.Color:= isErrorCell;
                        inc(ErrCount);
                      end;
                    end;// if usedRng.Interior.Color <> isGreenCell

                  end else begin // CellValue <> '' then
                    ErrMsg[l].AddObject('Ошибка'#9+'Не указан статус привязки'#9+
                      SheetName+#9+'D'+IntToStr(i), pointer(-2*(100000+i)));
                    usedRng.Interior.Color:= isErrorCell;
                    inc(ErrCount);
                  end;
                end;

              end else begin //if (k > -1) then begin //Если бренд найден//
                if isNewBrand then begin
                  ErrMsg[l].AddObject('Важная ошибка'#9+'Производитель "'+BrandName+
                    '" не найден среди брендов TecDoc. '#10+
                    'Привязку товаров по нему произвести не удалось.'#9+
                    SheetName+#9+'B'+IntToStr(i), pointer(-1*(100000+i)));
                  usedRng.Interior.Color:= isErrorCell;
                  inc(ErrCount);
                  isNewBrand:= false;
                  TDMF:= -1;
                end;
              end;
            end;//if (usedRng.Interior.Color <> isGreenCell/isHeaderCell) and (CellValue <> '')
            inc(i);

//            prStopProcess( UserID, aThreadData.ID);
            ImpCheck.SetProcessPercent( UserID, aThreadData.ID, PPercent);                   
          end;// while i <= rows do

          ErrMsg[l].AddObject('ОТЧЕТ'+#9+'Лист "'+SheetName+'"'#9+SheetName+#9+'A1', pointer(2*100000));
          ErrMsg[l].AddObject('ИТОГО'#9+'Добавлено привязок товаров: '+IntToStr(LinkAdd)+#9+
            SheetName+#9+'A1', pointer(1*100000));
          ErrMsg[l].AddObject('ИТОГО'#9+'Признаков ложной привязки установлено: '+
            IntToStr(LinkWrong)+#9+SheetName+#9+'A1', pointer(1*100000));
          ErrMsg[l].AddObject('ИТОГО'#9+'Добавлено "связок 3": '+IntToStr(AddedLinks3)+#9+
            SheetName+#9+'A1', pointer(1*100000));
          ErrMsg[l].AddObject('ИТОГО'#9+'Привязано оригинальных номеров из TecDoc: '+
            IntToStr(AddedLinksOn)+#9+SheetName+#9+'A1', pointer(1*100000));

          lstBodyMail.Add('Лист "'+SheetName+'". Добавлено привязок товаров: '+IntToStr(LinkAdd));
          lstBodyMail.Add('Лист "'+SheetName+'". Установлено признаков ложной привязки: '+IntToStr(LinkWrong));
          lstBodyMail.Add('По указанным товарам добавлено "связок 3": '+IntToStr(AddedLinks3)+'.');
          lstBodyMail.Add('Привязано оригинальных номеров из TecDoc: '+IntToStr(AddedLinksOn)+'.');
        finally
          prFree(AutoWaresList);
        end;
      end;// for WSid:= 1 to SheetCount do
    except
      on E: Exception do prMessageLOGS(' '+nmProc+': '+E.Message, 'Import', false);
      on E: EStopError do ss:= E.Message;
    end;
//      prStopProcess( UserID, aThreadData.ID);                                          
  finally
    // Добавим один новый лист после текущего
      XL.ActiveWorkbook.Sheets.Add(EmptyParam, WorkBook.Sheets.Item[WorkBook.Sheets.Count], 1, xlWorksheet, lcid);
      WorkSheet:= WorkBook.Sheets.Item[WorkBook.Sheets.Count] as Excel_TLB._Worksheet;
      WorkSheet.Name:= 'Импорт от'+FormatDateTime(' dd.mm hh_nn ', Now);
    
      recs:= 1;
    //-=создаем шапку для лога импорта
      WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= 'Статус  сообщения';
      WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= 'Лист';
      WorkSheet.Range['C'+IntToStr(recs), EmptyParam].Value2:= '   Ячейка   ';
      WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= 'Сообщение';
      usedRng:=WorkSheet.Range['A'+IntToStr(recs), 'D'+IntToStr(recs)];
      usedRng.EntireRow.RowHeight:= usedRng.EntireRow.RowHeight*2;
      usedRng.Interior.Color:= isHeaderCell;
      usedRng.Font.Color:= cHEXtoINT(cnHeaderText);
      usedRng.Font.Bold:= True;
      usedRng.HorizontalAlignment:= xlCenter;
      usedRng.VerticalAlignment:= xlCenter;
      usedRng.Borders.Color:= cHEXtoINT(cnHeaderBorder);
      usedRng.BorderAround(xlContinuous, xlHairLine, xlColorIndexAutomatic, EmptyParam, EmptyParam);
      XL.ActiveWindow.SplitRow:= 1;
      XL.ActiveWindow.FreezePanes:= True;
  //=-шапка создана
      inc(recs);

      Percent:= 6;
      if  High(ErrMsg)>-1 then Percent:= Percent/(High(ErrMsg)+1)
      else ImpCheck.SetProcessPercent( UserID, aThreadData.ID, Percent);

      for j:= 0 to High(ErrMsg) do begin
        ErrMsg[j].CustomSort(@SizeCustomSort);
        rows:= ErrMsg[j].Count;

        if  rows>0 then PPercent:= Percent/rows
        else ImpCheck.SetProcessPercent( UserID, aThreadData.ID, Percent); 

        for i:= 0 to rows-1 do begin
//          TestCssStopException;
        //  ErrMsg[j][i]:=IntToStr(j)+'|'+IntToStr(integer(ErrMsg[j].Objects[i]))+'|'+ErrMsg[j][i];
          LogStr:= fnSplitStringChar(ErrMsg[j].Strings[i]);
          try
            ResCode:= trunc((integer(ErrMsg[j].Objects[i]))/100000);
            Case ResCode of
              -11..-10: begin
                WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                usedRng:= WorkSheet.Range['C'+IntToStr(recs), EmptyParam];
                usedRng.Value2:= LogStr[3];
                WorkSheet.Hyperlinks.Add(usedRng, '#'''+LogStr[2]+'''!'+LogStr[3], EmptyParam, EmptyParam, EmptyParam);
                WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                usedRng:= WorkSheet.Range['A'+IntToStr(recs), 'D'+IntToStr(recs)];
                usedRng.Interior.Color:= isWarningCell;
              end;
              -9..-1: begin
                WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                usedRng:= WorkSheet.Range['C'+IntToStr(recs), EmptyParam];
                usedRng.Value2:= LogStr[3];
                WorkSheet.Hyperlinks.Add(usedRng, '#'''+LogStr[2]+'''!'+LogStr[3], EmptyParam, EmptyParam, EmptyParam);
                WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                usedRng:= WorkSheet.Range['A'+IntToStr(recs), 'D'+IntToStr(recs)];
                usedRng.Interior.Color:= isErrorCell;
              end;
              1..2: begin
                WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                usedRng:= WorkSheet.Range['B'+IntToStr(recs), EmptyParam];
                usedRng.Value2:= LogStr[2];
                WorkSheet.Hyperlinks.Add(usedRng, '#'''+LogStr[2]+'''!'+LogStr[3], EmptyParam, EmptyParam, EmptyParam);
                WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                usedRng:= WorkSheet.Range['A'+IntToStr(recs), 'D'+IntToStr(recs)];
                usedRng.Interior.Color:= isGreenCell;
              end;
            end;
            inc (recs);
          finally
            SetLength(LogStr, 0); 
          end;

//          prStopProcess( UserID, aThreadData.ID);
          ImpCheck.SetProcessPercent( UserID, aThreadData.ID, PPercent);
        end;
      end;
      usedRng:= WorkSheet.Range['A1', 'D'+IntToStr(recs-1)];
      usedRng.Cells.WrapText:= False;
      usedRng.EntireRow.AutoFit;
      usedRng.EntireColumn.AutoFit;


//    prStopProcess( UserID, aThreadData.ID);                                          
    //Отправка письма
    Subj:= WorkBook.Name+'. Привязка товаров GrossBee и TecDoc от '+FormatDateTime(cDateTimeFormatY2S, Now());
    ContentType:= XMLContentType;
    if ErrCount = 0 then lstBodyMail.Add(MessText(mtkImportSuccess))
    else lstBodyMail.Add(MessText(mtkImportError));
//  finally
    Workbook.CheckCompatibility := False;
    WorkBook.Save(lcid);
    WorkBook.Close(false, EmptyParam, EmptyParam, lcid);
//    XL.Workbooks.Close(lcid);
    XL.Quit;// закрыть Excel
    XL.Disconnect;
    prFree(XL);
    FNameI:= ExtractFilePath(FName)+fnFormRepFileName(IntToStr(ImpCheck.GetImpType(UserID, aThreadData.ID)), FName, constOpImport);                 
    RenameFile(FName, FNameI);
    FName:= FNameI;    
//    prStopProcess( UserID, aThreadData.ID);
    ImpCheck.SetProcessPercent( UserID, aThreadData.ID, 1);                          
    SetLength(LogStr, 0);
    for i:= 0 to High(ErrMsg) do if ErrMsg[i]<>nil then prFree(ErrMsg[i]);
    SetLength(ErrMsg, 0);
    //if Assigned(AutoWaresList) then 
    prFree(AutoWaresList);
  end;
end;
//--============================================================================================--//
procedure apImportLinkDetModWare(UserID: integer; var lstBodyMail: TStringList; //импорт 12,17
          var FName, Subj, ContentType: string; aThreadData: TThreadData);
const nmProc = 'apImportLinkDetModWare'; // имя процедуры/функции
      cnMinHeader = 2;
var
  XL: TExcelApplication;
  WorkBook: Excel_TLB._Workbook;
  WorkSheet: Excel_TLB._Worksheet;
  usedRng: Range;
  isBorderGreenCell, isGreenCell, isHeaderCell, isWarningCell, isErrorCell, isCellBorder: integer;
  i, j, k, l, ll, m, recs, rows, cols, modelID, {nodeID,} wareID, usedCols, StopRow: integer;
  HeaderDepth, RealHeaderDepth, FirstFindedManuf, iCode, {TrueParent,} SheetID: integer;
  nodeIndex, ResCode, AddLink2Count, UpdLink2Count, DelLink2Count{, NotEditLink2Count}: Integer;
  AddWareCount, {ExistWareCount,} AddModLnCount, AddModelCount: integer;
  wrkshtCount, readed, ErrCount: integer;
  actl: integer;//хранит значение обрабатываемой строки связки "произв./мод. ряд/модель"
  TypeSys: integer; //переменная указатель на тип системы (авто/мото)
  isHeader, isWrkShtReadable, isMLExists: boolean;
  Stream: TBOBMemoryStream;
  Link2Nodes, Link2Grid, Link2Models: tai;
  Link2Values, LogStr: Tas;
  ss, FNameI, ParentNode, MsgStr, SheetName, ModelStr, ModLnStr, MsgWare: string;
  someStringList, MotoWares: TStringList;
  TreeList: TStringList;  //дерево узлов (prFree-able)
  lstManuf: TStringList;  //список производителей авто/мото (prFree-able)
  lstModLns: TStringList; //список модельных рядов по производителю (prFree-able)
  lstModels: TStringList; //список моделей по модельному ряду (prFree-able)
  ErrMsg: TASL;
  TopHeaderVarArray, LeftHeaderVarArray, Link2_3_VarArray, CellValue: OleVariant;
  Percent, PPercent: real;
  MMLink: TMMLink;
begin
 //жесткое задание типа системы "мото". Автомат.определение типа системы будет вводиться по мере необходимости...
 TypeSys:= 2;
 readed:= 0;
 l:= 0;
 ErrCount:= 0;
 PPercent:= 0;
 SetLength(ErrMsg, 0);
 SetLength(LogStr, 0);
 someStringList:=nil;
 MotoWares:=nil;
 TreeList:=nil;
 lstManuf:=nil;
 lstModLns:=nil;
 lstModels:=nil;
 
 lstBodyMail:= TStringList.Create;

 isGreenCell:= cHexToInt(cnGreenCell);
 isBorderGreenCell:= cHexToInt(cnGreenBorderedCell);
 isHeaderCell:= cHexToInt(cnHeaderCell);
 isWarningCell:= cHexToInt(cnYellowCell);
 isErrorCell:= cHEXtoINT(cnRedCell);
 isCellBorder:= cHEXtoINT(cnCellBorder);

 XL:= TExcelApplication.Create(nil);
 WorkBook:= nil;
//try 
  try
    TreeList:= Cache.FDCA.AutoTreeNodesSys[TypeSys].NoteGetTree;
    recs:= TreeList.Count-1;
    for i:= 0 to recs do
      TreeList.Strings[i]:= TAutoTreeNode(TreeList.Objects[i]).NameSys;

    someStringList:= Cache.FDCA.Manufacturers.GetSortedList(TypeSys);

    lstManuf:= TStringList.Create;
    recs:= someStringList.Count;
    lstManuf.Capacity:= recs;
    for i:= 0 to recs-1 do
      lstManuf.AddObject(AnsiUpperCase(someStringList.Strings[i]),
        TMMLink.Create(TManufacturer(someStringList.Objects[i]).ID, nil));
//--== Инициализируем работу экземпляра Excel
    CoInitializeEx(nil, COINIT_MULTITHREADED);
    XL.ConnectKind:= ckNewInstance;
    XL.Connect;
    XL.Visible[lcid]:= False;
    //XL.AutoQuit:= False;
    XL.ScreenUpdating[lcid]:=False;
    XL.DisplayAlerts[lcid]:= False;
    XL.Calculation[lcid]:= xlManual;
 // отменяем автоматическую проверку ошибок в ячейках
    with XL.ErrorCheckingOptions do begin
      BackgroundChecking:= False;
      NumberAsText:= False;
      InconsistentFormula:= False;
    end;
    if copy(FName, length(FName)-5+1,5)='.xlsx' then
      prAutoFilterXLSX(FName);
 // открываем импортируемый файл
    if Assigned(XL) and (not Assigned(WorkBook)) then
      WorkBook:= XL.Workbooks.Open (FName,          // 1// const Filename: WideString;
                                     0,              // 2// UpdateLinks: OleVariant;
                                     false,          // 3// ReadOnly: OleVariant;
                                     EmptyParam,     // 4// Format: OleVariant;
                                     EmptyParam,     // 5// Password: OleVariant;
                                     EmptyParam,     // 6// WriteResPassword: OleVariant;
                                     true,           // 7// IgnoreReadOnlyRecommended: OleVariant;
                                     EmptyParam,     // 8// Origin: OleVariant;
                                     5,              // 9// Delimiter: OleVariant;
                                     False,          //10// Editable: OleVariant;
                                     false,          //11// Notify: OleVariant;
                                     EmptyParam,     //12// Converter: OleVariant;
                                     EmptyParam,     //13// Local: OleVariant;
                                     EmptyParam,     //14// CorruptLoad: OleVariant;
                                     false,          //15// AddToMru: OleVariant;
                                     lcid);          //16// lcid: Integer): Workbook; safecall;
//==-- импортируемый Excel-файл готов к обработке
    SheetID:= 1; //ставим указатель на первый лист импортируемого документа
    wrkshtCount:= WorkBook.Sheets.Count; //определяем количество листов в книге Excel
    SetLength(ErrMsg, wrkshtCount);

    ImpCheck.SetProcessPercent(UserID, aThreadData.ID, 3);
    Percent:= 88;
    if wrkshtCount>0 then Percent:= Percent/wrkshtCount else ImpCheck.SetProcessPercent( UserID, aThreadData.ID, Percent); 

  //Самый главный цикл, в котором мы вычитываем данные с листов импортируемого файла. Все списки и
  //справочники из Кэша, которые будут применяться для каждой страницы уже должны быть получены.
    while SheetID <= wrkshtCount do begin
      SetLength (Link2Nodes, 0);
      isWrkShtReadable:= True;
      HeaderDepth:= 0;
      usedCols:= 0;
//      isTopHeaderCorrect:= False;
      isHeader:= False;
      FirstFindedManuf:= -1;
      RealHeaderDepth:= 1;
      ErrMsg[SheetID-1]:= TStringList.Create;
      WorkSheet:= WorkBook.Sheets.Item[SheetID] as Excel_TLB._Worksheet;
      SheetName:= '';
    //Используемая область ячеек:  WorkSheet.UsedRange[lcid];
    //Последняя ячейка листа:  WorkSheet.Range['A1', EmptyParam].SpecialCells(xlCellTypeLastCell, EmptyParam)
    //перевод указателя на последнюю используемую ячейку листа
      usedRng:= WorkSheet.Range['A1', EmptyParam].SpecialCells(xlCellTypeLastCell, EmptyParam);
      cols:= usedRng.Column;
      rows:= usedRng.Row;

      if (cols>3) or (rows>2) then begin
  //--==Работаем с шапкой листа книги Excel
      //определяем глубину дерева. Предполагаем, что дерево занимает все строки перед первым
      //найденным наименованием производителя авто/мото
        k:= 1;
        while not isHeader do begin
          CellValue:= fnOleXLCellReader(WorkSheet.Range['A'+IntToStr(k), EmptyParam].Value2);
          if CellValue<>'' then begin
            if lstManuf.IndexOf(AnsiUpperCase(CellValue))>-1 then begin
              if k>=2 then begin
                HeaderDepth:= k-1;
                isHeader:= True;
                FirstFindedManuf:= k; //?
              end else begin
                ErrMsg[SheetID-1].AddObject('Критическая ошибка'#9+
                  'Структура импортируемого листа "'+WorkSheet.Name+'" сформирована некорректно! '#10+
                  'Обработку данных листа произвести не удалось.'#9+WorkSheet.Name+#9+'A1', pointer(-1*100000));
                inc(ErrCount);
                isWrkShtReadable:= False;
              end;
            end;
          end;
          CellValue:= Unassigned; 

          if k < rows then inc(k)
          else if FirstFindedManuf = -1 then begin
            ErrMsg[SheetID-1].AddObject('Критическая ошибка'#9+'Структура импортируемого листа "'+ WorkSheet.Name+
             '" сформирована некорректно! '#10+'Лист не обработан.'#9+WorkSheet.Name+#9+'A1', pointer(-1*100000));
            isWrkShtReadable:= False;
            inc(ErrCount);
            isHeader:= True;
            HeaderDepth:= 4;  //!!
          end;
        end; // while

      //проверка корректности определения колонок и строк
        for i:= 1 to HeaderDepth do begin
          usedRng:= WorkSheet.Range['D'+IntToStr(i), EmptyParam].End_[xlToRight];
          if usedRng.Column > usedCols then usedCols:= usedRng.Column;
        end;
        if (cols - usedCols) >=1 then cols:= usedCols;
        SetLength (Link2Nodes, cols);
      //забираем значения ячеек предполагаемой шапки в вариантный массив для дальнейших проверок
        usedRng:= WorkSheet.Range['A1', IntToABC(cols-1)+IntToStr(HeaderDepth)];
        TopHeaderVarArray:= usedRng.Value[xlRangeValueDefault]; //получили вариантный массив со значениями
      //теперь убедимся, что шапка для связки "производитель/модельный ряд/модель" сформирована
      //корректно и в ней нет наименований узлов дерева
        for i:= VarArrayLowBound(TopHeaderVarArray, 2) to 3 do
          for j:= VarArrayLowBound(TopHeaderVarArray, 1) to HeaderDepth do
            if TreeList.IndexOf(AnsiUpperCase(Trim(VarToStr(TopHeaderVarArray[j,i]))))>-1 then begin
              //isLeftHeaderCorrect:= False;
              ErrMsg[SheetID-1].AddObject('Критическая ошибка'#9+
                'Структура импортируемого листа "'+WorkSheet.Name+'" сформирована некорректно! '#10+
                'Обработку данных листа произвести не удалось! В заголовке для связки ' +
                '"производитель/модельный ряд/модель" обнаружено наименование узла дерева.'#9+
                 WorkSheet.Name+#9+IntToABC(i)+IntToStr(j), pointer(-2*100000-i));
               inc(ErrCount);
               isWrkShtReadable:= False;
            end;
      //проверяем корректность найденного значения глубины дерева
      //также составляем массив кодов узлов по которым будет формироваться "связка 2"
        for i:= 4 to cols do
          for j:= 1 to HeaderDepth-1 do begin
            MsgStr:= AnsiUpperCase(Trim(VarToStr(TopHeaderVarArray[j,i])));
            nodeIndex:= TreeList.IndexOf(MsgStr);
            if (MsgStr<>'') and (nodeIndex > -1) then begin
              if (j>1) and (Trim(VarToStr(TopHeaderVarArray[j-1,i]))<>'') then begin
                ParentNode:= AnsiUpperCase(Trim(VarToStr(TopHeaderVarArray[j-1,i])));
                Link2Nodes[i-1]:= TAutoTreeNode(TreeList.Objects[TreeList.IndexOf(ParentNode)]).ID;
              end;
              if (RealHeaderDepth < j) then RealHeaderDepth:= j;

            end else if (MsgStr<>'') and (nodeIndex < 0) then begin
              ErrMsg[SheetID-1].AddObject('Критичная ошибка'#9+
                'Наименование данного узла не соответсвует ни одному из узлов дерева.'#9+
                WorkSheet.Name+#9+IntToABC(i-1)+IntToStr(j), pointer(-3*100000-i));
              WorkSheet.Range[IntToABC(i-1)+IntToStr(j), EmptyParam].Interior.Color:= isErrorCell;
              inc(ErrCount);
              isWrkShtReadable:= False;
            end;

            if (nodeIndex > -1)
              and ((TAutoTreeNode(TreeList.Objects[nodeIndex]).ParentID=Link2Nodes[i-1]) or (Link2Nodes[i-1] = 0)) then
              Link2Nodes[i-1]:= TAutoTreeNode(TreeList.Objects[nodeIndex]).ID

            else if (nodeIndex > -1) and (Link2Nodes[i-1]>0)
              and (TAutoTreeNode(TreeList.Objects[nodeIndex]).ParentID <> Link2Nodes[i-1]) then begin
              ErrMsg[SheetID-1].AddObject('Критичная ошибка'#9+
                'Данный узел не относится к вышеуказанной ветке дерева.'#9+
                WorkSheet.Name+#9+IntToABC(i-1)+IntToStr(j), pointer(-3*100000-i));
              WorkSheet.Range[IntToABC(i-1)+IntToStr(j), EmptyParam].Interior.Color:= isErrorCell;
              isWrkShtReadable:= False;
              inc(ErrCount);
            end;
          end;//for j:= 1 to HeaderDepth-1 do begin

      //если глубина "ожидаемой" шапки с деревом узлов не совпадает с опознанным на листе деревом
      //выводим предупреждение о "непонятной области" на листе
        if RealHeaderDepth+1 < HeaderDepth then begin
          WorkSheet.Range['A'+IntToStr(RealHeaderDepth+2), IntToABC(cols-1)+IntToStr(HeaderDepth)].Interior.Color:= isErrorCell;
          ErrMsg[SheetID-1].AddObject('Предупреждение'#9+'Область (A'+IntToStr(RealHeaderDepth+2)+' - '+
             IntToABC(cols-1)+IntToStr(HeaderDepth)+') импортируемого листа "'+WorkSheet.Name+
            '" не удалось распознать для обработки! '#10+'Обработка данных из этой области не произведена.'#9+
             WorkSheet.Name+#9+'A'+IntToStr(RealHeaderDepth+2), pointer(-4*100000));
          inc(ErrCount);   
        end;

  //--=============================================================
  //--== Если страница хорошая, годная начинаем читать с нее данные
        if isWrkShtReadable then begin
          AddWareCount:= 0;
          AddModLnCount:= 0;
          AddModelCount:= 0;
          AddLink2Count:= 0;
          DelLink2Count:= 0;
          UpdLink2Count:= 0;
          SetLength(Link2Grid, 0);
          SetLength(Link2Models, 0);
          SheetName:= WorkSheet.Name;
          inc(readed);
        //раскрасим узнанный заголовок  с деревом
          usedRng:= WorkSheet.Range['A1', IntToABC(cols-1)+IntToStr(RealHeaderDepth+1)];
          usedRng.Interior.Color:= isHeaderCell;
          usedRng.Font.Color:= cHEXtoINT(cnHeaderText);
          usedRng.Font.Bold;
          usedRng.HorizontalAlignment:= xlCenter;
          usedRng.VerticalAlignment:= xlCenter;
          usedRng.Borders.Color:= cHEXtoINT(cnHeaderBorder);
          usedRng.BorderAround(xlContinuous, xlHairLine, xlColorIndexAutomatic, EmptyParam, EmptyParam);
        //заголовок украшен

        //вычитываем производителей/модельные ряды/модели с обрабатываемого листа
//        usedRng:= WorkSheet.Range['A1', IntToABC(cols-1)+IntToStr(HeaderDepth)];
//        TopHeaderVarArray:= usedRng.Value[xlRangeValueDefault];
          usedRng:= WorkSheet.Range['A1', 'C'+IntToStr(rows)];
          LeftHeaderVarArray:= usedRng.Value[xlRangeValueDefault];
        //получаем список всех товаров по типу системы
          MotoWares:= Cache.GetSysManagerWares(TypeSys);
          try
            for i:= FirstFindedManuf to VarArrayHighBound(LeftHeaderVarArray, 1) do begin
//try          
                        
//              TestCssStopException;
            //считываем наименование производителя
              MsgStr:= AnsiUpperCase(Trim(VarToStr(LeftHeaderVarArray[i,1])));
              if MsgStr<>'' then begin
                SetLength(Link2Grid, Length(Link2Grid)+1);
                SetLength(Link2Models, Length(Link2Models)+1);
                actl:= Length(Link2Grid)-1;
                Link2Grid[actl]:= i;
                k:= lstManuf.IndexOf(MsgStr);
                if k>-1 then begin
                  WorkSheet.Range['A'+IntToStr(i), EmptyParam].Interior.Color:= isBorderGreenCell;
                //если модельные ряды по данному производителю еще не подтянуты, подтягиваем их
                  if TMMLink(lstManuf.Objects[k]).Links = nil then begin
                    lstModLns:= TStringList.Create;
                    TMMLink(lstManuf.Objects[k]).Links:= lstModLns;
    //                someStringList:= TManufacturer(Cache.FDCA.Manufacturers.Items[TMMLink
    //                  (lstManuf.Objects[k]).ID]).GetModelLinesList(TypeSys, false);
                    someStringList:= Cache.FDCA.Manufacturers[TMMLink(lstManuf.Objects[k]).ID].GetModelLinesList(TypeSys, false);
                    recs:= someStringList.Count;
                    lstModLns.Capacity:= recs;
                    for j:= 0 to recs-1 do
                      lstModLns.AddObject(Trim(AnsiUpperCase(someStringList.Strings[j])),
                        TMMLink.Create(integer(someStringList.Objects[j]), nil));
                  end;
                //устанавливаем признак наличия модельного ряда. Если он переводится в False, значит
                //указанная в этой строке модель считываться не будет
                  isMLExists:= True;
                //считываем наименование модельного ряда
                  MsgStr:= AnsiUpperCase(Trim(VarToStr(LeftHeaderVarArray[i,2])));
                  if Length(MsgStr)>0 then begin
                    l:= TStringList(TMMLink(lstManuf.Objects[k]).Links).IndexOf(MsgStr);
                    if l > -1 then begin
                      WorkSheet.Range['B'+IntToStr(i), EmptyParam].Interior.Color:= isBorderGreenCell;
                      if TMMLink(TStringList(TMMLink(lstManuf.Objects[k]).Links).Objects[l]).Links = nil then begin
                        lstModels:= TStringList.Create;
                        TMMLink(TStringList(TMMLink(lstManuf.Objects[k]).Links).Objects[l]).Links:= lstModels;
                        WorkSheet.Range['B'+IntToStr(i), EmptyParam].Interior.Color:= isBorderGreenCell;
                        someStringList:= Cache.FDCA.ModelLines.Items[TMMLink(TStringList(TMMLink(
                          lstManuf.Objects[k]).Links).Objects[l]).ID].GetListModels(false);
                        recs:= someStringList.Count;
                        lstModels.Capacity:= recs;
                        for j:= 0 to recs-1 do
                          lstModels.AddObject(Trim(AnsiUpperCase(someStringList.Strings[j])), someStringList.Objects[j]);
                      end;

                    end else begin
                    //вручную формируем поток, для процедуры, добавляющей модельный ряд из интерфейса WebArm-а
                      Stream:= TBOBMemoryStream.Create;
                      Stream.WriteInt(UserID);                                 // Код пользователя
                      Stream.WriteInt(TypeSys);                                // Тип системы
                      Stream.WriteInt(TMMLink(lstManuf.Objects[k]).ID);        // Код производителя авто
                      Stream.WriteStr(Trim(VarToStr(LeftHeaderVarArray[i, 2])));// Наименование модельного ряда
                      Stream.WriteBool(False);                                 // isTop
                      Stream.WriteInt(0);                                      // Месяц начала выпуска
                      Stream.WriteInt(0);                                      // Год начала
                      Stream.WriteInt(0);                                      // Месяц окончания
                      Stream.WriteInt(0);                                      // Год окончания
                      Stream.WriteBool(True);                                  // Признак видимости
        (*            Поток из процедуры по добавлению модельного ряда из webArm-a
                      UserID:= Stream.ReadInt;
                      SysID:= Stream.ReadInt;
                      ManufID:= Stream.ReadInt; // Код производителя авто
                      MLName:= Stream.ReadStr;  // Наименование модельного ряда
                      isTop:= Stream.ReadBool;
                      fMS:= Stream.ReadInt;     // Месяц начала выпуска
                      fYS:= Stream.ReadInt;     // Год начала
                      fME:= Stream.ReadInt;     // Месяц окончания
                      fYE:= Stream.ReadInt;     // Год окончания
                      isVis:= Stream.ReadBool;  // Признак видимости                 *)

                    //вызываем процедуру создания нового модельного ряда
                      prModelLineAdd(Stream, aThreadData);
                      Stream.Position:= 0;
                      iCode:= Stream.ReadInt;
                      if iCode = aeSuccess then begin
                        iCode:= Stream.ReadInt;
                        prMessageLOGs('Код нового модельного ряда: '+IntToStr(iCode), 'Import', false);
                      //добавим во временный StringList модельных рядов только что созданный модельный ряд
                        lstModels:= TStringList.Create;
                        TStringList(TMMLink(lstManuf.Objects[k]).Links).AddObject(MsgStr, TMMLink.Create(iCode, lstModels));
                        l:= TStringList(TMMLink(lstManuf.Objects[k]).Links).IndexOf(MsgStr);
                        WorkSheet.Range['B'+IntToStr(i), EmptyParam].Interior.Color:= isBorderGreenCell;
                        inc(AddModLnCount);

                      end else begin
                        ErrMsg[SheetID-1].AddObject('Ошибка!'#9+'Произошла ошибка при добавлении модельного ряда "'+
                          VarToStr(LeftHeaderVarArray[i,2])+'". Модельный ряд не был добавлен.'#9+
                          SheetName+#9+'B'+IntToStr(i), pointer(-6*100000-i));
                        WorkSheet.Range['B'+IntToStr(i), EmptyParam].Interior.Color:= isErrorCell;
                        inc(ErrCount);
                        isMLExists:= False;
                        Link2Models[actl]:= -100500;
                      end;
                      prFree(Stream);//очищаем поток
                    end;

                  end else begin
                    isMLExists:= False;
                    ErrMsg[SheetID-1].AddObject('Ошибка!'#9+'Не указан модельный ряд. Совсем!'#9+
                      SheetName+#9+'B'+IntToStr(i), pointer(-6*100000-i));
                    WorkSheet.Range['B'+IntToStr(i), EmptyParam].Interior.Color:= isErrorCell;
                    inc(ErrCount);
                    Link2Models[actl]:= -100500;
                  end;
                //считываем наименование модели
                //если указанный в строке модельный ряд существует или успешно добавлен
                  if isMLExists then begin
                    MsgStr:= AnsiUpperCase(Trim(VarToStr(LeftHeaderVarArray[i, 3])));
                    m:= TStringList(TMMLink(TStringList(TMMLink(lstManuf.Objects[k]).Links).Objects[l]).Links).IndexOf(MsgStr);
                    if m>-1 then begin
                      Link2Models[actl]:= integer(TStringList(TMMLink(TStringList(
                        TMMLink(lstManuf.Objects[k]).Links).Objects[l]).Links).Objects[m]);
                      WorkSheet.Range['C'+IntToStr(i), EmptyParam].Interior.Color:= isBorderGreenCell;

                    end else begin //if m>-1 then begin
                      Stream:= TBOBMemoryStream.Create;
                      Stream.WriteInt(UserID);
                      Stream.WriteInt(TMMLink(TStringList(TMMLink(lstManuf.Objects[k]).Links).
                        Objects[l]).ID);
                      Stream.WriteStr(Trim(VarToStr(LeftHeaderVarArray[i,3])));
                      Stream.WriteBool(false);
                      Stream.WriteBool(true);
                      Stream.WriteInt(0);                                      // Месяц начала выпуска
                      Stream.WriteInt(0);                                      // Год начала
                      Stream.WriteInt(0);                                      // Месяц окончания
                      Stream.WriteInt(0);                                      // Год окончания
                    //далее записываем в поток параметры авто, не существующие для мото
                      Stream.WriteInt(0);
                      Stream.WriteInt(0);
                      Stream.WriteInt(0);
                      Stream.WriteInt(0);
                      Stream.WriteInt(0);
                      Stream.WriteInt(0);
                      Stream.WriteInt(0);
                      Stream.WriteInt(0);
                      Stream.WriteInt(0);
                      Stream.WriteInt(0);
                      Stream.WriteInt(0);
                      Stream.WriteInt(0);
                      Stream.WriteInt(0);
                      Stream.WriteInt(0);
                    //записываем в порядковый номер (пока по умолчанию, только "-1")
                      Stream.WriteInt(-1);

                      prModelAddToModelLine(Stream, aThreadData);

                      Stream.Position:= 0;
                      iCode:= Stream.ReadInt;
                      if iCode = aeSuccess then begin
                        iCode:= Stream.ReadInt;
                        prMessageLOGS('Код новой модели: '+IntToStr(iCode), 'Import', false);
                        TStringList(TMMLink(TStringList(TMMLink(lstManuf.Objects[k]).Links).Objects[l]).Links).AddObject(MsgStr, pointer(iCode));
                        WorkSheet.Range['C'+IntToStr(i), EmptyParam].Interior.Color:= isBorderGreenCell;
                        inc(AddModelCount);
                        Link2Models[actl]:= integer(TStringList(TMMLink(TStringList(TMMLink(lstManuf.Objects[k]).Links).Objects[l]).Links).
                          Objects[TStringList(TMMLink(TStringList(TMMLink(lstManuf.Objects[k]).Links).Objects[l]).Links).IndexOf(MsgStr)]);

                      end else begin
                        //prMessageLOG(Stream.ReadStr);
                        ErrMsg[SheetID-1].AddObject('Ошибка!'#9+
                        'Произошла ошибка при добавлении модели "'+
                        VarToStr(LeftHeaderVarArray[i,3])+'". Добавить модель не удалось.'#9+
                        SheetName+#9+'C'+IntToStr(i), pointer(-7*100000-i));
                        WorkSheet.Range['C'+IntToStr(i), EmptyParam].Interior.Color:= isErrorCell;
                        inc(ErrCount);
  //                      SetLength(Link2Grid, Length(Link2Grid)+1);
  //                      Link2Grid[Length(Link2Grid)-1]:= i;
  //                      SetLength(Link2Models, Length(Link2Models)+1);
                        Link2Models[actl]:= -100500;
                      end;
                      prFree(Stream);
                    end;// else begin //if m>-1 then begin
                  end;// if isMLExists then begin

                end else begin
                  WorkSheet.Range['A'+IntToStr(i), EmptyParam].Interior.Color:= isErrorCell;
                  inc(ErrCount);
                  ErrMsg[SheetID-1].AddObject('Неизвестный '#10+'производитель'#9+
                    'Производитель с указанным наименованием не найден в базе.'#9+
                     SheetName+#9+'A'+IntToStr(i), pointer(-5*100000-i));
                //В массив кодов моделей записываем значение ошибочной
                //связки "произв./модельный ряд/модель"
                  Link2Models[actl]:= -100500;
                end;
              end;// if MsgStr<>'' then begin (по колонке производителя)
            end;  //for i:= FirstFindedManuf to VarArrayHighBound(LeftHeaderVarArray, 1) do begin

          //--==Закрашиваем заголовочным цветом пустоты между моделями в боковом заголовке,
          //    также добавляем сетку в ячейки со "связкой 2"

            recs:= Length(Link2Grid)-1;
            for j:= 0 to recs-1 do begin//потому что последний элемент массива обрабатываем вне цикла
              WorkSheet.Range['A'+IntToStr((Link2Grid[j])+1), 'C'+
                IntToStr(((Link2Grid[j+1])-1))].Interior.Color:= isHeaderCell;
              usedRng:= WorkSheet.Range['A'+IntToStr(Link2Grid[j]), (IntToABC(cols-1))+IntToStr(Link2Grid[j])];
              usedRng.Borders.Color:= isCellBorder;
              usedRng.BorderAround(xlContinuous, xlHairLine, xlColorIndexAutomatic, EmptyParam, EmptyParam);
            end;
            //докрашиваем оставшийся диапазон
            WorkSheet.Range['A'+IntToStr((Link2Grid[recs])+1), 'C'+IntToStr(rows)].Interior.Color:= isHeaderCell;

            usedRng:= WorkSheet.Range['A'+IntToStr(Link2Grid[recs]), (IntToABC(cols-1))+IntToStr(Link2Grid[recs])];
            usedRng.Borders.Color:= isCellBorder;
            usedRng.BorderAround(xlContinuous, xlHairLine, xlColorIndexAutomatic, EmptyParam, EmptyParam);
          //==--
          //Работаем со "связкой 2" и "связкой 3" в найденных/созданных моделях
            SetLength(Link2Values, 0);
            SetLength(Link2Values, Length(Link2Nodes));

            if recs>0 then PPercent:= Percent/(recs)
            else ImpCheck.SetProcessPercent( UserID, aThreadData.ID, Percent);

            for i:= 0 to recs do begin
              try            
                prStopProcess( UserID, aThreadData.ID);
                if Link2Models[i] <> -100500 then begin
                  modelID:= Link2Models[i];
                  usedRng:= WorkSheet.Range['A1', IntToABC(cols-1)+IntToStr(rows)];
                  Link2_3_VarArray:= usedRng.Value[xlRangeValueDefault];
                //вычитываем значения "связки 2"
                  for j:= 3 to cols-1 do begin
                    MsgStr:= Trim(AnsiUpperCase(VarToStr(Link2_3_VarArray[Link2Grid[i],j+1])));
                    if MsgStr <>'' then Link2Values[j]:= fnLink2Reader(MsgStr);
                  end;

                  if i < recs then begin
                    StopRow:= Link2Grid[i+1]-1;
                    for m:= ((Link2Grid[i])+1) to StopRow do begin
                      ModLnStr:= Trim(VarToStr(Link2_3_VarArray[m,2]));
                      ModelStr:= Trim(VarToStr(Link2_3_VarArray[m,3]));
                      if (ModLnStr<>'') or (ModelStr<>'') then begin
                        StopRow:= m-1;
                        break;
                      end;
                    end;

                  end else begin
                    StopRow:= rows;
                    for m:= ((Link2Grid[recs])+1) to StopRow do begin
                      ModLnStr:= Trim(VarToStr(Link2_3_VarArray[m,2]));
                      ModelStr:= Trim(VarToStr(Link2_3_VarArray[m,3]));
                      if (ModLnStr<>'') or (ModelStr<>'') then begin
                        StopRow:= m-1;
                        break;
                      end;
                    end;
                  end;

                //Обрабатываем данные для "связки 2" и "связки 3"
                  for ll:= 3 to cols-1 do begin
                  //"СВЯЗКА2"
                    if (Link2Values[ll]<>'err')
                      and ((WorkSheet.Range[IntToABC(ll)+IntToStr(Link2Grid[i]), EmptyParam].Interior.Color)<>isBorderGreenCell) then begin

                      MsgStr:= Cache.FDCA.CheckModelNodeLinkDup(modelID, Link2Nodes[ll], Link2Values[ll],ResCode, soExcel, UserID);
                      Case ResCode of
                       -1: begin
                          ErrMsg[SheetID-1].AddObject('Ошибка "2"'#9+'Кол-во по "связке 2" не удалось '+
                            'занести в базу. '+MsgStr+#9+SheetName+#9+IntToABC(ll)+IntToStr(Link2Grid[i]), pointer(-7*100000-i));
                          prMessageLOGS(nmProc+'(CheckModelNodeLinkDup): '+MsgStr, 'Import', false);
                          WorkSheet.Range[IntToABC(ll)+IntToStr(Link2Grid[i]), EmptyParam].Interior.Color:= isErrorCell;
                          inc(ErrCount);
                        end;
                        0: begin
                          if Link2Values[ll] <> '' then begin
                            ErrMsg[SheetID-1].AddObject('Внимание'#9+'Указанное количество "'+Link2Values[ll]+'"'+
                              ' в "связке 2" совпадает с нынешним значением в базе. '#9+
                              SheetName+#9+IntToABC(ll)+IntToStr(Link2Grid[i]), pointer(-10*100000-i));
                            prMessageLOGS(nmProc+'. Код модели: '+IntToStr(modelID)+', код узла: '+IntToStr(Link2Nodes[ll])+
                              ', переданное значение: '+Link2Values[ll], 'Import', false);
                            WorkSheet.Range[IntToABC(ll)+IntToStr(Link2Grid[i]), EmptyParam].Interior.Color:= isBorderGreenCell;
                          end;
                        end;
                        1: begin
                          inc(AddLink2Count);
                          WorkSheet.Range[IntToABC(ll)+IntToStr(Link2Grid[i]), EmptyParam].Interior.Color:= isBorderGreenCell;
                        end;
                        2: begin
                          inc(UpdLink2Count);
                          WorkSheet.Range[IntToABC(ll)+IntToStr(Link2Grid[i]), EmptyParam].Interior.Color:= isBorderGreenCell;
                        end;
                        3: begin
                          inc(DelLink2Count);
                          WorkSheet.Range[IntToABC(ll)+IntToStr(Link2Grid[i]), EmptyParam].Interior.Color:= isBorderGreenCell;
                        end;
                      end; // Case
                    end
                  //Значение указанное в "связке 2" ошибочное, а значит дальнейшая обработка "связок 2,3" по
                  //данной модели и узлу не имеет смысла
                    else if  (Link2Values[ll]='err')
    //                  and ((WorkSheet.Range[IntToABC(j)+IntToStr(Link2Grid[i]), EmptyParam].Interior.Color) <> isBorderGreenCell)
                      and ((WorkSheet.Range[IntToABC(ll)+IntToStr(Link2Grid[i]), EmptyParam].Interior.Color)<>isBorderGreenCell) 
                    then begin
                      WorkSheet.Range[IntToABC(ll)+IntToStr(Link2Grid[i]), EmptyParam].Interior.Color:= isErrorCell;
                      ErrMsg[SheetID-1].AddObject('Ошибка "2"'#9+
                        'Не удалось обработать значение в "связке 2". "Связка 3" соотв. тоже не обработана'#9+
                         SheetName+#9+IntToABC(ll)+IntToStr(Link2Grid[i]), pointer(-7*100000));
                      inc(ErrCount);
                    end ;(*
                  //Иначе сразу сажаем "связку 3"
                    else if (Link2Values[ll]<>'') and ((WorkSheet.Range[IntToABC(ll)+
                      IntToStr(Link2Grid[i]), EmptyParam].Interior.Color) = cHexToInt(cnGreenBorderedCell))
                    then begin
                    end; *)

                  //"СВЯЗКА 3"
                    for k:= ((Link2Grid[i])+1) to StopRow do begin
                  //пишем в MsgStr warename из Excel
                      MsgStr:= Trim(AnsiUpperCase(VarToStr(Link2_3_VarArray[k, ll+1])));
                      if (MsgStr<>'') and (Link2Values[ll]<>'') and (Link2Values[ll]<>'err')
                        and (WorkSheet.Range[IntToABC(ll)+IntToStr(k),EmptyParam].Interior.Color<>isGreenCell) then begin

                        iCode:= MotoWares.IndexOf(MsgStr);
                        if iCode>-1 then begin
                          wareID:= integer(MotoWares.Objects[iCode]);
                          ResCode:= 1;
                          MsgWare:= Cache.FDCA.CheckWareModelNodeLink(wareID, modelID, Link2Nodes[ll], ResCode, soExcel, UserID);
                          Case ResCode of
                           -1: begin
                              ErrMsg[SheetID-1].AddObject('Ошибка "3"'#9+'Товар "'+MsgStr+'"не удалось  '+
                                'добавить в связку. '#10+MsgWare+#9+SheetName+#9+IntToABC(ll)+IntToStr(k), pointer(-9*100000-i));
                              WorkSheet.Range[IntToABC(ll)+IntToStr(k), EmptyParam].Interior.Color:= isErrorCell;
                              prMessageLOGS(nmProc+'(CheckWareModelNodeLink): '+MsgWare, 'Import', false);
                              inc(ErrCount);
                            end;
                            0: begin
                              ErrMsg[SheetID-1].AddObject('Внимание'#9+'Товар "' +MsgStr+'" уже '+
                                'присутсвует в данной "связке 3". '#10+MsgWare+#9+
                                SheetName+#9+IntToABC(ll)+IntToStr(k), pointer(-11*100000-i));
                              //inc(NotEditLink2Count);
                              WorkSheet.Range[IntToABC(ll)+IntToStr(k), EmptyParam].Interior.Color:= isGreenCell;
                            end;
                            1: begin
                              inc(AddWareCount);
                              WorkSheet.Range[IntToABC(ll)+IntToStr(k), EmptyParam].Interior.Color:= isGreenCell;
                            end;
                            (*
                            2: begin
                              inc(UpdLink2Count);
                              WorkSheet.Range[IntToABC(ll)+IntToStr(Link2Grid[i]), EmptyParam].Interior.Color:= isGreenCell;
                            end;
                            3: begin
                              inc(DelLink2Count);
                              WorkSheet.Range[IntToABC(ll)+IntToStr(Link2Grid[i]), EmptyParam].Interior.Color:= isGreenCell;
                            end;
                            *)
                          end;

                        end else begin
                          ErrMsg[SheetID-1].AddObject('Ошибка "3"'#9+'Товар "'+MsgStr+'" не найден. '#9+
                            SheetName+#9+IntToABC(ll)+IntToStr(k), pointer(-8*100000-i));
                          WorkSheet.Range[IntToABC(ll)+IntToStr(k), EmptyParam].Interior.Color:= isErrorCell;
                          inc(ErrCount);
                        end;
                      end;
                    end; // for k:=
                  end; // for l:= 3 to cols-1
                //Обнуляем массивы значений и кодов "связки 2"
                  for k:= 0 to cols-1 do Link2Values[k]:= '';
                end;
                ImpCheck.SetProcessPercent( UserID, aThreadData.ID, PPercent);
              except
                on E: EStopError do ss:= E.Message;
                on E: Exception do prMessageLOGS(nmProc+': '+E.Message, 'Import', false);
    
              end; 
            end;
           
          finally
            prFree(MotoWares);
          end;
    //--==Обнуляем вспомогательные массивы с кодами и координатами
          for i:= 0 to recs do begin
            Link2Grid[i]:= 0;
            Link2Models[i]:= 0;
          end;
          SetLength(Link2Grid, 0);
          SetLength(Link2Models, 0);
          for i:= 0 to cols-1 do Link2Nodes[i]:= 0; //обнуляем значения массива кодов узлов для "связки 2"
          SetLength(Link2Nodes, 0);//деинициализируем :) массив кодов узлов для "связки 2"
          SetLength(Link2Values, 0);
      //==--
          ErrMsg[SheetID-1].AddObject('ИТОГО'#9+'Добавлено модельных рядов: '+
            IntToStr(AddModLnCount)+#9+SheetName+#9+'A1', pointer(2*100000+1));
          lstBodyMail.Add('Добавлено модельных рядов: '+IntToStr(AddModLnCount));

          ErrMsg[SheetID-1].AddObject('ИТОГО'#9+'Добавлено моделей: '+
            IntToStr(AddModelCount)+#9+SheetName+#9+'A1', pointer(2*100000+2));
          lstBodyMail.Add('Добавлено моделей: '+IntToStr(AddModelCount));

          ErrMsg[SheetID-1].AddObject('ИТОГО'#9+'Добавлено "связок 2": '+
            IntToStr(AddLink2Count)+#9+SheetName+#9+'A1', pointer(1*100000+1));
          lstBodyMail.Add('Добавлено "связок 2": '+IntToStr(AddLink2Count));

          lstBodyMail.Add('Изменено "связок 2": '+IntToStr(UpdLink2Count));
          ErrMsg[SheetID-1].AddObject('ИТОГО'#9+'Изменено "связок 2": '+
            IntToStr(UpdLink2Count)+#9+SheetName+#9+'A1', pointer(1*100000+2));

          ErrMsg[SheetID-1].AddObject('ИТОГО'#9+'Удалено "связок 2": '+
            IntToStr(DelLink2Count)+#9+SheetName+#9+'A1', pointer(1*100000+3));
          lstBodyMail.Add('Удалено "связок 2": '+IntToStr(DelLink2Count));

          ErrMsg[SheetID-1].AddObject('ИТОГО'#9+'Добавлено товаров: '+
            IntToStr(AddWareCount)+#9+SheetName+#9+'A1', pointer(1*100000+4));
          lstBodyMail.Add('Добавлено товаров: '+IntToStr(AddWareCount));
        end;

        inc(SheetID);// переходим к следующему листу документа
        LeftHeaderVarArray:= Unassigned;
        TopHeaderVarArray:= Unassigned;
        Link2_3_VarArray:= Unassigned;

      end else inc(SheetID);
    end;// while SheetID <= wrkshtCount do begin
  
finally
    // Добавим один новый лист после текущего
    XL.ActiveWorkbook.Sheets.Add(EmptyParam, WorkBook.Sheets.Item[wrkshtCount], 1, xlWorksheet, lcid);
    WorkSheet:= WorkBook.Sheets.Item[WorkBook.Sheets.Count] as Excel_TLB._Worksheet;
    WorkSheet.Name:= 'Импорт от'+FormatDateTime(' dd.mm hh_nn ',Now);

    recs:= 1;
//-=создаем шапку для лога импорта
    WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= 'Статус  сообщения';
    WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= 'Лист';
    WorkSheet.Range['C'+IntToStr(recs), EmptyParam].Value2:= '   Ячейка   ';
    WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= 'Сообщение';
    usedRng:=WorkSheet.Range['A'+IntToStr(recs), 'D'+IntToStr(recs)];
    usedRng.EntireRow.RowHeight:= usedRng.EntireRow.RowHeight*2;
    usedRng.Interior.Color:= isHeaderCell;
    usedRng.Font.Color:= cHEXtoINT(cnHeaderText);
    usedRng.Font.Bold:= True;
    usedRng.HorizontalAlignment:= xlCenter;
    usedRng.VerticalAlignment:= xlCenter;
    usedRng.Borders.Color:= cHEXtoINT(cnHeaderBorder);
    usedRng.BorderAround(xlContinuous, xlHairLine, xlColorIndexAutomatic, EmptyParam, EmptyParam);
    XL.ActiveWindow.SplitRow:= 1;
    XL.ActiveWindow.FreezePanes:= True;
//=-шапка создана
    inc(recs);

    for j:= 0 to length(ErrMsg)-1 do begin
      ErrMsg[j].CustomSort(@SizeCustomSort);
      rows:= ErrMsg[j].Count;
      for i:= 0 to rows-1 do begin
//        TestCssStopException;
        
        LogStr:= fnSplitStringChar(ErrMsg[j].Strings[i]);
        try
          ResCode:= trunc((integer(ErrMsg[j].Objects[i]))/100000);
          Case ResCode of
            -11..-10: begin
              WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
              WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
              usedRng:= WorkSheet.Range['C'+IntToStr(recs), EmptyParam];
              usedRng.Value2:= LogStr[3];
              WorkSheet.Hyperlinks.Add(usedRng, '#'''+LogStr[2]+'''!'+LogStr[3], EmptyParam, EmptyParam, EmptyParam);
              WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
              usedRng:= WorkSheet.Range['A'+IntToStr(recs), 'D'+IntToStr(recs)];
              usedRng.Interior.Color:= isWarningCell;
            end;
            -9..-2: begin
              WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
              WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
              usedRng:= WorkSheet.Range['C'+IntToStr(recs), EmptyParam];
              usedRng.Value2:= LogStr[3];
              WorkSheet.Hyperlinks.Add(usedRng, '#'''+LogStr[2]+'''!'+LogStr[3], EmptyParam, EmptyParam, EmptyParam);
              WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
              usedRng:= WorkSheet.Range['A'+IntToStr(recs), 'D'+IntToStr(recs)];
              usedRng.Interior.Color:= isErrorCell;
            end;
            -1: begin
              WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
              usedRng:= WorkSheet.Range['B'+IntToStr(recs), EmptyParam];
              usedRng.Value2:= LogStr[2];
              WorkSheet.Hyperlinks.Add(usedRng, '#'''+LogStr[2]+'''!'+LogStr[3], EmptyParam, EmptyParam, EmptyParam);
              WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
              usedRng:= WorkSheet.Range['A'+IntToStr(recs), 'D'+IntToStr(recs)];
              usedRng.Interior.Color:= isErrorCell;
            end;
            1..2: begin
              WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
              WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
              usedRng:= WorkSheet.Range['B'+IntToStr(recs), EmptyParam];
              usedRng.Value2:= LogStr[2];
              WorkSheet.Hyperlinks.Add(usedRng, '#'''+LogStr[2]+'''!'+LogStr[3], EmptyParam, EmptyParam, EmptyParam);
              WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
              usedRng:= WorkSheet.Range['A'+IntToStr(recs), 'D'+IntToStr(recs)];
              usedRng.Interior.Color:= isBorderGreenCell;
            end;
          end;
          inc (recs);
        finally
          SetLength(LogStr, 0); 
        end;
      end;
    end;

    usedRng:= WorkSheet.Range['A1', 'D'+IntToStr(recs-1)];
    usedRng.Cells.WrapText:= False;
    usedRng.EntireRow.AutoFit;
    usedRng.EntireColumn.AutoFit;
// finally
//    XL.UserControl:= True; // отдадим управление пользователю
    Workbook.CheckCompatibility := False;
    WorkBook.Save(lcid);
    WorkBook.Close(false, EmptyParam, EmptyParam, lcid);
    XL.Quit;// закрыть Excel
    XL.Disconnect;
    prFree(XL);
    FNameI:= ExtractFilePath(FName)+fnFormRepFileName(IntToStr(ImpCheck.GetImpType(UserID, aThreadData.ID)), FName, constOpImport);                 
    RenameFile(FName, FNameI);
    FName:= FNameI;
    prFree(TreeList);
//----------------------------------  
    try
      for i:= 0 to lstManuf.Count-1 do if Assigned(lstManuf.Objects[i]) then begin
        lstModLns:= TMMLink(lstManuf.Objects[i]).Links;
        if Assigned(lstModLns) then begin
          for j:= 0 to lstModLns.Count-1 do if Assigned(lstModLns.Objects[j]) then begin
            lstModels:= TMMLink(lstModLns.Objects[j]).Links;
            //if Assigned(lstModels) then 
            prFree(lstModels);
            MMLink:= TMMLink(lstModLns.Objects[j]);
            prFree(MMLink);
            //TMMLink(lstModLns.Objects[j]).Free;
          end; // if Assigned(lstModLns.Objects[j])
          prFree(lstModLns);
        end; // if Assigned(lstModLns)
        MMLink:= TMMLink(lstManuf.Objects[i]);
        prFree(MMLink);
        //TMMLink(lstManuf.Objects[i]).Free;
      end; // if Assigned(lstManuf.Objects[i])
    except end;
//----------------------------------  
    prFree(lstManuf);
    //if Assigned(MotoWares) then 
    prFree(MotoWares);
    prFree(Stream);
    for i:= 0 to High(ErrMsg) do if ErrMsg[i]<>nil then prFree(ErrMsg[i]); 
    SetLength(ErrMsg, 0);
    SetLength(LogStr, 0);
    SetLength(Link2Grid, 0);
    SetLength(Link2Models, 0);


  Subj:= 'Результаты импорта "Связки 2,3" от '+FormatDateTime(cDateTimeFormatY2S, Now());
  ContentType:= XMLContentType;
  if ErrCount = 0 then lstBodyMail.Add(MessText(mtkImportSuccess))
  else lstBodyMail.Add('Листов в файле: '+IntToStr(wrkshtCount)+'.'#10+
    'Обработанных листов: '+IntToStr(readed)+'.'#10+
    'Необработанных листов: '+IntToStr(wrkshtCount-readed)+'.'#10+MessText(mtkImportError));
  lstBodyMail.Add(' ');  
  if ss<>'' then lstBodyMail.Add(ss);
end;
end;

//--============================================================================================--//
procedure apImportAttributes(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,      // импорт 10
  ContentType: string; ThreadData: TThreadData);
const nmProc = 'apImportAttributes'; // имя процедуры/функции
var
  ResCode, AddCellCount, UpdCellCount, DelCellCount{, NotEditCelLCount}: Integer;
  i, j, k, recs, rows, cols, SheetID, AttrGrID, wrkshtCount, readed, ErrCount: integer;
  isBorderGreenCell, isGreenCell, isHeaderCell, isWarningCell, isErrorCell: integer;
  lstIndex, ListAttrCount{, Ac}: integer;
  Percent, PPercent: real;                                                         
  ss, FNameI, MsgStr, SheetName: string;
  AttrIDs: Tai;
  LogStr: Tas;
  ErrMsg: TASL;
  XL: TExcelApplication;
  WorkBook: Excel_TLB._Workbook;
  WorkSheet: Excel_TLB._Worksheet;
  usedRng: Range;
  CellValue: OleVariant;
  lstAttrGroups, AttrsOfGr, MgrWares: TStringList;
//  MotoAttrGroups, AutoAttrGroups: TStringList;
begin
  PPercent:= 0;
  AttrGrID:= -1;
  readed:= 0;
  ErrCount:= 0;
  SetLength(ErrMsg, 0);
  SetLength(LogStr, 0);
  lstAttrGroups:=nil;
  AttrsOfGr:=nil;
  MgrWares:=nil;
  MgrWares:= TStringList.Create;
  lstBodyMail:= TStringList.Create;
  wrkshtCount:= 0;

 isGreenCell:= cHexToInt(cnGreenCell);
 isBorderGreenCell:= cHexToInt(cnGreenBorderedCell);
 isHeaderCell:= cHexToInt(cnHeaderCell);
 isWarningCell:= cHexToInt(cnYellowCell);
 isErrorCell:= cHEXtoINT(cnRedCell);

  recs:= Length(Cache.arWareInfo);
  MgrWares.Capacity:= 50;
  for i:= 0 to recs-1 do begin
    if Cache.WareExist(i) then begin
      if (Cache.GetWare(i).ManagerID = UserID) then begin
        if (MgrWares.Capacity = MgrWares.Count) then begin
          MgrWares.Capacity:= MgrWares.Capacity+50;
        end;
        MgrWares.AddObject(Cache.GetWare(i).Name, Cache.GetWare(i));
      end;
    end;
  end;

//  prStopProcess( UserID, ThreadData.ID);
  ImpCheck.SetProcessPercent( UserID, ThreadData.ID, 6);                           

  XL:= TExcelApplication.Create(nil);
  WorkBook:= nil;
try
    CoInitializeEx(nil, COINIT_MULTITHREADED);
    XL.ConnectKind:= ckNewInstance;
    XL.Connect;
    XL.Visible[lcid]:= False;
    //XL.AutoQuit:= False;
    XL.ScreenUpdating[lcid]:=False;
    XL.DisplayAlerts[lcid]:= False;
    XL.Calculation[lcid]:= xlManual;
 // отменяем автоматическую проверку ошибок в ячейках
    with XL.ErrorCheckingOptions do begin
      BackgroundChecking:= False;
      NumberAsText:= False;
      InconsistentFormula:= False;
    end;
    if copy(FName, length(FName)-5+1,5)='.xlsx' then
      prAutoFilterXLSX(FName);

    if Assigned(XL) and (not Assigned(WorkBook)) then begin
      WorkBook:= XL.Workbooks.Open (FName,          // 1// const Filename: WideString;
                                     0,              // 2// UpdateLinks: OleVariant;
                                     false,          // 3// ReadOnly: OleVariant;
                                     EmptyParam,     // 4// Format: OleVariant;
                                     EmptyParam,     // 5// Password: OleVariant;
                                     EmptyParam,     // 6// WriteResPassword: OleVariant;
                                     true,           // 7// IgnoreReadOnlyRecommended: OleVariant;
                                     EmptyParam,     // 8// Origin: OleVariant;
                                     5,              // 9// Delimiter: OleVariant;
                                     False,          //10// Editable: OleVariant;
                                     false,          //11// Notify: OleVariant;
                                     EmptyParam,     //12// Converter: OleVariant;
                                     EmptyParam,     //13// Local: OleVariant;
                                     EmptyParam,     //14// CorruptLoad: OleVariant;
                                     false,          //15// AddToMru: OleVariant;
                                     lcid);          //16// lcid: Integer): Workbook; safecall;
    end;

//    prStopProcess( UserID, ThreadData.ID);
    ImpCheck.SetProcessPercent( UserID, ThreadData.ID, 3);                           

  //Получаем список наименований групп атрибутов в кэше:
    lstAttrGroups:= TStringList.Create;

    with Cache.AttrGroups.GetListAttrGroups(constIsMoto) do begin
      lstAttrGroups.Capacity:= lstAttrGroups.Capacity+Count;
      for i:= 0 to Count-1 do lstAttrGroups.AddObject(AnsiUpperCase(Strings[i]), Objects[i]);
    end;
    with Cache.AttrGroups.GetListAttrGroups(constIsAuto) do begin
      lstAttrGroups.Capacity:= lstAttrGroups.Capacity+Count;
      for i:= 0 to Count-1 do lstAttrGroups.AddObject(AnsiUpperCase(Strings[i]), Objects[i]);
    end;

//    prStopProcess( UserID, ThreadData.ID);

    SheetID:= 1; //ставим указатель на первый лист импортируемого документа
    wrkshtCount:= WorkBook.Sheets.Count;
    SetLength(ErrMsg, wrkshtCount);
    Percent:= 67;
    if wrkshtCount>0 then Percent:= Percent/wrkshtCount
    else ImpCheck.SetProcessPercent( UserID, ThreadData.ID, Percent);
  try
    while SheetID <= wrkshtCount do begin
      ErrMsg[SheetID-1]:= TStringList.Create;
      WorkSheet:= WorkBook.Sheets.Item[SheetID] as Excel_TLB._Worksheet;
      SheetName:= '';
      ListAttrCount:= 0;
      AddCellCount:= 0;
      UpdCellCount:= 0;
      DelCellCount:= 0;
      SetLength(AttrIDs, 0);

      for i:= 0 to lstAttrGroups.Count-1 do
        if lstAttrGroups.Strings[i] = AnsiUpperCase(WorkSheet.Name) then begin
          SheetName:= AnsiUpperCase(WorkSheet.Name);
          AttrGrID:= integer(lstAttrGroups.Objects[i]);
          Break;
        end;

      if SheetName <> '' then begin
        inc(readed);
        AttrsOfGr:= Cache.Attributes.GetListAttrsOfGroup(AttrGrID);
        try
          recs:= AttrsOfGr.Count-1;
          for k:= 0 to recs do AttrsOfGr.Strings[k]:= AnsiUpperCase(AttrsOfGr[k]);
  //Используемая область ячеек:  WorkSheet.UsedRange[lcid];
  //Последняя ячейка листа:  WorkSheet.Range['A1', EmptyParam].SpecialCells(xlCellTypeLastCell,
  //EmptyParam)
        //перевод указателя на последнюю используемую ячейку листа
          usedRng:= WorkSheet.Range['A1', EmptyParam].SpecialCells(xlCellTypeLastCell, EmptyParam);
          cols:= usedRng.Column;
          rows:= usedRng.Row;
        //проверка корректности определения колонок и строк
          usedRng:= WorkSheet.Range['B2', EmptyParam].End_[xlToRight];
          if (cols - usedRng.Column) = 1 then cols:= usedRng.Column;
          //prMessageLOGS(IntToStr(cols), IntToStr(rows));
    //--==Работаем с шапкой отчета
          for i:= 1 to cols-1 do begin
            CellValue:= fnOleXLCellReader((WorkSheet.Range[IntToABC(i)+IntToStr(2), EmptyParam].Value2));
            CellValue:= AnsiUpperCase(CellValue);
            lstIndex:= AttrsOfGr.IndexOf(CellValue);
            if (CellValue <> '') and (lstIndex = -1) then begin
              ErrMsg[SheetID-1].AddObject('Важная ошибка'#9+'Наименование атрибута '+
                'не соответствует ни одному '#10+'из наименований атрибутов данной группы в базе данных!'#9+
                SheetName+#9+IntToABC(i)+IntToStr(2), pointer(-3*100000));
              WorkSheet.Range[IntToABC(i)+IntToStr(2), EmptyParam].Interior.Color:= isErrorCell;
              inc(ErrCount);

              prMessageLOGS('"'+CellValue+'"', 'errattr', false);
              for j:= 0 to recs do prMessageLOGS ('"'+AttrsOfGr.Strings[j]+'"', 'errattr', false);
              Break;

            end else if (CellValue <> '') and (lstIndex > -1) then begin
              inc(ListAttrCount);
              SetLength(AttrIDs, i+1);
              AttrIDs[i]:= TAttributeItem(AttrsOfGr.Objects[lstIndex]).ID;
              WorkSheet.Range[IntToABC(i)+IntToStr(2), EmptyParam].Interior.Color:= isHeaderCell;
              WorkSheet.Range[IntToABC(i)+IntToStr(2), EmptyParam].Font.Color:= cHEXtoINT(cnHeaderText);
            end;
          end;
        //Шапка обработана==--

          if ListAttrCount = AttrsOfGr.Count then begin
      //--==Раскрасим шапку
            usedRng:= WorkSheet.Range['A1', IntToABC(cols-1)+IntToStr(2)];
            usedRng.Interior.Color:= isHeaderCell;
            usedRng.Font.Color:= cHEXtoINT(cnHeaderText);
            usedRng.Font.Bold;
            usedRng.HorizontalAlignment:= xlCenter;
            usedRng.VerticalAlignment:= xlCenter;
            usedRng.Borders.Color:= cHEXtoINT(cnHeaderBorder);
            usedRng.BorderAround(xlContinuous, xlHairLine, xlColorIndexAutomatic, EmptyParam, EmptyParam);
          //Шапка раскрашена==--
      //--==Работаем с содержимым листа (товарами и атрибутами)
            if rows>2 then PPercent:= Percent/(rows-2)
            else ImpCheck.SetProcessPercent( UserID, ThreadData.ID, Percent);

            for i:= 3 to rows do begin //rows - ранее определенное кол-во активных строк на листе
//              TestCssStopException;
              prStopProcess( UserID, ThreadData.ID);

              CellValue:= fnOleXLCellReader((WorkSheet.Range['A'+IntToStr(i), EmptyParam].Value2));

              if (CellValue<>'') then begin
                lstIndex:= MgrWares.IndexOf(CellValue);
                if lstIndex > -1 then begin
                  WorkSheet.Range['A'+IntToStr(i), EmptyParam].Interior.Color:= isGreenCell;
                  for j:= 1 to ListAttrCount do begin
                    if (WorkSheet.Range[IntToABC(j)+IntToStr(i), EmptyParam].Interior.Color<>isGreenCell) then begin
                      MsgStr:= Cache.CheckWareAttrValue (TWareInfo(MgrWares.Objects[lstIndex]).ID, AttrIDs[j], soExcel, UserID,
                        fnOleXLCellReader((WorkSheet.Range[IntToABC(j)+IntToStr(i), EmptyParam].Value2), false), ResCode);
                      Case ResCode of
                       -1: begin
                          ErrMsg[SheetID-1].AddObject('Ошибка'#9+'Атрибут не удалось занести в базу. '+
                            MsgStr+#9+WorkSheet.Name+#9+IntToABC(j)+IntToStr(i), pointer(-5*100000-i));
                          WorkSheet.Range[IntToABC(j)+IntToStr(i), EmptyParam].Interior.Color:= isErrorCell;
                          inc(ErrCount);
                        end;
                        0: begin
                          ErrMsg[SheetID-1].AddObject('Внимание'#9+'Указанное ' +
                            'значение атрибута совпадает со значением в базе. '#9+
                            WorkSheet.Name+#9+IntToABC(j)+IntToStr(i), pointer(-7*100000-i));
  //                        inc(NotEditCelLCount);
                          WorkSheet.Range[IntToABC(j)+IntToStr(i), EmptyParam].Interior.Color:= isGreenCell;
                        end;
                        1: begin
                          inc(AddCellCount);
                          WorkSheet.Range[IntToABC(j)+IntToStr(i), EmptyParam].Interior.Color:= isGreenCell;
                        end;
                        2: begin
                          inc(UpdCellCount);
                          WorkSheet.Range[IntToABC(j)+IntToStr(i), EmptyParam].Interior.Color:= isGreenCell;
                          ErrMsg[SheetID-1].AddObject('Внимание'#9+
                            'Значение атрибута изменено. '#9+
                            WorkSheet.Name+#9+IntToABC(j)+IntToStr(i), pointer(-6*100000-i));
                        end;
                        3: begin
                          inc(DelCellCount);
                          WorkSheet.Range[IntToABC(j)+IntToStr(i), EmptyParam].Interior.Color:= isGreenCell;
                        end;
                      end;
                    end;
                  end;

                end else begin
                  ErrMsg[SheetID-1].AddObject('Важная ошибка!'#9+'Товар '+CellValue+' или не ' +
                    'найден '#10+'по указанному наименованию, или закреплен за другим менеджером.'#9+
                    SheetName+#9+'A'+IntToStr(i), pointer((-4*100000-i)));
                  WorkSheet.Range['A'+IntToStr(i), EmptyParam].Interior.Color:= isErrorCell;
                  inc(ErrCount);
                end;
              end;
              ImpCheck.SetProcessPercent( UserID, ThreadData.ID, PPercent);                    
            end;

          end else begin
      //--==Количество атрибутов товара на листе и в базе не совпало
          ErrMsg[SheetID-1].AddObject('Критическая ошибка'#9+'Количество атрибутов на листе не ' +
           'совпадает с количеством атрибутов данной группы в базе. '#10+
            'Рекомендуем воспользоваться шаблоном.'#9+SheetName+#9+'A1', pointer((-2*100000)));
            inc(ErrCount);
          end;
        finally
          prFree(AttrsOfGr);
        end;
      end else begin
        ErrMsg[SheetID-1].AddObject ('Критическая ошибка!'+#9+'Название листа не соответствует ' +
          'ни одной из групп атрибутов'+#9+WorkSheet.Name+#9+'A1', pointer(-1*100000));
                                          //"#??&??2!A1"// гиперссылка на первую ячейку листа
        inc(ErrCount);
      end;

      ErrMsg[SheetID-1].AddObject('ИТОГО'#9+IntToStr(AddCellCount)+' атрибутов добавлено!'#9+WorkSheet.Name+#9+'A1', pointer(0));
      lstBodyMail.Add('Группа атрибутов "'+WorkSheet.Name+'":'#10);
      lstBodyMail.Add(IntToStr(AddCellCount)+' атрибутов добавлено.'#10);
      ErrMsg[SheetID-1].AddObject('ИТОГО'#9+IntToStr(UpdCellCount)+' атрибутов изменено!'#9+WorkSheet.Name+#9+'A1', pointer(0));
      lstBodyMail.Add(IntToStr(UpdCellCount)+' атрибутов изменено.'#10);
      ErrMsg[SheetID-1].AddObject('ИТОГО'#9+IntToStr(DelCellCount)+' атрибутов удалено!'#9+WorkSheet.Name+#9+'A1', pointer(0));
      lstBodyMail.Add(IntToStr(DelCellCount)+' атрибутов удалено.'#10);
      inc(SheetID);
    end;
  except
    on E: EStopError do ss:= E.Message;
    on E: Exception do prMessageLOGS(nmProc+': '+E.Message, 'Import', false);
    
  end;
finally
//    prStopProcess( UserID, ThreadData.ID);
    Percent:= 23;                                                                    
    // Добавим один новый лист после текущего
    XL.ActiveWorkbook.Sheets.Add(EmptyParam, WorkBook.Sheets.Item[wrkshtCount], 1, xlWorksheet, lcid);
    WorkSheet:= WorkBook.Sheets.Item[WorkBook.Sheets.Count] as Excel_TLB._Worksheet;
    WorkSheet.Name:= 'Импорт от'+FormatDateTime(' dd.mm hh_nn ', Now);

    recs:= 1;
//-=создаем шапку для лога импорта
    WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= 'Статус  сообщения';
    WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= 'Лист';
    WorkSheet.Range['C'+IntToStr(recs), EmptyParam].Value2:= '   Ячейка   ';
    WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= 'Сообщение';
    usedRng:=WorkSheet.Range['A'+IntToStr(recs), 'D'+IntToStr(recs)];
    usedRng.EntireRow.RowHeight:= usedRng.EntireRow.RowHeight*2;
    usedRng.Interior.Color:= isHeaderCell;
    usedRng.Font.Color:= cHEXtoINT(cnHeaderText);
    usedRng.Font.Bold:= True;
    usedRng.HorizontalAlignment:= xlCenter;
    usedRng.VerticalAlignment:= xlCenter;
    usedRng.Borders.Color:= cHEXtoINT(cnHeaderBorder);
    usedRng.BorderAround(xlContinuous, xlHairLine, xlColorIndexAutomatic, EmptyParam, EmptyParam);
    XL.ActiveWindow.SplitRow:= 1;
    XL.ActiveWindow.FreezePanes:= True;
//=-шапка создана
    inc(recs);
    if length(ErrMsg) > 0 then Percent:= Percent/(length(ErrMsg))
    else ImpCheck.SetProcessPercent( UserID, ThreadData.ID, Percent);

    for j:= 0 to length(ErrMsg)-1 do if assigned(ErrMsg[j]) then begin
      ErrMsg[j].CustomSort(@SizeCustomSort);
      rows:= ErrMsg[j].Count;
      if rows>0 then PPercent:= Percent/rows
      else ImpCheck.SetProcessPercent( UserID, ThreadData.ID, Percent); 

      for i:= 0 to rows-1 do begin
//        TestCssStopException;

        LogStr:= fnSplitStringChar(ErrMsg[j].Strings[i]);
        try
          ResCode:= trunc((integer(ErrMsg[j].Objects[i]))/100000);
          Case ResCode of
            -7: begin
              WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
              WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
              usedRng:= WorkSheet.Range['C'+IntToStr(recs), EmptyParam];
              usedRng.Value2:= LogStr[3];
              WorkSheet.Hyperlinks.Add(usedRng, '#'''+LogStr[2]+'''!'+LogStr[3], EmptyParam, EmptyParam, EmptyParam);
              WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
              usedRng:= WorkSheet.Range['A'+IntToStr(recs), 'D'+IntToStr(recs)];
              usedRng.Interior.Color:= isWarningCell;
            end;
            -6: begin
              WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
              WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
              usedRng:= WorkSheet.Range['C'+IntToStr(recs), EmptyParam];
              usedRng.Value2:= LogStr[3];
              WorkSheet.Hyperlinks.Add(usedRng, '#'''+LogStr[2]+'''!'+LogStr[3], EmptyParam, EmptyParam, EmptyParam);
              WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
              usedRng:= WorkSheet.Range['A'+IntToStr(recs), 'D'+IntToStr(recs)];
              usedRng.Interior.Color:= isWarningCell;
            end;
            -5..-3: begin
              WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
              WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
              usedRng:= WorkSheet.Range['C'+IntToStr(recs), EmptyParam];
              usedRng.Value2:= LogStr[3];
              WorkSheet.Hyperlinks.Add(usedRng, '#'''+LogStr[2]+'''!'+LogStr[3], EmptyParam, EmptyParam, EmptyParam);
              WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
              usedRng:= WorkSheet.Range['A'+IntToStr(recs), 'D'+IntToStr(recs)];
              usedRng.Interior.Color:= isErrorCell;
            end;
            -2..-1: begin
              WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
              usedRng:= WorkSheet.Range['B'+IntToStr(recs), EmptyParam];
              usedRng.Value2:= LogStr[2];
              WorkSheet.Hyperlinks.Add(usedRng, '#'''+LogStr[2]+'''!'+LogStr[3], EmptyParam, EmptyParam, EmptyParam);
              WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
              usedRng:= WorkSheet.Range['A'+IntToStr(recs), 'D'+IntToStr(recs)];
              usedRng.Interior.Color:= isErrorCell;
            end;
            0: begin
              WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
              WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
              usedRng:= WorkSheet.Range['B'+IntToStr(recs), EmptyParam];
              usedRng.Value2:= LogStr[2];
              WorkSheet.Hyperlinks.Add(usedRng, '#'''+LogStr[2]+'''!'+LogStr[3], EmptyParam, EmptyParam, EmptyParam);
              WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
              usedRng:= WorkSheet.Range['A'+IntToStr(recs), 'D'+IntToStr(recs)];
              usedRng.Interior.Color:= isBorderGreenCell;
            end;
          end;
          inc (recs);
        finally
          SetLength(LogStr, 0); 
        end;
        ImpCheck.SetProcessPercent( UserID, ThreadData.ID, PPercent);
      end;
    end;
    usedRng:= WorkSheet.Range['A1', 'D'+IntToStr(recs-1)];
    usedRng.Cells.WrapText:= False;
    usedRng.EntireRow.AutoFit;
    usedRng.EntireColumn.AutoFit;

//    prStopProcess( UserID, ThreadData.ID);                                          
//  finally
//    XL.UserControl:= True; // отдадим управление пользователю
    Workbook.CheckCompatibility := False;
    WorkBook.Save(lcid);
    WorkBook.Close(false, EmptyParam, EmptyParam, lcid);
    XL.Quit;// закрыть Excel
    XL.Disconnect;
    prFree(XL);
    FNameI:= ExtractFilePath(FName)+fnFormRepFileName(IntToStr(ImpCheck.GetImpType(UserID, ThreadData.ID)), FName, constOpImport);                 
    RenameFile(FName, FNameI);
    FName:= FNameI;
    for i:= 0 to High(ErrMsg) do if ErrMsg[i]<>nil then prFree(ErrMsg[i]); 
    SetLength(ErrMsg, 0);
    SetLength(AttrIDs, 0);
    prFree(MgrWares);
    SetLength(LogStr, 0);
    prFree(lstAttrGroups); 

    Subj:= 'Результаты импорта значений атрибутов от '+FormatDateTime(cDateTimeFormatY2S, Now());
    ContentType:= XMLContentType;
    if ErrCount = 0 then lstBodyMail.Add(MessText(mtkImportSuccess))
    else lstBodyMail.Add('Листов в файле: '+IntToStr(wrkshtCount)+'.'#10+'Обработанных листов: '+
      IntToStr(readed)+'.'#10+'Необработанных листов: '+IntToStr(wrkshtCount-readed)+'.'#10+MessText(mtkImportError));
    lstBodyMail.Add(' ');  
    if ss<>'' then lstBodyMail.Add(ss);
end;
end;
//==============================================================================
procedure apImportWareDetModFile(UserID: integer; var lstBodyMail: TStringList;    //импорт 19
          var FName, Subj, ContentType: string; aThreadData: TThreadData);
const nmProc = 'apImportWareDetModFile';
      RepType = 19;
      FirstPos = 2;
      cnPsdCrit = '***';
var
  XL: TExcelApplication;
  WorkBook: Excel_TLB._Workbook;
  WorkSheet: Excel_TLB._Worksheet;
  usedRng: Range;
  isBorderGreenCell, isGreenCell, isHeaderCell: integer;
  isWarningCell, isErrorCell, isCellBorder, TypeSys: integer;
  i, j, l, k, m, n, p, edge, ii, jj, {yy, zz,} lb, hb: integer;
  NodeID, WareID, ModelID, {L2Qty,} SheetCount, SheetID: integer;
  offset, ResCode, cols, rows, recs, color, CrntPos, NextPos: integer;
  AddLink3Count, AddLink3usageClause, UpdLink3usageClause, ErrCount, DelCount: integer;
  Ware: TWareInfo;
  Node: TAutoTreeNode;
  ModelLine: TModelLine;
  Model: TModelAuto;
  Manuf: TManufacturer;
  Wares, Models: TStringList;
  FNameI, NodeName, WareName, SheetName, s, CellValue, MsgStr, ss: string;
  ErrMsg: TASL;
  isWorkBookReadable, isWorkSheetReadable, isModelLine: boolean;
  isLink2_Exist, isLink3_Exist, MotoLink2advices: boolean;
  readSheets, ListFirstReadRow, WareCellIndexes: Tai;
  WaresVarArray, NodesVarArray: OleVariant;
  LogStr: Tas;
  Link3toAdd_ar: array of Link3data;
  Link3usageClauseToAdd_ar: array of Link3CritData;
//  Qty: double;
  SecondLink: TSecondLink;
  L2Qty: real;
begin
try
//  try
    lstBodyMail:= TStringList.Create;
    ErrCount:= 0;
    DelCount:= 0;
    SetLength(ErrMsg, 0);
    SetLength(readSheets, 0);
    SetLength(ListFirstReadRow, 0);
    isWorkBookReadable:= False;
    NodeID:= 0;
    TypeSys:= constBegTypeSys;
    n:= -1;

    isGreenCell:= cHexToInt(cnGreenCell);
    isBorderGreenCell:= cHexToInt(cnGreenBorderedCell);
    isHeaderCell:= cHexToInt(cnHeaderCell);
    isWarningCell:= cHexToInt(cnYellowCell);
    isErrorCell:= cHEXtoINT(cnRedCell);
    isCellBorder:= cHEXtoINT(cnCellBorder);

    if not fnUserRolesEntree(RepType, fnGetUserRoles(UserID)) then begin
      for i:= 0 to High(Cache.arWareInfo) do begin
        if not Cache.WareExist(i) then Continue;
        Ware:= Cache.arWareInfo[i];
        if Ware.ManagerID <> UserID then Continue;
        if (Ware.IsAUTOWare) and (not Ware.IsMOTOWare) then begin
          TypeSys:= constIsAuto;
          Break;
        end;
        if (Ware.IsMOTOWare) and (not Ware.IsAUTOWare) then begin
          TypeSys:= constIsMoto;
          Break;
        end;
      end;

    end else begin
      TypeSys:= fnTypeSysDecision(UserID);
      if TypeSys = constIsMoto then MotoLink2advices:= True;
    end;

    if not ((TypeSys > constBegTypeSys) and (TypeSys < constEndTypeSys)) then
      Raise EBOBError.Create (MessText(mtkNotFoundTypeSys));

    XL:= TExcelApplication.Create(nil);
    WorkBook:= nil;
 //--== Инициализируем работу экземпляра Excel
    CoInitializeEx(nil, COINIT_MULTITHREADED);
    XL.ConnectKind:= ckNewInstance;
    XL.Connect;
    XL.Visible[lcid]:= False;
    //XL.AutoQuit:= False;
    XL.ScreenUpdating[lcid]:= False;
    XL.DisplayAlerts[lcid]:= False;
    XL.Calculation[lcid]:= xlManual;
 // отменяем автоматическую проверку ошибок в ячейках
    with XL.ErrorCheckingOptions do begin
      BackgroundChecking:= False;
      NumberAsText:= False;
      InconsistentFormula:= False;
    end;
    if copy(FName, length(FName)-5+1,5)='.xlsx' then
      prAutoFilterXLSX(FName);
 // открываем импортируемый файл
    if Assigned(XL) and (not Assigned(WorkBook)) then
      WorkBook:= XL.Workbooks.Open (FName,          // 1// const Filename: WideString;
                                     0,              // 2// UpdateLinks: OleVariant;
                                     false,          // 3// ReadOnly: OleVariant;
                                     EmptyParam,     // 4// Format: OleVariant;
                                     EmptyParam,     // 5// Password: OleVariant;
                                     EmptyParam,     // 6// WriteResPassword: OleVariant;
                                     true,           // 7// IgnoreReadOnlyRecommended: OleVariant;
                                     EmptyParam,     // 8// Origin: OleVariant;
                                     5,              // 9// Delimiter: OleVariant;
                                     False,          //10// Editable: OleVariant;
                                     false,          //11// Notify: OleVariant;
                                     EmptyParam,     //12// Converter: OleVariant;
                                     EmptyParam,     //13// Local: OleVariant;
                                     EmptyParam,     //14// CorruptLoad: OleVariant;
                                     false,          //15// AddToMru: OleVariant;
                                     lcid);          //16// lcid: Integer): Workbook; safecall;
//==-- импортируемый Excel-файл готов к обработке

//  SheetID:= 1; //ставим указатель на первый лист импортируемого документа
    SheetCount:= WorkBook.Sheets.Count; //определяем количество листов в книге Excel

  //Находим в файле листы с необходимой для импорта структурой данных
    for SheetID:= 1 to SheetCount do begin
      WorkSheet:= WorkBook.Sheets.Item[SheetID] as Excel_TLB._Worksheet;
      SheetName:= WorkSheet.Name;
      isWorkSheetReadable:= false;
      if not ((SheetName = constNodeListName) or (SheetName = constAutoListName) or (SheetName = constWareListName) or(SheetName=constCriteriaListName)) then begin
      //перевод указателя на последнюю используемую ячейку листа
        usedRng:= WorkSheet.Range['A1', EmptyParam].SpecialCells(xlCellTypeLastCell,EmptyParam);
        cols:= usedRng.Column;
        rows:= usedRng.Row;
      //если на листе нет минимально необходимых данных игнорируем его
        if rows < 2 then Continue
        else if cols < 5 then begin
          lstBodyMail.Add('На листе "'+SheetName+'" нет необходимой для импорта структуры данных.');
          Continue;
        end;

        for i:= FirstPos to rows do begin
          usedRng:= WorkSheet.Range['B'+IntToStr(i),EmptyParam];
          CellValue:= usedRng.Text;
          if CellValue <> '' then begin
            color:= usedRng.Borders.Item[xlEdgeRight].Color;
            NodeID:= fnColorDemodulator(color);
            if Cache.FDCA.AutoTreeNodesSys[TypeSys].NodeGet(NodeID, Node) then begin
              if (Node.Name = CellValue) and (Node.ID = NodeID) then begin
                isWorkSheetReadable:= True;
                j:= Length(ReadSheets);
                SetLength(ReadSheets, j+1);
                readSheets[j]:= SheetID;
                SetLength(ListFirstReadRow, j+1);
                ListFirstReadRow[j]:= i;
                isWorkBookReadable:= isWorkBookReadable or isWorkSheetReadable;
                Break;
              end;// if (Node.Name = CellValue) and (Node.ID = NodeID) then begin
            end;// if Cache.FDCA.AutoTreeNodesSys[TypeSys].NodeGet(NodeID, Node) then begin
          end;// if CellValue <> '' then begin
        end;// for i:= 2 to rows do begin
      end;// if not ((SheetName = constNodeListName) or (SheetName = constAutoListName)) then begin
    end;// for SheetID:=1 to SheetCount do begin
  //Поиск окончен
  try
    if isWorkBookReadable then begin
    //Получаем список товаров с которым будем работать при импорте данных
      if not fnUserRolesEntree(RepType, fnGetUserRoles(UserID)) then
        Wares:= Cache.GetSysManagerWares(TypeSys, UserID)
      else Wares:= Cache.GetSysManagerWares(TypeSys);

      SetLength(ErrMsg, Length(readSheets));

      for l:= 0 to high(readSheets) do begin
        WorkSheet:= WorkBook.Sheets.Item[(readSheets[l])] as Excel_TLB._Worksheet;
        SheetName:= WorkSheet.Name;
        AddLink3Count:= 0;
        AddLink3usageClause:= 0;
        UpdLink3usageClause:= 0;
        ErrMsg[l]:= TStringList.Create;
      //перевод указателя на последнюю используемую ячейку листа
        usedRng:= WorkSheet.Range['A1', EmptyParam].SpecialCells(xlCellTypeLastCell,EmptyParam);
        cols:= usedRng.Column;
        rows:= usedRng.Row;
        usedRng:= WorkSheet.Range['A1', 'A'+IntToStr(rows)];
        WaresVarArray:= usedRng.Value[xlRangeValueDefault];
        jj:= 100;
        SetLength(WareCellIndexes, jj);
        ii:= 0;
        i:= ListFirstReadRow[l];
        if i > FirstPos then begin     //

          for j:= i downto VarArrayLowBound(WaresVarArray, 1) do begin
            WareName:= fnOleXLCellReader(WaresVarArray[j, 1], False);
            if WareName <> '' then begin
              k:= Wares.IndexOf(WareName);
              if ((k>-1) and (j>= FirstPos)) then begin
//                usedRng:= WorkSheet.Range['A'+IntToStr(j),EmptyParam];
//                usedRng.Interior.Color:= isGreenCell;
                WareCellIndexes[ii]:= j;
                inc(ii);
              //указываем, что область выше первого найденного товара до шапки не обрабатывалась при импорте

              end// if ((k>-1) and (j>= FirstPos)) then begin
              else if ((k<0) and (j>= FirstPos)) then begin
                usedRng:= WorkSheet.Range['A'+IntToStr(j),EmptyParam];
                usedRng.Interior.Color:= isErrorCell;

                ErrMsg[l].AddObject('Ошибка'#9+
                  'В списке ваших товаров наименование"'+WareName+'" не обнаружено.'#9+
                  SheetName+#9+'A'+IntToStr(j), pointer(-2*100000-j));
                inc(ErrCount);
                usedRng:= WorkSheet.Range['B'+IntToStr(j),EmptyParam];
                CellValue:= usedRng.Text;
                if CellValue <> '' then begin
                  color:= usedRng.Borders.Item[xlEdgeRight].Color;
                  NodeID:= fnColorDemodulator(color);
                  if not Cache.FDCA.AutoTreeNodesSys[TypeSys].NodeGet(NodeID, Node) then begin

                    usedRng.Borders.Item[xlEdgeRight].LineStyle:= xlNone;

                    ErrMsg[l].AddObject('Ошибка'#9+
                    'Неверно указан узел. Убедитесь, что узел из дерева был выбран верно.'#9+
                    SheetName+#9+'B'+IntToStr(j), pointer(-3*100000-j));

                    usedRng.Interior.Color:= isErrorCell;
                  end;// if Cache.FDCA.AutoTreeNodesSys[TypeSys].NodeGet(NodeID, Node) then begin
                end;// if CellValue <> '' then begin
              //указываем, что область выше первого найденного товара до шапки не обрабатывалась при импорте
              end;//  else if ((k<0) and (j>= FirstPos)) then begin
            end;
          end;
        end;// if i > FirstPos then begin     //

      //Определяем позиции товаров на листе
        for j:= i to VarArrayHighBound(WaresVarArray, 1) do begin
          if ii = jj then begin
            jj:= jj+100;
            SetLength(WareCellIndexes, jj);
          end;// if Length(WareCellIndexes)>= jj then begin

          if fnOleXLCellReader(WaresVarArray[j, 1]) <> '' then begin
            WareCellIndexes[ii]:= j;
            inc(ii);
          end;
        end;// for j:= i to VarArrayHighBound(WaresVarArray, 1) do begin
        SetLength(WareCellIndexes, ii);
        jj:= 100;
        SetLength(Link3toAdd_ar, jj);
        ii:= 0;
    //--==========================
  //--==Блок подготовки "СВЯЗКИ 3"
        edge:= High(WareCellIndexes);
        for i:= 0 to edge do begin
prStopProcess(UserID,aThreadData.ID);        
          usedRng:= WorkSheet.Range['A'+IntToStr(WareCellIndexes[i]),EmptyParam];
          WareName:= fnOleXLCellReader(usedRng.Text, False);
          k:= Wares.IndexOf(WareName);
          if k>-1 then begin
            WareID:= integer(Wares.Objects[k]);
            usedRng.Interior.Color:= isGreenCell;
          //теперь проверяем узлы
            CrntPos:= WareCellIndexes[i];
            offset:= CrntPos-1;
            if i = edge then begin
              NextPos:= rows;
              usedRng:= WorkSheet.Range['B'+IntToStr(CrntPos), 'B'+IntToStr(rows)];
            end else begin
              NextPos:= WareCellIndexes[i+1]-1;
              usedRng:= WorkSheet.Range['B'+IntToStr(CrntPos), 'B'+IntToStr(NextPos)];
            end;

            p:= usedRng.Cells.Count;
            NodesVarArray:= usedRng.Value[xlRangeValueDefault];
            NodeName:='';

            if p>1 then begin
              lb:= VarArrayLowBound(NodesVarArray,1);
              hb:= VarArrayHighBound(NodesVarArray,1);
              CellValue:='';
            end else begin
              lb:= 1;
              hb:= 1;
              CellValue:= usedRng.Text;
            end;

            for j:= lb to hb do begin
//проверим код операции
              usedRng:= WorkSheet.Range['D'+IntToStr(offset+j) ,EmptyParam];
              if StrToIntDef(TRIM(usedRng.Text),-100500)<>-100500 then  begin            
                if hb = 1 then CellValue:= CellValue
                else CellValue:= VarToStr(NodesVarArray[j,1]);
                isModelLine:= False;

                if CellValue <> '' then begin
                  usedRng:= WorkSheet.Range['B'+IntToStr(offset+j),EmptyParam];

                  color:= usedRng.Borders.Item[xlEdgeRight].Color;
                  NodeID:= fnColorDemodulator(color);
                  if not (Cache.FDCA.AutoTreeNodesSys[TypeSys].NodeGet(NodeID, Node)) then begin
                    usedRng.Borders.Item[xlEdgeRight].LineStyle:= xlNone;

                    ErrMsg[l].AddObject('Ошибка'#9+'Не опознан код узла. '#9+
                      SheetName+#9+'B'+IntToStr(offset+j), pointer(-3*100000-(offset+j)));

                    usedRng.Interior.Color:= isErrorCell;
                    inc(ErrCount);
                  end// if Cache.FDCA.AutoTreeNodesSys[TypeSys].NodeGet(NodeID, Node) then begin
                  else if Node.Name <> CellValue then begin
                    usedRng.Borders.Item[xlEdgeRight].LineStyle:= xlNone;

                    ErrMsg[l].AddObject('Ошибка'#9+'Не совпадает имя узла с именем узла найденным по коду.'#9+
                      SheetName+#9+'B'+IntToStr(offset+j), pointer(-3*100000-(offset+j)));
                    inc(ErrCount);
                    usedRng.Interior.Color:= isErrorCell;
                  end else begin
                    NodeName:= Node.Name;
                  

                    usedRng:= WorkSheet.Range['C'+IntToStr(offset+j) ,EmptyParam];

                    if ((usedRng.Interior.Color <> isGreenCell) and
                      (usedRng.Interior.Color <> isBorderGreenCell)) then begin

                      color:= usedRng.Borders.Item[xlEdgeRight].Color;
                      ModelID:= fnColorDemodulator(color);

                      if Cache.FDCA.ModelLines.ModelLineExists(ModelID) then begin
                        ModelLine:= Cache.FDCA.ModelLines.GetModelLine(ModelID);
                        Manuf:= Cache.FDCA.Manufacturers.Items[ModelLine.MFAID];
                        ss:= fnGetYMBE(ModelLine.YStart, ModelLine.MStart, ModelLine.YEnd, ModelLine.MEnd);
                        MsgStr:= Manuf.Name+' '+ModelLine.Name+' '+StringReplace(ss, cWebSpace, ' ', [rfReplaceAll]);

                        if TRIM(MsgStr) = TRIM(usedRng.Text) then begin
                          isModelLine:= True;
                        //проверяем наличие "псевдокритерия с количеством по "связке 2"
                          usedRng:= WorkSheet.Range['F'+IntToStr(offset+j) ,EmptyParam];
                          s:= TRIM(usedRng.Text);
                          if copy (s, 1, 3) = cnPsdCrit then
                            L2Qty:= StrToFloatDef(copy(s, 4, Length(s)), -100500)
                          else L2Qty:= -1;   //vv 2509  L2Qty:=0

                          usedRng:= WorkSheet.Range['D'+IntToStr(offset+j) ,EmptyParam];

                          Models:= ModelLine.GetListModels;
                          for m:= 0 to Models.Count-1 do begin
                            if ii = jj then begin
                              jj:= jj+100;
                              SetLength(Link3toAdd_ar, jj);
                            end;
                            Link3toAdd_ar[ii].wareID:= WareID;
                            Link3toAdd_ar[ii].modelID:= integer(Models.Objects[m]);
                            Link3toAdd_ar[ii].nodeID:= NodeID;
                            Link3toAdd_ar[ii].userID:= UserID;
                            Link3toAdd_ar[ii].L2Qty:= L2Qty;
                            Link3toAdd_ar[ii].Row:= usedRng.Row;
                            Link3toAdd_ar[ii].Oper:= StrToIntDef(TRIM(usedRng.Text),-100500);
                            inc(ii);
                          end;
                        end;
                      end;// if Cache.FDCA.ModelLines.ModelLineExists(ModelID) then begin

                    //если указан был не модельный ряд, проверяем не является ли он моделью
                      if not isModelLine then begin
                        if Cache.FDCA.Models.ModelExists(ModelID) then begin
                          Model:= Cache.FDCA.Models.GetModel(ModelID);
                          ModelLine:= Cache.FDCA.ModelLines.GetModelLine(Model.ModelLineID);
                          Manuf:= Cache.FDCA.Manufacturers.Items[ModelLine.MFAID];

                          with Model do begin
                            ss:= fnGetYMBE(Params.pYStart, Params.pMStart, Params.pYEnd, Params.pMEnd);
                            s:= StringReplace(ss,cWebSpace, ' ', [rfReplaceAll]);
                          end;

                          MsgStr:= Manuf.Name+' '+ModelLine.Name+' '+Model.Name+' '+s;

                          if TRIM(MsgStr) = TRIM(usedRng.Text) then begin
                          //проверяем наличие "псевдокритерия с количеством по "связке 2"
                            usedRng:= WorkSheet.Range['F'+IntToStr(offset+j) ,EmptyParam];
                            s:= TRIM(usedRng.Text);
                            if copy (s, 1, 3) = cnPsdCrit then
                              L2Qty:= StrToFloatDef(copy(s, 4, Length(s)), -100500)
                            else L2Qty:= -1; //vv 2509  L2Qty:=0
                            usedRng:= WorkSheet.Range['D'+IntToStr(offset+j) ,EmptyParam];

                            if ii = jj then begin
                              jj:= jj+100;
                              SetLength(Link3toAdd_ar, jj);
                            end;
                            Link3toAdd_ar[ii].wareID:= WareID;
                            Link3toAdd_ar[ii].modelID:= ModelID;
                            Link3toAdd_ar[ii].nodeID:= NodeID;
                            Link3toAdd_ar[ii].userID:= UserID;
                            Link3toAdd_ar[ii].L2Qty:= L2Qty;
                            Link3toAdd_ar[ii].Row:= usedRng.Row;
                            Link3toAdd_ar[ii].Oper:= StrToIntDef(TRIM(usedRng.Text),-100500);
                            inc(ii);
                          end else begin
                            ErrMsg[l].AddObject('Ошибка'#9+
                              'Наименоваение "модели/модельного ряда" не совпадает с найденным по коду.'#9+
                              SheetName+#9+'C'+IntToStr(usedRng.Row), pointer(-5*100000-usedRng.Row));

                            usedRng.Borders.Item[xlEdgeRight].LineStyle:= xlNone;
                            usedRng.Interior.Color:= isErrorCell;
                          end;

                        end else begin
                          ErrMsg[l].AddObject('Ошибка'#9+
                            'По указанному коду "модели/модельного ряда" ничего не обнаружено.'#9+
                            SheetName+#9+'C'+IntToStr(usedRng.Row), pointer(-4*100000-usedRng.Row));

                          usedRng.Borders.Item[xlEdgeRight].LineStyle:= xlNone;
                          usedRng.Interior.Color:= isErrorCell;
                          inc(ErrCount);
                        end;
                      end;// if not isModelLine then begin
                    end;
                  end;
                end;// if CellValue <> '' then begin

                if ((CellValue = '') and (NodeName <> '')) then begin

                  usedRng:= WorkSheet.Range['C'+IntToStr(offset+j) ,EmptyParam];

                  if ((usedRng.Interior.Color <> isGreenCell) and
                    (usedRng.Interior.Color <> isBorderGreenCell)) then begin

                    color:= usedRng.Borders.Item[xlEdgeRight].Color;
                    ModelID:= fnColorDemodulator(color);

                    if Cache.FDCA.ModelLines.ModelLineExists(ModelID) then begin
                      ModelLine:= Cache.FDCA.ModelLines.GetModelLine(ModelID);
                      Manuf:= Cache.FDCA.Manufacturers.Items[ModelLine.MFAID];
                      ss:= fnGetYMBE(ModelLine.YStart,ModelLine.MStart,ModelLine.YEnd,ModelLine.MEnd);
                      MsgStr:= Manuf.Name+' '+ModelLine.Name+' '+StringReplace(ss, cWebSpace, ' ', [rfReplaceAll]);

                      if TRIM(MsgStr) = TRIM(usedRng.Text) then begin
                        isModelLine:= True;
                        Models:= ModelLine.GetListModels;
                        for m:= 0 to Models.Count-1 do begin
                        //проверяем наличие "псевдокритерия с количеством по "связке 2"
                          usedRng:= WorkSheet.Range['F'+IntToStr(offset+j) ,EmptyParam];
                          s:= TRIM(usedRng.Text);
                          if copy (s, 1, 3) = cnPsdCrit then
                            L2Qty:= StrToFloatDef(copy(s, 4, Length(s)), -100500)
                          else L2Qty:= -1;   //vv 2509  L2Qty:=0
                          usedRng:= WorkSheet.Range['D'+IntToStr(offset+j) ,EmptyParam];

                          if ii = jj then begin
                            jj:= jj+100;
                            SetLength(Link3toAdd_ar, jj);
                          end;
                          Link3toAdd_ar[ii].wareID:= WareID;
                          Link3toAdd_ar[ii].modelID:= integer(Models.Objects[m]);
                          Link3toAdd_ar[ii].nodeID:= NodeID;
                          Link3toAdd_ar[ii].userID:= UserID;
                          Link3toAdd_ar[ii].Row:= usedRng.Row;
                          Link3toAdd_ar[ii].L2Qty:= L2Qty;
                          Link3toAdd_ar[ii].Oper:= StrToIntDef(TRIM(usedRng.Text),-100500);
                          inc(ii);
                        end;
                      end;
                    end;// if Cache.FDCA.ModelLines.ModelLineExists(ModelID) then begin

                  //если указан был не модельный ряд, проверяем не является ли он моделью
                    if not isModelLine then begin
                      if Cache.FDCA.Models.ModelExists(ModelID) then begin
                        Model:= Cache.FDCA.Models.GetModel(ModelID);
                        ModelLine:= Cache.FDCA.ModelLines.GetModelLine(Model.ModelLineID);
                        Manuf:= Cache.FDCA.Manufacturers.Items[ModelLine.MFAID];

                        with Model do begin
                          ss:= fnGetYMBE(Params.pYStart, Params.pMStart, Params.pYEnd, Params.pMEnd);
                          s:= StringReplace(ss,cWebSpace, ' ', [rfReplaceAll]);
                        end;

                        MsgStr:= Manuf.Name+' '+ModelLine.Name+' '+Model.Name+' '+s;

                        if TRIM(MsgStr) = TRIM(usedRng.Text) then begin
                        //проверяем наличие "псевдокритерия с количеством по "связке 2"
                          usedRng:= WorkSheet.Range['F'+IntToStr(offset+j) ,EmptyParam];
                          s:= TRIM(usedRng.Text);
                          if copy (s, 1, 3) = cnPsdCrit then
                            L2Qty:= StrToFloatDef(copy(s, 4, Length(s)), -100500)
                          else L2Qty:= -1;  //vv 2509  L2Qty:=0
                          usedRng:= WorkSheet.Range['D'+IntToStr(offset+j) ,EmptyParam];

                          if ii = jj then begin
                            jj:= jj+100;
                            SetLength(Link3toAdd_ar, jj);
                          end;
                          Link3toAdd_ar[ii].wareID:= WareID;
                          Link3toAdd_ar[ii].modelID:= ModelID;
                          Link3toAdd_ar[ii].nodeID:= NodeID;
                          Link3toAdd_ar[ii].userID:= UserID;
                          Link3toAdd_ar[ii].L2Qty:= L2Qty;
                          Link3toAdd_ar[ii].Row:= usedRng.Row;
                          Link3toAdd_ar[ii].Oper:= StrToIntDef(TRIM(usedRng.Text),-100500);
                          inc(ii);
                        end else begin
                          ErrMsg[l].AddObject('Ошибка'#9+
                            'Наименоваение "модели/модельного ряда" не совпадает с найденным по коду.'#9+
                            SheetName+#9+'C'+IntToStr(usedRng.Row), pointer(-5*100000-usedRng.Row));

                          usedRng.Borders.Item[xlEdgeRight].LineStyle:= xlNone;
                          usedRng.Interior.Color:= isErrorCell;
                        end;

                      end else begin
                        ErrMsg[l].AddObject('Ошибка'#9+
                          'По указанному коду "модели/модельного ряда" ничего не обнаружено.'#9+
                          SheetName+#9+'C'+IntToStr(usedRng.Row), pointer(-4*100000-usedRng.Row));

                        usedRng.Borders.Item[xlEdgeRight].LineStyle:= xlNone;
                        usedRng.Interior.Color:= isErrorCell;
                      end;
                    end;// if not isModelLine then begin
                  end;
                end;// if ((CellValue = '') and (NodeName <> '')) then begin
              end else begin
                usedRng.Interior.Color:= isErrorCell;
                ErrMsg[l].AddObject('Ошибка'#9+
                  'Укажите правильно "Код операции".'#9+
                  SheetName+#9+'D'+IntToStr(usedRng.Row), pointer(-2*100000-usedRng.Row));
                inc(ErrCount);
              end;              
            end; //for j:= VarArrayLowBound(NodesVarArray,1) to VarArrayHighBound(NodesVarArray,1) do begin
          end else begin
            usedRng.Interior.Color:= isErrorCell;

            ErrMsg[l].AddObject('Ошибка'#9+
              'В списке ваших товаров наименование"'+WareName+'" не обнаружено.'#9+
              SheetName+#9+'A'+IntToStr(WareCellIndexes[i]), pointer(-2*100000-i));
            inc(ErrCount);
          end;// if k>-1 then begin  --== k:= Wares.IndexOf(WareName);

          NodesVarArray:= Unassigned;
        end;// for i:= 0 to High(WareCellIndexes) do begin    ///
        WaresVarArray:= Unassigned;
        SetLength(Link3toAdd_ar, ii);
        SetLength(Link3usageClauseToAdd_ar, 0);
        prMessageLOGS(nmProc+'. Связок 3 для посадки подготовлено: '+IntToStr(Length(Link3toAdd_ar)), 'Import_test', false);
        ii:= 0;
        jj:= 100;
        SetLength(Link3usageClauseToAdd_ar, jj);
    //--==========================
  //--=="СВЯЗКИ 3" листа для посадки собраны
    //====================================--

  //--==ПОСАДКА "СВЯЗОК 3" листа и их УСЛОВИЙ ПРИМЕНЕНИЯ
        CrntPos:= -1;
        offset:= 5;
        for i:= 0 to High(Link3toAdd_ar) do begin
          prMessageLOGS(nmProc+'. Посадка связки 3:'#10+
            'Товар: '+fnMakeAddCharStr(IntToStr(Link3toAdd_ar[i].wareID), 8, True)+
            'Модель: '+fnMakeAddCharStr(IntToStr(Link3toAdd_ar[i].modelID), 8, True)+
            'Узел: '+fnMakeAddCharStr(IntToStr(Link3toAdd_ar[i].nodeID), 8, True)+
            'User: '+fnMakeAddCharStr(IntToStr(Link3toAdd_ar[i].userID), 8, True)+
            'Excel: '+IntToStr(Link3toAdd_ar[i].Row), 'Import_test', false);
prStopProcess(UserID,aThreadData.ID);
          isLink3_Exist:= False;
          if Link3toAdd_ar[i].Row <> CrntPos then begin
            CrntPos:= Link3toAdd_ar[i].Row;
            isModelLine:= False;
          end else begin//предполагаем, что работаем не с отдельной моделью, а с модельным рядом
            isModelLine:= True;
          end;

          isLink2_Exist:= False;

          Model:= Cache.FDCA.Models.GetModel(Link3toAdd_ar[i].modelID);
          nodeID:= Link3toAdd_ar[i].nodeID;
          L2Qty:= Link3toAdd_ar[i].L2Qty;
          ResCode:= Link3toAdd_ar[i].Oper;      //ERROR!!!!!
//TSecondLink(Model.NodeLinks[nodeId]).Qty
          if Model.NodeLinks.LinkExists(nodeId) then
          SecondLink:= TSecondLink(Model.NodeLinks[nodeId])
          else if L2Qty= -1 then Link3toAdd_ar[i].L2Qty:= 0;

          if (not Model.NodeLinks.LinkExists(nodeId)) or (Model.NodeLinks.LinkExists(nodeId) and (L2Qty>-1) and (SecondLink.Qty<>L2Qty)) then begin //vv 2009 or (L2Qty<>0) then begin
            MsgStr:= '';
            ResCode:= fnAddLink2fromReport(Link3toAdd_ar[i], MsgStr);

        // ResCode на выходе: resError- ошибка, resDoNothing - не менялось,
        // resAdded - добавление, resEdited - редактирование, resDeleted - удаление

            Case ResCode of
              resError: begin
                  ErrMsg[l].AddObject('Ошибка'#9+'Не удалось создать связь модели с узлом. '+
                    MsgStr+#9+SheetName+#9+'C'+IntToStr(CrntPos), pointer(-6*100000-i));
                  prMessageLOGS(nmProc+' (CheckModelNodeLinkDup): '+MsgStr, 'Import', False);
                  WorkSheet.Range['C'+IntToStr(CrntPos), EmptyParam].Interior.Color:= isErrorCell;
                  inc(ErrCount);
                end;
              resDoNothing: begin
                  prMessageLOGS(nmProc+' (CheckModelNodeLinkDup): изменений не произведено. Код модели: '+IntToStr(Link3toAdd_ar[i].modelID)+
                    ', код узла: '+IntToStr(Link3toAdd_ar[i].nodeID)+', переданное значение: 0', 'Import_test', false);
                  isLink2_Exist:= True;
                end;
              resAdded: begin
                  if MotoLink2advices then
                    ErrMsg[l].AddObject('Сообщение'#9+'Добавлена новая "связка 2". '+
                      MsgStr+#9+SheetName+#9+'C'+IntToStr(CrntPos), pointer(-13*100000-i));
                  isLink2_Exist:= True;
                end;
              resEdited: begin
                  if MotoLink2advices then
                    ErrMsg[l].AddObject('Сообщение'#9+'Количество по "связке 2" у данных узла и модели изменено. '+
                      MsgStr+#9+SheetName+#9+'C'+IntToStr(CrntPos), pointer(-14*100000-i));
                  isLink2_Exist:= True;
                  prMessageLOGS(nmProc+' (CheckModelNodeLinkDup): Количество по "связке 2" изменено на "Н/Д". Код модели: '+
                    IntToStr(Link3toAdd_ar[i].modelID)+', код узла: '+IntToStr(Link3toAdd_ar[i].nodeID)+
                    ', переданное значение: 0', 'Import_test', false);
                end;
            (*
              resDeleted: begin
                  inc(DelLink2Count);
                  WorkSheet.Range[IntToABC(l)+IntToStr(Link2Grid[i]), EmptyParam].Interior.Color:=
                    isBorderGreenCell;
                end;             *)
            end;

          end else begin
            isLink2_Exist:= True;
          end;

          prMessageLOGS(nmProc+': ErrPos = 2403 Строка: '+IntToStr(Link3toAdd_ar[i].Row), 'Import_test', false);

          if isLink2_Exist and (Link3toAdd_ar[i].oper<>-100500) then begin
            MsgStr:= '';
            ResCode:= fnAddLink3fromRecord(Link3toAdd_ar[i], MsgStr);
  //        ResCode на выходе: resError- ошибка, resDoNothing - не менялось, resAdded - добавлена,
  //        resDeleted - удалена, resWrong - отмечена, как неверная, resNotWrong - восстановлена
            Case ResCode of
              resError: begin
                  ErrMsg[l].AddObject('Ошибка "3"'#9+'Товар "'+Cache.GetWare(Link3toAdd_ar[i].wareID, true).Name+
                    '" не удалось создать такую связку c моделью "'+
                    StringReplace(Cache.FDCA.Models.GetModel(Link3toAdd_ar[i].modelID).WebName, cWebSpace, ' ', [rfReplaceAll])+
                    '". '#10+MsgStr+#9+SheetName+#9+'C'+IntToStr(CrntPos), pointer(-7*100000-i));
                  WorkSheet.Range['C'+IntToStr(CrntPos), EmptyParam].Interior.Color:= isErrorCell;
                  inc(ErrCount);
                end;
              resDoNothing: begin
                  ErrMsg[l].AddObject('Внимание'#9+'Товар "'+Cache.GetWare(Link3toAdd_ar[i].wareID, true).Name+
                    '". Модель "'+
                    StringReplace(Cache.FDCA.Models.GetModel(Link3toAdd_ar[i].modelID).WebName, cWebSpace, ' ',[rfReplaceAll])+
                    '": '+MsgStr+#9+SheetName+#9+'C'+IntToStr(CrntPos), pointer(-11*100000-i));
                  (*if not isModelLine then
                    WorkSheet.Range['C'+IntToStr(CrntPos), EmptyParam].Interior.Color:= isGreenCell
                  else*)
                    WorkSheet.Range['C'+IntToStr(CrntPos), EmptyParam].Interior.Color:= isWarningCell;;
                  isLink3_Exist:= True;
                end;
              resWrong: begin
                  ErrMsg[l].AddObject('Внимание'#9+'Связь товара "'+Cache.GetWare(Link3toAdd_ar[i].wareID, true).Name+
                    '" с моделью "'+
                    StringReplace(Cache.FDCA.Models.GetModel(Link3toAdd_ar[i].modelID).WebName, cWebSpace, ' ',[rfReplaceAll])+
                    ' помечена как неверная. '#9+SheetName+#9+'C'+IntToStr(CrntPos), pointer(-12*100000-i));
                  if not isModelLine then
                    WorkSheet.Range['C'+IntToStr(CrntPos), EmptyParam].Interior.Color:= isGreenCell
                  else
                    WorkSheet.Range['C'+IntToStr(CrntPos), EmptyParam].Interior.Color:= isBorderGreenCell;
                  isLink3_Exist:= True;
                  inc(DelCount);
                end;  
              resDeleted: begin
                  ErrMsg[l].AddObject('Внимание'#9+'Связь товара "'+Cache.GetWare(Link3toAdd_ar[i].wareID, true).Name+
                    '" с моделью "'+
                    StringReplace(Cache.FDCA.Models.GetModel(Link3toAdd_ar[i].modelID).WebName, cWebSpace, ' ',[rfReplaceAll])+
                    ' удалена(помечена как неверная). '#9+SheetName+#9+'C'+IntToStr(CrntPos), pointer(-13*100000-i));
                  if not isModelLine then
                    WorkSheet.Range['C'+IntToStr(CrntPos), EmptyParam].Interior.Color:= isGreenCell
                  else
                    WorkSheet.Range['C'+IntToStr(CrntPos), EmptyParam].Interior.Color:= isBorderGreenCell;
                  isLink3_Exist:= True;
                  inc(DelCount);
                end;
              resAdded: begin
                  inc(AddLink3Count);
                  if not isModelLine then
                    WorkSheet.Range['C'+IntToStr(CrntPos), EmptyParam].Interior.Color:= isGreenCell
                  else
                    WorkSheet.Range['C'+IntToStr(CrntPos), EmptyParam].Interior.Color:= isBorderGreenCell;
                  isLink3_Exist:= True;
                end;
            end;// Case ResCode of
          end;// if isLink2_Exist then begin
          prMessageLOGS(nmProc+': ErrPos = 2460 Строка: '+IntToStr(Link3toAdd_ar[i].Row), 'Import_test', false);

        //проверяем условия применения и при необходимости добавляем их в массив записей
          if isLink3_Exist and (Link3toAdd_ar[i].Oper=1) then begin
            if not isModelLine then begin
              n:= 0;
            //  usedRng:= WorkSheet.Range['D'+IntToStr(CrntPos), EmptyParam].End_[xlToRight];
              usedRng:= WorkSheet.Range[IntToABC(cols)+IntToStr(CrntPos), EmptyParam].End_[xlToLeft];
              NextPos:= usedRng.Column-1;
            //  cols:= usedRng.Column-1;
            //проверяем есть ли к данной модели/модельному ряду "условия применения"
              if NextPos >= offset then begin
                j:= offset;
                while j <= NextPos do begin
                  s:='';
                  usedRng:= WorkSheet.Range[IntToABC(j)+IntToStr(CrntPos), EmptyParam];
                  if usedRng.Interior.Color <> isGreenCell then begin
                    if ii = jj then begin
                      jj:= jj+100;
                      SetLength(Link3usageClauseToAdd_ar, jj);
                    end;
                    CellValue:= Trim(usedRng.Text);

                    if CellValue <> '' then begin
                      s:= Copy(CellValue, 1, 3);
                      if s <> cnPsdCrit then begin
                        Link3usageClauseToAdd_ar[ii].wareID:= Link3toAdd_ar[i].wareID;
                        Link3usageClauseToAdd_ar[ii].ModelID:= Link3toAdd_ar[i].modelID;
                        Link3usageClauseToAdd_ar[ii].nodeID:= Link3toAdd_ar[i].nodeID;
                        Link3usageClauseToAdd_ar[ii].userID:= Link3toAdd_ar[i].userID;
                        Link3usageClauseToAdd_ar[ii].Col:= j;
                        Link3usageClauseToAdd_ar[ii].Row:= Link3toAdd_ar[i].Row;
                        Link3usageClauseToAdd_ar[ii].UsageClauseName:= CellValue;
                        usedRng:= WorkSheet.Range[IntToABC(j+1)+IntToStr(CrntPos), EmptyParam];
                        Link3usageClauseToAdd_ar[ii].UsageClauseValue:= usedRng.Text;
                        inc(ii);
                        inc(n);
                      end;
                    end;
                  end;
                  j:= j+2;
                end;//while j <= cols do begin
              end;// if cols > offset then begin

            end else begin//если работаем с модельным рядом, то используем уже считанные "условия применения"
              if ii = jj then begin
                jj:= jj+100;
                SetLength(Link3usageClauseToAdd_ar, jj);
              end;
              if ii > 0 then begin
                if n > 1 then begin
                  for p:= n downto 1 do begin
                    Link3usageClauseToAdd_ar[ii].wareID:= Link3toAdd_ar[i].wareID;
                    Link3usageClauseToAdd_ar[ii].ModelID:= Link3toAdd_ar[i].modelID;
                    Link3usageClauseToAdd_ar[ii].nodeID:= Link3toAdd_ar[i].nodeID;
                    Link3usageClauseToAdd_ar[ii].userID:= Link3toAdd_ar[i].userID;
                    Link3usageClauseToAdd_ar[ii].Col:= Link3usageClauseToAdd_ar[ii-n].Col;
                    Link3usageClauseToAdd_ar[ii].Row:= Link3usageClauseToAdd_ar[ii-n].Row;
                    Link3usageClauseToAdd_ar[ii].UsageClauseName:= Link3usageClauseToAdd_ar[ii-n].UsageClauseName;
                    Link3usageClauseToAdd_ar[ii].UsageClauseValue:= Link3usageClauseToAdd_ar[ii-n].UsageClauseValue;
                    inc(ii);
                  end;
                end else if n > 0 then begin
                  Link3usageClauseToAdd_ar[ii].wareID:= Link3toAdd_ar[i].wareID;
                  Link3usageClauseToAdd_ar[ii].ModelID:= Link3toAdd_ar[i].modelID;
                  Link3usageClauseToAdd_ar[ii].nodeID:= Link3toAdd_ar[i].nodeID;
                  Link3usageClauseToAdd_ar[ii].userID:= Link3toAdd_ar[i].userID;
                  Link3usageClauseToAdd_ar[ii].Col:= Link3usageClauseToAdd_ar[ii-1].Col;
                  Link3usageClauseToAdd_ar[ii].Row:= Link3usageClauseToAdd_ar[ii-1].Row;
                  Link3usageClauseToAdd_ar[ii].UsageClauseName:= Link3usageClauseToAdd_ar[ii-1].UsageClauseName;
                  Link3usageClauseToAdd_ar[ii].UsageClauseValue:= Link3usageClauseToAdd_ar[ii-1].UsageClauseValue;
                  inc(ii);
                end;// if n > 1 then begin
              end;// if ii > 0 then begin
            end;// if not isModelLine then begin
          end;// if isLink3_Exist then begin
          
        end;// for i:= 0 to High(Link3toAdd_ar) do begin
        SetLength(Link3usageClauseToAdd_ar,ii);

        prMessageLOGS(nmProc+'. Условий применения "связок 3" для посадки подготовлено: '+
          IntToStr(Length(Link3usageClauseToAdd_ar)), 'Import_test', false);

if TypeSys = constIsMoto then           //08

        for i:= 0 to High(Link3usageClauseToAdd_ar) do begin
          prMessageLOGS(nmProc+'. Посадка критерия:'#10+
            'Товар: '+fnMakeAddCharStr(IntToStr(Link3usageClauseToAdd_ar[i].wareID), 8, True)+
            'Модель: '+fnMakeAddCharStr(IntToStr(Link3usageClauseToAdd_ar[i].modelID), 8, True)+
            'Узел: '+fnMakeAddCharStr(IntToStr(Link3usageClauseToAdd_ar[i].nodeID), 8, True)+
            'User: '+fnMakeAddCharStr(IntToStr(Link3usageClauseToAdd_ar[i].userID), 8, True)+
            'Excel: '+IntToStr(Link3usageClauseToAdd_ar[i].Row)+#10+
            '  Критерий: '+Link3usageClauseToAdd_ar[i].UsageClauseName+
            '  Значение: '+Link3usageClauseToAdd_ar[i].UsageClauseValue, 'Import_test', false);
          MsgStr:= '';
//StopProcess(UserID,aThreadData.ID);          
          ResCode:= fnAddUsageClausefromRecord(Link3usageClauseToAdd_ar[i],MsgStr);

          Case ResCode of
            resError: begin
                ErrMsg[l].AddObject('Ошибка'#9+'Не удалось добавить условие применения. '#10+MsgStr+#9+SheetName+#9+
                  IntToABC(Link3usageClauseToAdd_ar[i].Col)+IntToStr(Link3usageClauseToAdd_ar[i].Row), pointer(-8*100000-i));
                usedRng:= WorkSheet.Range[IntToABC(Link3usageClauseToAdd_ar[i].Col)+IntToStr(Link3usageClauseToAdd_ar[i].Row), EmptyParam];
                usedRng.Interior.Color:= isErrorCell;
                inc (ErrCount);
              end;
            resDoNothing: begin
                ErrMsg[l].AddObject('Внимание'#9+'Указанное условие применения товара совпадает с существующим.'#9+SheetName+#9+
                  IntToABC(Link3usageClauseToAdd_ar[i].Col)+IntToStr(Link3usageClauseToAdd_ar[i].Row), pointer(-11*100000-i));
                usedRng:= WorkSheet.Range[IntToABC(Link3usageClauseToAdd_ar[i].Col)+IntToStr(Link3usageClauseToAdd_ar[i].Row), EmptyParam];
                usedRng.Interior.Color:= isGreenCell;
                usedRng:= WorkSheet.Range[IntToABC(Link3usageClauseToAdd_ar[i].Col+1)+IntToStr(Link3usageClauseToAdd_ar[i].Row), EmptyParam];
                usedRng.Interior.Color:= isGreenCell;
              end;
            resAdded: begin
                usedRng:= WorkSheet.Range[IntToABC(Link3usageClauseToAdd_ar[i].Col)+IntToStr(Link3usageClauseToAdd_ar[i].Row), EmptyParam];
                usedRng.Interior.Color:= isGreenCell;
                usedRng:= WorkSheet.Range[IntToABC(Link3usageClauseToAdd_ar[i].Col+1)+IntToStr(Link3usageClauseToAdd_ar[i].Row), EmptyParam];
                usedRng.Interior.Color:= isGreenCell;
                inc(AddLink3usageClause);
              end;
            resEdited: begin
                ErrMsg[l].AddObject('Внимание'#9+'Указанное условие применения товара было изменено.'#9+SheetName+#9+
                  IntToABC(Link3usageClauseToAdd_ar[i].Col)+IntToStr(Link3usageClauseToAdd_ar[i].Row), pointer(-10*100000-i));
                usedRng:= WorkSheet.Range[IntToABC(Link3usageClauseToAdd_ar[i].Col)+IntToStr(Link3usageClauseToAdd_ar[i].Row), EmptyParam];
                usedRng.Interior.Color:= isGreenCell;
                inc(UpdLink3usageClause);
              end;
          end;
        end;

        lstBodyMail.Add('С листа "'+SheetName+'" импортированы следующие данные:'#10);
        lstBodyMail.Add('Создано привязок товаров к моделям: '+IntToStr(AddLink3Count)+#10);
        lstBodyMail.Add('Удалено(помечено как неверная) привязок: '+IntToStr(DelCount)+#10);
if TypeSys = constIsMoto then begin     //08
        lstBodyMail.Add('Создано условий применения товаров: '+IntToStr(AddLink3usageClause)+#10);
        lstBodyMail.Add('Изменено условий применения товаров: '+IntToStr(AddLink3Count)+#10);
end;                                    //08

        ErrMsg[l].AddObject('ИТОГО'#9+'Добавлено привязок товаров к моделям: '+
          IntToStr(AddLink3Count)+#9+SheetName+#9+'A1', pointer(2*100000));
if TypeSys = constIsMoto then begin         
        ErrMsg[l].AddObject('ИТОГО'#9+'Добавлено условий применения товаров: '+
          IntToStr(AddLink3usageClause)+#9+SheetName+#9+'A1',pointer(1*100000+2));
        ErrMsg[l].AddObject('ИТОГО'#9+'Изменено условий применения товаров: '+
          IntToStr(UpdLink3usageClause)+#9+SheetName+#9+'A1',pointer(1*100000+1));
end;
        SetLength(Link3usageClauseToAdd_ar, 0);
        SetLength(Link3toAdd_ar, 0);
      end;//l:= 0 to high(readSheets) do begin

    // Добавим один новый лист после текущего
      XL.ActiveWorkbook.Sheets.Add(EmptyParam, WorkBook.Sheets.Item[SheetCount], 1, xlWorksheet, lcid);
      WorkSheet:= WorkBook.Sheets.Item[WorkBook.Sheets.Count] as Excel_TLB._Worksheet;
      WorkSheet.Name:= 'Импорт от'+FormatDateTime(' dd.mm hh_nn ',Now);
      recs:= 1;
  //-=создаем шапку для лога импорта

      WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= 'Статус  сообщения';
      WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= 'Лист';
      WorkSheet.Range['C'+IntToStr(recs), EmptyParam].Value2:= '   Ячейка   ';
      WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= 'Сообщение';
      usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
      usedRng.EntireRow.RowHeight:= usedRng.EntireRow.RowHeight*2;
      usedRng.Interior.Color:= isHeaderCell;
      usedRng.Font.Color:= cHEXtoINT(cnHeaderText);
      usedRng.Font.Bold:= True;
      usedRng.HorizontalAlignment:= xlCenter;
      usedRng.VerticalAlignment:= xlCenter;
      usedRng.Borders.Color:= cHEXtoINT(cnHeaderBorder);
      usedRng.BorderAround(xlContinuous, xlHairLine, xlColorIndexAutomatic, EmptyParam, EmptyParam);
      XL.ActiveWindow.SplitRow:= 1;
      XL.ActiveWindow.FreezePanes:= True;

  //=-шапка создана
      inc(recs);
      for j:= 0 to High(ErrMsg) do begin
        ErrMsg[j].CustomSort(@SizeCustomSort);
        rows:= ErrMsg[j].Count;
        for i:= 0 to rows-1 do begin
//          TestCssStopException;

          LogStr:= fnSplitStringChar(ErrMsg[j].Strings[i]);
          try
            ResCode:= trunc((integer(ErrMsg[j].Objects[i]))/100000);
            Case ResCode of
              -11: begin
                  WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                  WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                  usedRng:= WorkSheet.Range['C'+IntToStr(recs),EmptyParam];
                  usedRng.Value2:= LogStr[3];
                  WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam, EmptyParam, EmptyParam);
                  WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                  usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
                  usedRng.Interior.Color:= isWarningCell;
                end;
                -14..-12: begin
                  WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                  WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                  usedRng:= WorkSheet.Range['C'+IntToStr(recs),EmptyParam];
                  usedRng.Value2:= LogStr[3];
                  WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam, EmptyParam, EmptyParam);
                  WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                  usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
                  usedRng.Interior.Color:= isGreenCell;
                end;
              -9..-2: begin
                  WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                  WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                  usedRng:= WorkSheet.Range['C'+IntToStr(recs),EmptyParam];
                  usedRng.Value2:= LogStr[3];
                  WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam,EmptyParam, EmptyParam);
                  WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                  usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
                  usedRng.Interior.Color:= isErrorCell;
                end;
              -1: begin
                  WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                  usedRng:= WorkSheet.Range['B'+IntToStr(recs), EmptyParam];
                  usedRng.Value2:= LogStr[2];
                  WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam,EmptyParam, EmptyParam);
                  WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                  usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
                  usedRng.Interior.Color:= isErrorCell;
                end;
              1..2: begin
                  WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                  WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                  usedRng:= WorkSheet.Range['B'+IntToStr(recs), EmptyParam];
                  usedRng.Value2:= LogStr[2];
                  WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam,EmptyParam, EmptyParam);
                  WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                  usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
                  usedRng.Interior.Color:= isBorderGreenCell;
                end;
            end;
            inc (recs);
          finally
            SetLength(LogStr, 0);
          end;
        end;
      end;

      usedRng:= WorkSheet.Range['A1', 'D'+IntToStr(recs-1)];
      usedRng.Cells.WrapText:= False;
      usedRng.EntireRow.AutoFit;
      usedRng.EntireColumn.AutoFit;

      if ErrCount = 0 then
        lstBodyMail.Add('Ошибок импорта при обработке данного файла не обнаружено.')
      else
        lstBodyMail.Add('Во время импорта обнаружены ошибки. Некоторые данные не удалось занести в систему.'#10+
          'Подробнее смотрите на листе отчета по импорту в полученном файле.');

    end else begin
      s:= fnIfStr(TypeSys=constIsAuto, 'Авто', 'Мото');
      lstBodyMail.Add ('В указанном файле не удалось распознать данные для импорта привязок товаров к моделям '+
        s+'.'#10+'Убедитесь что соблюдена требуемая структура файла. К данному виду импорта на сайте есть "Help".');
    end;// if isWorkBookReadable then begin

  except
    on E: EStopError do begin 
          // Добавим один новый лист после текущего
      XL.ActiveWorkbook.Sheets.Add(EmptyParam, WorkBook.Sheets.Item[SheetCount], 1, xlWorksheet, lcid);
      WorkSheet:= WorkBook.Sheets.Item[WorkBook.Sheets.Count] as Excel_TLB._Worksheet;
      WorkSheet.Name:= 'Импорт от'+FormatDateTime(' dd.mm hh_nn ',Now);
      recs:= 1;
  //-=создаем шапку для лога импорта

      WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= 'Статус  сообщения';
      WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= 'Лист';
      WorkSheet.Range['C'+IntToStr(recs), EmptyParam].Value2:= '   Ячейка   ';
      WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= 'Сообщение';
      usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
      usedRng.EntireRow.RowHeight:= usedRng.EntireRow.RowHeight*2;
      usedRng.Interior.Color:= isHeaderCell;
      usedRng.Font.Color:= cHEXtoINT(cnHeaderText);
      usedRng.Font.Bold:= True;
      usedRng.HorizontalAlignment:= xlCenter;
      usedRng.VerticalAlignment:= xlCenter;
      usedRng.Borders.Color:= cHEXtoINT(cnHeaderBorder);
      usedRng.BorderAround(xlContinuous, xlHairLine, xlColorIndexAutomatic, EmptyParam, EmptyParam);
      XL.ActiveWindow.SplitRow:= 1;
      XL.ActiveWindow.FreezePanes:= True;

  //=-шапка создана
      inc(recs);
      for j:= 0 to High(ErrMsg) do begin
        ErrMsg[j].CustomSort(@SizeCustomSort);
        rows:= ErrMsg[j].Count;
        for i:= 0 to rows-1 do begin
//          TestCssStopException;

          LogStr:= fnSplitStringChar(ErrMsg[j].Strings[i]);
          try
            ResCode:= trunc((integer(ErrMsg[j].Objects[i]))/100000);
            Case ResCode of
              -14..-10: begin
                  WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                  WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                  usedRng:= WorkSheet.Range['C'+IntToStr(recs),EmptyParam];
                  usedRng.Value2:= LogStr[3];
                  WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam, EmptyParam, EmptyParam);
                  WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                  usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
                  usedRng.Interior.Color:= isWarningCell;
                end;
              -9..-2: begin
                  WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                  WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                  usedRng:= WorkSheet.Range['C'+IntToStr(recs),EmptyParam];
                  usedRng.Value2:= LogStr[3];
                  WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam,EmptyParam, EmptyParam);
                  WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                  usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
                  usedRng.Interior.Color:= isErrorCell;
                end;
              -1: begin
                  WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                  usedRng:= WorkSheet.Range['B'+IntToStr(recs), EmptyParam];
                  usedRng.Value2:= LogStr[2];
                  WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam,EmptyParam, EmptyParam);
                  WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                  usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
                  usedRng.Interior.Color:= isErrorCell;
                end;
              1..2: begin
                  WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                  WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                  usedRng:= WorkSheet.Range['B'+IntToStr(recs), EmptyParam];
                  usedRng.Value2:= LogStr[2];
                  WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam,EmptyParam, EmptyParam);
                  WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                  usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
                  usedRng.Interior.Color:= isBorderGreenCell;
                end;
            end;
            inc (recs);
          finally
            SetLength(LogStr, 0);
          end;
        end;
      end;

      usedRng:= WorkSheet.Range['A1', 'D'+IntToStr(recs-1)];
      usedRng.Cells.WrapText:= False;
      usedRng.EntireRow.AutoFit;
      usedRng.EntireColumn.AutoFit;
      lstBodyMail.Add(E.Message);
      lstBodyMail.Add(' ');
      if ErrCount = 0 then
        lstBodyMail.Add('Ошибок импорта при обработке данного файла не обнаружено.')
      else
        lstBodyMail.Add('Во время импорта обнаружены ошибки. Некоторые данные не удалось занести в систему.'#10+
          'Подробнее смотрите на листе отчета по импорту в полученном файле.');
    end;
    on E: Exception do prMessageLOGS(nmProc+': '+E.Message, 'Import', False);
  end;
finally
  Subj:= 'Результаты импорта связок товаров с моделями от '+FormatDateTime(cDateTimeFormatY2S, Now());
  ContentType:= XMLContentType;

//Секция очисток памяти
  if Assigned(WorkBook) then begin
    Workbook.CheckCompatibility := False;
    WorkBook.Save(lcid);
    WorkBook.Close(false, EmptyParam, EmptyParam, lcid);
  end;
  if Assigned(XL) then begin
    XL.Quit;// закрыть Excel
    XL.Disconnect;
    prFree(XL);
  end;
  FNameI:= ExtractFilePath(FName)+fnFormRepFileName(IntToStr(ImpCheck.GetImpType(UserID, aThreadData.ID)), FName, constOpImport);                 
  RenameFile(FName, FNameI);
  FName:= FNameI;
  prFree(Wares);
  SetLength(ListFirstReadRow, 0);
  SetLength(WareCellIndexes, 0);
  SetLength(readSheets, 0);
  SetLength(LogStr, 0);
  SetLength(Link3usageClauseToAdd_ar, 0);
  SetLength(Link3toAdd_ar, 0);
  for i:= 0 to High(ErrMsg) do if ErrMsg[i]<>nil then prFree(ErrMsg[i]); 
  SetLength(ErrMsg, 0);
end;
end;
//--============================================================================================--//
procedure apGetMgrWaresWoTDarts (UserID: integer; var lstBodyMail: TStringList;
                                 var FName, Subj, ContentType, s: string; ThreadData: TThreadData; filter_data: string);
const nmProc = 'apGetMgrWaresWoTDarts';
var
  CellStylesArray: TXmlCellStylesArray;
  HeaderStyle, TextStyle, WarningStyle: TXmlReportStyle;
  TDWares,  OutWaresList, List: TStringList;
  PathFile, ss: String;
  Ware: TWareInfo;
  jj, i, j, cap: integer;
  MsgStr: Tas;
  TDMF: Tai;
  Percent: Real;
  Product, InfoGr: boolean;
  FilterData: TStringList;
  Manager, WareName, ArtName: string;
  ii, ManagerID, col, countWare: integer;
  ArtSup: TArrayArtSup;
//  RowArtSup: tas;
  LArtSup: TStringList;
//timerStart: TDateTime;
add: boolean;
status: string;
begin
//timerStart:= Now;
  countWare:= 0;
  j:= 0;
//  i:= 0;
  ii:= 0;
  LArtSup:= TStringList.Create;
  List:= TStringList.Create;
  OutWaresList:= TStringList.Create;
  SetLength(TDMF, 0);
  SetLength(MsgStr, 0);
  Product:= (length(cache.arEmplInfo[UserID].UserRoles)=1) and (cache.arEmplInfo[UserID].UserRoleExists(rolProduct));
  try
//  try
    //infogr
    FilterData:= TStringList.Create;
    FilterData.Text:= filter_data;
    //InfoGr:= (fnStrToIntDef(FilterData.Values['dop_info'],-1)>0);
    InfoGr:= (FilterData.Values['dop_info']='on');
//prMessageLOGS('начали формировать'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false);    
//    if InfoGr then 
    ArtSup:= fnArtSup;
//prMessageLOGS('сформировали'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false);    
    
    cap:= 50;  //получение списка товаров менеджера
    OutWaresList.Capacity:= cap;
//    jj:= 0;
    prStopProcess( UserID, ThreadData.ID);                                           
    ImpCheck.SetProcessPercent( UserID, ThreadData.ID, 7);                          
    Percent:= 45;                                                                     
    if High(Cache.arWareInfo)>-1 then Percent:= Percent/(High(Cache.arWareInfo)+1) else ImpCheck.SetProcessPercent( UserID, ThreadData.ID, Percent);//vv     
    for i:= 1 to High(Cache.arWareInfo) do begin
//if i<>182803 then continue;
    
      ImpCheck.SetProcessPercent( UserID, ThreadData.ID, Percent); 
      prStopProcess( UserID, ThreadData.ID);                          
      if not Cache.WareExist(i) then Continue;

      if j=OutWaresList.Capacity then
        OutWaresList.Capacity:= OutWaresList.Capacity+500;
      try
        Ware:= Cache.GetWare(i,True); 
        if Ware.ArticleTD<>'' then Continue; 
        if (Ware.IsINFOgr and not InfoGr) or (not Ware.IsINFOgr and InfoGr) then Continue; 
        if (Ware.IsINFOgr and not InfoGr) or (not Ware.IsAUTOWare) or (Product and not (Ware.ManagerID=UserID)){not (Ware.IsAUTOWare and (Ware.ManagerID=UserID))} then Continue;
        if not Ware.IsINFOgr and (Length(TBrandItem(Cache.WareBrands[Ware.WareBrandID]).TDMFcodes)<1) then Continue;
        if InfoGr and Ware.IsINFOgr {and Ware.WareBrandID<>0} and not(Ware.Comment='') and ((Ware.Comment=trim('OE')) or (Ware.Comment=trim('ОЕ')))  then Continue;
        ii:= Ware.WareBrandID;
        //vv 
//        ManagerID:= 0;
        Manager:= '';
        ManagerID:= Ware.ManagerID;
        if Cache.EmplExist(ManagerID) then                                    
          Manager:= Cache.arEmplInfo[ManagerID].EmplShortName
        else Manager:= 'Менеджер не определен';  
//        if InfoGr and Ware.IsINFOgr then
        try
          jj:= 0;
          add:= (jj<0);
          ss:= Ware.NameBS+'|'+AnsiUpperCase(fnDelSpcAndSumb(Ware.WareSupName));
          for ii := 0 to length(ArtSup)-1 do begin
            if (Ware.WareBrandID=1) or
              ((Ware.WareBrandID>1) and (fnInIntArray(ArtSup[ii].MF_ID,TBrandItem(Cache.WareBrands[Ware.WareBrandID]).TDMFcodes)>-1)) then
            
            if (Pos(ArtSup[ii].Art_Search, ss)>0) {or (Pos(ArtSup[ii].ART_NR, s)>0)} then begin
              OutWaresList.AddObject(Ware.Name+#9+fnMakeAddCharStr(ArtSup[ii].Sup_Name, 50, true)+#9+IntTOStr(ArtSup[ii].Mf_ID)+#9+
                                     ArtSup[ii].ART_NR+#9+Manager+#9+Ware.PgrName+#9+Ware.TypeName+#9+ArtSup[ii].TradeMark, Ware);
              inc(jj);
              add:= (jj>0);
            end;
          end;
          ii:= 0;
          if not add then
            OutWaresList.AddObject(Ware.Name+#9+fnMakeAddCharStr(Ware.WareBrandName, 50, true)+#9+'-1'+#9+
            Manager+#9+Ware.PgrName+#9+Ware.TypeName+#9, Ware);
        except
          on E: Exception do prMessageLOGS(IntToStr(i)+' '+E.Message, 'Import', false);
        end
{        else begin 
          TDWares:=SearchWareGBInTecDoc(Ware, ThreadData);
          if TDWares.Count>0 then
            for l:=0 to TDWares.Count-1 do begin    //StringReplace(const S, OldPattern, NewPattern: string; Flags: TReplaceFlags)
            ss:= StringReplace(TDWares[l],'|',#9,[]);
            OutWaresList.AddObject(Ware.Name+#9+fnMakeAddCharStr(Ware.WareBrandName, 50, true)+#9+ss+#9+Manager+#9+Ware.PgrName+#9+Ware.TypeName, Ware);    
            end//vv end
          else OutWaresList.AddObject(Ware.Name+#9+fnMakeAddCharStr(Ware.WareBrandName, 50, true)+#9+'-1'+#9+Manager+#9+Ware.PgrName+#9+Ware.TypeName, Ware);
          inc(j);
          TDWares.Clear;
        end};  
//jj:=-1;         
      except
        on E: Exception do prMessageLOGS('i='+IntToStr(i)+' ii= '+IntToStr(ii)+' '+E.Message, 'Import', false);
      end;
      //TDWares.Clear;
      
    end;
//    i:= 0;
    prStopProcess( UserID, ThreadData.ID);  

    SetLength(ArtSup,0);
    Percent:= 45;                                                                    
    if OutWaresList.Count > 0 then Percent:= Percent/OutWaresList.Count else  ImpCheck.SetProcessPercent( UserID, ThreadData.ID, Percent); //vv
    if OutWaresList.Count > 0 then begin
//      prStopProcess( UserID, ThreadData.ID);                                               
      if not GetEmplTmpFilePath(UserID, PathFile, ss) then raise EBOBError.Create(ss);  

//      FName:= PathFile+'Wares_no_TD_Articles'+FormatDateTime('_dd.mm_(hh.nn)',Now)+'.xml';
      FName:= PathFile+fnFormRepFileName('22', '.xml', constOpExport);                 

      if FileExists(FName) and not SysUtils.DeleteFile(FName) then
        raise EBOBError.Create(MessText(mtkNotDelPrevFile));

//      OutWaresList.Sorted:= True;
      OutWaresList.Sort; 

      List.Add(cEX_Doc_Begin);
      List.Add(cEX_Workbook_Begin);
      CellStylesArray:= TXmlCellStylesArray.Create;
      try
    //--== создаем и инициализируем стили ячеек отчета
        HeaderStyle:= CellStylesArray.AddStyle(TXmlReportStyle.Create(cnHeaderCell,
                             'Center','Center',[fsBold],cnHeaderText, true, true, cnHeaderBorder));
        TextStyle:= CellStylesArray.AddStyle(TXmlReportStyle.Create);
        WarningStyle:= CellStylesArray.AddStyle(TXmlReportStyle.Create(cnYellowCell));

        List.Add(CellStylesArray.GetXmlStyles);
        List.Add(fnOpenWorkSheet);
        List.Add('<Column ss:Width="100"/>'#10);
        List.Add('<Column ss:Width="100"/>'#10);
        List.Add('<Column ss:Width="100"/>'#10);
        List.Add('<Column ss:Width="100"/>'#10);
        List.Add('<Column ss:Width="100"/>'#10);
        List.Add('<Column ss:Width="100"/>'#10);
        List.Add('<Column ss:Width="100"/>'#10);
        List.Add('<Column ss:Width="150"/>'#10);
        List.Add('<Column ss:Width="100"/>'#10);
        List.Add('<Row ss:Height="27">'#10);
     //   List.Add(fnGenerateXMLcell('Бренд', HeaderStyle));
        List.Add(fnGenerateXMLcell('Товар GrossBee', HeaderStyle));
        List.Add(fnGenerateXMLcell('Бренд TecDoc', HeaderStyle));
        List.Add(fnGenerateXMLcell('Артикул TecDoc', HeaderStyle));
        List.Add(fnGenerateXMLcell('Статус привязки', HeaderStyle));
        List.Add(fnGenerateXMLcell('Наименование поставщика', HeaderStyle));
        List.Add(fnGenerateXMLcell('Менеджер', HeaderStyle));
        List.Add(fnGenerateXMLcell('Подгруппа', HeaderStyle));
        List.Add(fnGenerateXMLcell('Тип', HeaderStyle));
        List.Add(fnGenerateXMLcell('Признак связи по торговому номеру', HeaderStyle));
        List.Add('</Row>'#10);
        WareName:='';
        with OutWaresList do begin
          for i:= 0 to Count-1 do begin
            //TestCssStopException;
            prStopProcess( UserID, ThreadData.ID);                                                        
            MsgStr:= fnSplitStringChar(Strings[i]);
            col:= length(MsgStr);
            
            if (WareName<> MsgStr[0]) or (ArtName<> MsgStr[3]) then begin    //2301
            try
              List.Add('<Row>'#10);
          //  try
            //публикуем в отчет только наменование товара GrossBee
              if WareName<> MsgStr[0] then begin
                List.Add(fnGenerateXMLcell(MsgStr[0], TextStyle));
                inc(countWare);
              end
              else List.Add('<Cell></Cell>');;
              TDMF:= TBrandItem(Cache.WareBrands.GetDirItem(TWareInfo(Objects[i]).WareBrandID)).TDMFcodes;
              //if Length(TDMF)=0 then TDMF:= TBrandItem(Cache.WareBrands.GetDirItem(StrToIntDef(MsgStr[2],-1))).TDMFcodes;
//TBrandItem(Cache.WareBrands[TWareInfo(Objects[i]).WareBrandID]).WarePrefix
//TBrandItem(Cache.WareBrands.GetDirItem(TWareInfo(Objects[i]).WareBrandID)).WarePrefix            
              if TBrandItem(Cache.WareBrands[TWareInfo(Objects[i]).WareBrandID]).WarePrefix  +' '+ MsgStr[3] = MsgStr[0] then
                status:= '1'
              else status:= '';
                                                                                   
          //  TBrandItem [Cache.arWareInfo[i].BrandID]
              if Length(TDMF) >= 1 then begin
                cap:= TDMF[0];
                cap:= Cache.BrandTDList.IndexOfObject(pointer(cap));
                if cap < 0 then List.Add('<Cell></Cell>')
                else List.Add(fnGenerateXMLcell(Cache.BrandTDList[cap], TextStyle));
                if (StrToIntDef(MsgStr[2],-1)>-1) and (StrToIntDef(MsgStr[2],-1)= TDMF[0]) then List.Add(fnGenerateXMLcell(MsgStr[3], WarningStyle))//vv 13098;               
                else List.Add('<Cell></Cell>');
                List.Add(fnGenerateXMLcell(status));
//                List.Add('<Cell></Cell>');
                if WareName<> MsgStr[0] then begin
                  List.Add(fnGenerateXMLcell(TWareInfo(Objects[i]).WareSupName));
                  List.Add(fnGenerateXMLcell(MsgStr[col-4]));
                  List.Add(fnGenerateXMLcell(MsgStr[col-3]));
                  List.Add(fnGenerateXMLcell(MsgStr[col-2]));
                  List.Add(fnGenerateXMLcell(MsgStr[col-1]));
                end
                else
                  List.Add('<Cell></Cell>'+'<Cell></Cell>'+'<Cell></Cell>'+'<Cell></Cell>'+fnGenerateXMLcell(MsgStr[col-1]));
              end
              else begin
                //jj:= cache.BrandTDList.IndexOfObject(Pointer(StrToIntDef(MsgStr[2],-1)));
                //3011 List.Add(fnGenerateXMLcell(Cache.BrandTDList[jj], TextStyle));//List.Add('<Cell></Cell>');
                List.Add(fnGenerateXMLcell(MsgStr[1], TextStyle));
                //List.Add(fnGenerateXMLcell(MsgStr[2], WarningStyle));
                List.Add('<Cell></Cell>');
//                List.Add(fnGenerateXMLcell(status));
                List.Add('<Cell></Cell>');
                if WareName<> MsgStr[0] then begin
                  List.Add(fnGenerateXMLcell(TWareInfo(Objects[i]).WareSupName));
                  List.Add(fnGenerateXMLcell(MsgStr[col-4]));
                  List.Add(fnGenerateXMLcell(MsgStr[col-3]));
                  List.Add(fnGenerateXMLcell(MsgStr[col-2]));
                  List.Add(fnGenerateXMLcell(MsgStr[col-1]));
                end
                else
                  List.Add('<Cell></Cell>'+'<Cell></Cell>'+'<Cell></Cell>'+'<Cell></Cell>'+fnGenerateXMLcell(MsgStr[col-1]));
              end;
         (*
            except
              on E: Exception do begin
                prMessageLOGS(nmProc+'! '+Cache.arEmplInfo[UserID].Surname+': "'+Strings[i]+'"', 'Import', false);
              end;

            end;
         *)
         


//List.Add(fnGenerateXMLcell(OutWaresList[i]));            
            List.Add('</Row>'#10);
            ImpCheck.SetProcessPercent( UserID, ThreadData.ID, Percent);                                 
            finally
              WareName:= MsgStr[0];
              ArtName:= MsgStr[3];
              SetLength(MsgStr, 0);
//140516              SetLength(TDMF, 0); 
            end;
            end;//2301
          end;
//          i:= 0;
        end;
        List.Add(fnCloseWorkSheet(fnGetWorkSheetOptions(1,1)));
        List.Add(cEX_Workbook_End);
      finally
        prFree(CellStylesArray);
      end;
//  except
//      on E: Exception do prMessageLOGS('i='+IntToStr(i)+' ii= '+IntToStr(ii)+E.Message, 'Import', false);
//  end;    
//  end;
    end else s:= 'У вас нет товаров без привязанных к ним артикулов TecDoc.';
  finally    
    if List.Count>0 then begin
      SaveToFile(List,FName);
      //List.SaveToFile(FName);

      Subj:= 'Список товаров без привязок артикулов TecDoc от '+FormatDateTime(cDateTimeFormatY2S, Now());
      ContentType:= XMLContentType;
      lstBodyMail:= TStringList.Create;
      lstBodyMail.Add ('Товаров без артикулов TecDoc: '+IntToStr(countWare));
(*      lstBodyMail.Add(' ');
      lstBodyMail.Add(' ');
      lstBodyMail.Add('Начало выполнения: '+FormatDateTime(cDateTimeFormatTSnD, timerStart));
      lstBodyMail.Add('Завершение выполнения: '+ FormatDateTime(cDateTimeFormatTSnD,Now));
      lstBodyMail.Add('Общее время выполнения: '+ FormatDateTime('hh:nn:ss',Now-timerStart));  *)    
    end;



//    prStopProcess( UserID, ThreadData.ID);                                            
    ImpCheck.SetProcessPercent( UserID, ThreadData.ID, 0.5);                          
    prFree(OutWaresList);
    prFree(TDWares);
    prFree(List);
//140516    SetLength(TDMF, 0);
    SetLength(MsgStr, 0);
    SetLength(ArtSup, 0);

  end;
end;
  
//--============================================================================================--//
function  fnGetGBAndTecDocWareLinks(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,
                                 ContentType: string; ThreadData: TThreadData; filter_data: string): string;
const nmProc='fnGetGBAndTecDocWareLinks';
      RepType = 18;
type
TRecTDWares = record
  MfIdArtNR: string;
  MF_ID: integer;
//  Art_Search: shortstring;
  Art_NR: shortstring;
  Sup_Name: shortstring;
  WRONG: word;  
  TradeMark: shortstring;
end;       
      
var
  WareList, List, FilterData, TDWares: TStringList;
  i, ii, Position, RowCount: integer;
  CurBrand, Content, s, PathFile, ManufID, Manuf, Article{, SubContent}: string;
  BrandName, DelimWares, ss: string;
  Ware: TWareInfo;
  CellStylesArray: TXmlCellStylesArray;
  MarkStyle,BoldHeaderStyle, TextStyle, CellStyle, SideHeaderEmptines, WarningStyle: TXmlReportStyle;
//  AnalogInList: boolean;
  IBORDQuery: TIBSQL;
  IBORD: TIBDatabase;
  BrandItem: TBrandItem;    
  Percent: real;
  Product: boolean;  
  ManagerID: integer;
  ErrPos,Manager: string; 
  ArtSup: TArrayArtSup;   
  arBrandTD: tai;  
  LArtSup: TStringList;  
  TM,ATD: string;   
//  timerStart: TDateTime;                                       
begin
  BrandName:= '';
  Content:='';
  IBORDQuery:= nil;
  IBORD:= nil;
  WareList:= nil;  
  TDWares:= nil;  
  List:= nil;  
  CellStylesArray:= nil;  
  FilterData:= TStringList.Create;
  LArtSup:= TStringList.Create;
  ii:= 0;
//  timerStart:= Now; 
  try
  try
    FilterData.Text:= filter_data;
    CurBrand:= FilterData.Values['dop_gbbrand']; // получаем код бренда
    TestCssStopException;
    Product:= (length(cache.arEmplInfo[UserID].UserRoles)=1) and (cache.arEmplInfo[UserID].UserRoleExists(rolProduct));
    try  // проверяю на целочисленность
      i:= StrToInt(CurBrand);
    except
      raise EBOBError.Create(MessText(mtkNotFoundBrand, CurBrand));
    end;

    if not GetEmplTmpFilePath(UserID, PathFile, ss) then raise EBOBError.Create(ss); 

    if (not Cache.WareBrands.ItemExists(i)) then
      raise EBOBError.Create(MessText(mtkNotFoundBrand, CurBrand));

    BrandItem:= TBrandItem(Cache.WareBrands[i]);    

    if (Length(BrandItem.TDMFcodes)=0) then
      raise EBOBError.Create('Не найдено соответствие бренда '+BrandItem.Name +' бренду TecDoc');
      
    arBrandTD:= BrandItem.TDMFcodes ;
    
    WareList:= fnGetWareListByBrand(i, constIsAuto, true);
    if WareList.Count=0 then
      raise EBOBError.Create(MessText(mtkNotFoundBrandWar))

    else if not fnUserRolesEntree(RepType, fnGetUserRoles(UserID)) then
      with WareList do begin
        prStopProcess( UserID, ThreadData.ID);                                                   
        ii:= (Count-1);
        for position:= ii downto 0 do begin
          Ware:= Cache.GetWare(integer(Objects[position]));
          if Product and (Ware.ManagerID <> Userid) then WareList.Delete(position);
        end;
        if WareList.Count = 0 then
          raise EBOBError.Create('Не найдены закрепленные за Вами товары этого бренда.');
      end;
ErrPos:= '1';      
    ImpCheck.SetProcessPercent( UserID, ThreadData.ID, 5);                           
    prMessageLOGS('Кол-во товаров у производителя "'+BrandItem.Name+'": '+IntToStr(WareList.Count), 'Import', false);

    CellStylesArray:= TXmlCellStylesArray.Create;
    BoldHeaderStyle:= CellStylesArray.AddStyle(TXmlReportStyle.Create(cnHeaderCell,
                         'Center', 'Center', [fsBold], cnHeaderText, true, true, cnHeaderBorder));
    SideHeaderEmptines:= CellStylesArray.AddStyle(TXmlReportStyle.Create(cnHeaderCell,
                         'Center', 'Center', [], cnHeaderText, true));
    TextStyle:= CellStylesArray.AddStyle(TXmlReportStyle.Create);
    WarningStyle:= CellStylesArray.AddStyle(TXmlReportStyle.Create(cnYellowCell));
    MarkStyle:= CellStylesArray.AddStyle(TXmlReportStyle.Create(cnRedCell));

    BrandName:= BrandItem.Name;
    FName:= '18_'+StringReplace(BrandName, ' ', '_', [rfReplaceAll]);         
    FName:= PathFile+fnFormRepFileName(FName, '.xml', constOpExport);    
                                //открываем worksheet;  Добавляем шапку:
    Content:= Content+fnOpenWorksheet(fnWrkShtNameSpotter(BrandName))+#10+ 
      '<Column ss:Width="100"/>'#10+
      '<Column ss:Width="100"/>'#10+
      '<Column ss:Width="100"/>'#10+
      '<Column ss:Width="100"/>'#10+
      '<Column ss:Width="100"/>'#10+
      '<Column ss:Width="100"/>'#10+
      '<Row ss:Height="27">'#10+
      fnGenerateXMLcell('Товар GrossBee', BoldHeaderStyle)+
      fnGenerateXMLcell('Бренд ТесDoc', BoldHeaderStyle)+
      fnGenerateXMLcell('Артикул TecDoc', BoldHeaderStyle)+
      fnGenerateXMLcell('Статус привязки', BoldHeaderStyle)+
      fnGenerateXMLcell('Признак связи по торговому номеру', BoldHeaderStyle)+
      fnGenerateXMLcell('Менеджер', BoldHeaderStyle)+'</Row>'#10;
  //шапка добавлена

    DelimWares:= '<Row ss:Height="9">'#10+     //Создаем разделитель
      fnGenerateXMLcell('', SideHeaderEmptines)+
      fnGenerateXMLcell('', SideHeaderEmptines)+
      fnGenerateXMLcell('',SideHeaderEmptines)+
      fnGenerateXMLcell('',SideHeaderEmptines)+
      fnGenerateXMLcell('',SideHeaderEmptines)+
      fnGenerateXMLcell('',SideHeaderEmptines)+'</Row>'#10;
    ArtSup:= fnArtSup(i);
    TDWares:= TStringList.Create;
    IBORD:= cntsORD.GetFreeCnt;
    IBORDQuery:= fnCreateNewIBSQL(IBORD, 'Query_'+nmProc, -1, tpRead, true);
    IBORDQuery.SQL.Text:= 'SELECT * FROM WAREARTICLETD WHERE WATDWARECODE=:WATDWARECODE';
    IBORDQuery.Prepare;

    Percent:=90;                                                                          
    if WareList.Count>0 then Percent:= Percent/(WareList.Count) else ImpCheck.SetProcessPercent( UserID, ThreadData.ID, Percent); 
    for i := 0 to WareList.Count-1 do begin
ErrPos:= '2';    
      prStopProcess( UserID, ThreadData.ID);
                                                   
      Ware:= Cache.GetWare(integer(WareList.Objects[i]),True);
//if Ware.ID=41132 then begin

//      ManagerID:= 0;
      Manager:= '';
      ManagerID:= Ware.ManagerID;
      if Cache.EmplExist(ManagerID) then
        Manager:= Cache.arEmplInfo[ManagerID].EmplShortName
      else Manager:= 'Менеджер не определен'; 
    // получаем список товаров из базы TecDoc
      try
        if (Ware.IsINFOgr or not Ware.IsINFOgr) then  begin
          try
            ss:= Ware.NameBS+'|'+AnsiUpperCase(fnDelSpcAndSumb(Ware.WareSupName));
            {for ii := 0 to length(ArtSup)-1 do begin
              //if ArtSup[ii] then
              LArtSup:= ArtSup[ii];
              for jj := 0 to LArtSup.Count-1 do begin
                RowArtSup:= fnSplitStringChar(LArtSup[jj]);
                if (Pos(RowArtSup[0], ss)>0) (*or (Pos(ArtSup[ii].ART_NR, s)>0)*) then begin
                  TDWares.Add(RowArtSup[3]+'|'+RowArtSup[1]);
                  //inc(j);
                end;
              end;
            end;}
            for ii := 0 to length(ArtSup)-1 do begin
              if fnInIntArray(ArtSup[ii].MF_ID, arBrandTD)<0  then  Continue;
              if (Pos(ArtSup[ii].Art_Search, ss)>0) then begin
                //OutWaresList.Add( ArtSup[ii].Sup_Name+'|'+ArtSup[ii].ART_NR);
                TDWares.Add('Z|'+ArtSup[ii].TradeMark+'|'+IntToStr(ArtSup[ii].MF_ID)+'|'+ArtSup[ii].ART_NR);
                //Result.Add(IBQuery.FieldByName('DS_MF_ID').AsString+'|'+IBQuery.FieldByName('ART_NR').asString);
                //?inc(j);
              end;
            end;
            ii:= 0;
          except
            on E: Exception do prMessageLOGS(IntToStr(ii)+' '+E.Message, 'Import', false);
          end;
        end;
//;{        else 
{        TDWares:= SearchWareGBInTecDoc(Ware, ThreadData); }
        
        try        // теперь добавляем, что у нас есть по этому товару в gb_ord
          if not IBORDQuery.Transaction.InTransaction then begin
            prFreeIBSQL(IBORDQuery);
            cntsORD.SetFreeCnt(IBORD);
            IBORD:= cntsORD.GetFreeCnt;
            IBORDQuery:= fnCreateNewIBSQL(IBORD, 'Query_'+nmProc, -1, tpRead, true);
            IBORDQuery.SQL.Text:= 'SELECT * FROM WAREARTICLETD WHERE WATDWARECODE=:WATDWARECODE';
            IBORDQuery.Prepare;
          end;
 ErrPos:= '3';
          IBORDQuery.ParamByName('WATDWARECODE').AsInteger:=Ware.ID;
          IBORDQuery.ExecQuery;
          while not IBORDQuery.EOF do begin
            s:= IBORDQuery.FieldByName('WATDARTSUP').AsString+'|'+IBORDQuery.FieldByName('WATDARTICLE').asString;
            ss:='';  
            for ii := 0 to TDWares.Count-1 do begin
//              ss:= TDWares.Strings[ii];
              if (Pos(s,TDWares[ii])>0) then begin        
                ss:= StringReplace(TDWares.Strings[ii],'Z|',IBORDQuery.FieldByName('WATDWRONG').AsString+'|',[]);
                TDWares[ii]:= ss;
                TDWares.Objects[ii]:= pointer(fnIfInt(IBORDQuery.FieldByName('WATDWRONG').AsString='F', 1, -1));
              end;
            end;
            if ss='' then
              TDWares.AddObject(IBORDQuery.FieldByName('WATDWRONG').AsString+'|'+' '+'|'+s, pointer(fnIfInt(IBORDQuery.FieldByName('WATDWRONG').AsString='F', 1, -1)));

{            
            if TDWares.Find('Z  '+s, Position) then begin
              TDWares[Position]:=IBORDQuery.FieldByName('WATDWRONG').AsString+'  '+ s;
              TDWares.Objects[Position]:= pointer(fnIfInt(IBORDQuery.FieldByName('WATDWRONG').AsString='F', 1, -1))
            end
            else
              TDWares.AddObject(IBORDQuery.FieldByName('WATDWRONG').AsString+'  '+s, pointer(fnIfInt(IBORDQuery.FieldByName('WATDWRONG').AsString='F', 1, -1)));
}
            IBORDQuery.Next;
          end;
//          prMessageLOGS(IntToStr(i)+' '+Ware.Name+'. В текдоке: '+IntToStr(TDWares.Count)+#10, 'Import', false);
          IBORDQuery.Close;
        except
          on E: Exception do prMessageLOGS(nmProc+': '+IntToStr(i)+#9+E.Message, 'Import', False);
        end;
ErrPos:= '4';          
          Content:= Content+'<Row>'#10;
          if (Ware.ArticleTD='') then
            Content:= Content+fnGenerateXMLcell(Ware.Name, WarningStyle) // тут должен быть желтый цвет, как сигнал, что нет товара TecDoc. либо как-то по другому выделить
          else
            Content:= Content+fnGenerateXMLcell(Ware.Name, TextStyle); // тут должен быть зеленый цвет
                                      //объединение ячеек
          RowCount:= TDWares.Count-1;
          TDWares.Sort;  
//ATD:= TDWares.Text;                 
          //if RowCount>-1 then PPercent:= Percent/(WareList.Count) else ImpCheck.SetProcessPercent( UserID, ThreadData.ID, Percent); //vv          
          ATD:='';
          for ii:=0  to RowCount do begin
ErrPos:= '5';          
            prStopProcess( UserID, ThreadData.ID);

//            TDWares[ii]:=copy(TDWares[ii], pos('|',TDWares[ii])+1,length(TDWares[ii])+1);
            TM:= Copy(TDWares[ii], 3, 1);
            s:= Copy(TDWares[ii], 5, length(TDWares[ii])+1);
            Position:= Pos('|', s);
            ManufID:= Copy(s, 1, Position-1);
            Article:= Copy(s, Position+1, length(s)+1);
            Position:= Cache.BrandTDList.IndexOfObject(pointer(StrToInt(ManufID)));
           if (ii>0) and (ATD<> Article)then Content:= Content+{fnGenerateXMLcell(Manager, CellStyle)+}'</Row>'#10+'<Row>'#10+'<Cell></Cell>'#10;                                                        
            if Position=-1 then begin
                prMessageLOGS(nmProc+'Не найден бренд TecDoc с кодом "'+ManufID+'"', 'Import', False);
                prMessageLOGS(nmProc+': TM:='+TM+'; ManufID='+ManufID+'; Article='+Article+'; WareName='+Ware.Name, 'Import', False);
                Manuf:= 'Не найден бренд TecDoc с кодом "'+ManufID+'"';
//              raise EBOBError.Create('Не найден бренд TecDoc с кодом "'+ManufID+'"'); // тут не должно быть raise, должна быть запись ошибки в лог импорта
            end
            else 
            Manuf:= Cache.BrandTDList[Position];
 
ErrPos:= '6';
            if {(integer(TDWares.Objects[ii])=0)} Ware.ArticleTD<>Article then
              CellStyle:=WarningStyle // тут должен быть желтый цвет
            else
              CellStyle:=TextStyle; // тут должен быть зеленый цвет
            if TM<>' '{='Z'} then  CellStyle:=MarkStyle;
            

//            Content:= Content+fnGenerateXMLcell(Manuf, CellStyle)+
//                              fnGenerateXMLcell(Article, CellStyle);
ErrPos:= '61';            
            if Ware.ArticleTD=Article{(integer(TDWares.Objects[ii])<>0)} then
              ss:= intToStr(integer(TDWares.Objects[ii]))
{            else if ((Ware.ArticleTD='') and (RowCount=0)) 
            then ss:= '1' }
            else if Ware.Name= TBrandItem(Cache.WareBrands[Ware.WareBrandID]).WarePrefix+' '+Article then
              ss:='1'            
            else ss:= '';
            if ATD<> Article then
              Content:= Content+fnIfStr(Position=-1,fnGenerateXMLcell(Manuf, MarkStyle),fnGenerateXMLcell(Manuf, CellStyle))+
                                fnGenerateXMLcell(Article, CellStyle)+
                                fnGenerateXMLcell(ss, CellStyle)+
                                fnGenerateXMLcell(fnIfStr(TM='T',TM,''){TM}, CellStyle)+
                                fnGenerateXMLcell(Manager, CellStyle);
//           if (ii<RowCount) and (ATD<> Article)then Content:= Content+{fnGenerateXMLcell(Manager, CellStyle)+}'</Row>'#10+'<Row>'#10+'<Cell></Cell>'#10;                                            
ErrPos:= '7 '+Article;                                
//s:= Copy(TDWares[ii], 1, 5);   
//Content:= Content+fnGenerateXMLcell(s, CellStyle);         
            //Content:= Content+fnGenerateXMLcell(Manager, CellStyle);
            //ImpCheck.SetProcessPercent( UserID, ThreadData.ID, PPercent);    
            ATD:= Article;               
          end;
          ii:= 0;
      finally
//1912        prFree (TDWares);
        TDWares.Clear;
      end;
      ImpCheck.SetProcessPercent( UserID, ThreadData.ID, Percent); 
      if (Ware.ArticleTD='') and  (RowCount<0) then 
        Content:= Content+'<Cell></Cell>'+'<Cell>-</Cell>'+'<Cell></Cell>'+'<Cell></Cell>'+ fnGenerateXMLcell(Manager, WarningStyle)+ '</Row>'#10+DelimWares
      else 
        Content:= Content+ {fnGenerateXMLcell(Manager, CellStyle)+} '</Row>'#10+DelimWares;
//end;//2301 Ware.ID-
    end;
    prStopProcess( UserID, ThreadData.ID);



  except
    on E: Exception do begin
      prMessageLOGS(nmProc+': ErrPos='+ErrPos+' ' +#9+E.Message, 'Import', False);
      raise EBOBError.Create(nmProc+': '+E.Message);
    end;
  end;    
  finally
    if length(trim(Content))<>0 then  begin
if copy(Content,length(Content)-Length('</Row>'#10)+1,length(Content))<>'</Row>'#10 then
  Content:= Content+ {fnGenerateXMLcell(Manager, CellStyle)+} '</Row>'#10;  
    Content:= Content+fnCloseWorkSheet(fnGetWorkSheetOptions(1,1))+#10;  //закрываем worksheet;
    List:= TStringList.Create;
    List.Add(cEX_Doc_Begin);
    List.Add(cEX_Workbook_Begin);
    List.Add(CellStylesArray.GetXmlStyles);
    List.Add(Content);
    List.Add(cEX_Workbook_End);

//    FName:= PathFile+StringReplace(BrandName, ' ', '_', [rfReplaceAll])+
//            '_TecDocArticles'+FormatDateTime('_dd.mm_(hh.nn)',Now)+'.xml';
         

    if FileExists(FName) and not SysUtils.DeleteFile(FName) then
      raise EBOBError.Create(MessText(mtkNotDelPrevFile));
    SaveToFile(List,FName);
    //List.SaveToFile(FName);
    Subj:= BrandName+'. Привязки товаров GrossBee от '+FormatDateTime(cDateTimeFormatY2S, Now());
    ContentType:= XMLContentType;
    lstBodyMail:= TStringList.Create;
    lstBodyMail.Add('Количество товаров в GrossBee по данному производителю: '+IntToStr(WareList.Count));
    end;
    prFree(FilterData);
    prFree(WareList);
    prFree(List);
    prFree(CellStylesArray);
    prFree(TDWares);
    prFreeIBSQL(IBORDQuery);
    cntsORD.SetFreeCnt(IBORD, True);
    ImpCheck.SetProcessPercent( UserID, ThreadData.ID, 5); 
    setlength(ArtSup, 0); 
  end;
end;// fnGetGBAndTecDocWareLinks
  
//--============================================================================================--//
procedure apGetMgrWaresDataAnalitics (UserID: integer; var lstBodyMail: TStringList;
                                      var FName, Subj, ContentType, s: string; aThreadData: TThreadData);
const nmProc = 'apGetMgrWaresDataAnalitics';
      RepType = 16;
      cnXmlName = 'TableData.txt';
var
  DataList: TObjectList;
  TypeSys, i, Role, icount: Integer;
  Wares: TStringList;
  CellStylesArray: TXmlCellStylesArray;
  HeaderStyle, OddRowStyle, EvenRowStyle: TXmlReportStyle;
  Columns: Tas;
  PathFile, textData, ss: string;
  XmlDoc, TxtF: TextFile;
  ColWidth: Tai;
  Ware: TWareInfo;
  OddFlag, stopped: boolean;
//  timerStart, timer: TDateTime;
  Percent, PPercent: real;//vv
begin
//timer:= Now;
//timerStart:= Now;
//prMessageLOGS('-----------------Export16--------------------','Log_prg.log' , false);
  PPercent:=0;
  icount:= 0;
  stopped:= false;
  CellStylesArray:= TXmlCellStylesArray.Create;
  try
    SetLength(ColWidth, 0);

    Role:= fnPrimaryUserRole(UserID, TypeSys);

    if Role = 9 then begin
      for i:= 0 to High(Cache.arWareInfo) do begin
        if not Cache.WareExist(i) then Continue;
        Ware:= Cache.arWareInfo[i];
        if Ware.ManagerID <> UserID then
          Continue;
        if (Ware.IsAUTOWare) and (not Ware.IsMOTOWare) then begin
          TypeSys:= constIsAuto;
          Break;
        end;
        if (Ware.IsMOTOWare) and (not Ware.IsAUTOWare) then begin
          TypeSys:= constIsMoto;
          Break;
        end;
      end;

    end else if Role = 19 then begin
      TypeSys:= constIsAuto;
    end;

    if not fnUserRolesEntree(RepType, fnGetUserRoles(UserID)) then begin
      Wares:= Cache.GetSysManagerWares(TypeSys, UserID);
    end else begin
      Wares:= Cache.GetSysManagerWares(TypeSys);
    end;
//prMessageLOGS('Приготовились'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false);  1%
    try
    ImpCheck.SetProcessPercent( UserID, aThreadData.ID, 1);  

    DataList:= fnGetWareAnaliticsDataObjects(Wares, RepType, Role, TypeSys);

    Percent:= 85;
    if DataList.Count>0 then PPercent:= Percent/ DataList.Count else ImpCheck.SetProcessPercent( UserID, aThreadData.ID, Percent);                          //vv                 
//    prStopProcess(UserID, aThreadData.ID);
    if DataList.Count<1 then
      raise EBOBError.Create('Товаров для анализа нет!');  
                                      
    if DataList.Count > 0 then begin

      HeaderStyle:= CellStylesArray.AddStyle(TXmlReportStyle.Create(cnHeaderCell,
                    'Center', 'Center', [fsBold], cnHeaderText, true, true, cnHeaderBorder));
      OddRowStyle:= CellStylesArray.AddStyle(TXmlReportStyle.Create(cnOddRow,
                    'Left', 'Bottom', [], '', false, true));
      EvenRowStyle:= CellStylesArray.AddStyle(TXmlReportStyle.Create(cnEvenRow,
                     'Left', 'Bottom', [], '', false, true));
      Columns:= TWareAnaliticsData(DataList.Items[0]).GetHeaderData(true, HeaderStyle);
      SetLength(ColWidth, Length(Columns));

      if not GetEmplTmpFilePath(UserID, PathFile, ss) then raise EBOBError.Create(ss); 
      AssignFile (XmlDoc, PathFile+cnXmlName, CP_UTF8);
      try
        try
          Rewrite(XmlDoc);

          OddFlag:= true;
          for i:= 0 to DataList.Count-1 do begin
            if OddFlag then begin
              WriteLn (XmlDoc, string(AnsiToUTF8(TWareAnaliticsData(DataList.Items[i]).GetXmlDataRow(OddRowStyle))));
              OddFlag:= false;
            end else begin
              WriteLn (XmlDoc, TWareAnaliticsData(DataList.Items[i]).GetXmlDataRow(EvenRowStyle));
              OddFlag:=true;
            end;
            inc(icount);
            ImpCheck.SetProcessPercent( UserID, aThreadData.ID, PPercent);                                          
  prStopProcessS(UserID, aThreadData.ID, stopped);
          end;
      except
        on E: EBOBError do begin
          //prMessageLOGS(nmProc+' EBOBError: '+E.Message);
          ss:= E.Message;
        end;
      end;
        finally
          CloseFile(XmlDoc);
        end;
  //prMessageLOGS('Заполнили XmlDoc'+': - '+
  //        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false);
        ImpCheck.SetProcessPercent( UserID, aThreadData.ID, 3);                                   
  //      prStopProcess(UserID, aThreadData.ID);
end;  
      finally

        if icount>0 then begin                                   
          if FileExists(PathFile+cnXmlName) then begin
            //FName:= PathFile+'WareList.xml';
            FName:= PathFile+fnFormRepFileName('16', '.xml', constOpExport);                 
            AssignFile(TxtF ,FName, CP_UTF8);
            try
              Rewrite(TxtF);
              WriteLn(TxtF, cEX_Doc_Begin);
              WriteLn(TxtF, cEX_Workbook_Begin);
              WriteLn(TxtF, CellStylesArray.GetXmlStyles);

              WriteLn(TxtF, fnOpenWorkSheet(fnWrkShtNameSpotter('Товары по состоянию на '+FormatDateTime(cDateTimeFormatY2S, Now()))));

              for i:= 0 to High(ColWidth) do ColWidth[i]:= 20;
              WriteLn (TxtF, fnDeclareXMLcols(ColWidth));

              textData:= '';

              for i:= 0 to High(Columns) do begin

                textData:= textData + Columns[i];
                ImpCheck.SetProcessPercent( UserID, aThreadData.ID, 1);                                                
              end;

              WriteLn (TxtF, textData);
              AssignFile (XmlDoc, PathFile+cnXmlName, CP_UTF8);
              try
                Reset(XmlDoc);
                while not EOF(XmlDoc) do begin
                  ReadLn (XmlDoc, textData);
                  WriteLn (TxtF, textData);
                end;
              finally
                CloseFile(XmlDoc);
              end;
    //prMessageLOGS('Заполнили Xml'+': - '+
    //        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false);     
              ImpCheck.SetProcessPercent( UserID, aThreadData.ID, 1);                                               
    //          prStopProcess(UserID, aThreadData.ID);                                    
              if FileExists(PathFile+cnXmlName) and not SysUtils.DeleteFile(PathFile+cnXmlName) then
                raise EBOBError.Create(MessText(mtkNotDelPrevFile));

              WriteLn (TxtF, fnCloseWorkSheet(fnGetWorkSheetOptions(1,1)));
              WriteLn (TxtF, cEX_Workbook_End);

            finally
              CloseFile(TxtF);
            end;
          end;
          Subj:= 'Список товаров от '+FormatDateTime(cDateTimeFormatY2S, Now());
          ContentType:= XMLContentType;
          lstBodyMail:= TStringList.Create;
          if stopped then lstBodyMail.Add(ss);
          lstBodyMail.Add('В списке проанализировано товаров: '+IntToStr(iCount));
(*          lstBodyMail.Add(' ');
          lstBodyMail.Add('Начало выполнения: '+FormatDateTime(cDateTimeFormatTSnD, timerStart));
          lstBodyMail.Add('Завершение выполнения: '+ FormatDateTime(cDateTimeFormatTSnD,Now));
          lstBodyMail.Add('Общее время выполнения: '+ FormatDateTime('hh:nn:ss',Now-timerStart));      *)
        end;   //if icount>0
      end;   //finally

(*06    end else begin
      EBOBError.Create('Товаров для анализа нет!'); 
    end;  *)

(*    Subj:= 'Список товаров от '+FormatDateTime(cDateTimeFormatY2S, Now());
    ContentType:= XMLContentType;
    lstBodyMail:= TStringList.Create;
    lstBodyMail.Add('В списке проанализировано '+IntToStr(DataList.Count)+' товаров.');
    lstBodyMail.Add(' ');
    lstBodyMail.Add('Начало выполнения: '+FormatDateTime(cDateTimeFormatTSnD, timerStart));
    lstBodyMail.Add('Завершение выполнения: '+ FormatDateTime(cDateTimeFormatTSnD,Now));
    lstBodyMail.Add('Общее время выполнения: '+ FormatDateTime('hh:nn:ss',Now-timerStart));   *) 
  except
    on E: Exception do begin
      prMessageLOGS(nmProc+' Exception: '+E.Message);
    end;
    on E: EBOBError do begin
      prMessageLOGS(nmProc+' EBOBError: '+E.Message);
    end;
  end;
  prFree (Wares);
  prFree (DataList);
  SetLength(Columns, 0);
  SetLength(ColWidth, 0);
//prMessageLOGS('Время всего '+': - '+
//        FloatToStr(RoundTo((Now-timerStart)*60*60*24,-5))+' сек','Log_prg.log' , false);  
end;

//--============================================================================================--//

procedure apGetWareNodeLines (UserID: integer; var lstBodyMail: TStringList;        //report31
  var FName, Subj, ContentType, s: string; ThreadData: TThreadData; pNodes: String = ''; pModels: String = '');
const
  nmProc = 'apGetWareNodeLines';
  ImpType = 31;
  cnXmlName = 'WareNodesData.txt';
var
  i, j, k, ii, jj, p, l, CurrentDepth, MaxDepth, TypeSys, MaxUsage: integer;
  IBORDQuery: TIBSQL;
  IBORD: TIBDatabase;
  TreeList, FullTreeList, WareList: TStringList;
  ExtNodesList: TObjectList;
  ExtNode, ExtNode1: TExtendedAutoTreeNode;
  Node: TAutoTreeNode;
  Ware: TWareInfo;
  NodeNames: tas;
  parentNodes: array of TExtendedAutoTreeNode;
  success: boolean;
  PathFile, textData, se: string;
  XmlDoc, TxtF: TextFile;
  WareRecords: arTai;
  DupNodes: Tai;
//  timerStart, 
  timer: TDateTime;
  percent: real;
begin
timer:= Now;
//timerStart:= Now;
//prMessageLOGS('-----------------Export31--------------------','Log_prg.log' , false);
  SetLength (WareRecords, 0);
  CurrentDepth:= 0;
  ExtNode1:= nil;
  IBORD:= nil;
  IBORDQuery:= nil;
  TreeList:=nil;
  FullTreeList:=nil;
  WareList:=nil;
  MaxDepth:= 0;  
    //здесь будет храниться максимальное используемое число узлов для одного товара
  MaxUsage:= 0;  
try  
  try
    if not GetEmplTmpFilePath(UserID, PathFile, se) then raise EBOBError.Create(se); 
    ExtNodesList:= TObjectList.Create(true);
    TypeSys:= constBegTypeSys+1;
    lstBodyMail:= TStringList.Create;

//    se:= 'Не удалось получить выборку из базы.';

    TreeList:= TStringList.Create;
    j:= 0;
   
    while TypeSys < constEndTypeSys do try
      CurrentDepth:= 0;
      SetLength(parentNodes, 20);

      FullTreeList:= Cache.FDCA.AutoTreeNodesSys[TypeSys].NoteGetTree;
      TreeList.Capacity:= TreeList.Capacity+FullTreeList.Capacity;
      with FullTreeList do for i:= 0 to Count-1 do begin
        Node:= TAutoTreeNode(Objects[i]);
        if Node.Visible then begin
 //       if Node.ID <> Node.MainCode then begin
          TreeList.AddObject(IntToStr(Node.ID), Objects[i]);
 //       end;
          inc(j);
        end;// if Node.Visible then begin
      end;// with FullTreeList do begin
      inc(TypeSys);
    finally
      prFree(FullTreeList);
    end;
    TreeList.Capacity:= j;
    with TreeList do for i:= 0 to (Count-1) do begin
      TestCssStopException;

      ExtNode:= TExtendedAutoTreeNode.Create((TAutoTreeNode(Objects[i])), TAutoTreeNode(Objects[i]).TypeSys);
      ExtNodesList.Add(ExtNode);
      ExtNode:= TExtendedAutoTreeNode(ExtNodesList[i]); 

      if (ExtNode.Link.ParentID < 1) then begin
        CurrentDepth:= 0;
        parentNodes[CurrentDepth]:= ExtNode;
        ExtNode.Depth:= CurrentDepth;
        ExtNode.ParentNode:= nil;
      end else begin
        if (i>0) then ExtNode1:= TExtendedAutoTreeNode(ExtNodesList[i-1]); 
        if (i>0) and (ExtNode.Link.ParentID = ExtNode1.Link.ParentID) then begin
          parentNodes[CurrentDepth]:= ExtNode;
          ExtNode.Depth:= CurrentDepth;
          ExtNode.ParentNode:= ExtNode1.ParentNode;
        end else begin
          success:= false;
          for j:= 0 to CurrentDepth do begin
            if (ExtNode.Link.ParentID = parentNodes[j].Link.ID) then begin
              ExtNode.ParentNode:= parentNodes[j];
              CurrentDepth:= j+1;
              parentNodes[CurrentDepth]:= ExtNode;
              ExtNode.Depth:= CurrentDepth;
              if MaxDepth < CurrentDepth then MaxDepth:= CurrentDepth;
              success:= true;
              Break;
            end;
          end;
          if not success then Raise Exception.Create('Ситуация "3"...');
        end;
      end;
    end;// with TreeList do for i:= 0 to (Count-1) do begin

    SetLength(WareRecords, Length(Cache.arWareInfo));
    for i:= 0 to High(WareRecords) do SetLength(WareRecords[i], 0);

//-------------------------------------------- // 
    try
      IBORD:= cntsORD.GetFreeCnt;
      IBORDQuery:= fnCreateNewIBSQL(IBORD, 'Query_'+nmProc, -1, tpRead, true);
      IBORDQuery.ParamCheck:= False;
      IBORDQuery.SQL.Add('execute block returns (ldmwwarecode integer, ldemtrnacode integer) as begin');
      IBORDQuery.SQL.Add('  for select wowarecode FROM wareoptions WHERE (not woarhived = "T")');
      IBORDQuery.SQL.Add('    ORDER BY wowarecode into :ldmwwarecode');
      IBORDQuery.SQL.Add('  do if (exists ( select * from linkdetmodware');
      IBORDQuery.SQL.Add('    where ldmwwarecode = :ldmwwarecode and ldmwwrong = "F" )) then begin');
      IBORDQuery.SQL.Add('    for select ldemtrnacode from linkdetmodware');
      IBORDQuery.SQL.Add('      INNER JOIN linkdetailmodel ON ldemcode = ldmwldemcode and ldemwrong ="F"');
      IBORDQuery.SQL.Add('      where ldmwwarecode = :ldmwwarecode and ldmwwrong = "F" GROUP BY ldemtrnacode');
      IBORDQuery.SQL.Add('    into :ldemtrnacode do suspend; end end');
      IBORDQuery.ExecQuery;
//-------------------------------------------- // 
//prMessageLOGS('Выполнили запрос '+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false);
      impCheck.SetProcessPercent(UserId,ThreadData.ID,5);
      prStopProcess(UserID, ThreadData.ID);                                    
      while not IBORDQuery.Eof do begin
        TestCssStopException;
        j:= IBORDQuery.FieldByName('ldmwwarecode').AsInteger;
        p:= Length(WareRecords[j]);
        SetLength(WareRecords[j], p+1);
        WareRecords[j][p]:= IBORDQuery.FieldByName('ldemtrnacode').AsInteger;

        k:= TreeList.IndexOf(IntToStr(WareRecords[j][p-1]));
        if k>-1 then begin
          SetLength (DupNodes, 0);
          Node:= TAutoTreeNode(TreeList.Objects[k]);
          DupNodes:= Cache.FDCA.AutoTreeNodesSys[Node.TypeSys].GetDuplicateNodeCodes(Node.ID, true);
          try
            l:= Length(DupNodes);
            if l>0 then begin
              SetLength(WareRecords[j], Length(WareRecords[j])+l);
              for i:= 0 to High(DupNodes) do begin
                WareRecords[j][p+i+1]:= DupNodes[i];
                DupNodes[i]:= 0;    //и тут же очищаем полученное значение:
              end;
            end;
          finally
            SetLength (DupNodes, 0);
          end;
          p:= Length(WareRecords[j]);
          if p>MaxUsage then MaxUsage:= p;

        end else
          prMessageLOGS(nmProc+': Ситуация 12. '+IntToStr(WareRecords[j][p-1]), 'Import_test', false);

        IBORDQuery.Next;
      end;
//-------------------------------------------- // 
      IBORDQuery.Close;
//prMessageLOGS('Обработали запрос '+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false);  
    impCheck.SetProcessPercent(UserId,ThreadData.ID,52);
    prStopProcess(UserID, ThreadData.ID);                                                
    finally
      prFreeIBSQL(IBORDQuery);
      cntsORD.SetFreeCnt(IBORD, True);
    end;
//-------------------------------------------- // 

    AssignFile(TxtF, PathFile+cnXmlName, CP_UTF8);

  //Получим из кэша список товаров по брендам
    WareList:= Cache.GetSysManagerWares;
    try
      Rewrite(TxtF);
      percent:= 37;
      if WareList.Count>0 then percent:= percent/WareList.Count else impCheck.SetProcessPercent(UserId,ThreadData.ID,percent);      
      for i:= 0 to (WareList.Count-1) do begin
        TestCssStopException;
        prStopProcess(UserID, ThreadData.ID);                                    
        textData:= '';
        Ware:= Cache.GetWare(integer(WareList.Objects[i]));
        if (not Ware.IsArchive) and (not Ware.IsINFOgr) then begin
          textData:= textData+'<Row>'+
                     fnGenerateXMLcell(WareList[i])+
                     fnGenerateXMLcell(Ware.WareBrandName)+
                     fnGenerateXMLcell(Ware.PgrName)+
                     fnGenerateXMLcell(Ware.Comment);
          l:= Length(WareRecords[Ware.ID]);
          if l > 0 then begin
            for j:= 0 to l-1 do begin
              k:= TreeList.IndexOf(IntToStr(WareRecords[Ware.ID][j]));
              if k>-1 then begin
                //Node:= TAutoTreeNode(TreeList.Objects[k]);
                ExtNode:= TExtendedAutoTreeNode(ExtNodesList[k]);
                textData:= textData + fnGenerateXMLcell(fnIfStr(ExtNode.NodeSys = constIsAuto, 'A', 'M'));
                NodeNames:= ExtNode.GetAllParentNames;
                for ii:= 0 to High(NodeNames) do
                  textData:= textData+fnGenerateXMLcell(NodeNames[ii]);
                for ii:= Length(NodeNames) to MaxDepth do
                  textData:= textData+'<Cell></Cell>';
                SetLength(NodeNames, 0);

              end else
                prMessageLOGS(nmProc+'! У товара "'+Ware.Name+'" (код: '+IntToStr(Ware.ID)+
                  ') есть привязки к скрытым или неконечным узлам!'#10+'В частности к узлу с кодом: '+
                  IntToStr(WareRecords[Ware.ID][j]), 'Import', false);
            end;
          end;
          textData:= textData+'</Row>';
          WriteLn (TxtF, textData);
        end;
        impCheck.SetProcessPercent(UserId,ThreadData.ID,percent);      
      end;
    finally
      CloseFile(TxtF);
      WareList.Clear;
    end;
//prMessageLOGS('обработали список товаров по брендам '+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false);    
  except
    on E: EStopError do s:= E.Message;
    on E:Exception do prMessageLOGS(nmProc+': '+se+'. '+E.Message,'Import', false);
  end;
finally
    if FileExists(PathFile+cnXmlName) then begin
      //FName:= PathFile+'WareNodesList.xml';
      FName:= PathFile+fnFormRepFileName('31', '.xml', constOpExport);                 
      AssignFile(XmlDoc, FName, CP_UTF8);
      try
        Rewrite(XmlDoc);
        WriteLn(XmlDoc, cEX_Doc_Begin);
        WriteLn(XmlDoc, cEX_Workbook_Begin);
        WriteLn(XmlDoc, fnOpenWorkSheet(fnWrkShtNameSpotter('Товары по состоянию на '+FormatDateTime(cDateTimeFormatY2S, Now()))));
(*
        for i:= 0 to High(ColWidth) do ColWidth[i]:= 20;
        WriteLn (TxtF, fnDeclareXMLcols(ColWidth));
        textData:= '';
        for i:= 0 to High(Columns) do textData:= textData + Columns[i];
*)
        textData:= '';
        ii:= 1;
        textData:= '<Row>'+fnGenerateXMLcell('Наименование', nil, '', '', 1)+
                           fnGenerateXMLcell('Бренд', nil, '', '', 1)+
                           fnGenerateXMLcell('Группа', nil, '', '', 1)+
                           fnGenerateXMLcell('Описание', nil, '', '', 1)+
                           fnGenerateXMLcell('Группировка '+IntToStr(ii), nil, '', '',0, MaxDepth+1);     //vv 0
        if MaxUsage > 1 then for i:= 1 to MaxUsage do begin
          inc(ii);
          textData:= textData+fnGenerateXMLcell('Группировка '+IntToStr(ii), nil, '', '',0,  MaxDepth+1);  // vv 0
        end;
        textData:= textData+'</Row>';
        WriteLn (XmlDoc, textData);
//prMessageLOGS('Заплнили шапку '+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false);
        textData:= '<Row><Cell ss:Index="5"></Cell>';
        jj:= 1;
        while jj <= MaxDepth+1 do begin
          case jj of
            1: begin
                textData:= textData+fnGenerateXMLcell('Узел');
                ii:= 1;
              end;
            2..9: begin
                textData:= textData+fnGenerateXMLcell('Подузел '+IntToStr(ii));
                inc(ii);
              end;
          end;
          inc(jj);
        end;

        if MaxUsage > 1 then
          for i:= 1 to MaxUsage do begin
            jj:= 0;
            while jj <= MaxDepth+1 do begin
              case jj of
                0: textData:= textData+'<Cell></Cell>';
                1: begin
                    textData:= textData+fnGenerateXMLcell('Узел');
                    ii:= 1;
                  end;
                2..9: begin
                    textData:= textData+fnGenerateXMLcell('Подузел '+IntToStr(ii));
                    inc(ii);
                  end;
              end;
              inc(jj);
            end;
          end; // for i:= 1 to MaxUsage do begin
        textData:= textData+'</Row>';
        WriteLn (XmlDoc, textData);

        textData:= '';
        AssignFile (TxtF, PathFile+cnXmlName, CP_UTF8);
        try
          Reset(TxtF);
          while not EOF(TxtF) do begin
            ReadLn (TxtF, textData);
            WriteLn (XmlDoc, textData);
          end;
        finally
          CloseFile(TxtF);
        end;
//prMessageLOGS('Заполнили XML '+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false);
        if FileExists(PathFile+cnXmlName) and not SysUtils.DeleteFile(PathFile+cnXmlName) then
          raise EBOBError.Create(MessText(mtkNotDelPrevFile));

        WriteLn (XmlDoc, fnCloseWorkSheet(fnGetWorkSheetOptions(1,2)));
        WriteLn (XmlDoc, cEX_Workbook_End);
      finally
        CloseFile(XmlDoc);
      end;
    end;

    Subj:= 'Отчет по товарам с привязкой к узлам.'+FormatDateTime(cDateTimeFormatY2S, Now());
    ContentType:= XMLContentType;
    lstBodyMail.Add('См. приложенный файл. ');
(*    lstBodyMail.Add(' ');
    lstBodyMail.Add(' ');
    lstBodyMail.Add('Начало выполнения: '+FormatDateTime(cDateTimeFormatTSnD, timerStart));
    lstBodyMail.Add('Завершение выполнения: '+ FormatDateTime(cDateTimeFormatTSnD,Now));
    lstBodyMail.Add('Общее время выполнения: '+ FormatDateTime('hh:nn:ss',Now-timerStart));    *)


  prFree(TreeList);
  prFree(WareList);
  prFree(ExtNodesList);
  for i:= 0 to High(WareRecords) do SetLength(WareRecords[i], 0);
  SetLength(WareRecords, 0);
  SetLength(parentNodes, 0);
  SetLength (DupNodes, 0);
end;
//prMessageLOGS('Время всего '+': - '+
//        FloatToStr(RoundTo((Now-timerStart)*60*60*24,-5))+' сек','Log_prg.log' , false);  
end;
//--============================================================================================--//

procedure apImportAutoWares(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,       // import20
   ContentType: string; aThreadData: TThreadData);
const nmProc = 'apImportAutoWares'; // имя процедуры/функции
   ModelsSRC = 'Models.xls';
     OilsSRC = 'Oils.xls';
    cnDefVal = -100;
    cnDefQty = '0';
var
  XL: TExcelApplication;
  WorkBook: Excel_TLB._Workbook;
  WorkSheet: Excel_TLB._Worksheet;
  usedRng: Range;
  isGreenCell, isWarningCell, isErrorCell, isHeaderCell, SheetID, SheetCount: integer;
  nodes, rows, recs, i, j, k, l, m, n, tdp, TypeSys, {garbage, Collector,} iCode: integer;
  nodeID, ModelID, wareID, ResCode, TasCount, AddLink2Count, UpdLink2Count: integer;
  AddWareCount, AddUsageClause, UpdUsageClause, ErrCount: integer;
  Unzipped, WorkFolder, ModelsFile, OilsFile, str, SheetName, MsgStr: string;
  ss, FNameI, err, ModelName, nodeName, wareQty, WareName, UsageClauseName, UsageClauseValue: string;
  Link2isExists, Link3isExists: boolean;
  SomeStringList, ManufList, TreeList, ManufModelsWithTDCodes: TStringList;
  ModelsLists, ErrMsg: TASL;
  Wares_Ar: Tai;
  LogStr, AddWares: Tas;
  TDCodes, MlNames: OleVariant;
//  Ware: TWareInfo;
  ml: integer;   
  usedRngC: Range;  
//  tusedRng: OleVariant; 
  ErrPos: string; 
  Percent, PPercent: real;
begin
  l:= 0;
  ss:='';
  isGreenCell:= 0;
  isWarningCell:= 0;
  isErrorCell:= 0;
  ErrCount:= 0;
  SetLength (ErrMsg, 0);
//  SomeStringList:=nil;
  ManufList:= nil;
  TreeList:= nil;
  ManufModelsWithTDCodes:= nil;
  lstBodyMail:= TStringList.Create;
(*
//============================================================ распаковка архива
function zmExtractFiles(nfzip,files: String; exDir: String=''; fDel: Boolean=False; zm: TZipMaster=nil): String;
// nfzip - имя файла архива, exDir - в какую папку, возвращает сообщение об ошибке
//  files - список файлов через запятую, если пустая строка - все
*)

  SysUtils.CreateDir(ExtractFileDir(FName));
  WorkFolder:= ExtractFileDir(FName);
  try
    if FileExists(WorkFolder +'\'+ ModelsSRC) then  SysUtils.DeleteFile(WorkFolder +'\'+ ModelsSRC);
    if FileExists(WorkFolder +'\'+ OilsSRC) then  SysUtils.DeleteFile(WorkFolder +'\'+ OilsSRC);
    if (FileExists(WorkFolder +'\'+ ModelsSRC)) or  (FileExists(WorkFolder +'\'+ OilsSRC))
      then raise EBOBError.Create('Файлы Models.xls и/или Oils.xls уже используются.') ;      
  except
    on E: Exception do begin
      prMessageLOGS(nmProc+': '+'Файлы Models.xls и/или Oils.xls уже используются.', 'Import', false);
      raise EBOBError.Create('Файлы Models.xls и/или Oils.xls уже используются.') ;      
    end;
  end;  
  Unzipped:= zmExtractFiles (FName, '', WorkFolder);
//  SysUtils.DeleteFile(FName);
// function fnTestExistsFiles(shablon: String; path: String=''): String;
  ModelsFile:= WorkFolder +'\'+ ModelsSRC;
  OilsFile:= WorkFolder +'\'+ OilsSRC;
  try 
   if not (FileExists(ModelsFile)) or not(FileExists(OilsFile)) then ErrPos:= 'Ошибка!!! Распаковка файлов не произошла! Проверьте исходный файл.'
  except
    on E: Exception do begin
      prMessageLOGS(nmProc+': '+ErrPos, 'Import', false);
      raise EBOBError.Create('Файлы Models.xls и Oils.xls уже используются.') ;      
    end;
  end;  
  try  
    //try
  //-=Модуль опеределия типа системы
      TypeSys:= fnTypeSysDecision(UserID);
  //=-тип системы определен. Если поедем дальше, "все чьотко" (с) группа "Браты Гадюкины"
      XL:= TExcelApplication.Create(nil);
      WorkBook:= nil;
  //--== Инициализируем работу экземпляра Excel
      CoInitializeEx(nil, COINIT_MULTITHREADED);
      XL.ConnectKind:= ckNewInstance;
      XL.Connect;
      XL.Visible[lcid]:= False;
      //XL.AutoQuit:= False;
      XL.ScreenUpdating[lcid]:= False;
      XL.DisplayAlerts[lcid]:= False;
      XL.Calculation[lcid]:= xlManual;
  //    XL.AlertBeforeOverwriting[lcid]:= false;
   // отменяем автоматическую проверку ошибок в ячейках
      with XL.ErrorCheckingOptions do begin
        BackgroundChecking:= False;
        NumberAsText:= False;
        InconsistentFormula:= False;
      end;
      ImpCheck.SetProcessPercent( UserID, aThreadData.ID, 1);                           
   // открываем импортируемый файл
      try
        if Assigned(XL) and (not Assigned(WorkBook)) then begin
   
          WorkBook:= XL.Workbooks.Open (ModelsFile,     // 1// const Filename: WideString;
                                         0,              // 2// UpdateLinks: OleVariant;
                                         false,          // 3// ReadOnly: OleVariant;
                                         EmptyParam,     // 4// Format: OleVariant;
                                         EmptyParam,     // 5// Password: OleVariant;
                                         EmptyParam,     // 6// WriteResPassword: OleVariant;
                                         true,           // 7// IgnoreReadOnlyRecommended: OleVariant;
                                         EmptyParam,     // 8// Origin: OleVariant;
                                         5,              // 9// Delimiter: OleVariant;
                                         False,          //10// Editable: OleVariant;
                                         false,          //11// Notify: OleVariant;
                                         EmptyParam,     //12// Converter: OleVariant;
                                         EmptyParam,     //13// Local: OleVariant;
                                         EmptyParam,     //14// CorruptLoad: OleVariant;
                                         false,          //15// AddToMru: OleVariant;
                                         lcid);          //16// lcid: Integer): Workbook; safecall;
          ImpCheck.SetProcessPercent( UserID, aThreadData.ID, 2);                                                              
    //==-- импортируемый Excel-файл готов к обработке
          SomeStringList:= Cache.FDCA.Manufacturers.GetSortedList(TypeSys);

          ManufList:= TStringList.Create;
          recs:= someStringList.Count;
          ManufList.Capacity:= recs;
          for i:= 0 to recs-1 do
            ManufList.AddObject(AnsiUpperCase(someStringList.Strings[i]), SomeStringList.Objects[i]);
          ImpCheck.SetProcessPercent( UserID, aThreadData.ID, 1);                          
          SheetCount:= WorkBook.Worksheets.Count;
          SheetID:= 1;
          while SheetID <= SheetCount do begin
            WorkSheet:= WorkBook.Sheets.Item[SheetID] as Excel_TLB._Worksheet;
            SheetName:= AnsiUpperCase(WorkSheet.Name);
            m:= ManufList.IndexOf(SheetName);
            if m >-1 then begin
              k:= TManufacturer(ManufList.Objects[m]).ID;
              if High(ModelsLists)<k then SetLength(ModelsLists, k+1);
              if ModelsLists[k]=nil then ModelsLists[k]:= TStringList.Create;
            //перевод указателя на последнюю используемую ячейку листа
              usedRng:= WorkSheet.Range['A1', EmptyParam].SpecialCells(xlCellTypeLastCell,EmptyParam);
              rows:= usedRng.Row;
            //получаем массив кодов моделей в TecDoc
              usedRng:= WorkSheet.Range['D2', 'D'+IntToStr(rows+1)];  //+1 (для одной записи не формируется вариантный массив)
              TDCodes:= usedRng.Value[xlRangeValueDefault];
            //получаем массив наименований моделей в каталоге
              usedRng:= WorkSheet.Range['G2', 'G'+IntToStr(rows+1)];
              MlNames:= usedRng.Value[xlRangeValueDefault];
              for i:= VarArrayLowBound(MlNames,1) to VarArrayHighBound(MlNames,1)-1 do begin      //убираем последнюю (+1)фиктивную строку
//                prStopProcess(UserID, aThreadData.ID);                                                     
                str:=  AnsiUpperCase(Trim(VarToStr(MlNames[i,1])));
                if str<>'' then try
                  iCode:= StrToIntDef(TDCodes[i,1], -100500);
                  ModelsLists[k].AddObject(str, pointer(iCode));
                except
                  on E: Exception do begin
                    err:= E.Message;
                    prMessageLOGS(err+#10+'i = '+IntToStr(i)+#10+str+#10+VarToStr(TDCodes[i,1]),'Import', false);
                  end;
                end;
              end;
              MlNames:= Unassigned;
              TDCodes:= Unassigned;
            end;
            inc(SheetID);
          end;
        end;
        ImpCheck.SetProcessPercent( UserID, aThreadData.ID, 1);                           
    //--== закрываем файл-источник с указанием на модели в DBOrder-е
        WorkBook.CheckCompatibility:= false;
        //WorkBook.Save(lcid);
        //XL.Workbooks.Close(lcid);
        WorkBook.Close(false, ModelsFile, EmptyParam, lcid);
        XL.Workbooks.Close(lcid);
      except
        on E: Exception do begin
          prMessageLOGS(nmProc+': '+'Ошибка работы с файлом Models.xls. Проверьте содержимое '+ExtractFileName(FName)+' '+E.Message, 'Import', false);
          raise EBOBError.Create('Ошибка работы с файлом Models.xls. Проверьте содержимое '+ExtractFileName(FName)) ;      
        end;
      end;
  //vv 1208    SysUtils.DeleteFile(ModelsFile);
  //==-- закрыли
//      prStopProcess(UserID, aThreadData.ID);   
                                        
  //--== открываем файл-источник с данными для связок
    if Assigned(XL) then begin
      try
        WorkBook:= XL.Workbooks.Open (OilsFile,       // 1// const Filename: WideString;
                                         0,              // 2// UpdateLinks: OleVariant;
                                         false,          // 3// ReadOnly: OleVariant;
                                         EmptyParam,     // 4// Format: OleVariant;
                                         EmptyParam,     // 5// Password: OleVariant;
                                         EmptyParam,     // 6// WriteResPassword: OleVariant;
                                         true,           // 7// IgnoreReadOnlyRecommended: OleVariant;
                                         EmptyParam,     // 8// Origin: OleVariant;
                                         5,              // 9// Delimiter: OleVariant;
                                         False,          //10// Editable: OleVariant;
                                         false,          //11// Notify: OleVariant;
                                         EmptyParam,     //12// Converter: OleVariant;
                                         EmptyParam,     //13// Local: OleVariant;
                                         EmptyParam,     //14// CorruptLoad: OleVariant;
                                         false,          //15// AddToMru: OleVariant;
                                         lcid);          //16// lcid: Integer): Workbook; safecall;
      except
        on E: Exception do begin
          prMessageLOGS(nmProc+': '+'Ошибка открытия файла Oils.xls. Проверьте содержимое '+ExtractFileName(FName), 'Import', false);
          raise EBOBError.Create('Ошибка открытия файла Oils.xls. Проверьте содержимое '+ExtractFileName(FName)) ;      
        end;
      end;                                       
  //==--
        ImpCheck.SetProcessPercent( UserID, aThreadData.ID, 1);                          
      try
        SheetID:= 1;
        SheetCount:= WorkBook.Worksheets.Count;
      //Получим дерево узлов по типу системы
        TreeList:= Cache.FDCA.AutoTreeNodesSys[TypeSys].NoteGetTree;
        nodes:= TreeList.Count-1;
        for i:= 0 to nodes do
          TreeList.Strings[i]:= TAutoTreeNode(TreeList.Objects[i]).NameSys;

        isGreenCell:= cHexToInt(cnGreenCell);
        //isBorderGreenCell:= cHexToInt(cnGreenBorderedCell);
        isHeaderCell:= cHexToInt(cnHeaderCell);
        isWarningCell:= cHexToInt(cnYellowCell);
        isErrorCell:= cHEXtoINT(cnRedCell);
        //isCellBorder:= cHEXtoINT(cnCellBorder);

        SetLength(AddWares, 1000);
        TasCount:= 0;
        Percent := 70;                                                                   
        if SheetCount>0 then Percent:= Percent/ SheetCount else ImpCheck.SetProcessPercent( UserID, aThreadData.ID, Percent);     
        while SheetID <= SheetCount do begin
          WorkSheet:= WorkBook.Sheets.Item[SheetID] as Excel_TLB._Worksheet;
          SheetName:= AnsiUpperCase(WorkSheet.Name);
          AddLink2Count:= 0;
          UpdLink2Count:= 0;
          AddWareCount:= 0;
          AddUsageClause:= 0;
          UpdUsageClause:= 0;
          m:= ManufList.IndexOf(SheetName);
          if Length(ErrMsg) <= SheetID then begin
            SetLength(ErrMsg, Length(ErrMsg)+1);
            l:= Length(ErrMsg)-1;
            ErrMsg[l]:= TStringList.Create;
          end;        
          if m >-1 then begin
            k:= TManufacturer(ManufList.Objects[m]).ID;
            if (ModelsLists[k] <> nil) and (ModelsLists[k].Count>0) then begin
  //            recs:= ModelsLists[k].Count-1;
            //Добавим в массив логов ошибок еще один элемент, запомним в "l" его индекс
  (* vv 0908            if Length(ErrMsg) <= SheetID then begin
                SetLength(ErrMsg, Length(ErrMsg)+1);
                l:= Length(ErrMsg)-1;
                ErrMsg[l]:= TStringList.Create;
              end;  *)
            //Получим список моделей данного производителя по типу системы
          //Получим список моделей данного производителя с кодами TecDoc
              ManufModelsWithTDCodes:= fnGetModelsListWithTDCodes(TManufacturer(ManufList.Objects[m]).ID);
              usedRng:= WorkSheet.Range['A1', EmptyParam].SpecialCells(xlCellTypeLastCell,EmptyParam);
              rows:= usedRng.Row;
              if rows>0 then PPercent:= Percent/ (rows-1) else ImpCheck.SetProcessPercent( UserID, aThreadData.ID, Percent);            
            //вычитываем данные с листа со "связками 2,3"
              i:= 2;
              while i <= rows do begin
                prStopProcess(UserID, aThreadData.ID);                                                     
                //TestCssStopException;
              //назначаем переменным "код товара", "кол-во", "код узла" значения "по умолчанию"
                ModelID:= cnDefVal;
                wareID:= cnDefVal;
                wareQty:= cnDefQty;
              //  prMessageLOGS(SheetName+#9+IntToStr(i), 'Import', false);

              //условия применения
                UsageClauseName:= '';
                UsageClauseValue:= '';
                usedRng:= WorkSheet.Range['A'+IntToStr(i), EmptyParam];
                usedRngC:=usedRng; //vv 0708             
                ModelName:= AnsiUpperCase(usedRng.Value2);

              //проверяем есть ли линковка указанной модели с моделями из DBOrder
                {n}ml:= ModelsLists[k].IndexOf(ModelName);
                if {n}ml>-1 then begin
                  for n:=0 to ModelsLists[k].Count-1 do begin //vv 0608
                    if ModelsLists[k].Strings[n]= ModelName then begin  //vv 0608         
                    //проверяем правильность указанной модели в DBOrder по коду TecDoc
                      tdp:= ManufModelsWithTDCodes.IndexOf(IntToStr(integer(ModelsLists[k].Objects[n])));
                      if tdp >-1 then begin
  //vv 0708                  usedRng.Interior.Color:= isGreenCell;
                        ModelID:= TModelAuto(ManufModelsWithTDCodes.Objects[tdp]).ID;
                      //проверяем есть ли в строке товар для привязки к модели:
                        usedRng:= WorkSheet.Range['H'+IntToStr(i), EmptyParam];
                        WareName:= fnOleXLCellReader(usedRng.Value2);
                        if (WareName <>'') and (usedRngC.Interior.Color <> isGreenCell){vv 0708(usedRng.Interior.Color <> isGreenCell)} then begin
                        //проверяем наличие данного товара в GrossBee
                          Wares_Ar:= fnWareSearchWithValidation(WareName, 'MOTUL');
                        //проверяем корректность указанного узла дерева
                          usedRng:= WorkSheet.Range['D'+IntToStr(i), EmptyParam];
                          nodeName:= fnOleXLCellReader(usedRng.Value2);
                          nodeID:= TreeList.IndexOf(nodeName);
                          if nodeID > -1 then begin
                            nodeID:= TAutoTreeNode(TreeList.Objects[nodeID]).ID;
                          //проверяем указано ли количество для "связки 2"
                            usedRng:= WorkSheet.Range['I'+IntToStr(i), EmptyParam];
                            if (usedRngC.Interior.Color <> isGreenCell){vv 0708 (usedRng.Interior.Color <> isGreenCell)} and
                              (fnOleXLCellReader(usedRng.Value2) <> '') then
                              WareQty:= fnOleXLCellReader(usedRng.Value2);
                          //считываем значения ячеек с "условиями применения"
                            UsageClauseName:= fnOleXLCellReader(WorkSheet.Range['E'+IntToStr(i), EmptyParam].Value2, false);
                            UsageClauseValue:= fnOleXLCellReader(WorkSheet.Range['F'+IntToStr(i), EmptyParam].Value2, false);

                            if Length(Wares_Ar) > 0 then begin

                              for j:= 0 to High(Wares_Ar) do begin
                                WareID:= Wares_Ar[j];
                              //--=========================
                              // !!! Создаем "СВЯЗКУ 2" !!!
                            ResCode:= resAdded;   //vv 0808   1
                            MsgStr:= Cache.FDCA.CheckModelNodeLinkDup(modelID, nodeID, WareQty, ResCode, soExcel, UserID);
                                Case ResCode of
                                 resError: begin //-1
                                    ErrMsg[SheetID-1].AddObject('Ошибка "2"'#9+'Кол-во по "связке 2" не удалось '+
                                      'занести в базу. '+MsgStr+#9+SheetName+#9+'I'+IntToStr(i), pointer(-7*100000-i));
                                    usedRng.Interior.Color:= isErrorCell;
                                    inc(ErrCount);
                                  end;
                                  resDoNothing: begin  //0
                                    usedRng.Interior.Color:= isGreenCell;
                                    Link2isExists:= True;
                                  end;
                                  resAdded: begin //1
                                    inc(AddLink2Count);
                                    usedRng.Interior.Color:= isGreenCell;
                                    Link2isExists:= True;
                                  end;
                                  resEdited: begin  //2
                                    ErrMsg[SheetID-1].AddObject('Внимание'#9+'Количество в "связке 2" было изменено.'#9+
                                      SheetName+#9+'I'+IntToStr(i), pointer(-10*100000-i));
                                    inc(UpdLink2Count);
                                    usedRng.Interior.Color:= isGreenCell;
                                    Link2isExists:= True;
                                  end;

                                end; //Case ResCode of
                              //==-- создание "связки 2" произведено

                              //--=========================
                              // !!! Создаем "СВЯЗКУ 3" !!!
                                if Link2isExists and (wareID <> cnDefVal) then begin
                                  ResCode:= resAdded;//1
                                  MsgStr:= Cache.FDCA.CheckWareModelNodeLink(wareID, modelID, nodeID, ResCode, soExcel, UserID);
                                  Case ResCode of
                                   resError: begin   //-1
                                      ErrMsg[SheetID-1].AddObject('Ошибка "3"'#9+'Товар "'+WareName+'"не удалось  '+
                                        'добавить в связку. '#10+MsgStr+#9+SheetName+#9+'H'+IntToStr(i), pointer(-9*100000-i));
                                     WorkSheet.Range['H'+IntToStr(i), EmptyParam].Interior.Color:= isErrorCell;
                                      inc(ErrCount);
                                    end;
                                    resDoNothing: begin //0
                                      ErrMsg[SheetID-1].AddObject('Внимание'#9+'Товар "'+Cache.GetWare(WareID).Name+'" уже '+
                                       'присутсвует в данной "связке 3". '#9+SheetName+#9+'H'+IntToStr(i), pointer(-11*100000-i));
                                      WorkSheet.Range['H'+IntToStr(i), EmptyParam].Interior.Color:= isGreenCell;
                                      Link3isExists:= True;
                                    end;
                                    resAdded: begin //1
                                      inc(AddWareCount);
                                      WorkSheet.Range['H'+IntToStr(i), EmptyParam].Interior.Color:= isGreenCell;
                                      if High(AddWares) < TasCount then SetLength(AddWares, Length(AddWares)+1000);
                                      AddWares[TasCount]:= WareName+#9+Cache.GetWare(WareID).Name+#9+
                                        SheetName+#9+Cache.FDCA.Models.Items[ModelID].Name
                                        //+'('+ ModelName+'-'+IntToStr(integer(ModelsLists[k].Objects[n]))+')'//vv 0608
                                        +#9;
                                      inc(TasCount);
                                      Link3isExists:= True;
                                    end;
                                  end;
                                end;
                                (*
        //============================ удаление / добавление условия применения связки 3
        function TDataCacheAdditionASON.CheckWareModelNodeUsage(WareID, ModelID, NodeID: Integer;
                 UsageName, UsageValue: String; var ResCode: Integer; srcID: Integer=0; userID: Integer=0): string;
        const nmProc = 'CheckWareModelNodeUsage';
        // вид операции - ResCode - на входе (resAdded, resDeleted)
        // ResCode на выходе: resError- ошибка, resDoNothing - не менялось, resAdded - добавлено, resDeleted - удалено
        // UsageName - название критерия условия, UsageValue - значение критерия условия
                                *)
                                if Link3isExists then begin
                              //проверим есть ли к данной "связке 3" условия применения
                                  if (UsageClauseName <> '') and (UsageClauseValue <> '') then begin
                                    ResCode:= resAddOrEdit;
                                    MsgStr:= Cache.FDCA.CheckWareModelNodeUsage(wareID, ModelID, nodeID,
                                      UsageClauseName, UsageClauseValue, ResCode, soExcel, UserID);
                                    usedRng:= WorkSheet.Range['E'+IntToStr(i), 'F'+IntToStr(i)];
                                    Case ResCode of
                                     resError: begin  //-1
                                        ErrMsg[l].AddObject('Ошибка'#9+'Не удалось добавить условие применения. '#10+
                                          MsgStr+#9+SheetName+#9+'E'+IntToStr(i), pointer(-8*100000-i));
                                        usedRng.Interior.Color:= isErrorCell;
                                        inc (ErrCount);
                                      end;
                                      resDoNothing: begin  //0
                                        ErrMsg[l].AddObject('Внимание'#9+'Указанное условие применения товара'+
                                         'совпадает с существующим.'#9+SheetName+#9+'E'+IntToStr(i), pointer(-12*100000-i));
                                        usedRng.Interior.Color:= isGreenCell;
                                      end;
                                      resAdded: begin //1
                                        usedRng.Interior.Color:= isGreenCell;
                                        inc (AddUsageClause);
                                      end;
                                      resEdited: begin  //2
                                        usedRng.Interior.Color:= isGreenCell;
                                        inc (UpdUsageClause);
                                      end;
                                    end;
                                  end;
                                end;
                              end; //for j:= 0 to High(Wares_Ar) do begin
                            end else begin
                              ErrMsg[l].AddObject('Ошибка'#9+'Не найдено соответствий товару "'+
                                WareName+'"'+#9+SheetName+#9+'H'+IntToStr(i), pointer(-4*(100000-i)));
                              WorkSheet.Range['H'+IntToStr(i), EmptyParam].Interior.Color:= isErrorCell;
                            end;

                          end else begin //if nodeID > -1 then begin
                            ErrMsg[l].AddObject('Ошибка'#9+'Наименование узла не соответствует ни одному элементу дерева узлов.'#9+
                              SheetName+#9+'D'+IntToStr(i), pointer(-5*100000-i));
                            usedRng.Interior.Color:= isErrorCell;  //красим в красный цвет
                          end;
                          SetLength(Wares_Ar, 0);  
                        end;//if (WareName<>'')+(usedRng.Interior.Color<>GreenCell)
                        //else usedRng.Interior.Color:= isGreenCell;//vv 0708
                      end else begin
                        ErrMsg[l].AddObject('Предупреждение!'#9+'У данного производителя '+
                          'модель "'+ModelsLists[k].Strings[n]+'" с TD-кодом "'+
                          IntToStr(integer(ModelsLists[k].Objects[n]))+'" не найдена в базе DBOrder'#9+
                          SheetName+#9+'A'+IntToStr(i), pointer(-3*100000-i));
                        usedRng.Interior.Color:= isErrorCell;
                      end;
                    end;//vv 0608
                  end; //vv 0608
                  usedRngC.Interior.Color:= isGreenCell;
                end;
                ImpCheck.SetProcessPercent( UserID, aThreadData.ID, PPercent);                                 
                inc(i);
              end;

            end else begin
              ErrMsg[0].AddObject ('Критическая ошибка'#9+
                'Для листа "'+SheetName+'" не найдено списка сопоставляемых моделей, или в нем ' +
                'нет ни одного сопоставления. Оработка данных листа произведена не была.'#9+
                 SheetName+#9+'A1', pointer(-2*100000));
            end;

          end else begin
            ErrMsg[0].AddObject ('Критическая ошибка'#9+
              'Наименование импортируемого листа "'+SheetName+'" не соответствует ни одному ' +
              'производителю в базе! Оработку данных листа произвести не удалось.'#9+
               SheetName+#9+'A1', pointer(-1*100000));
          end;

          ErrMsg[l].AddObject('ОТЧЕТ'+#9+'Лист "'+SheetName+'"'#9+SheetName+#9+'A1', pointer(2*100000));
          ErrMsg[l].AddObject('ИТОГО'#9+'Добавлено "связок 2": '+IntToStr(AddLink2Count)+#9+
            SheetName+#9+'A1', pointer(1*100000));
          lstBodyMail.Add('Добавлено "связок 2": '+IntToStr(AddLink2Count));

          lstBodyMail.Add('Изменено "связок 2": '+IntToStr(UpdLink2Count));
          ErrMsg[l].AddObject('ИТОГО'#9+'Изменено "связок 2": '+IntToStr(UpdLink2Count)+#9+
            SheetName+#9+'A1', pointer(1*100000));

          ErrMsg[l].AddObject('ИТОГО'#9+'Добавлено товаров: '+IntToStr(AddWareCount)+#9+
            SheetName+#9+'A1', pointer(1*100000));
          lstBodyMail.Add('Добавлено товаров: '+IntToStr(AddWareCount));

          lstBodyMail.Add('Добавлено "условий применения": '+IntToStr(AddUsageClause));
          ErrMsg[l].AddObject('ИТОГО'#9+'Добавлено "условий применения": '+IntToStr(AddUsageClause)+#9+
            SheetName+#9+'A1', pointer(1*100000));

          lstBodyMail.Add('Изменено "условий применения": '+IntToStr(UpdUsageClause));
          ErrMsg[l].AddObject('ИТОГО'#9+'Изменено "условий применения": '+IntToStr(UpdUsageClause)+#9+
             SheetName+#9+'A1', pointer(1*100000));

          prFree(ManufModelsWithTDCodes);
          inc(SheetID);
        end;
        SetLength(AddWares, TasCount);
      except
        on E: EStopError do ss:= E.Message;
        on E: Exception do begin
          prMessageLOGS(nmProc+': '+'Ошибка обработки файлов Models.xls и Oils.xls', 'Import', false);
          raise EBOBError.Create('Ошибка обработки файлов Models.xls и Oils.xls') ;      
        end;
      end;        
    end;
  finally      
    // Добавим один новый лист после текущего
    XL.ActiveWorkbook.Sheets.Add(EmptyParam, WorkBook.Sheets.Item[WorkBook.Sheets.Count], 1, xlWorksheet, lcid);
    WorkSheet:= WorkBook.Sheets.Item[WorkBook.Sheets.Count] as Excel_TLB._Worksheet;
    WorkSheet.Name:= 'Импорт от'+FormatDateTime(' dd.mm hh_nn ',Now);
    recs:= 1;
//-=создаем шапку для лога импорта

    WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= 'Статус  сообщения';
    WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= 'Лист';
    WorkSheet.Range['C'+IntToStr(recs), EmptyParam].Value2:= '   Ячейка   ';
    WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= 'Сообщение';
    usedRng:=WorkSheet.Range['A'+IntToStr(recs), 'D'+IntToStr(recs)];
    usedRng.EntireRow.RowHeight:= usedRng.EntireRow.RowHeight*2;
    usedRng.Interior.Color:= isHeaderCell;
    usedRng.Font.Color:= cHEXtoINT(cnHeaderText);
    usedRng.Font.Bold:= True;
    usedRng.HorizontalAlignment:= xlCenter;
    usedRng.VerticalAlignment:= xlCenter;
    usedRng.Borders.Color:= cHEXtoINT(cnHeaderBorder);
    usedRng.BorderAround(xlContinuous, xlHairLine, xlColorIndexAutomatic, EmptyParam, EmptyParam);
    XL.ActiveWindow.SplitRow:= 1;
    XL.ActiveWindow.FreezePanes:= True;
//=-шапка создана
    inc(recs);
    Percent:= 20;                                                                    
    if High(ErrMsg)>-1 then Percent:= Percent/ (High(ErrMsg)+1) else ImpCheck.SetProcessPercent( UserID, aThreadData.ID, Percent); 

    for j:= 0 to High(ErrMsg) do begin
      ErrMsg[j].CustomSort(@SizeCustomSort);
      rows:= ErrMsg[j].Count;
      if rows>0 then PPercent:= Percent/ rows else ImpCheck.SetProcessPercent( UserID, aThreadData.ID, Percent);          
      for i:= 0 to rows-1 do begin
//        prStopProcess(UserID, aThreadData.ID);                                               
        //TestCssStopException;
      //  ErrMsg[j][i]:=IntToStr(j)+'|'+IntToStr(integer(ErrMsg[j].Objects[i]))+'|'+ErrMsg[j][i];
        LogStr:= fnSplitStringChar(ErrMsg[j].Strings[i]);
        try
          ResCode:= trunc((integer(ErrMsg[j].Objects[i]))/100000);
          Case ResCode of
            -12..-10: begin
              WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
              WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
              usedRng:= WorkSheet.Range['C'+IntToStr(recs), EmptyParam];
              usedRng.Value2:= LogStr[3];
              WorkSheet.Hyperlinks.Add(usedRng, '#'''+LogStr[2]+'''!'+LogStr[3], EmptyParam, EmptyParam, EmptyParam);
              WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
              usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
              usedRng.Interior.Color:= isWarningCell;
            end;
            -9..-2: begin
              WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
              WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
              usedRng:= WorkSheet.Range['C'+IntToStr(recs), EmptyParam];
              usedRng.Value2:= LogStr[3];
              WorkSheet.Hyperlinks.Add(usedRng, '#'''+LogStr[2]+'''!'+LogStr[3], EmptyParam, EmptyParam, EmptyParam);
              WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
              usedRng:= WorkSheet.Range['A'+IntToStr(recs), 'D'+IntToStr(recs)];
              usedRng.Interior.Color:= isErrorCell;
            end;
            -1: begin
              WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
              usedRng:= WorkSheet.Range['B'+IntToStr(recs), EmptyParam];
              usedRng.Value2:= LogStr[2];
              WorkSheet.Hyperlinks.Add(usedRng, '#'''+LogStr[2]+'''!'+LogStr[3], EmptyParam, EmptyParam, EmptyParam);
              WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
              usedRng:= WorkSheet.Range['A'+IntToStr(recs), 'D'+IntToStr(recs)];
              usedRng.Interior.Color:= isErrorCell;
            end;
            1..2: begin
              WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
              WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
              usedRng:= WorkSheet.Range['B'+IntToStr(recs), EmptyParam];
              usedRng.Value2:= LogStr[2];
              WorkSheet.Hyperlinks.Add(usedRng, '#'''+LogStr[2]+'''!'+LogStr[3], EmptyParam, EmptyParam, EmptyParam);
              WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
              usedRng:= WorkSheet.Range['A'+IntToStr(recs), 'D'+IntToStr(recs)];
              usedRng.Interior.Color:= isGreenCell;
            end;
          end;
          
          inc (recs);
        finally
          SetLength(LogStr, 0);  
        end;
      end;
    end;

    usedRng:= WorkSheet.Range['A1', 'D'+IntToStr(recs-1)];
    usedRng.Cells.WrapText:= False;
    usedRng.EntireRow.AutoFit;
    usedRng.EntireColumn.AutoFit;
  //Добавляем лист с отчетом о посаженных товарах
    XL.ActiveWorkbook.Sheets.Add(EmptyParam, WorkBook.Sheets.Item[WorkBook.Worksheets.Count], 1, xlWorksheet, lcid);
    WorkSheet:= WorkBook.Sheets.Item[WorkBook.Sheets.Count] as Excel_TLB._Worksheet;
    WorkSheet.Name:= 'Товары от'+FormatDateTime(' dd.mm hh_nn ',Now);
  //добавили...
    recs:= 1;
//-=создаем шапку для лога импорта

    WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= 'Имя по каталогу';
    WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= 'Имя в GrossBee';
    WorkSheet.Range['C'+IntToStr(recs), EmptyParam].Value2:= 'Производитель';
    WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= 'Модель авто';
    usedRng:=WorkSheet.Range['A'+IntToStr(recs), 'D'+IntToStr(recs)];
    usedRng.EntireRow.RowHeight:= usedRng.EntireRow.RowHeight*2;
    usedRng.Interior.Color:= isHeaderCell;
    usedRng.Font.Color:= cHEXtoINT(cnHeaderText);
    usedRng.Font.Bold:= True;
    usedRng.HorizontalAlignment:= xlCenter;
    usedRng.VerticalAlignment:= xlCenter;
    usedRng.Borders.Color:= cHEXtoINT(cnHeaderBorder);
    usedRng.BorderAround(xlContinuous, xlHairLine, xlColorIndexAutomatic, EmptyParam, EmptyParam);
    XL.ActiveWindow.SplitRow:= 1;
    XL.ActiveWindow.FreezePanes:= True;
//=-шапка создана
    inc (recs);

    for i:= 0 to High(AddWares) do begin
//      TestCssStopException;
      if AddWares[i]<>'' then begin
      LogStr:= fnSplitStringChar(AddWares[i]);
      try
        WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
        WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
        WorkSheet.Range['C'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
        WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[3];
        inc(recs);
      finally
        SetLength(LogStr, 0); // 
      end;
      end;
    end;

    usedRng:= WorkSheet.Range['A1', 'D'+IntToStr(recs-1)];
    usedRng.Cells.WrapText:= False;
    usedRng.EntireRow.AutoFit;
    usedRng.EntireColumn.AutoFit;
//--== закрываем файл-источник с данными для связок
    WorkBook.CheckCompatibility:= false;
    WorkBook.Save(lcid);
    WorkBook.Close(false,OilsFile,EmptyParam,lcid);
    SysUtils.DeleteFile(FName);   //vv 1208 
    FName:= OilsFile;
//==-- закрыли

    Subj:= 'Результаты импорта "Свяки 2,3" от '+FormatDateTime(cDateTimeFormatY2S, Now());
    ContentType:= 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
    if ErrCount = 0 then
      lstBodyMail.Add('Все прошло замечательно, все проимпортировалось. Смотреть отчет ' +
        'можно просто для эстетических целей.')
    else
      lstBodyMail.Add('При импорте данных из документа были обнаружены ошибки. ' +
       'Смотрите отчет!');
    lstBodyMail.Add(' ');
    if ss<>'' then lstBodyMail.Add(ss);
    
//  finally
    XL.Workbooks.Close(lcid);
    XL.Quit;// закрыть Excel
    XL.Disconnect;
    CoUnInitialize;
    prFree(XL);
    FNameI:= ExtractFilePath(FName)+fnFormRepFileName(IntToStr(ImpCheck.GetImpType(UserID, aThreadData.ID)), FName, constOpImport);                 
    RenameFile(FName, FNameI);
    FName:= FNameI;
    prFree(TreeList);
    prFree(ManufList);
    SetLength(AddWares, 0);
    for i:= 0 to High(ErrMsg) do if ErrMsg[i]<>nil then prFree(ErrMsg[i]);
    SetLength(ErrMsg, 0);
    for i:= 0 to High(ModelsLists) do
      if ModelsLists[i]<>nil then prFree(ModelsLists[i]);
    SetLength(ModelsLists, 0);
    SetLength(LogStr, 0);
    SysUtils.DeleteFile(ModelsFile);   //vv 1208 
  end;
end;  
//==============================================================================
procedure GetReports30;
const pcDinConnect30_Rep30_7 = 7;
const arCounts: array [0..7] of integer = (pcSearchCount_Rep30_0, pcQtyCount_Rep30_1, pcWareQtyCount_Rep30_2, pcBigQtyCount_Rep30_3, pcConnectCount_Rep30_4,pcConnIPCount_Rep30_5,pcPriLoadCount_Rep30_6,pcDinConnect30_Rep30_7);
      nmProc ='GetReports30';
var ymd: TDate;//TDateTime;
    s, files, nfzip, PathFile, FName, Subj, ContentType, filter_data, sDate: string; 
//    Year, Month, Day: Word;
    i, j, UserID: integer;   
    lstBodyMail, lstBodyMailTmp, lstAttach: TStringList;
    ThreadData: TThreadData;
    timerStart: TDateTime;
begin
//  ThreadData:= nil;
//    ymd:= Trunc(Cache.GetConstItem(pcLastDateTime_Rep30).DateValue)+1;
    timerStart:= Now;
    ymd:= Cache.GetConstItem(pcLastDateTime_Rep30).DateValue+1;
    if (Date - ymd)>8 then ymd:= Date-8;
    
    if ymd>=Date then Exit;
    UserID:= 0;
    ThreadData:= fnCreateThread(thtpStartThread);
    lstAttach := TStringList.Create;
    lstBodyMail:= TStringList.Create;
    lstBodyMailTmp:= TStringList.Create;
  try 
   try
    UserID:= Cache.GetConstItem(pcEmplORDERAUTO).IntValue;
    if not GetEmplTmpFilePath(UserID, PathFile, s) then begin
      fnWriteToLog(ThreadData, lgmsSysError, nmProc, 'Ошибка PathFile(UserID='+IntToStr(UserID)+'): ', s, '');  
      PathFile:= ExtractFilePath(Application.ExeName)+'TMP\';
    end;
    ImpCheck.AddProcess(constOpExport, UserID, 30, ThreadData);
    files:= '';
    s:= '';
    //filter_data:= 'dop_groupby=1'+#13#10+'dop_fromdate='+ DateToStr(ymd)+#13#10+'dop_qty='+'5';//Cache.GetConstItem(pcSearchCount_Rep30_0).StrValue;
//ymd1:=ymd+1;    
    while ymd<Date {ymd1} do begin
      prStopProcess(UserID, ThreadData.ID);     
      for j:= 0 to length(arCounts)-1 do begin
        sDate:= FormatDateTime(cDateFormatY4, ymd);
        FName:= PathFile+fnFormRepFileName('30_'+IntToStr(j)+'('+sDate+')', '.csv', constOpExport);
        //IntToStr(j-1)+'Report_'+FormatDateTime(cDateFormatY4, ymd)+'.csv';
        filter_data:= 'dop_groupby=1'+#10+'dop_fromdate='+sDate+#10+'dop_qty='+Cache.GetConstItem(arCounts[j]).StrValue;
        try
          case j of
            0: fnReportSearchWareMax(UserID, lstBodyMailTmp, FName, Subj, ContentType, ThreadData, filter_data);
            1: fnRepCountRequestLOG(UserID, lstBodyMailTmp, FName, Subj, ContentType, ThreadData, filter_data);
            2: fnRepCountRequestWareLOG(UserID, lstBodyMailTmp, FName, Subj, ContentType, ThreadData, filter_data);
            3: fnRepCountRequestWareQTYLOG(UserID, lstBodyMailTmp, FName, Subj, ContentType, ThreadData, filter_data);
            4: fnConnectCount(UserID, lstBodyMailTmp, FName, Subj, ContentType, ThreadData, filter_data);    
            5: fnConnectIP(UserID, lstBodyMailTmp, FName, Subj, ContentType, ThreadData, filter_data);
            6: fnPriLoadCount(UserID, lstBodyMailTmp, FName, Subj, ContentType, ThreadData, filter_data);
            7: fnDinConnect30(UserID, lstBodyMailTmp, FName, Subj, ContentType, ThreadData, filter_data);
          end;
        except
          on E: Exception do begin
            lstBodyMailTmp.Add(E.Message);
            s:= MessText(mtkNotFoundDataUse);
            if (Pos(s, E.Message)>0) then
              fnWriteToLog(ThreadData, lgmsUserError, nmProc, '', E.Message, '')
            else fnWriteToLog(ThreadData, lgmsSysError, nmProc, '', E.Message, '');
            SysUtils.DeleteFile(FName);
          end;
        end;
        if (lstBodyMailTmp.Count>0) then try   
          for i:= 0 to lstBodyMailTmp.Count-1 do
            lstBodyMail.Add('Отчет 30_'+IntToStr(j)+'.   '+lstBodyMailTmp[i]);
          lstBodyMailTmp.Clear;
          if j<length(arCounts)-1 then lstBodyMail.Add(' ');     
          if (FName<>'') and FileExists(FName) then begin
            files:= files+fnIfStr(files='', '', ',')+FName;    
            //zmAddFilesWithPass(FName+'.zip', FName{, Cache.arEmplInfo[UserID].USERPASSFORSERVER});
            //lstAttach.Add(FName+'.zip');
          end;
          {if (FName<>'') and FileExists(FName) then
          SysUtils.DeleteFile(FName); }
        except
          on E: Exception do
            fnWriteToLog(ThreadData, lgmsSysError, nmProc, 'Ошибка отчета 30_'+IntToStr(j), E.Message, '');
        end; // try
      end; // for j:= 1 to length(arCounts)

      ymd:= ymd+1;   
      lstBodyMail.Add(' ');
    end;
    nfzip:= PathFile+ {'30_Report.zip';} fnFormRepFileName('30', '.zip', constOpExport);       
    if files<>'' then begin
      zmAddFiles(nfzip, files);
      lstAttach.Add(nfzip);
    end;
    //if files='' then lstBodyMail.Add('Превышения указанных значений не обнаружено.');
    lstBodyMail.Add('');
    lstBodyMail.Add('Начало выполнения: '+FormatDateTime(cDateTimeFormatTSnD, timerStart));
    lstBodyMail.Add('Завершение выполнения: '+ FormatDateTime(cDateTimeFormatTSnD,Now));
    lstBodyMail.Add('Общее время выполнения: '+ FormatDateTime('hh:nn:ss',Now-timerStart));
    if (lstBodyMail.Count>0) then begin
      s:= n_SysMailSend(Cache.GetConstEmails(pcEmplID_list_Rep30), 'Пакет отчетов 30', lstBodyMail, lstAttach, '', '', true); 
  //    if (nfzip<>'') and FileExists(nfzip) then SysUtils.DeleteFile(nfzip);
      if (s<>'') and (Pos(MessText(mtkErrMailToFile), s)>0) then // если письмо не записано в файл
        fnWriteToLog(ThreadData, lgmsSysError, nmProc, 'Ошибка рассылки пакета отчетов 30', s, '')
      else Cache.SaveNewConstValue(pcLastDateTime_Rep30, UserID, System.SysUtils.DateToStr(ymd-1)); // меняем только при успешной рассылке  cDateFormatY4
    end;
  except
    on E: Exception do
      fnWriteToLog(ThreadData, lgmsSysError, nmProc, 'Ошибка пакета отчетов 30', E.Message, '');
  end;


  finally
    if Assigned(ThreadData) then ImpCheck.DelProcess(UserID, ThreadData.ID);  
    prFree(lstBodyMail);
    prFree(lstBodyMailTmp);
    prDestroyThreadData(ThreadData, nmProc);
    if (nfzip<>'') and FileExists(nfzip) then SysUtils.DeleteFile(nfzip);
    if files<>'' then begin
      lstAttach.Clear;
      lstAttach:= fnSplit(',', files);
      for i:= 0 to lstAttach.Count-1 do
        if FileExists(lstAttach[i]) then SysUtils.DeleteFile(lstAttach[i]);
    end;
    prFree(lstAttach);
  end;
end;
(*
/------------------------------------------------------------------------------
procedure apReCreateWareDetModPatternFile (aTypeSys: integer; UserID: integer=0; ThreadDataID: integer=0);
const
  nmProc = 'apReCreateWareDetModPatternFile';
  attempts = 3;
var
  PatternDate: TDateTime;
  LstBodyMail: TStringList;
  FName, FNameTmp, FNameMod, FNameModTmp, ss, sSys, s1, s2: string;
  Success: boolean;
  Timer: TDateTime;
  i: integer;
  Year1, Year2, DayOfYear1, DayOfYear2, H, M, S, ms: word;
begin
  i:= 0;
  FNameMod:= '';
  FNameModTmp:= '';
  try
    Success:= false;
    sSys:= fnIfStr(aTypeSys=constIsAuto, 'Auto', 'Moto');
{vv 09.07    if not isFileUnderConstruction[aTypeSys] then begin
      isFileUnderConstruction[aTypeSys]:= true;
    end;}
    try
      lstBodyMail:= TStringList.Create;
      s1:= ExtractFilePath(Application.ExeName);
      s2:= sSys+constWareDetModFileName+'.xlsx';
      FName:= s1+s2;
      FNameTmp:= s1+'Tmp_'+s2;
      SysUtils.DeleteFile(FNameTmp);
      if (aTypeSys=constIsAuto) then begin
        FNameMod:= s1+'m_'+s2;
        FNameModTmp:= s1+'m_Tmp_'+s2;
        SysUtils.DeleteFile(FNameModTmp);
      end;
      if not FileExists(FName) then begin
          i:= 1;
     //   while (not Success) and (i <= attempts) do begin
          try
            apWareDetModFileFormer(aTypeSys, FNameTmp);
          except
            on E: Exception do begin
              prMessageLOGS(nmProc+': '+E.Message, 'Import');
              raise;
         {     if i = attempts then begin
                LstBodyMail.Add('Файл не удалось создать с '+IntToStr(attempts)+' попыток.');
              end else begin
                inc(i);
              end;   }
            end;
          end;
    //    end;

        if FileExists(FNameTmp) then begin
          if not isFileUnderConstruction[aTypeSys] then
          isFileUnderConstruction[aTypeSys]:= true;
          try
            SysUtils.DeleteFile(FName);
            RenameFile(FNameTmp, FName);
            SysUtils.DeleteFile(FNameTmp);
            if (aTypeSys=constIsAuto) then begin
              SysUtils.DeleteFile(FNameMod);
              RenameFile(FNameModTmp, FNameMod);
              SysUtils.DeleteFile(FNameModTmp);
            end;
          finally
            isFileUnderConstruction[aTypeSys]:= false;
          end;
          Success:= true;
          prMessageLOGS('Шаблон 19-'+sSys+' сформирован с '+IntToStr(i)+' попытки!', 'Import');
        end;

      end else begin
        Timer:= Time;

        DecodeTime(Timer, H, M, S, ms);
        if H > 7 then begin
          isFileUnderConstruction[aTypeSys]:= False;
          //prMessageLOGS ('Уже больше 6 часов, шаблон 19-'+sSys+' не формирую.', 'Import');
          Success:= true;

        end else begin
        {$Ifdef Ver140} PatternDate:= FileDateToDateTime(FileAge(Fname)) {$ELSE} FileAge(Fname, PatternDate) {$EndIf};
//0810          PatternDate:= FileDateToDateTime(FileAge(Fname));
          Timer:= Now;
          DecodeDateDay(PatternDate, Year1, DayOfYear1);
          DecodeDateDay(Timer, Year2, DayOfYear2);
          if (Year2 >= Year1) and (DayOfYear2 > DayOfYear1) then begin
            i:= 1;
          //  while (not Success) and (i <= attempts) do begin
              SysUtils.DeleteFile(FNameTmp);
              if (aTypeSys=constIsAuto) then
                SysUtils.DeleteFile(FNameModTmp);
              try
                apWareDetModFileFormer(aTypeSys, FNameTmp);
              except
                on E: Exception do begin
                  prMessageLOGS(nmProc+': '+E.Message, 'Import');
                  raise;
       {           if i = attempts then begin
                    LstBodyMail.Add('Файл не удалось создать с '+IntToStr(attempts)+' попыток.');
                  end else begin
                    inc(i);
                  end;  }
                end;
              end;
         //   end;
            if FileExists(FNameTmp) then begin
              isFileUnderConstruction[aTypeSys]:= true;
              SysUtils.DeleteFile(FName);
              RenameFile(FNameTmp, FName);
              SysUtils.DeleteFile(FNameTmp);
              if (aTypeSys=constIsAuto) then begin
                SysUtils.DeleteFile(FNameMod);
                RenameFile(FNameModTmp, FNameMod);
                SysUtils.DeleteFile(FNameModTmp);
              end;
              isFileUnderConstruction[aTypeSys]:= false;
              Success:= true;
        //      LstBodyMail.Add('Файл успешно создан с '+IntToStr(i)+' попытки!');
              //prMessageLOGS ('Шаблон 19-'+sSys+' сформирован с '+IntToStr(i)+' попытки!', 'Import');
            end;
          end else begin
            //prMessageLOGS('Шаблон 19-'+sSys+' не потерял актуальности для авто-формирования.', 'Import');
            Success:= true;
          end;
        end;

      end;

    finally
      if Success then begin
        isFileUnderConstruction[aTypeSys]:= false;
      end else begin
        ss:= 'Не удалось сформировать шаблон 19-'+sSys+'!'#10+
          'Следующая попытка формирования - по запросу пользователя.';
        prMessageLOGS(nmProc+': '+ss,'Import');
        LstBodyMail.Add(ss);
        isFileUnderConstruction[aTypeSys]:= false;
         ss:= Cache.GetConstEmails(pcEmplORDERAUTO);
        if ss='' then ss:= fnGetSysAdresVlad(4);
        ss:= n_SysMailSend(ss,
       // ss:= n_SysMailSend(fnGetSysAdresVlad(4), // 'order_dev@vladislav.ua',
          'Отчет об авто-формировании шаблона 19-'+sSys, LstBodyMail, nil, '', '', true);
        if ss<>'' then prMessageLOGS(nmProc+': ошибка отправки отчета '+ss, 'Import');
      end;

      prFree(LstBodyMail);
    end;
  except
    on E: Exception do begin  //переименовать
      SysUtils.DeleteFile(FNameTmp);
      if (aTypeSys=constIsAuto) then
        SysUtils.DeleteFile(FNameModTmp);
//vv05.07      SysUtils.DeleteFile(FName);
    end;
  end;
end;
function fnCheckWareDetModFileValid(UserID,ThreadDataID: integer): string;
const
  nmProc = 'CheckWareDetModFileValid';
  RepType = 19;
var
  PathFile, FName: string;
  PatternDate: TDateTime;
  IBQuery: TIBSQL;
  IBD: TIBDatabase;
  TypeSys, i: integer;
//  ListWares: TStringList;
  Ware: TWareInfo;
  Name, FNameTmp, NameTmp, ss: string;
begin
  Result:= '';
  IBD:= nil;
  IBQuery:= nil;
  TypeSys:= constBegTypeSys;

  if not fnUserRolesEntree(RepType, fnGetUserRoles(UserID)) then begin
    for i:= 0 to High(Cache.arWareInfo) do begin
      if not Cache.WareExist(i) then Continue;
      Ware:= Cache.arWareInfo[i];
      if Ware.ManagerID<>UserID then Continue;
      if (Ware.IsAUTOWare) and (not Ware.IsMOTOWare) then begin
        TypeSys:= constIsAuto;
        Break;
      end;
      if (Ware.IsMOTOWare) and (not Ware.IsAUTOWare) then begin
        TypeSys:= constIsMoto;
        Break;
      end;
    end;

  end else begin
    TypeSys:= fnTypeSysDecision(UserID);
  end;

  while isFileUnderConstruction[TypeSys] do begin
    Sleep(1000);
  end;

  PathFile:= ExtractFilePath(Application.ExeName);

  Name:= fnIfStr(TypeSys=constIsAuto, 'Auto', 'Moto')+constWareDetModFileName;
  FName:= PathFile+Name+'.xlsx';

NameTmp:= 'TMP_'+fnIfStr(TypeSys=constIsAuto, 'Auto', 'Moto')+constWareDetModFileName;
FNameTmp:= PathFile+NameTmp+'.xlsx';

//  FName:= PathFile+constWareDetModFileName;

  while isFileUnderConstruction[TypeSys] do begin
    Sleep(1000);
  end;
  if not FileExists(FName) then begin
  //создаем новый файл по образу и подобию
    //vv 09.07 isFileUnderConstruction[TypeSys]:= True;
    SysUtils.DeleteFile(FNameTmp);
    apWareDetModFileFormer(TypeSys, FNameTmp);
    if FileExists(FNameTmp) then begin
      isFileUnderConstruction[TypeSys]:= True;
      SysUtils.DeleteFile(FName);
      RenameFile(FNameTmp, FName);
      isFileUnderConstruction[TypeSys]:= False;
    end;
    if not GetEmplTmpFilePath(UserID, PathFile, ss) then raise EBOBError.Create(ss);
    Name:= Name+FormatDateTime('_dd.mm_(hh.nn)',Now);
    if CopyFile(PChar(FName), PChar(PathFile+Name+'.xlsx'), false) then
      Result:= PathFile+Name+'.xlsx';
    isFileUnderConstruction[TypeSys]:= False;
    Exit;
  end else
      {$Ifdef Ver140} PatternDate:= FileDateToDateTime(FileAge(Fname)) {$ELSE} FileAge(Fname, PatternDate) {$EndIf};
//0810    PatternDate:= FileDateToDateTime(FileAge(Fname));

  try
    IBD:= cntsORD.GetFreeCnt;
    IBQuery:= fnCreateNewIBSQL(IBD, 'IBQuery_'+nmProc, -1, tpRead, true);
    IBQuery.SQL.Text:= 'SELECT MAX(trna.trnatimeadd) as LASTADDEDNODE'#10+
      'FROM TREENODESAUTO trna '#10+
      'WHERE trna.trnadtsycode = :TypeSys';
    IBQuery.ParamByName('TypeSys').AsInteger:= TypeSys;
    IBQuery.ExecQuery;
    if (IBQuery.Bof and IBQuery.Eof) then begin
      raise Exception.Create ('Не удалось получить дату последнего добавленного узла.');
    end;

    if (PatternDate < IBQuery.FieldByName('LASTADDEDNODE').AsDateTime) then begin
      IBQuery.Close;

      if isFileUnderConstruction[TypeSys] then begin
        repeat
          Sleep (1000);
        until (not isFileUnderConstruction[TypeSys]);
      end;
      SysUtils.DeleteFile(FNameTmp);

      //создаем новый файл   не удалять существующий
      apWareDetModFileFormer(TypeSys, FNameTmp);
      if fileexists(FNameTmp) then begin
        isFileUnderConstruction[TypeSys]:= True;
        SysUtils.DeleteFile(FName);
        RenameFile(FNameTmp, FName);
      end;
      isFileUnderConstruction[TypeSys]:= False;

    end else begin
      IBQuery.Close;
      IBQuery.SQL.Text:= 'SELECT MAX(dm.dmostimeadd) as LASTADDEDMODEL '#10+
        'FROM DIRMODELS dm '#10+
        'INNER JOIN dirmodellines dml on dml.drmlcode = dm.dmosdrmlcode '#10+
        'WHERE dml.drmldtsycode = :TypeSys';
      IBQuery.ParamByName('TypeSys').AsInteger:= TypeSys;
      IBQuery.ExecQuery;
      if (IBQuery.Bof and IBQuery.Eof) then begin
        raise Exception.Create ('Не удалось получить дату последней добавленной модели.');
      end;
      if PatternDate < IBQuery.FieldByName('LASTADDEDMODEL').AsDateTime then begin
        IBQuery.Close;
        if isFileUnderConstruction[TypeSys] then begin
          repeat
            Sleep (1000);
          until (not isFileUnderConstruction[TypeSys]);
        end;

        SysUtils.DeleteFile(FNameTmp);
        //создаем новый файл
        apWareDetModFileFormer(TypeSys, FNameTmp);
        if FileExists(FNameTmp) then begin
          isFileUnderConstruction[TypeSys]:= True;
          SysUtils.DeleteFile(FName);
          RenameFile(FNameTmp, FName);
          isFileUnderConstruction[TypeSys]:= False;
        end;
      end;
    end;
    IBQuery.Close;
  except
    on E: Exception do begin
      prMessageLOGS(nmProc+': '+E.Message, 'Import', false);
    end;
  end;

  prFreeIBSQL(IBQuery);
  cntsORD.SetFreeCnt(IBD, True);

//копируем файл на отдачу пользователю           //проверить существование папки
  if not GetEmplTmpFilePath(UserID, PathFile, ss) then raise EBOBError.Create(ss);

  isFileUnderConstruction[TypeSys]:= True;
  Name:= Name+FormatDateTime('_dd.mm_(hh.nn)', Now);
  if CopyFile(PChar(FName), PChar(PathFile+Name+'.xlsx'), false) then
    Result:= PathFile+Name+'.xlsx';
  isFileUnderConstruction[TypeSys]:= false;
end;
//------------------------------------------------------------------------------
procedure apWareDetModFileFormer(TypeSys: integer; FName: string);
const
  nmProc = 'apWareDetModFileFormer';
  paramsOffset = 3;
  RepType = 19;
var
  XL: TExcelApplication;
  WorkBook: Excel_TLB._Workbook;
  WorkSheet: Excel_TLB._Worksheet;
  usedRng: Range;

  SheetCount: integer;
  SheetID: integer;
  SheetName: string;

  TreeList: TStringList;
  FullTreeList: TStringList;

  ExtNodesList: TObjectList;
  ExtNode: TExtendedAutoTreeNode;
//  ParentExtNode: TExtendedAutoTreeNode;
  Node: TAutoTreeNode;

  isGreenCell: integer;
  isModelLineCell: integer;
  isModelCell: integer;
  isHeaderCell: integer;
  isHeaderText: integer;
  isGrayCell: integer;
  isErrorCell: integer;

  i, j: integer;
  ii, jj: integer;
  k, l, m: integer;
//  isTotalGroup: boolean;

  CurrentDepth: integer;
  parentNodes: array of TExtendedAutoTreeNode;

  WareDataList: TObjectList;
  Role: integer;

  Wares: TStringList;
  Ware: TWareAnaliticsData;

  success: boolean;
  OddFlag: boolean;

  isOddRow: integer;
  isEvenRow: integer;

  ManufsList: TStringList;
  ModelLinesList: TStringList;
  ModelsList: TStringList;

  Manuf: TManufacturer;
  ModelLine: TModelLine;
  Model: TModelAuto;

  MLinesCount: integer;
  ModelsCount: integer;
  isDupNode: boolean;

  s: Tas;
  s1: string;

  IBORDSQL: TIBSQL;
  IBORD: TIBDatabase;
  rows, icount: integer;
begin
  ExtNodesList:= nil;
  TreeList:=nil;
  FullTreeList:=nil;
  ManufsList:=nil;
  ModelLinesList:=nil;
  ModelsList:=nil;
 try
  try
    XL:= TExcelApplication.Create(nil);
    WorkBook:= nil;
//--== Инициализируем работу экземпляра Excel
    CoInitializeEx(nil, COINIT_MULTITHREADED);
    XL.ConnectKind:= ckNewInstance;
    XL.Connect;
    XL.Visible[lcid]:= False;
    //XL.AutoQuit:= False;
    XL.ScreenUpdating[lcid]:= False;
    XL.DisplayAlerts[lcid]:= False;
    XL.Calculation[lcid] := xlManual;
 // отменяем автоматическую проверку ошибок в ячейках
    with XL.ErrorCheckingOptions do begin
      BackgroundChecking := False;
      NumberAsText := False;
      InconsistentFormula := False;
    end;

 // создаем файл
    if Assigned(XL) and (not Assigned(WorkBook)) then begin

      XL.Workbooks.Add(EmptyParam, lcid);
      WorkBook:= XL.ActiveWorkbook;
    //  WorkBook.Name:= FName;
   {
      WorkBook := XL.Workbooks.Open (FName,          // 1// const Filename: WideString;
                                 0,              // 2// UpdateLinks: OleVariant;
                                 false,          // 3// ReadOnly: OleVariant;
                                 EmptyParam,     // 4// Format: OleVariant;
                                 EmptyParam,     // 5// Password: OleVariant;
                                 EmptyParam,     // 6// WriteResPassword: OleVariant;
                                 true,           // 7// IgnoreReadOnlyRecommended: OleVariant;
                                 EmptyParam,     // 8// Origin: OleVariant;
                                 5,              // 9// Delimiter: OleVariant;
                                 False,          //10// Editable: OleVariant;
                                 false,          //11// Notify: OleVariant;
                                 EmptyParam,     //12// Converter: OleVariant;
                                 EmptyParam,     //13// Local: OleVariant;
                                 EmptyParam,     //14// CorruptLoad: OleVariant;
                                 false,          //15// AddToMru: OleVariant;
                                 lcid);          //16// lcid: Integer): Workbook; safecall;

   }
    end;

    SheetCount:= WorkBook.Sheets.Count;

    if SheetCount > 3 then begin
      SheetID:= 3;
      SheetName:= 'Узлы';
      WorkSheet:= WorkBook.Sheets.Item[SheetID] as Excel_TLB._Worksheet;
      WorkSheet.Name:= fnValidExcelSheetName(SheetName);
    end else begin
      while SheetCount < 5 do begin
      //Добавим один новый лист после текущего
        XL.ActiveWorkbook.Sheets.Add(EmptyParam, WorkBook.Sheets.Item[WorkBook.Sheets.Count], 1, xlWorksheet, lcid);
        SheetCount:= WorkBook.Sheets.Count;
      end;
      SheetID:= 3;
      SheetName:= 'Узлы';
      WorkSheet:= WorkBook.Sheets.Item[SheetID] as Excel_TLB._Worksheet;
      WorkSheet.Name:= fnValidExcelSheetName(SheetName);
    end;

//    TypeSys:= fnTypeSysDecision(UserID);

    CurrentDepth:= 0;

    SetLength(parentNodes, 20);

    FullTreeList:= Cache.FDCA.AutoTreeNodesSys[TypeSys].NoteGetTree;
    j:= 0;
    TreeList:= TStringList.Create;
    TreeList.Capacity:= FullTreeList.Capacity;

    for i:= 0 to FullTreeList.Count-1 do begin
      with FullTreeList do begin
        Node:= TAutoTreeNode(Objects[i]);
        if Node.Visible then begin
 //       if Node.ID <> Node.MainCode then begin
          TreeList.AddObject(Strings[i], Objects[i]);
 //       end;
          inc(j);
        end;// if Node.Visible then begin
      end;// with FullTreeList do begin
    end;

    TreeList.Capacity:= j;
    prFree(FullTreeList);
  //  TreeList:= Cache.FDCA.AutoTreeNodesSys[TypeSys].NoteGetTree;

    ExtNodesList:= TObjectList.Create(true);

  //  ExtNodesList.Capacity:= TreeList.Count;
    with TreeList do begin
      for i:= 0 to (Count-1) do begin
        TestCssStopException;
        ExtNode:= TExtendedAutoTreeNode.Create((TAutoTreeNode(Objects[i])));
        ExtNodesList.Add(ExtNode);

        if (TExtendedAutoTreeNode(ExtNodesList[i]).Link.ParentID < 1) then begin
          CurrentDepth:= 0;
          parentNodes[CurrentDepth]:= TExtendedAutoTreeNode(ExtNodesList[i]);
          TExtendedAutoTreeNode(ExtNodesList[i]).Depth:= CurrentDepth;
          TExtendedAutoTreeNode(ExtNodesList[i]).ParentNode:= nil;
        end else
        if (i>0) and (TExtendedAutoTreeNode(ExtNodesList[i]).Link.ParentID = TExtendedAutoTreeNode(ExtNodesList[i-1]).Link.ParentID) then begin
          parentNodes[CurrentDepth]:= TExtendedAutoTreeNode(ExtNodesList[i]);
          TExtendedAutoTreeNode(ExtNodesList[i]).Depth:= CurrentDepth;
          TExtendedAutoTreeNode(ExtNodesList[i]).ParentNode:= TExtendedAutoTreeNode(ExtNodesList[i-1]).ParentNode;
        end else begin
          success:= false;
          for j:= 0 to CurrentDepth do begin
            if (TExtendedAutoTreeNode(ExtNodesList[i]).Link.ParentID = parentNodes[j].Link.ID) then begin
              TExtendedAutoTreeNode(ExtNodesList[i]).ParentNode:= parentNodes[j];
              CurrentDepth:= j+1;
              parentNodes[CurrentDepth]:= TExtendedAutoTreeNode(ExtNodesList[i]);
              TExtendedAutoTreeNode(ExtNodesList[i]).Depth:= CurrentDepth;
              success:= true;
              Break;
            end;
          end;
          if not success then begin
            Raise Exception.Create ('Рюрик мертв!');
          end;

        end;

      end;// for i:= 0 to (Count-1) do begin

    end;//with TreeList do begin

    for j:= 1 to ExtNodesList.Count do begin
      i:= j-1;
      ExtNode:= TExtendedAutoTreeNode(ExtNodesList.items[i]);
      while ExtNode.ParentNode <> nil do begin
        inc(TExtendedAutoTreeNode(ExtNode.ParentNode).CC);
        ExtNode:= TExtendedAutoTreeNode(ExtNode.ParentNode);
      end;
    end;

    isGreenCell:= cHexToInt(cnGreenCell);
    isGrayCell:= cHEXtoINT(cnGrayCell);
    isErrorCell:= cHEXtoINT(cnRedCell);

    WorkSheet.Outline.SummaryRow:= xlSummaryAbove;
    WorkSheet.Outline.AutomaticStyles:= False;
//    WorkSheet.Outline.ShowLevels(EmptyParam, EmptyParam):= xlMin:
//    WorkSheet.Outline.ShowLevels(RowLevels):= xlMax;

    for j:= 1 to ExtNodesList.Count do begin
      TestCssStopException;
      isDupNode:= false;
      i:= j-1;
      ExtNode:= TExtendedAutoTreeNode(ExtNodesList.items[i]);
      usedRng:= WorkSheet.Range[IntToABC(ExtNode.Depth)+IntToStr(j), EmptyParam];

      if TAutoTreeNode(ExtNode.Link).ID <> TAutoTreeNode(ExtNode.Link).MainCode then begin
        usedRng.Value2:= TAutoTreeNode(ExtNode.Link).Name+' (дублирующий узел)'; //+'  ('+IntToStr(ExtNode.CC)+')';
        isDupNode:= true;
      end else begin
        usedRng.Value2:= TAutoTreeNode(ExtNode.Link).Name;
      end;

      if ExtNode.CC = 0 then begin
        if not isDupNode then begin
          usedRng.Borders.Item[xlDiagonalDown].LineStyle := xlNone;
          usedRng.Borders.Item[xlDiagonalUp].LineStyle := xlNone;
          usedRng.Borders.Item[xlEdgeRight].Color:=
            fnGetIntFromRGB(fnColorModulator(TAutoTreeNode(TExtendedAutoTreeNode(ExtNodesList.items[i]).Link).ID));
          usedRng.Borders.Item[xlEdgeRight].LineStyle:= xlContinuous;
          usedRng.Borders.Item[xlEdgeRight].Weight:= xlThin;
          usedRng.Interior.Color:= isGreenCell;

        //вставляем гиперссылку ячейки на саму себя
          if TypeSys = constIsAuto then
          WorkSheet.Hyperlinks.Add(usedRng,'#'''+SheetName+
            '''!'+IntToABC(ExtNode.Depth)+IntToStr(j),
              EmptyParam, EmptyParam, EmptyParam);

        end else begin
          if Cache.FDCA.AutoTreeNodesSys[TypeSys].NodeGet(TAutoTreeNode(ExtNode.Link).MainCode, Node) then begin
            m:= TreeList.IndexOfObject(Node);
            if m > -1 then begin
              if TypeSys = constIsAuto then
              WorkSheet.Hyperlinks.Add(usedRng,'#'''+SheetName+
                '''!'+IntToABC(TExtendedAutoTreeNode(ExtNodesList.items[m]).Depth)+IntToStr(m+1),
                  EmptyParam, EmptyParam, EmptyParam);
              usedRng.Interior.Color:= isGrayCell;
            end;
          end;
        end;
      end;
    end;

  {
    usedRng:= WorkSheet.Range['B'+IntToStr(recs), EmptyParam];
    usedRng.Value2:= LogStr[2];
    WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam,EmptyParam,
      EmptyParam);
  }
    j:= 1;
    CurrentDepth:= 0;
    while j <= ExtNodesList.Count do begin
      TestCssStopException;
      i:= j-1;
      ExtNode:= TExtendedAutoTreeNode(ExtNodesList.Items[i]);
      if ExtNode.Depth > CurrentDepth then
        CurrentDepth:= ExtNode.Depth;

      usedRng:= WorkSheet.Range[IntToABC(ExtNode.Depth)+IntToStr(j+1),
        IntToABC(ExtNode.Depth)+IntToStr(j+ExtNode.CC)];
        //.Rows.Group(EmptyParam,
        //  EmptyParam,EmptyParam,EmptyParam);
      if (ExtNode.CC > 0) and (ExtNode.CC <= 14) then begin

        usedRng.Rows.Group(EmptyParam,
                            EmptyParam,EmptyParam,EmptyParam);

        j:= j+ExtNode.CC;
      end;
      if (ExtNode.CC > 14) then begin
        usedRng.Rows.Group(EmptyParam,
                            EmptyParam,EmptyParam,EmptyParam);
      end;

      inc(j);
    end;// while j <= ExtNodesList.Count do begin

    WorkSheet.Activate(lcid);
 //   usedRng:= WorkSheet.Range['A1', WorkSheet.Range['A1', EmptyParam].SpecialCells(xlCellTypeLastCell,EmptyParam)];
    usedRng:= WorkSheet.UsedRange[lcid];

    usedRng.Columns.ColumnWidth:= 25;
    usedRng.WrapText:= True;
//    usedRng.WrapText:= True;
    usedRng.Rows.AutoFit;

    for i:= CurrentDepth+1 downto 1 do
      WorkSheet.Outline.ShowLevels(i, EmptyParam);

  {
//      usedRng.AddComment(IntToStr(TAutoTreeNode(TExtendedAutoTreeNode(ExtNodesList.items[i]).Link).ID));
      //        , EmptyParam, EmptyParam);

    //  color:= usedRng.Borders.Item[xlEdgeRight].Color;
    //  usedRng:= WorkSheet.Range[IntToABC(ExtNode.Depth+1)+IntToStr(j), EmptyParam];
    //  usedRng.Value2:= IntToStr(fnColorDemodulator(color));
  }
//    pass:= fnGenWebPass;
//    WorkSheet.Name:= fnValidExcelSheetName(pass);

//--==>>>>>>><<<<<<<<<<
//{
    SheetID:= 2;
    SheetName:= 'Модели';
    WorkSheet:= WorkBook.Sheets.Item[SheetID] as Excel_TLB._Worksheet;
    WorkSheet.Name:= fnValidExcelSheetName(SheetName);


    WorkSheet.Outline.SummaryRow:= xlSummaryAbove;
    WorkSheet.Outline.AutomaticStyles:= False;

  //Рисуем шапку листа
    isHeaderCell:= cHexToInt(cnHeaderCell);
    isHeaderText:= cHEXtoINT(cnHeaderText);

    case TypeSys of
      constIsAuto: begin
        usedRng:= WorkSheet.Range['A1', 'I1'];
        usedRng.Cells.WrapText:= True;
        usedRng.Interior.Color:= isHeaderCell;
        usedRng.Font.Color:= isHeaderText;
        usedRng.Font.Bold:= True;
        usedRng.VerticalAlignment:= xlCenter;
        usedRng.HorizontalAlignment:= xlCenter;

        usedRng:= Worksheet.Range['A1', EmptyParam];
        usedRng.Value2:= 'Производитель '+fnIfStr(TypeSys=constIsAuto, 'АВТО', 'МОТО');
        usedRng.Columns.ColumnWidth:= 19;

        usedRng:= Worksheet.Range['B1', EmptyParam];
        usedRng.Value2:= 'Модельный ряд';
        usedRng.Columns.ColumnWidth:= 19;

        usedRng:= Worksheet.Range['C1', EmptyParam];
        usedRng.Value2:= 'Модель';
        usedRng.Columns.ColumnWidth:= 16;

        {vv usedRng:= Worksheet.Range['D1', EmptyParam];
        usedRng.Columns.ColumnWidth:= 16;
        usedRng.Value2:= 'Годы выпуска'; }

        usedRng:= Worksheet.Range['D1', EmptyParam];
        usedRng.Value2:= 'Наименование для вставки';
        usedRng.Columns.ColumnWidth:= 38;

        usedRng:= Worksheet.Range['E1', EmptyParam];
        usedRng.Columns.ColumnWidth:= 16;
        usedRng.Value2:= 'Годы выпуска';

        usedRng:= Worksheet.Range['F1', EmptyParam];
        usedRng.Value2:= 'Маркировки двигателя';
        usedRng.Columns.ColumnWidth:= 16;

        usedRng:= Worksheet.Range['G1', EmptyParam];
        usedRng.Columns.ColumnWidth:= 13;
        usedRng.Value2:= 'Мощность, л.с.';

        usedRng:= Worksheet.Range['H1', EmptyParam];
        usedRng.Columns.ColumnWidth:= 13;
        usedRng.Value2:= 'Кол-во клапанов';

        usedRng:= Worksheet.Range['I1', EmptyParam];
        usedRng.Columns.ColumnWidth:= 15;
        usedRng.Value2:= 'Тип привода';
  //      usedRng.Columns.ColumnWidth:= 13;
        SetLength(s,5);
      end;
      constIsMoto: begin
        usedRng:= WorkSheet.Range['A1', 'D1'];
        usedRng.Cells.WrapText:= True;
        usedRng.Interior.Color:= isHeaderCell;
        usedRng.Font.Color:= isHeaderText;
        usedRng.Font.Bold:= True;
        usedRng.VerticalAlignment:= xlCenter;
        usedRng.HorizontalAlignment:= xlCenter;

        usedRng:= Worksheet.Range['A1', EmptyParam];
        usedRng.Value2:= 'Производитель '+fnIfStr(TypeSys=constIsAuto, 'АВТО', 'МОТО');
        usedRng.Columns.ColumnWidth:= 21;
        usedRng:= Worksheet.Range['B1', EmptyParam];
        usedRng.Value2:= 'Модельный ряд';
        usedRng.Columns.ColumnWidth:= 19;
        usedRng:= Worksheet.Range['C1', EmptyParam];
        usedRng.Value2:= 'Модель';
        usedRng.Columns.ColumnWidth:= 24;
        usedRng:= Worksheet.Range['D1', EmptyParam];
        usedRng.Value2:= 'Наименование для импорта';
        usedRng.Columns.ColumnWidth:= 60;
      end;

    end;

    isModelLineCell:= cHEXtoINT(cnGrayModelLine);
    isModelCell:= cHEXtoINT(cnGrayModel);

    ManufsList:= Cache.FDCA.Manufacturers.GetSortedList(TypeSys);

//    rows:=0;
    rows:= ManufsList.Count;
    for icount:= 0 to ManufsList.Count-1 do begin
      Manuf:= TManufacturer(ManufsList.Objects[icount]);
      ModelLinesList:= Manuf.GetModelsList(TypeSys);
      rows:= rows+ Manuf.GetModelLinesList(TypeSys, false).Count+ ModelLinesList.Count;
      ModelLinesList.Clear;
    end;
    usedRng:= WorkSheet.Range['D1','D'+IntToStr(rows)];
    usedRng.WrapText:= True;

    ii:= 2;
    for k:= 0 to ManufsList.Count-1 do begin
      TestCssStopException;
      MLinesCount:= 0;

      jj:= 0;    //
      Manuf:= TManufacturer(ManufsList.Objects[k]);

      if (not Manuf.HasVisMLModels(TypeSys)) or (not Manuf.HasVisMLModels(TypeSys)) then
        Continue;

      ModelLinesList:= Manuf.GetModelLinesList(TypeSys, false);

      usedRng:= WorkSheet.Range[IntToABC(jj)+IntToStr(ii), EmptyParam];
      usedRng.Value2:= Manuf.Name;     //jj:= 0

      inc(ii);// переходим на следующую строку

      for l:= 0 to ModelLinesList.Count-1 do begin
        TestCssStopException;
        jj:= 1;
        ModelLine:= Cache.FDCA.ModelLines.GetModelLine(integer(ModelLinesList.Objects[l]));
        if not ModelLine.IsVisible then
          Continue;

        ModelsList:= ModelLine.GetListModels;

        if ModelsList.Count = 0 then
          Continue;
        inc(MLinesCount);
        ModelsCount:= 0;
        usedRng:= WorkSheet.Range[IntToABC(jj)+IntToStr(ii), EmptyParam];
        usedRng.Value2:= ''''+ModelLine.Name;    //jj:= 1;
        usedRng.WrapText:= True;

        jj:= 4;
        usedRng:= WorkSheet.Range[IntToABC(jj)+IntToStr(ii), EmptyParam];
        s1:= StringReplace(fnGetYMBE(ModelLine.YStart,ModelLine.MStart,ModelLine.YEnd,ModelLine.MEnd), cWebSpace, ' ', [rfReplaceAll]);
        s1:= Copy(s1,3,Length(s1)-3);
        s1:=''''+s1;

        usedRng.Value2:= s1;

        jj:= 3;

        usedRng:= WorkSheet.Range[IntToABC(jj)+IntToStr(ii), EmptyParam];
        usedRng.Value2:= Manuf.Name+' '+ModelLine.Name+' '+
          StringReplace(fnGetYMBE(ModelLine.YStart,ModelLine.MStart,ModelLine.YEnd,ModelLine.MEnd), cWebSpace, ' ', [rfReplaceAll]);

        usedRng.Borders.Item[xlDiagonalDown].LineStyle := xlNone;
        usedRng.Borders.Item[xlDiagonalUp].LineStyle := xlNone;
        usedRng.Borders.Item[xlEdgeRight].Color:=
          fnGetIntFromRGB(fnColorModulator(ModelLine.ID));
        usedRng.Borders.Item[xlEdgeRight].LineStyle:= xlContinuous;
        usedRng.Borders.Item[xlEdgeRight].Weight:= xlThin;
        usedRng.Interior.Color:= isModelLineCell;
        WorkSheet.Hyperlinks.Add(usedRng,'#'''+SheetName+
          '''!'+IntToABC(jj)+IntToStr(ii),
            EmptyParam, EmptyParam, EmptyParam);
//        usedRng.Hyperlinks.Add(EmptyParam,IntToABC(jj)+IntToStr(ii),EmptyParam, EmptyParam, EmptyParam);

        inc(ii);//переходим на следующую строку

        for m:= 0 to ModelsList.Count-1 do begin
          jj:= 2;
          Model:= Cache.FDCA.Models.GetModel(integer(ModelsList.Objects[m]));
          if not Model.IsVisible then
            Continue;
          inc (MLinesCount);
          inc (ModelsCount);
          usedRng:= WorkSheet.Range[IntToABC(jj)+IntToStr(ii), EmptyParam];
          usedRng.Value2:= ''''+Model.Name;
          usedRng.WrapText:= True;

          inc(jj);    //jj=3
          //usedRng:= WorkSheet.Range[IntToABC(jj)+IntToStr(ii), EmptyParam];
          case TypeSys of
            constIsAuto: begin
              for i:= 0 to High(s) do begin
                s[i]:= '';
              end;
              with Model do begin
                s[0]:= fnGetYMBE(Params.pYStart, Params.pMStart, Params.pYEnd, Params.pMEnd, ' - ');
                s[1]:= MarksCommaText;
                s[2]:= IntToStr(Params.pHP);
                s[3]:= IntToStr(Params.pCylinders*Params.pValves);
                s[4]:= Cache.FDCA.TypesInfoModel.InfoItems[Params.pDriveID].Name; //Найти наименование!
              end;

              usedRng:= WorkSheet.Range[IntToABC(jj)+IntToStr(ii), EmptyParam];
              usedRng.Value2:= Manuf.Name+' '+ModelLine.Name+' '+Model.Name+' '+s[0];
              usedRng.Borders.Item[xlDiagonalDown].LineStyle := xlNone;
              usedRng.Borders.Item[xlDiagonalUp].LineStyle := xlNone;
              usedRng.Borders.Item[xlEdgeRight].Color:=
                fnGetIntFromRGB(fnColorModulator(Model.ID));
              usedRng.Borders.Item[xlEdgeRight].LineStyle:= xlContinuous;
              usedRng.Borders.Item[xlEdgeRight].Weight:= xlThin;
              usedRng.Interior.Color:= isModelCell;
              WorkSheet.Hyperlinks.Add(usedRng,'#'''+SheetName+
                '''!'+IntToABC(jj)+IntToStr(ii),
                  EmptyParam, EmptyParam, EmptyParam);
              {
              s1:= '';
              for i:= 1 to High(s) do begin
                if Length(s[i]) > 0 then begin
                  case i of
                    1: begin
                      s1:= s1+'марк. двиг.: '+s[i]+#10;
                    end;
                    2: begin
                      s1:= s1+'мощн., л.с.: '+s[i]+#10;
                    end;
                    3: begin
                      s1:= s1+'тип привода: '+s[i]+#10;
                    end;
                    4: begin
                      s1:= s1+'кл-во клап.: '+s[i];
                    end;
                  end;
                end;
              end;

              usedRng.AddComment(s1);
              usedRng.Comment.Shape.TextFrame.AutoSize:= True;
              }
              inc(jj);
              usedRng:= WorkSheet.Range[IntToABC(jj)+IntToStr(ii), EmptyParam];
{              for i:= 0 to High(s) do begin
                s[i]:='';
              end;
              with Model do begin
                s[0]:= fnGetYMBE(Params.pYStart, Params.pMStart, Params.pYEnd, Params.pMEnd, ' - ');
                s[1]:= MarksCommaText;
                s[2]:= IntToStr(Params.pHP);
                s[3]:= IntToStr(Params.pCylinders*Params.pValves);
                s[4]:= Cache.FDCA.TypesInfoModel.InfoItems[Params.pDriveID].Name; //Найти наименование!
              end;}

              s1:= s[0];
              s1:= Copy(s1,3,Length(s1)-3);
              s1:= ''''+s1;
              usedRng.Value2:= s1;

              for i:= 1 to high(s) do begin
                inc(jj);
                usedRng:= WorkSheet.Range[IntToABC(jj)+IntToStr(ii), EmptyParam];
                usedRng.Value2:= s[i];
                if IntToABC(jj)='I' then  usedRng.WrapText:= true; //05.07
                if IntToABC(jj)='F' then  usedRng.WrapText:= true; //08.07
              end;

            end;
            constIsMoto: begin
              usedRng:= WorkSheet.Range[IntToABC(jj)+IntToStr(ii), EmptyParam];
              usedRng.Value2:= Manuf.Name+' '+ModelLine.Name+' '+Model.Name;

              usedRng.Borders.Item[xlDiagonalDown].LineStyle := xlNone;
              usedRng.Borders.Item[xlDiagonalUp].LineStyle := xlNone;
              usedRng.Borders.Item[xlEdgeRight].Color:=
                fnGetIntFromRGB(fnColorModulator(Model.ID));
              usedRng.Borders.Item[xlEdgeRight].LineStyle:= xlContinuous;
              usedRng.Borders.Item[xlEdgeRight].Weight:= xlThin;
              usedRng.Interior.Color:= isModelCell;
            end;
          end;
      //      usedRng.Value2:= Manuf.Name+' '+ModelLine.Name+' '+Model.Name;//+' '+
      //      fnGetYMBE(Model.YStart,Model.MStart,Model.YEnd,Model.MEnd);
          inc(ii);
        end;// for m:= 0 to ModelsList.Count-1 do

        usedRng:= WorkSheet.Range['B'+IntToStr(ii-ModelsCount),'B'+IntToStr(ii-1)];
        usedRng.Rows.Group(EmptyParam,
                    EmptyParam,EmptyParam,EmptyParam);

      end;// for l:= 0 to ModelLinesList.Count-1 do


      usedRng:= WorkSheet.Range['A'+IntToStr(ii-MLinesCount),'A'+IntToStr(ii-1)];
      usedRng.Rows.Group(EmptyParam,
                  EmptyParam,EmptyParam,EmptyParam);

    end;// for k:= 0 to ManufsList.Count-1 do


//    usedRng:= WorkSheet.UsedRange[lcid];
{    usedRng:= WorkSheet.Range['A1', EmptyParam].SpecialCells(xlCellTypeLastCell,EmptyParam);
    rows:= usedRng.Row;   08.07}
//    usedRng:= WorkSheet.Range['B1','B'+IntToStr(rows)];
//    usedRng.WrapText:= True;
{    usedRng:= WorkSheet.Range['C1','C'+IntToStr(rows)];
    usedRng.WrapText:= True;
    usedRng:= WorkSheet.Range['F1','F'+IntToStr(rows)];
    usedRng.WrapText:= True;
    usedRng:= WorkSheet.Range['D1','D'+IntToStr(rows)];
    usedRng.AutoFit; }
//    usedRng.WrapText:= True;

    usedRng:= WorkSheet.Range['A2', WorkSheet.Range['A2', EmptyParam].SpecialCells(xlCellTypeLastCell,EmptyParam)];
    usedRng.Rows.AutoFit;
   {
    try
      usedRng.WrapText:= True;
    except
      on E: Exception do begin
        prMessageLOGS(E.Message+': '+usedRng.Text, 'Import', false);
      end;
    end;
    }

    WorkSheet.Activate(lcid);
    WorkSheet.Range['D2', 'D2'].Select;
  //    XL.ActiveWindow.SplitRow:= 1;
    XL.ActiveWindow.FreezePanes:= True;

  //  XL.ActiveWindow.SplitRow:= 1;
  //  XL.ActiveWindow.FreezePanes := True;

    for i:= 3 downto 1 do
      WorkSheet.Outline.ShowLevels(i, EmptyParam);

    SheetID:= 1;
    SheetName:= 'Данные для импорта';
    WorkSheet:= WorkBook.Sheets.Item[SheetID] as Excel_TLB._Worksheet;
    WorkSheet.Name:= fnValidExcelSheetName(SheetName);

    usedRng:= WorkSheet.Range['A1', 'K1'];
    usedRng.Cells.WrapText:= True;
    usedRng.Interior.Color:= isHeaderCell;
    usedRng.Font.Color:= isHeaderText;
    usedRng.Font.Bold:= True;
    usedRng.VerticalAlignment:= xlCenter;
    usedRng.HorizontalAlignment:= xlCenter;

    usedRng:= Worksheet.Range['A1', EmptyParam];
    usedRng.Value2:= 'Товар'; //+fnIfStr(TypeSys=constIsAuto, 'АВТО', 'МОТО');
    usedRng.Columns.ColumnWidth:= 19;

    usedRng:= Worksheet.Range['B1', EmptyParam];
    usedRng.Value2:= 'Узел';
    usedRng.Columns.ColumnWidth:= 19;

    usedRng:= Worksheet.Range['C1', EmptyParam];
    usedRng.Value2:= 'Модель / Модельный ряд';
    usedRng.Columns.ColumnWidth:= 33;

    usedRng:= Worksheet.Range['D1', EmptyParam];
    usedRng.Columns.ColumnWidth:= 19;
    usedRng.Value2:= 'Код операции';

    usedRng:= Worksheet.Range['E1', EmptyParam];
    usedRng.Columns.ColumnWidth:= 19;
    usedRng.Value2:= 'Источник данных';
if TypeSys=constIsMoto then begin
    usedRng:= Worksheet.Range['F1', EmptyParam];
    usedRng.Value2:= 'Название критерия';
    usedRng.Columns.ColumnWidth:= 19;

    usedRng:= Worksheet.Range['G1', EmptyParam];
    usedRng.Value2:= 'Значение критерия';
    usedRng.Columns.ColumnWidth:= 19;

    usedRng:= Worksheet.Range['H1', EmptyParam];
    usedRng.Columns.ColumnWidth:= 19;
    usedRng.Value2:= 'Название критерия';

    usedRng:= Worksheet.Range['I1', EmptyParam];
    usedRng.Columns.ColumnWidth:= 19;
    usedRng.Value2:= 'Значение критерия';

    usedRng:= Worksheet.Range['J1', EmptyParam];
    usedRng.Columns.ColumnWidth:= 19;
    usedRng.Value2:= 'Название критерия';

    usedRng:= Worksheet.Range['K1', EmptyParam];
    usedRng.Columns.ColumnWidth:= 19;
    usedRng.Value2:= 'Значение критерия';
end;
    WorkSheet.Activate(lcid);
    WorkSheet.Range['F2', 'F2'].Select;
    XL.ActiveWindow.FreezePanes := True;
{
    WorkSheet.EnableOutlining[lcid]:= True;
    WorkSheet.Protect(pass,           // Password: OleVariant;
                      True,                   // DrawingObjects: OleVariant; --
                      True,                   // Contents: OleVariant;
                      True,                   // Scenarios: OleVariant;
                      True,                   // UserInterfaceOnly: OleVariant;
                      False,                  // AllowFormattingCells: OleVariant;
                      False,                  // AllowFormattingColumns: OleVariant
                      False,                  // AllowFormattingRows: OleVariant;
                      False,                  // AllowInsertingColumns: OleVariant;
                      False,                  // AllowInsertingRows: OleVariant;
                      False,                  // AllowInsertingHyperlinks: OleVariant;
                      False,                  // AllowDeletingColumns: OleVariant;
                      False,                  // AllowDeletingRows: OleVariant;
                      False,                  // AllowSorting: OleVariant;
                      True,                   // AllowFiltering: OleVariant;
                      True);                  // AllowUsingPivotTables: OleVariant;

  //Делает группировку на защищенном листе кликабельной:
    WorkSheet.EnableOutlining[lcid]:= True;
    WorkSheet.EnableAutoFilter[lcid]:= True;
    WorkSheet.EnablePivotTable[lcid]:= True;

//    WorkSheet.EnableOutlining[lcid]:= True;

    procedure Protect(Password: OleVariant; DrawingObjects: OleVariant; Contents: OleVariant;
                      Scenarios: OleVariant; UserInterfaceOnly: OleVariant;
                      AllowFormattingCells: OleVariant; AllowFormattingColumns: OleVariant;
                      AllowFormattingRows: OleVariant; AllowInsertingColumns: OleVariant;
                      AllowInsertingRows: OleVariant; AllowInsertingHyperlinks: OleVariant;
                      AllowDeletingColumns: OleVariant; AllowDeletingRows: OleVariant;
                      AllowSorting: OleVariant; AllowFiltering: OleVariant;
                      AllowUsingPivotTables: OleVariant); safecall;
}
    SheetID:= 4;
    SheetName:= 'Список товаров';
    WorkSheet:= WorkBook.Sheets.Item[SheetID] as Excel_TLB._Worksheet;
    WorkSheet.Name:= fnValidExcelSheetName(SheetName);

  //рисуем шапку листа:
    usedRng:= WorkSheet.Range['A1', 'E1'];
    usedRng.Cells.WrapText:= True;
    usedRng.Interior.Color:= isHeaderCell;
    usedRng.Font.Color:= isHeaderText;
    usedRng.Font.Bold:= True;
    usedRng.VerticalAlignment:= xlCenter;
    usedRng.HorizontalAlignment:= xlCenter;
    usedRng.Rows.RowHeight:= 45;

    usedRng:= Worksheet.Range['A1', EmptyParam];
    usedRng.Value2:= 'Наименование товара'; //+fnIfStr(TypeSys=constIsAuto, 'АВТО', 'МОТО');
    usedRng.Columns.ColumnWidth:= 40;

    usedRng:= Worksheet.Range['B1', EmptyParam];
    usedRng.Value2:= 'Группа';
    usedRng.Columns.ColumnWidth:= 40;

    usedRng:= Worksheet.Range['C1', EmptyParam];
    usedRng.Value2:= 'Краткое описание товара';
    usedRng.Columns.ColumnWidth:= 50;

    usedRng:= Worksheet.Range['D1', EmptyParam];
    usedRng.Columns.ColumnWidth:= 12;
    usedRng.Value2:= 'Кол-во '#10+'привязанных '#10+'моделей';

    usedRng:= Worksheet.Range['E1', EmptyParam];
    usedRng.Columns.ColumnWidth:= 15;
    usedRng.Value2:= 'Менеджер';

    case TypeSys of
      constIsAuto: begin
        Role:= rolModelManageAuto;
      end;
      constIsMoto: begin
        Role:= rolModelManageMoto;
      end;
    end;

    Wares:= Cache.GetSysManagerWares(TypeSys);

    WareDataList:= fnGetWareAnaliticsDataObjects(Wares, RepType, Role, TypeSys);

    i:= 2;
    OddFlag:= false;
    isOddRow:= cHEXtoINT(cnOddRow);
    isEvenRow:= cHEXtoINT(cnEvenRow);

    for j:= 0 to WareDataList.Count-1 do begin
      TestCssStopException;
      Ware:= TWareAnaliticsData(WareDataList.Items[j]);

    // поиграться с вариантным массивом...


      usedRng:= Worksheet.Range['A'+IntToStr(i), EmptyParam];
      usedRng.Value2:= Ware.Name;

      usedRng:= Worksheet.Range['B'+IntToStr(i), EmptyParam];
      usedRng.Value2:= Ware.PgrName;

      usedRng:= Worksheet.Range['C'+IntToStr(i), EmptyParam];
      usedRng.Value2:= Ware.Descr;

      usedRng:= Worksheet.Range['D'+IntToStr(i), EmptyParam];
      usedRng.Value2:= Ware.UsageCount;

      usedRng:= Worksheet.Range['E'+IntToStr(i), EmptyParam];
      usedRng.Value2:= Ware.WareMgr;

      usedRng:= WorkSheet.Range['A'+IntToStr(i), 'E'+IntToStr(i)];

      if OddFlag then begin
        usedRng.Interior.Color:= isOddRow;
        OddFlag:= False;
      end else begin
        usedRng.Interior.Color:= isEvenRow;
        OddFlag:= True;
      end;

      inc(i);
    end;

    WorkSheet.Activate(lcid);
    XL.ActiveWindow.SplitRow:= 1;
    XL.ActiveWindow.FreezePanes := True;
if TypeSys=constIsMoto then begin
    SheetID:= 5;
    SheetName:= 'Критерии';
    WorkSheet:= WorkBook.Sheets.Item[SheetID] as Excel_TLB._Worksheet;
    WorkSheet.Name:= fnValidExcelSheetName(SheetName);

  //рисуем шапку листа:
    usedRng:= WorkSheet.Range['A1','A1'];
    usedRng.Cells.WrapText:= True;
    usedRng.Interior.Color:= isHeaderCell;
    usedRng.Font.Color:= isHeaderText;
    usedRng.Font.Bold:= True;
    usedRng.VerticalAlignment:= xlCenter;
    usedRng.HorizontalAlignment:= xlCenter;
    usedRng.Rows.RowHeight:= 45;

    usedRng:= Worksheet.Range['A1', EmptyParam];
    usedRng.Value2:= 'Название критерия';
    usedRng.Columns.ColumnWidth:= 40;

    IBORD:= nil;
    IBORDSQL:= nil;
    IBORD:= cntsORD.GetFreeCnt;
    IBORDSQL:= fnCreateNewIBSQL(IBORD, 'SQL_'+nmProc, -1, tpRead, true);
    try
      i:= 2;
      IBORDSQL.SQL.Text:= 'SELECT WCRICODE, WCRIDESCR FROM WARECRITERIES ORDER BY UPPERCASE(WCRIDESCR)';
      IBORDSQL.ExecQuery;
      while not IBORDSQL.EOF do begin
        usedRng:= Worksheet.Range['A'+IntToStr(i), EmptyParam];
        usedRng.Value2:= IBORDSQL.fieldByName('WCRIDESCR').AsString;
        inc(i);
        IBORDSQL.Next;
      end;
//      IBORDSQL.Close;
    finally
      prFreeIBSQL(IBORDSQL);
      cntsORD.SetFreeCnt(IBORD, True);
    end;
    WorkSheet.Activate(lcid);
    XL.ActiveWindow.SplitRow:= 1;
    XL.ActiveWindow.FreezePanes := True;
end;
  except
    on E: Exception do begin
      prMessageLOGS(E.Message, 'import', false);
      raise;
    end;
  end;
 finally
  Workbook.CheckCompatibility := False;
  WorkBook.SaveCopyAs(FName, lcid);
  WorkBook.Close(false,EmptyParam,EmptyParam,lcid);
  XL.Quit;// закрыть Excel
  XL.Disconnect;
  CoUnInitialize;
  prFree(XL);
  ExtNodesList.Clear;
  prFree(ExtNodesList);
  //ExtNodesList.Free;
  prFree(TreeList);
  SetLength(parentNodes,0);
  prFree(WareDataList);
  prFree(Wares);
  SetLength(s,0);
//  ShowMessage('Проверяй тмп!');
 end;
end;
*)
//============================================================================== 
procedure apWareDetModFileFormer(TypeSys: integer; FName: string);
const nmProc = 'apWareDetModFileFormer';
      paramsOffset = 3;
      RepType = 19;
var XL: TExcelApplication;
    WorkBook: Excel_TLB._Workbook;
    WorkSheet: Excel_TLB._Worksheet;
    usedRng: Range;
    TreeList, FullTreeList, Wares: TStringList;
    ManufsList, ModelLinesList, ModelsList, SLLinkWrong: TStringList;
    ExtNodesList, WareDataList: TObjectList;
    ExtNode, ExtNode1: TExtendedAutoTreeNode;
    Node: TAutoTreeNode;
    parentNodes: array of TExtendedAutoTreeNode;
    Ware: TWareAnaliticsData;
    Manuf: TManufacturer;
    ModelLine: TModelLine;
    Model: TModelAuto;
    s: Tas;
    IBORDSQL: TIBSQL;
    IBORD: TIBDatabase;
    SheetCount, SheetID, i, j, ii, jj, k, l, m, CurrentDepth: integer;
    isGreenCell, isModelLineCell, isModelCell, isHeaderCell: integer;
    isHeaderText, isGrayCell, isErrorCell, Role, isOddRow, isEvenRow: integer;
    MfCount, MfCount1, MLinesCount, ModelsCount, rows, icount: integer;
    SheetName, s1, ss, sCell: string;
    success, OddFlag, isDupNode: boolean;
begin
  ExtNodesList:= nil;
  TreeList:= nil;
  FullTreeList:= nil;
  ManufsList:= TStringList.Create;
//  ModelLinesList:= nil;
//  ModelsList:= nil;
  IBORD:= nil;
  IBORDSQL:= nil;
  isHeaderCell:= cHexToInt(cnHeaderCell); // Рисуем шапку листа
  isHeaderText:= cHEXtoINT(cnHeaderText);
 try
  try
    XL:= TExcelApplication.Create(nil);
    WorkBook:= nil;
    CoInitializeEx(nil, COINIT_MULTITHREADED); //--== Инициализируем работу экземпляра Excel
    XL.ConnectKind:= ckNewInstance;
    XL.Connect;
    XL.Visible[lcid]:= False;
    XL.ScreenUpdating[lcid]:= False;
    XL.DisplayAlerts[lcid]:= False;
    XL.Calculation[lcid]:= xlManual;
    with XL.ErrorCheckingOptions do begin  // отменяем автоматическую проверку ошибок в ячейках
      BackgroundChecking:= False;
      NumberAsText:= False;
      InconsistentFormula:= False;
    end;

    if Assigned(XL) and (not Assigned(WorkBook)) then begin // создаем файл
      XL.Workbooks.Add(EmptyParam, lcid);
      WorkBook:= XL.ActiveWorkbook;
    end;

    SheetCount:= WorkBook.Sheets.Count;
    if not (SheetCount>3) then
      while SheetCount<5 do begin    // Добавим один новый лист после текущего
        XL.ActiveWorkbook.Sheets.Add(EmptyParam, WorkBook.Sheets.Item[WorkBook.Sheets.Count], 1, xlWorksheet, lcid);
        SheetCount:= WorkBook.Sheets.Count;
      end;

    SheetID:= 3;
    SheetName:= 'Узлы';
    WorkSheet:= WorkBook.Sheets.Item[SheetID] as Excel_TLB._Worksheet;
    WorkSheet.Name:= fnValidExcelSheetName(SheetName);

    CurrentDepth:= 0;
    SetLength(parentNodes, 20);
    FullTreeList:= Cache.FDCA.AutoTreeNodesSys[TypeSys].NoteGetTree;
    j:= 0;
    TreeList:= TStringList.Create;
    TreeList.Capacity:= FullTreeList.Capacity;
    for i:= 0 to FullTreeList.Count-1 do with FullTreeList do begin
      Node:= TAutoTreeNode(Objects[i]);
      if not Node.Visible then Continue;
      TreeList.AddObject(Strings[i], Objects[i]);
      inc(j);
    end;// with FullTreeList do begin
    TreeList.Capacity:= j;
    prFree(FullTreeList);
    ExtNodesList:= TObjectList.Create(true);

    with TreeList do for i:= 0 to (Count-1) do begin
      TestCssStopException;
      ExtNode:= TExtendedAutoTreeNode.Create((TAutoTreeNode(Objects[i])));
      ExtNodesList.Add(ExtNode);
      ExtNode:= TExtendedAutoTreeNode(ExtNodesList[i]);
      if (i>0) then ExtNode1:= TExtendedAutoTreeNode(ExtNodesList[i-1]) else ExtNode1:= nil;
      if (ExtNode.Link.ParentID < 1) then begin
        CurrentDepth:= 0;
        parentNodes[CurrentDepth]:= ExtNode;
        ExtNode.Depth:= CurrentDepth;
        ExtNode.ParentNode:= nil;
      end else if (i>0) and (ExtNode.Link.ParentID=ExtNode1.Link.ParentID) then begin
        parentNodes[CurrentDepth]:= ExtNode;
        ExtNode.Depth:= CurrentDepth;
        ExtNode.ParentNode:= ExtNode1.ParentNode;
      end else begin
        success:= false;
        for j:= 0 to CurrentDepth do begin
          if (ExtNode.Link.ParentID = parentNodes[j].Link.ID) then begin
            ExtNode.ParentNode:= parentNodes[j];
            CurrentDepth:= j+1;
            parentNodes[CurrentDepth]:= ExtNode;
            ExtNode.Depth:= CurrentDepth;
            success:= true;
            Break;
          end;
        end;
        if not success then Raise Exception.Create ('Рюрик мертв!');
      end;
    end;// for i:= 0 to (Count-1) do begin

    for i:= 0 to ExtNodesList.Count-1 do begin
      ExtNode:= TExtendedAutoTreeNode(ExtNodesList.items[i]);
      while (ExtNode.ParentNode <> nil) do begin
        ExtNode:= TExtendedAutoTreeNode(ExtNode.ParentNode);
        inc(ExtNode.CC);
      end;
    end;

    isGreenCell:= cHexToInt(cnGreenCell);
    isGrayCell:= cHEXtoINT(cnGrayCell);
    isErrorCell:= cHEXtoINT(cnRedCell);
    WorkSheet.Outline.SummaryRow:= xlSummaryAbove;
    WorkSheet.Outline.AutomaticStyles:= False;

    for j:= 1 to ExtNodesList.Count do begin
      TestCssStopException;
      isDupNode:= false;
      i:= j-1;
      ExtNode:= TExtendedAutoTreeNode(ExtNodesList.items[i]);
      Node:= TAutoTreeNode(ExtNode.Link);
      jj:= Node.MainCode;
      usedRng:= WorkSheet.Range[IntToABC(ExtNode.Depth)+IntToStr(j), EmptyParam];

      if Node.ID <> jj then begin
        usedRng.Value2:= Node.Name+' (дублирующий узел)'; //+'  ('+IntToStr(ExtNode.CC)+')';
        isDupNode:= true;
      end else usedRng.Value2:= Node.Name;

      if (ExtNode.CC=0) then
        if not isDupNode then begin
          usedRng.Borders.Item[xlDiagonalDown].LineStyle:= xlNone;
          usedRng.Borders.Item[xlDiagonalUp].LineStyle:= xlNone;
          usedRng.Borders.Item[xlEdgeRight].Color:= fnGetIntFromRGB(fnColorModulator(Node.ID));
          usedRng.Borders.Item[xlEdgeRight].LineStyle:= xlContinuous;
          usedRng.Borders.Item[xlEdgeRight].Weight:= xlThin;
          usedRng.Interior.Color:= isGreenCell;
          if TypeSys = constIsAuto then //вставляем гиперссылку ячейки на саму себя
            WorkSheet.Hyperlinks.Add(usedRng,'#'''+SheetName+'''!'+
              IntToABC(ExtNode.Depth)+IntToStr(j), EmptyParam, EmptyParam, EmptyParam);
        end else if Cache.FDCA.AutoTreeNodesSys[TypeSys].NodeGet(jj, Node) then begin
          m:= TreeList.IndexOfObject(Node);
          if (m>-1) then begin
            if TypeSys = constIsAuto then
              WorkSheet.Hyperlinks.Add(usedRng,'#'''+SheetName+'''!'+
                IntToABC(TExtendedAutoTreeNode(ExtNodesList.items[m]).Depth)+IntToStr(m+1),
                EmptyParam, EmptyParam, EmptyParam);
            usedRng.Interior.Color:= isGrayCell;
          end;
        end;
    end; // for j:= 1 to ExtNodesList.Count

    j:= 1;
    CurrentDepth:= 0;
    while (j <= ExtNodesList.Count) do begin
      TestCssStopException;
      i:= j-1;
      ExtNode:= TExtendedAutoTreeNode(ExtNodesList.Items[i]);
      if ExtNode.Depth > CurrentDepth then CurrentDepth:= ExtNode.Depth;
      usedRng:= WorkSheet.Range[IntToABC(ExtNode.Depth)+IntToStr(j+1),
        IntToABC(ExtNode.Depth)+IntToStr(j+ExtNode.CC)];
      if (ExtNode.CC > 0) and (ExtNode.CC <= 14) then begin
        usedRng.Rows.Group(EmptyParam, EmptyParam, EmptyParam, EmptyParam);
        j:= j+ExtNode.CC;
      end;
      if (ExtNode.CC > 14) then
        usedRng.Rows.Group(EmptyParam, EmptyParam, EmptyParam, EmptyParam);
      inc(j);
    end;// while j <= ExtNodesList.Count

    WorkSheet.Activate(lcid);
    usedRng:= WorkSheet.UsedRange[lcid];
    usedRng.Columns.ColumnWidth:= 25;
    usedRng.WrapText:= True;
    usedRng.Rows.AutoFit;
    for i:= CurrentDepth+1 downto 1 do WorkSheet.Outline.ShowLevels(i, EmptyParam);

    SheetID:= 1;
    SheetName:= 'Данные для импорта';
    WorkSheet:= WorkBook.Sheets.Item[SheetID] as Excel_TLB._Worksheet;
    WorkSheet.Name:= fnValidExcelSheetName(SheetName);

    usedRng:= WorkSheet.Range['A1', 'K1'];
    usedRng.Cells.WrapText:= True;
    usedRng.Interior.Color:= isHeaderCell;
    usedRng.Font.Color:= isHeaderText;
    usedRng.Font.Bold:= True;
    usedRng.VerticalAlignment:= xlCenter;
    usedRng.HorizontalAlignment:= xlCenter;

    usedRng:= Worksheet.Range['A1', EmptyParam];
    usedRng.Value2:= 'Товар';
    usedRng.Columns.ColumnWidth:= 19;

    usedRng:= Worksheet.Range['B1', EmptyParam];
    usedRng.Value2:= 'Узел';
    usedRng.Columns.ColumnWidth:= 19;

    usedRng:= Worksheet.Range['C1', EmptyParam];
    usedRng.Value2:= 'Модель / Модельный ряд';
    usedRng.Columns.ColumnWidth:= 33;

    usedRng:= Worksheet.Range['D1', EmptyParam];
    usedRng.Columns.ColumnWidth:= 19;
    usedRng.Value2:= 'Код операции';

    usedRng:= Worksheet.Range['E1', EmptyParam];
    usedRng.Columns.ColumnWidth:= 19;
    usedRng.Value2:= 'Источник данных';
    if TypeSys=constIsMoto then begin
        usedRng:= Worksheet.Range['F1', EmptyParam];
        usedRng.Value2:= 'Название критерия';
        usedRng.Columns.ColumnWidth:= 19;

        usedRng:= Worksheet.Range['G1', EmptyParam];
        usedRng.Value2:= 'Значение критерия';
        usedRng.Columns.ColumnWidth:= 19;

        usedRng:= Worksheet.Range['H1', EmptyParam];
        usedRng.Columns.ColumnWidth:= 19;
        usedRng.Value2:= 'Название критерия';

        usedRng:= Worksheet.Range['I1', EmptyParam];
        usedRng.Columns.ColumnWidth:= 19;
        usedRng.Value2:= 'Значение критерия';

        usedRng:= Worksheet.Range['J1', EmptyParam];
        usedRng.Columns.ColumnWidth:= 19;
        usedRng.Value2:= 'Название критерия';

        usedRng:= Worksheet.Range['K1', EmptyParam];
        usedRng.Columns.ColumnWidth:= 19;
        usedRng.Value2:= 'Значение критерия';
    end; // if TypeSys=constIsMoto
    WorkSheet.Activate(lcid);
    WorkSheet.Range['F2', 'F2'].Select;
    XL.ActiveWindow.FreezePanes:= True;

    SheetID:= 4;
    SheetName:= 'Список товаров';
    WorkSheet:= WorkBook.Sheets.Item[SheetID] as Excel_TLB._Worksheet;
    WorkSheet.Name:= fnValidExcelSheetName(SheetName);

    usedRng:= WorkSheet.Range['A1', 'F1'];  // рисуем шапку листа:
    usedRng.Cells.WrapText:= True;
    usedRng.Interior.Color:= isHeaderCell;
    usedRng.Font.Color:= isHeaderText;
    usedRng.Font.Bold:= True;
    usedRng.VerticalAlignment:= xlCenter;
    usedRng.HorizontalAlignment:= xlCenter;
    usedRng.Rows.RowHeight:= 45;

    usedRng:= Worksheet.Range['A1', EmptyParam];
    usedRng.Value2:= 'Наименование товара';
    usedRng.Columns.ColumnWidth:= 40;

    usedRng:= Worksheet.Range['B1', EmptyParam];
    usedRng.Value2:= 'Группа';
    usedRng.Columns.ColumnWidth:= 40;

    usedRng:= Worksheet.Range['C1', EmptyParam];
    usedRng.Value2:= 'Краткое описание товара';
    usedRng.Columns.ColumnWidth:= 50;

    usedRng:= Worksheet.Range['D1', EmptyParam];
    usedRng.Columns.ColumnWidth:= 12;
    usedRng.Value2:= 'Кол-во '#10+'привязанных '#10+'моделей';

    usedRng:= Worksheet.Range['E1', EmptyParam];
    usedRng.Columns.ColumnWidth:= 12;
    usedRng.Value2:= 'Кол-во '#10+'ошибочно '#10+'привязанных '#10+'моделей';

    usedRng:= Worksheet.Range['F1', EmptyParam];
    usedRng.Columns.ColumnWidth:= 15;
    usedRng.Value2:= 'Менеджер';

    case TypeSys of
      constIsAuto: Role:= rolModelManageAuto;
      constIsMoto: Role:= rolModelManageMoto;
    end;
    Wares:= Cache.GetSysManagerWares(TypeSys);
    WareDataList:= fnGetWareAnaliticsDataObjects(Wares, RepType, Role, TypeSys);

    i:= 2;
    OddFlag:= false;
    isOddRow:= cHEXtoINT(cnOddRow);
    isEvenRow:= cHEXtoINT(cnEvenRow);
//vvvvvvvvvvvvv    
  SLLinkWrong:= TStringList.Create;
  try try  //--------------------------------------------------------------- из базы
    IBORD:= cntsORD.GetFreeCnt;
    IBORDSQL:= fnCreateNewIBSQL(IBORD, 'IBORDSQL_FillSelfData', -1, tpRead, true);
    IBORDSQL.SQL.Text:= 'select lw1.LDMWWARECODE, count(DMOSCODE) CountWrong, lw1.LDMWWRONG from LINKDETMODWARE lw1'+
      '  inner join LINKDETAILMODEL l1 on l1.LDEMCODE=lw1.LDMWLDEMCODE and l1.LDEMWRONG="F"'+
      '  inner join DIRMODELS m1 on m1.DMOSCODE=l1.LDEMDMOSCODE and m1.dmosisvisible="T"'+
      '  inner join DIRMODELLINES ml1 on ml1.DRMLCODE=m1.DMOSDRMLCODE and ml1.drmldtsycode='+IntToStr(TypeSys)+
      '  where lw1.LDMWWRONG="T"'+
      '  group by lw1.LDMWWRONG, lw1.LDMWWARECODE';
    IBORDSQL.Prepare;
//    if (pMfau>0) then ORD_IBS.SQL.Text:= ORD_IBS.SQL.Text+' and ml1.drmlmfaucode='+IntToStr(FWare. pMfau);
    IBORDSQL.ExecQuery;
    while not IBORDSQL.Eof do begin
      SLLinkWrong.AddObject(IBORDSQL.FieldByName('LDMWWARECODE').AsString, pointer(IBORDSQL.FieldByName('CountWrong').AsInteger));
      IBORDSQL.Next;
    end; 
  except
    on E: EBOBError do raise EBOBError.Create('LinkWrong '+': '+E.Message);
    on E: Exception do prMessageLOGS('LinkWrong '+': '+E.Message, fLogCache);
  end;
  finally
    prFreeIBSQL(IBORDSQL);
    cntsORD.SetFreeCnt(IBORD, True);
  end;    
//vvvvvvvvvvvvvvv    
    for j:= 0 to WareDataList.Count-1 do begin
      TestCssStopException;
      Ware:= TWareAnaliticsData(WareDataList.Items[j]);
      ss:= IntToStr(i);

      usedRng:= Worksheet.Range['A'+ss, EmptyParam];
      usedRng.Value2:= Ware.Name;

      usedRng:= Worksheet.Range['B'+ss, EmptyParam];
      usedRng.Value2:= Ware.PgrName;

      usedRng:= Worksheet.Range['C'+ss, EmptyParam];
      usedRng.Value2:= Ware.Descr;

      usedRng:= Worksheet.Range['D'+ss, EmptyParam];
      usedRng.Value2:= Ware.UsageCount;

      usedRng:= Worksheet.Range['E'+ss, EmptyParam];
      k:= SLLinkWrong.IndexOf(IntToStr(Ware.Ware.ID)); 
      if k > -1 then 
        usedRng.Value2:= IntToStr(integer(SLLinkWrong.Objects[k]))
      else
        usedRng.Value2:= '0';

      usedRng:= Worksheet.Range['F'+ss, EmptyParam];
      usedRng.Value2:= Ware.WareMgr;

      usedRng:= WorkSheet.Range['A'+ss, 'F'+ss];
      if OddFlag then begin
        usedRng.Interior.Color:= isOddRow;
        OddFlag:= False;
      end else begin
        usedRng.Interior.Color:= isEvenRow;
        OddFlag:= True;
      end;
      inc(i);
    end;
    prFree(SLLinkWrong);
//    k:=0;
    
    WorkSheet.Activate(lcid);
    XL.ActiveWindow.SplitRow:= 1;
    XL.ActiveWindow.FreezePanes:= True;

    if TypeSys=constIsMoto then begin
        SheetID:= 5;
        SheetName:= 'Критерии';
        WorkSheet:= WorkBook.Sheets.Item[SheetID] as Excel_TLB._Worksheet;
        WorkSheet.Name:= fnValidExcelSheetName(SheetName);

        usedRng:= WorkSheet.Range['A1','A1']; // рисуем шапку листа:
        usedRng.Cells.WrapText:= True;
        usedRng.Interior.Color:= isHeaderCell;
        usedRng.Font.Color:= isHeaderText;
        usedRng.Font.Bold:= True;
        usedRng.VerticalAlignment:= xlCenter;
        usedRng.HorizontalAlignment:= xlCenter;
        usedRng.Rows.RowHeight:= 45;

        usedRng:= Worksheet.Range['A1', EmptyParam];
        usedRng.Value2:= 'Название критерия';
        usedRng.Columns.ColumnWidth:= 40;

        IBORD:= cntsORD.GetFreeCnt;
        i:= 2;
        try
          IBORDSQL:= fnCreateNewIBSQL(IBORD, 'SQL_'+nmProc, -1, tpRead, true);
          IBORDSQL.SQL.Text:= 'SELECT WCRICODE, WCRIDESCR FROM WARECRITERIES'+
                              ' ORDER BY UPPERCASE(WCRIDESCR)';
          IBORDSQL.ExecQuery;
          while not IBORDSQL.EOF do begin
            usedRng:= Worksheet.Range['A'+IntToStr(i), EmptyParam];
            usedRng.Value2:= IBORDSQL.fieldByName('WCRIDESCR').AsString;
            inc(i);
            IBORDSQL.Next;
          end;
        finally
          prFreeIBSQL(IBORDSQL);
          cntsORD.SetFreeCnt(IBORD, True);
        end;
        WorkSheet.Activate(lcid);
        XL.ActiveWindow.SplitRow:= 1;
        XL.ActiveWindow.FreezePanes:= True;
    end; // if TypeSys=constIsMoto

//--------------------------------------------- Модели
    SheetID:= 2;
    SheetName:= 'Модели';
    WorkSheet:= WorkBook.Sheets.Item[SheetID] as Excel_TLB._Worksheet;
    WorkSheet.Name:= fnValidExcelSheetName(SheetName);
    WorkSheet.Outline.SummaryRow:= xlSummaryAbove;
    WorkSheet.Outline.AutomaticStyles:= False;


    case TypeSys of
      constIsAuto: begin // модели - в отдельный файл
        ss:= ExtractFileName(FName);
        usedRng:= Worksheet.Range['A1', EmptyParam];
        usedRng.Interior.Color:= isHeaderCell;
        usedRng.Font.Color:= isHeaderText;
        usedRng.Font.Bold:= True;
        usedRng.VerticalAlignment:= xlCenter;
        usedRng.Value2:= 'См. модели в файле m_'+ss; // в основной файл - комментарий
        usedRng.Columns.ColumnWidth:= 19;

        Workbook.CheckCompatibility:= False; // закрываем основной файл
        WorkBook.SaveCopyAs(FName, lcid);
        WorkBook.Close(false, EmptyParam, EmptyParam, lcid);

        FName:= StringReplace(FName, ss, 'm_'+ss, []); // имя доп.файла с моделями

        XL.Workbooks.Add(EmptyParam, lcid); // создаем доп.файл для моделей
        WorkBook:= XL.ActiveWorkbook;

        SheetCount:= WorkBook.Sheets.Count;
        if (SheetCount<2) then
          while SheetCount<2 do begin    // Добавим один новый лист после текущего
            XL.ActiveWorkbook.Sheets.Add(EmptyParam,
              WorkBook.Sheets.Item[WorkBook.Sheets.Count], 1, xlWorksheet, lcid);
            SheetCount:= WorkBook.Sheets.Count;
          end;

        SheetID:= 2;
        SheetName:= 'Модели';
        WorkSheet:= WorkBook.Sheets.Item[SheetID] as Excel_TLB._Worksheet;
        WorkSheet.Name:= fnValidExcelSheetName(SheetName);
        WorkSheet.Outline.SummaryRow:= xlSummaryAbove;
        WorkSheet.Outline.AutomaticStyles:= False;
        isHeaderCell:= cHexToInt(cnHeaderCell); // Рисуем шапку листа
        isHeaderText:= cHEXtoINT(cnHeaderText);

        usedRng:= WorkSheet.Range['A1', 'I1'];
        usedRng.Cells.WrapText:= True;
        usedRng.Interior.Color:= isHeaderCell;
        usedRng.Font.Color:= isHeaderText;
        usedRng.Font.Bold:= True;
        usedRng.VerticalAlignment:= xlCenter;
        usedRng.HorizontalAlignment:= xlCenter;

        usedRng:= Worksheet.Range['A1', EmptyParam];
        usedRng.Value2:= 'Производитель '+fnIfStr(TypeSys=constIsAuto, 'АВТО', 'МОТО');
        usedRng.Columns.ColumnWidth:= 19;

        usedRng:= Worksheet.Range['B1', EmptyParam];
        usedRng.Value2:= 'Модельный ряд';
        usedRng.Columns.ColumnWidth:= 19;

        usedRng:= Worksheet.Range['C1', EmptyParam];
        usedRng.Value2:= 'Модель';
        usedRng.Columns.ColumnWidth:= 16;

        usedRng:= Worksheet.Range['D1', EmptyParam];
        usedRng.Value2:= 'Наименование для вставки';
        usedRng.Columns.ColumnWidth:= 38;

        usedRng:= Worksheet.Range['E1', EmptyParam];
        usedRng.Columns.ColumnWidth:= 16;
        usedRng.Value2:= 'Годы выпуска';

        usedRng:= Worksheet.Range['F1', EmptyParam];
        usedRng.Value2:= 'Маркировки двигателя';
        usedRng.Columns.ColumnWidth:= 16;

        usedRng:= Worksheet.Range['G1', EmptyParam];
        usedRng.Columns.ColumnWidth:= 13;
        usedRng.Value2:= 'Мощность, л.с.';

        usedRng:= Worksheet.Range['H1', EmptyParam];
        usedRng.Columns.ColumnWidth:= 13;
        usedRng.Value2:= 'Кол-во клапанов';

        usedRng:= Worksheet.Range['I1', EmptyParam];
        usedRng.Columns.ColumnWidth:= 15;
        usedRng.Value2:= 'Тип привода';

        SetLength(s, 5);
      end;
      constIsMoto: begin
        usedRng:= WorkSheet.Range['A1', 'D1'];
        usedRng.Cells.WrapText:= True;
        usedRng.Interior.Color:= isHeaderCell;
        usedRng.Font.Color:= isHeaderText;
        usedRng.Font.Bold:= True;
        usedRng.VerticalAlignment:= xlCenter;
        usedRng.HorizontalAlignment:= xlCenter;

        usedRng:= Worksheet.Range['A1', EmptyParam];
        usedRng.Value2:= 'Производитель '+fnIfStr(TypeSys=constIsAuto, 'АВТО', 'МОТО');
        usedRng.Columns.ColumnWidth:= 21;

        usedRng:= Worksheet.Range['B1', EmptyParam];
        usedRng.Value2:= 'Модельный ряд';
        usedRng.Columns.ColumnWidth:= 19;

        usedRng:= Worksheet.Range['C1', EmptyParam];
        usedRng.Value2:= 'Модель';
        usedRng.Columns.ColumnWidth:= 24;

        usedRng:= Worksheet.Range['D1', EmptyParam];
        usedRng.Value2:= 'Наименование для импорта';
        usedRng.Columns.ColumnWidth:= 60;
      end;
    end;  // case

    isModelLineCell:= cHEXtoINT(cnGrayModelLine);
    isModelCell:= cHEXtoINT(cnGrayModel);

    ModelLinesList:= Cache.FDCA.Manufacturers.GetSortedList(TypeSys);
    for k:= 0 to ModelLinesList.Count-1 do begin
      Manuf:= TManufacturer(ModelLinesList.Objects[k]);
      if not Manuf.HasVisMLModels(TypeSys) then Continue;
      ManufsList.AddObject(ModelLinesList[k], ModelLinesList.Objects[k]);
    end;
//    ModelLinesList:= nil;

    MfCount:= ManufsList.Count;
    rows:= MfCount;
    for icount:= 0 to MfCount-1 do begin
      Manuf:= TManufacturer(ManufsList.Objects[icount]);
      ModelLinesList:= Manuf.GetModelsList(TypeSys);
      rows:= rows+Manuf.GetModelLinesList(TypeSys, false).Count+ModelLinesList.Count;
      ModelLinesList.Clear;
    end;
    usedRng:= WorkSheet.Range['D1','D'+IntToStr(rows)];
    usedRng.WrapText:= True;

    ii:= 2;
    for k:= 0 to MfCount-1 do begin
      TestCssStopException;
      MLinesCount:= 0;
      jj:= 0;    //
      Manuf:= TManufacturer(ManufsList.Objects[k]);

      ModelLinesList:= Manuf.GetModelLinesList(TypeSys, false);

      usedRng:= WorkSheet.Range[IntToABC(jj)+IntToStr(ii), EmptyParam];
      usedRng.Value2:= Manuf.Name;     // jj:= 0
      inc(ii);// переходим на следующую строку
      for l:= 0 to ModelLinesList.Count-1 do begin
        TestCssStopException;
        jj:= 1;
        ModelLine:= Cache.FDCA.ModelLines.GetModelLine(integer(ModelLinesList.Objects[l]));
        if not ModelLine.IsVisible then Continue;
        if not ModelLine.HasVisModels then Continue;

        ModelsList:= ModelLine.GetListModels;
        if ModelsList.Count = 0 then Continue;
        inc(MLinesCount);
        ModelsCount:= 0;
        usedRng:= WorkSheet.Range[IntToABC(jj)+IntToStr(ii), EmptyParam];
        usedRng.Value2:= ''''+ModelLine.Name;    // jj:= 1;
        usedRng.WrapText:= True;

        ss:= StringReplace(fnGetYMBE(ModelLine.YStart, ModelLine.MStart,
          ModelLine.YEnd, ModelLine.MEnd), cWebSpace, ' ', [rfReplaceAll]);
        jj:= 4;
        usedRng:= WorkSheet.Range[IntToABC(jj)+IntToStr(ii), EmptyParam];
        s1:= ''''+Copy(ss, 3, Length(ss)-3);
        usedRng.Value2:= s1;

        jj:= 3;
        sCell:= IntToABC(jj)+IntToStr(ii);
        usedRng:= WorkSheet.Range[sCell, EmptyParam];
        usedRng.Value2:= Manuf.Name+' '+ModelLine.Name+' '+ss;

        usedRng.Borders.Item[xlDiagonalDown].LineStyle:= xlNone;
        usedRng.Borders.Item[xlDiagonalUp].LineStyle:= xlNone;
        usedRng.Borders.Item[xlEdgeRight].Color:= fnGetIntFromRGB(fnColorModulator(ModelLine.ID));
        usedRng.Borders.Item[xlEdgeRight].LineStyle:= xlContinuous;
        usedRng.Borders.Item[xlEdgeRight].Weight:= xlThin;
        usedRng.Interior.Color:= isModelLineCell;
        WorkSheet.Hyperlinks.Add(usedRng,'#'''+SheetName+'''!'+sCell, EmptyParam, EmptyParam, EmptyParam);

        inc(ii); // переходим на следующую строку
        for m:= 0 to ModelsList.Count-1 do begin
          jj:= 2;
          Model:= Cache.FDCA.Models.GetModel(integer(ModelsList.Objects[m]));
          if not Model.IsVisible then Continue;
          inc (MLinesCount);
          inc (ModelsCount);
          usedRng:= WorkSheet.Range[IntToABC(jj)+IntToStr(ii), EmptyParam];
          usedRng.Value2:= ''''+Model.Name;
          usedRng.WrapText:= True;

          inc(jj);    // jj=3
          sCell:= IntToABC(jj)+IntToStr(ii);
          case TypeSys of
            constIsAuto: begin
              for i:= 0 to High(s) do s[i]:= '';
              with Model do begin
                s[0]:= fnGetYMBE(Params.pYStart, Params.pMStart, Params.pYEnd, Params.pMEnd, ' - ');
                s[1]:= MarksCommaText;
                s[2]:= IntToStr(Params.pHP);
                s[3]:= IntToStr(Params.pCylinders*Params.pValves);
                s[4]:= Cache.FDCA.TypesInfoModel.InfoItems[Params.pDriveID].Name; //Найти наименование!
              end;
              usedRng:= WorkSheet.Range[sCell, EmptyParam];
              usedRng.Value2:= Manuf.Name+' '+ModelLine.Name+' '+Model.Name+' '+s[0];
              usedRng.Borders.Item[xlDiagonalDown].LineStyle:= xlNone;
              usedRng.Borders.Item[xlDiagonalUp].LineStyle:= xlNone;
              usedRng.Borders.Item[xlEdgeRight].Color:= fnGetIntFromRGB(fnColorModulator(Model.ID));
              usedRng.Borders.Item[xlEdgeRight].LineStyle:= xlContinuous;
              usedRng.Borders.Item[xlEdgeRight].Weight:= xlThin;
              usedRng.Interior.Color:= isModelCell;
              WorkSheet.Hyperlinks.Add(usedRng,'#'''+SheetName+'''!'+sCell, EmptyParam, EmptyParam, EmptyParam);
              inc(jj);
              usedRng:= WorkSheet.Range[IntToABC(jj)+IntToStr(ii), EmptyParam];
              s1:= s[0];
              s1:= ''''+Copy(s1, 3, Length(s1)-3);
              usedRng.Value2:= s1;
              for i:= 1 to high(s) do begin
                inc(jj);
                ss:= IntToABC(jj);
                sCell:= ss+IntToStr(ii);
                usedRng:= WorkSheet.Range[sCell, EmptyParam];
                usedRng.Value2:= s[i];
                if (ss='I') or (ss='F') then  usedRng.WrapText:= true;
              end;
            end;  // constIsAuto

            constIsMoto: begin
              usedRng:= WorkSheet.Range[sCell, EmptyParam];
              usedRng.Value2:= Manuf.Name+' '+ModelLine.Name+' '+Model.Name;
              usedRng.Borders.Item[xlDiagonalDown].LineStyle:= xlNone;
              usedRng.Borders.Item[xlDiagonalUp].LineStyle:= xlNone;
              usedRng.Borders.Item[xlEdgeRight].Color:= fnGetIntFromRGB(fnColorModulator(Model.ID));
              usedRng.Borders.Item[xlEdgeRight].LineStyle:= xlContinuous;
              usedRng.Borders.Item[xlEdgeRight].Weight:= xlThin;
              usedRng.Interior.Color:= isModelCell;
            end; // constIsMoto
          end;
          inc(ii);
        end;// for m:= 0 to ModelsList.Count-1 do

        usedRng:= WorkSheet.Range['B'+IntToStr(ii-ModelsCount),'B'+IntToStr(ii-1)];
        usedRng.Rows.Group(EmptyParam, EmptyParam, EmptyParam, EmptyParam);
      end; // for l:= 0 to ModelLinesList.Count-1 do

      usedRng:= WorkSheet.Range['A'+IntToStr(ii-MLinesCount),'A'+IntToStr(ii-1)];
      usedRng.Rows.Group(EmptyParam, EmptyParam, EmptyParam, EmptyParam);
    end; // for k:= 0 to ManufsList.Count-1 do

    usedRng:= WorkSheet.Range['A2', WorkSheet.Range['A2', EmptyParam].SpecialCells(xlCellTypeLastCell, EmptyParam)];
    usedRng.Rows.AutoFit;

    WorkSheet.Activate(lcid);
    WorkSheet.Range['D2', 'D2'].Select;
    XL.ActiveWindow.FreezePanes:= True;
    for i:= 3 downto 1 do WorkSheet.Outline.ShowLevels(i, EmptyParam);
//--------------------------------------------- Модели

  except
    on E: Exception do begin
      prMessageLOGS(E.Message, 'import', false);
      raise;
    end;
  end;
 finally
  Workbook.CheckCompatibility:= False;
  WorkBook.SaveCopyAs(FName, lcid);
  WorkBook.Close(false, EmptyParam, EmptyParam, lcid);
  XL.Quit;// закрыть Excel
  XL.Disconnect;
  CoUnInitialize;
  prFree(XL);
  ExtNodesList.Clear;
  prFree(ExtNodesList);
  prFree(TreeList);
  SetLength(parentNodes, 0);
  prFree(WareDataList);
  prFree(Wares);
  SetLength(s, 0);
  prFree(ManufsList);
 end;
end;
//------------------------------------------------------------------------------
procedure apReCreateWareDetModPatternFile (aTypeSys: integer; UserID: integer=0; ThreadDataID: integer=0);
const nmProc = 'apReCreateWareDetModPatternFile';
      attempts = 3;
var PatternDate: TDateTime;
    LstBodyMail: TStringList;
    FName, FNameTmp, FNameMod, FNameModTmp, ss, sSys, s1, s2: string;
    Success, flReCreate: boolean;
    Timer: TDateTime;
//    i: integer;
    Year1, Year2, DayOfYear1, DayOfYear2, H, M, S, ms: word;
begin
//  i:= 0;
  FNameMod:= '';
  FNameModTmp:= '';
  try
    Success:= false;
    sSys:= fnIfStr(aTypeSys=constIsAuto, 'Auto', 'Moto');
    lstBodyMail:= TStringList.Create;
    try
      s1:= ExtractFilePath(Application.ExeName);
      s2:= sSys+constWareDetModFileName+'.xlsx';
      FName:= s1+s2;
      FNameTmp:= s1+'Tmp_'+s2;
      SysUtils.DeleteFile(FNameTmp);
      if (aTypeSys=constIsAuto) then begin
        FNameMod:= s1+'m_'+s2;
        FNameModTmp:= s1+'m_Tmp_'+s2;
        SysUtils.DeleteFile(FNameModTmp);
      end;
      flReCreate:= not FileExists(FName);
//prMessageLOGS(nmProc+': '+fnIfStr(FileExists(FName),'FileExists '+FName,'not FileExists '+FName), 'Import');
      if not flReCreate then begin
        Timer:= Time;
        DecodeTime(Timer, H, M, S, ms);
        if H > 7 then begin
//prMessageLOGS(nmProc+': Time > 7', 'Import');        
          isFileUnderConstruction[aTypeSys]:= False; // больше 6 часов, шаблон не формирую
          Success:= true;
        end else begin
          {$Ifdef Ver140} PatternDate:= FileDateToDateTime(FileAge(Fname))
          {$ELSE} FileAge(Fname, PatternDate) {$EndIf};
          Timer:= Now;
          DecodeDateDay(PatternDate, Year1, DayOfYear1);
          DecodeDateDay(Timer, Year2, DayOfYear2);
//prMessageLOGS(nmProc+': PatternDate='+DateToStr(PatternDate), 'Import');     
//prMessageLOGS(nmProc+': Now='+DateToStr(Timer), 'Import'); 

          flReCreate:= trunc(PatternDate)<trunc(Timer);//(Year2 >= Year1) and (DayOfYear2 > DayOfYear1);
//prMessageLOGS(nmProc+': '+fnIfStr(flReCreate,'PatternDate < Timer','' ), 'Import');          
        end;
      end;

      if flReCreate then begin
        try
          apWareDetModFileFormer(aTypeSys, FNameTmp);
        except
          on E: Exception do begin
            prMessageLOGS(nmProc+': '+E.Message, 'Import');
            raise;
          end;
        end;

        if FileExists(FNameTmp) then begin
          isFileUnderConstruction[aTypeSys]:= true;
          try
            SysUtils.DeleteFile(FName);
            RenameFile(FNameTmp, FName);
            SysUtils.DeleteFile(FNameTmp);
            if (aTypeSys=constIsAuto) then begin
              SysUtils.DeleteFile(FNameMod);
              RenameFile(FNameModTmp, FNameMod);
              SysUtils.DeleteFile(FNameModTmp);
            end;
          finally
            isFileUnderConstruction[aTypeSys]:= false;
          end;
          Success:= true;
          prMessageLOGS('Шаблон 19-'+sSys+' сформирован', 'Import', False);
        end;
      end else Success:= true;
    finally
      isFileUnderConstruction[aTypeSys]:= false;
      if not Success then begin
        ss:= 'Не удалось сформировать шаблон 19-'+sSys+'!'#10+
             'Следующая попытка формирования - по запросу пользователя.';
        prMessageLOGS(nmProc+': '+ss, 'Import');
        LstBodyMail.Add(ss);
        ss:= Cache.GetConstEmails(pcEmplORDERAUTO);
        if ss='' then ss:= fnGetSysAdresVlad(4);
        ss:= n_SysMailSend(ss, 'Отчет об авто-формировании шаблона 19-'+sSys, LstBodyMail, nil, '', '', true);
        if ss<>'' then prMessageLOGS(nmProc+': ошибка отправки отчета '+ss, 'Import');
      end;
      prFree(LstBodyMail);
    end;
  except
    on E: Exception do begin  //переименовать
      SysUtils.DeleteFile(FNameTmp);
      if (aTypeSys=constIsAuto) then SysUtils.DeleteFile(FNameModTmp);
    end;
  end;
end;
//------------------------------------------------------------------------------
function fnCheckWareDetModFileValid(UserID, ThreadDataID: integer): string;
const nmProc = 'CheckWareDetModFileValid';
      RepType = 19;
var PatternDate: TDateTime;
    PathFile, FName, Name, FNameTmp, NameTmp, ss, FNameMod, FNameModTmp: string;
    IBQuery: TIBSQL;
    IBD: TIBDatabase;
    TypeSys, i: integer;
    Ware: TWareInfo;
    flReCreate: Boolean;
begin
  Result:= '';
  IBD:= nil;
  IBQuery:= nil;
  TypeSys:= constBegTypeSys;
  FNameMod:= '';
  FNameModTmp:= '';
  if fnUserRolesEntree(RepType, fnGetUserRoles(UserID)) then
    TypeSys:= fnTypeSysDecision(UserID)
  else for i:= 0 to High(Cache.arWareInfo) do begin
    if not Cache.WareExist(i) then Continue;
    Ware:= Cache.arWareInfo[i];
    if Ware.ManagerID<>UserID then Continue;
    if (Ware.IsAUTOWare) and (not Ware.IsMOTOWare) then begin
      TypeSys:= constIsAuto;
      Break;
    end;
    if (Ware.IsMOTOWare) and (not Ware.IsAUTOWare) then begin
      TypeSys:= constIsMoto;
      Break;
    end;
  end;

//  while isFileUnderConstruction[TypeSys] do Sleep(1000); // ???

  PathFile:= ExtractFilePath(Application.ExeName);
  Name:= fnIfStr(TypeSys=constIsAuto, 'Auto', 'Moto')+constWareDetModFileName;
  FName:= PathFile+Name+'.xlsx';
  NameTmp:= 'TMP_'+Name;
  FNameTmp:= PathFile+NameTmp+'.xlsx';

  if (TypeSys=constIsAuto) then begin
    FNameMod:= PathFile+'m_'+Name+'.xlsx';
    FNameModTmp:= PathFile+'m_'+NameTmp+'.xlsx';
  end;

  flReCreate:= not FileExists(FName);

  if not flReCreate then try
    {$Ifdef Ver140} PatternDate:= FileDateToDateTime(FileAge(Fname))
    {$ELSE} FileAge(Fname, PatternDate) {$EndIf};
    IBD:= cntsORD.GetFreeCnt;
    IBQuery:= fnCreateNewIBSQL(IBD, 'IBQuery_'+nmProc, -1, tpRead, true);
    ss:= IntToStr(TypeSys);
    IBQuery.SQL.Text:= 'SELECT MAX(trna.trnatimeadd) as LASTADDEDNODE,'+
      ' (SELECT MAX(dm.dmostimeadd) FROM DIRMODELS dm'+
      ' INNER JOIN dirmodellines dml on dml.drmlcode=dm.dmosdrmlcode'+
      ' WHERE dml.drmldtsycode='+ss+') as LASTADDEDMODEL'+
      ' FROM TREENODESAUTO trna WHERE trna.trnadtsycode='+ss;
    IBQuery.ExecQuery;
    if (IBQuery.Bof and IBQuery.Eof) then
      raise Exception.Create ('Не удалось получить даты последних обновлений узлов и моделей.');
    flReCreate:= (PatternDate < IBQuery.FieldByName('LASTADDEDNODE').AsDateTime) or
                 (PatternDate < IBQuery.FieldByName('LASTADDEDMODEL').AsDateTime);
  finally
    prFreeIBSQL(IBQuery);
    cntsORD.SetFreeCnt(IBD, True);
  end;

  if flReCreate then try  // создаем новый файл по образу и подобию
    while isFileUnderConstruction[TypeSys] do Sleep(1000);
    SysUtils.DeleteFile(FNameTmp);
    if (TypeSys=constIsAuto) then SysUtils.DeleteFile(FNameModTmp);
    apWareDetModFileFormer(TypeSys, FNameTmp);
    if FileExists(FNameTmp) then begin
      isFileUnderConstruction[TypeSys]:= True;
      SysUtils.DeleteFile(FName);
      RenameFile(FNameTmp, FName);
      if (TypeSys=constIsAuto) and (FileExists(FNameModTmp)) then begin
        SysUtils.DeleteFile(FNameMod);
        RenameFile(FNameModTmp, FNameMod);
      end;
    end;
  except
    on E: Exception do prMessageLOGS(nmProc+': '+E.Message, 'Import', false);
  end;
  isFileUnderConstruction[TypeSys]:= False;

//копируем файл на отдачу пользователю           //проверить существование папки
  if not GetEmplTmpFilePath(UserID, PathFile, ss) then raise EBOBError.Create(ss);
  try
    isFileUnderConstruction[TypeSys]:= True;
    Name:= Name+FormatDateTime('_dd.mm_(hh.nn)', Now);
    if CopyFile(PChar(FName), PChar(PathFile+Name+'.xlsx'), false) then
      Result:= PathFile+Name+'.xlsx';
    if (TypeSys=constIsAuto) and
      CopyFile(PChar(FNameMod), PChar(PathFile+'m_'+Name+'.xlsx'), false) then
      Result:= Result+','+PathFile+'m_'+Name+'.xlsx';
  finally
    isFileUnderConstruction[TypeSys]:= false;
  end;
end;
//============================================================================== 
procedure apGetWareDetModFile (UserID: integer; var lstBodyMail: TStringList; var FName, Subj, ContentType, s: string; ThreadData: TThreadData);
  const nmProc = 'apGetWareDetModFile';
begin
//  timerStart:= Now;
  FName:= fnCheckWareDetModFileValid(UserID, ThreadData.ID);

  Subj:= 'Шаблон файла для привязки товаров к моделям от '+FormatDateTime(cDateTimeFormatY2S, Now());      
  ContentType:= XMLContentType;
  lstBodyMail:= TStringList.Create;
(*  lstBodyMail.Add('Начало выполнения: '+FormatDateTime(cDateTimeFormatTSnD, timerStart));
  lstBodyMail.Add('Завершение выполнения: '+ FormatDateTime(cDateTimeFormatTSnD,Now));
  lstBodyMail.Add('Общее время выполнения: '+ FormatDateTime('hh:nn:ss',Now-timerStart));*)
end;

procedure prDelActionNews(Stream: TBoBMemoryStream; ThreadData: TThreadData);  //csDelActionNews, rolNewsManage
const nmProc = 'prDelActionNews'; // имя процедуры/функции                     //UserId и ID новости  integer
var
  UserId, ActionNewsID: integer;
  errmess: string;
  FirmID: integer;
  IBORDSQL, IBORDSQLdel: TIBSQL;
  IBORD: TIBDatabase;
  ActionNewsDateEnd: TDateTime;
  ActionNewsPict: string;
begin
  Stream.Position:= 0;
  try
    UserID := Stream.ReadInt;
    ActionNewsID := Stream.ReadInt;
    FirmID := isWe;

    prSetThLogParams(ThreadData, csDelActionNews, UserId, 0, ' UserID='+IntToStr(UserID)+' ActionNewsID='+ IntToStr(ActionNewsID) );

    if CheckNotValidUser(UserID, FirmID, errmess) then raise EBOBError.Create(errmess);

    if not Cache.arEmplInfo[UserID].UserRoleExists(rolNewsManage) then
      raise EBOBError.Create(MessText(mtkNotRightExists));
      
    //IBORD:= nil;
    IBORDSQL:= nil;
    IBORD:= cntsORD.GetFreeCnt;
    IBORDSQL:= fnCreateNewIBSQL(IBORD, 'SQL_'+nmProc, -1, tpRead, true);
    try
      IBORDSQL.SQL.Text:= 'select * from INFOBOXVIEWS where  IBVCODE='+ IntToStr(ActionNewsID);
      IBORDSQL.ExecQuery;
      if IBORDSQL.EOF then raise EBOBError.Create('Указанная новость не найдена');
          
      ActionNewsDateEnd:= IBORDSQL.fieldByName('IBVDATETO').AsDate;
      ActionNewsPict:= IBORDSQL.fieldByName('IBVLINKTOPICT').AsString;    //addimage.jpg
      IBORDSQL.Close;
      
      if (Date < ActionNewsDateEnd) then raise EBOBError.Create('Удаление не завершенной акции запрещено.');
      IBORDSQL:= nil;
      IBORDSQLdel:= fnCreateNewIBSQL(IBORD, 'SQLdel_'+nmProc, -1, tpWrite, true);
      IBORDSQLdel.SQL.Text:='delete from INFOBOXVIEWS where  IBVCODE='+ IntToStr(ActionNewsID);
      IBORDSQLdel.ExecQuery;
      IBORDSQLdel.Transaction.Commit;
    finally
      prFreeIBSQL(IBORDSQL);
      prFreeIBSQL(IBORDSQLdel);
      cntsORD.SetFreeCnt(IBORD, True);
    end;       

    Stream.Clear;
    Stream.WriteInt(aeSuccess);
    Stream.WriteStr(ActionNewsPict);

  except
    on E: EBOBError do begin
      Stream.Clear;
      Stream.WriteInt(aeCommonError);
      Stream.WriteStr(E.Message);
      fnWriteToLog(ThreadData, lgmsUserError, nmProc, '', E.Message, '');
    end;
    on E: Exception do begin
      Stream.Clear;
      Stream.WriteInt(aeCommonError);
      Stream.WriteStr(MessText(mtkErrProcess));
      fnWriteToLog(ThreadData, lgmsSysError, nmProc, '', E.Message, '');
    end;
  end;
  Stream.Position:= 0;
end; // prDelActionNews  

function fnExportNotInfoFileRep(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,
   ContentType:string; ThreadData: TThreadData; filter_data: string): string;
var Files: TarWareFileOpts;  
    i,j, fcount, SupID: integer; 
    s, Folder, FileName, FN, BaseUrl: string;
    PathFile: string;
    file_csv: textfile;
    pIniFile: TINIFile;
//timer, timerStart: TDateTime;    
    Percent, PPercent: real; 
    BrandList: TStringList;  
    Position: integer;
    BrandTD: string;       
begin
//timer:= Now;
//timerStart:= Now;
//prMessageLOGS('-----------------Export33.csv--------------------','Log_prg.log' , false);  
  //Percent:= 0;
  PPercent:= 0;
//  BrandList:=nil;
  if not GetEmplTmpFilePath(UserID, PathFile, s) then raise EBOBError.Create(s);  

  //FName:=PathFile+'Export33'+FormatDateTime('_dd.mm_(hh.nn)',Now)+'.csv';
  FName:= PathFile+fnFormRepFileName('33', '.csv', ImpCheck.GetCheckKind(UserID, ThreadData.ID));
  if FileExists(FName) and not SysUtils.DeleteFile(FName) then begin
    s:= MessText(mtkNotDelPrevFile);
    raise EBOBError.Create(MessText(mtkNotDelPrevFile));
  end;

  AssignFile(file_csv, FName);
  filemode:= fmOpenReadWrite; //назначаем файл
  if FileExists(FName) then Reset(file_csv) else ReWrite(file_csv);
  Append(file_csv); 
  s:= 'Товары, инфо-файлы которых не найдены' ;
  WriteLn(file_csv, s);
  s:= 'Наименование товара;Бренд TecDoc;Артикул в TecDoc;Файл';
  WriteLn(file_csv, s);
  fcount:= 0;  
  pIniFile:= TINIFile.Create(nmIniFileBOB);
  BaseUrl:= pIniFile.ReadString('Options', 'warefiles', '');
//prMessageLOGS('Приготовились'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;  

  BrandList:= Cache.BrandTDList;
  Percent:= 7;     
  ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);   
  Percent:= 70;       
  if Length(Cache.arWareInfo)>0 then PPercent:= Percent/Length(Cache.arWareInfo) else ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);
try
  for i:= 0 to Length(Cache.arWareInfo)-1 do begin
  try
    if Cache.arWareInfo[i].IsWare then begin
//      Cache.arWareInfo[i].ArticleTD
      Files:= Cache.arWareInfo[i].GetWareFiles;
      for j:= 0 to length(Files)-1 do begin
        prStopProcess( UserID, ThreadData.ID);
        SupID:= Files[j].SupID;
        Folder:= IntToStr(SupID);
        while Length(Folder)<4 do begin
          Folder:= '0'+Folder;
        end;
        FN:=  AnsiUpperCase(Files[j].FileName);
        if AnsiUpperCase(ExtractFileExt(FN))='.BMP' then begin
          FN:= 'vlad_'+Copy(FN, 1, Length(FN)-4)+'.jpg';
        end;        
        FileName:= BaseUrl+'\tdfiles\'+Folder+'\'+FN;
        s:= '';

        if not FileExists(FileName) then begin   //Cache.BrandTDList[Cache.arWareInfo[i].ArtSupTD]    
          Position:=BrandList.IndexOfObject(pointer(Cache.arWareInfo[i].ArtSupTD));
          if Position=-1 then BrandTD:= 'не определен'
          else BrandTD:= BrandList[Position];      
          s:= Cache.arWareInfo[i].Name+';'+ 
          BrandTD+';'+
          Cache.arWareInfo[i].ArticleTD{Files[j].FileName+';'+IntToStr(Files[j].SupID)}+';'+
          BaseUrl+'\tdfiles\'+Folder+'\'+Files[j].FileName;
          WriteLn(file_csv, s);
          inc(fcount);
        end;
      end;
      SetLength(Files,0);
    end;
    ImpCheck.SetProcessPercent(UserId,ThreadData.ID,PPercent);    
    except
      on E: Exception do begin
        prMessageLOGS('Ошибка в процедуре '+' '+ E.Message+' '+'FileName='+FileName, 'import', false) ; 
        raise EBOBError.Create('Ошибка при обработке. '+ E.Message);
      end;  
    end;
  end;
finally
  Subj:= 'Отчет 33 '+FormatDateTime(cDateTimeFormatY2S, Now());
  ContentType:= CSVContentType;// for Excel(.csv)
  lstBodyMail:= TStringList.Create;
  lstBodyMail.Add('Товары, инфо-файлы которых не найдены( '+IntToStr(fcount)+' файлов).'); 
  SetLength(Files, 0);
  CloseFile(file_csv);
  Percent:= 7;     
  ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);  
  prFree(pIniFile);  
end;
//prMessageLOGS('Время всего'+': - '+
//        FloatToStr(RoundTo((Now-timerStart)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:=  now;             
end;   
  
function fnWidthOfRangeRep(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,
   ContentType:string; ThreadData: TThreadData; filter_data: string): string;
const nmProc = 'fnWidthOfRangeRep'; // имя процедуры/функции   
var i, j, l, la: integer;
    AnalogsWare: array of boolean;
    Ware, AWare: TWareInfo;
    SLBrands, SLWares: TStringList;
    CountBrand, CountWares: integer;
    s, s1: string;
    Analogs: tai;
    PathFile: string;  
    file_csv: textfile;   
    lineAnalogs: tas;    
    ISLBrands: integer;
//    timer, timerStart: TDateTime;    
    Percent, PPercent: real;                     
begin
//timer:= Now;
//timerStart:= Now;
//prMessageLOGS('-----------------Export32.xml--------------------','Log_prg.log' , false);
SLBrands:=nil;
SLWares:=nil;  
SLBrands:= TStringList.Create;
SLWares:= TStringList.Create;
SetLength(Analogs,0);
//Percent:=0;
PPercent:= 0;
SetLength(AnalogsWare,length(Cache.arWareInfo));
for l:= 0 to length(AnalogsWare)-1 do begin
  AnalogsWare[l]:= False;
end;
 
try
  CountBrand:= Cache.WareBrands.Count-1;//length(cache.arWareInfo);
  if not GetEmplTmpFilePath(UserID, PathFile, s) then raise EBOBError.Create(s);  

  //FName:= PathFile+'Export32'+FormatDateTime('_dd.mm_(hh.nn)',Now)+'.csv';
  FName:= PathFile+fnFormRepFileName('32', '.csv', ImpCheck.GetCheckKind(UserID, ThreadData.ID));
  if FileExists(FName) and not SysUtils.DeleteFile(FName) then begin
    s:= MessText(mtkNotDelPrevFile);
    raise EBOBError.Create(MessText(mtkNotDelPrevFile));
  end;

  AssignFile(file_csv, FName, CP_UTF8);
  filemode:= fmOpenReadWrite; //назначаем файл
  if FileExists(FName) then Reset(file_csv) else ReWrite(file_csv);
  Append(file_csv);

  s:= 'Бренд;Наименование товара;Кол-во аналогов;';
  for i:= 0 to CountBrand do with TBrandItem(Cache.WareBrands.ItemsList[i]) do begin    
    SLBrands.AddObject(Name,Pointer(TBrandItem(Cache.WareBrands.ItemsList[i]).ID));
  end;
  SLBrands.Sort;
  SetLength(lineAnalogs,SLBrands.Count);
  for i:= 0 to SLBrands.Count-1 do begin  //названия брендов в первой строке  
    s:= s+ SLBrands[i]+';'{+IntTOStr(Integer(SLBrands.Objects[i]))};
  end;
  WriteLn(file_csv, s); 
  s:= ''; 
//prMessageLOGS('Приготовились'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;  
  Percent:= 7;     
  ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);   
  Percent:= 70;       
  if SLBrands.Count>0 then PPercent:= Percent/SLBrands.Count else ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);              
  for i:= 0 to SLBrands.Count-1 do begin             ///Cache.GetSysManagerWares.Objects[i]
    SLWares.Clear;
    SLWares:= Cache.GetSysManagerWares(0,0,Integer(SLBrands.Objects[i]),True);
    CountWares:= SLWares.Count-1; 
    //s:= s+ SLBrands[i];
    for j:= 0 to CountWares do begin
      try  
        Ware:= Cache.GetWare(integer(SLWares.Objects[j]));
        if {(SLAnalogsWare.Find(Ware.Name,Index))}not(AnalogsWare[Ware.ID]) and (not Ware.IsINFOgr) and not(Ware.IsArchive) then begin 
          SetLength(Analogs, 0);
          Analogs:= Ware.analogs;
          la:= 0;
          try      
            if copy(Ware.MainName,1,1)='0' then s1:= ''''    //.Name
            else s1:= '';
            if la=0 then s:= s+SLBrands[i]+';'+ s1+Ware.MainName+';'   //.Name
                    else s:=';;';
            for l:= 0 to length(Analogs)-1 do begin
              prStopProcess( UserID, ThreadData.ID);
              if  Analogs[l]<>0 then begin
                AWare:= Cache.GetWare(Analogs[l]);
                if not(AnalogsWare[AWare.ID]) then AnalogsWare[AWare.ID]:= True;                
                if (not AWare.IsINFOgr) and not(AWare.IsArchive) then begin
                  if not(SLBrands.Find(AWare.WareBrandName,ISLBrands)) then ISLBrands:= 0;
                    if copy(AWare.MainName,1,1) = '0' then s1:= ''''    //.Name
                    else s1:= '';       
                   if  lineAnalogs[ISLBrands]='' then lineAnalogs[ISLBrands]:= s1+AWare.MainName else //1 begin //.Name
                    lineAnalogs[ISLBrands]:= lineAnalogs[ISLBrands]+'|'+s1+AWare.MainName; //s1+AWare.Name;     //.Name
                    Analogs[l]:= 0;
                    inc(la);
                end;
              end;
            end;
            s:= s+IntToStr(la)+';';
            for l:= 0 to length(lineAnalogs)-1 do begin
              s:= s+ lineAnalogs[l]+';';
              lineAnalogs[l]:='';
            end;
            //if la>0 then 
            WriteLn(file_csv, s);//записать в файл строку
            s:= '';
          except
            on E: EStopError do s:= E.Message;
            on E: Exception do begin
              prMessageLOGS('Ошибка в процедуре '+nmProc+' '+ E.Message, 'import', false) ; 
              raise EBOBError.Create('Ошибка при обработке. '+ E.Message);
            end;  
          end;                
        end;  //if {(SLAnalogsWare.Find(Ware.Name,Index))}not(AnalogsWare[Ware.ID]) and (not Ware.IsINFOgr) and not(Ware.IsArchive) 
      except
        on E: EStopError do s:= E.Message;
        on E: Exception do begin
          prMessageLOGS('Ошибка в процедуре '+nmProc+' '+ E.Message, 'import', false) ; 
          raise EBOBError.Create('Ошибка при обработке. '+ E.Message);                             
        end;  
      end;     
    end; // for j:=0 to CountWares
  ImpCheck.SetProcessPercent(UserId,ThreadData.ID,PPercent);    
  end;

finally
  //s:= cache.arEmplInfo[191].Mail;
  Subj:='Отчет 32 '+FormatDateTime(cDateTimeFormatY2S, Now());
  ContentType:= CSVContentType;// for Excel(.csv)
  lstBodyMail:= TStringList.Create;
  lstBodyMail.Add('Определение ширины действующего ассортимента ');   
    
  CloseFile(file_csv);
  prFree(SLBrands);
  prFree(SLWares);
  SetLength(AnalogsWare,0);
  SetLength(lineAnalogs,0);
  Percent:= 7;
  ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent); 
  SetLength(Analogs, 0);
  result:= s;
end;
//prMessageLOGS('Время всего'+': - '+
//        FloatToStr(RoundTo((Now-timerStart)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;
end;     
  
function fnEmplRoleReg(UserID, ThreadDataID: integer): tai; // проверка на наличие других ролей, кроме регионал или суперрегионал  
var ibs: TIBSQL;
    ibdb: TIBDatabase; 
    RoleCount: integer; 
begin 
  SetLength(result,0);
  RoleCount:= 0;
  if length(Cache.arEmplInfo[UserId].UserRoles)=0 then begin 
    //result := -1;  
    exit;
  end; 
  ibs:= nil; 
  ibdb:= cntsOrd.GetFreeCnt;
//  if not Assigned(ibdb) then Exit;
try  
  ibs:= fnCreateNewIBSQL(ibdb, 'ibs_'+IntToStr(UserID), -1, tpRead, True);
  if ImpCheck.GetImpType(UserID, ThreadDataID)>0 then
  ibs.SQL.Text:= 'select  LITRROLECODE from LINKIMPTYPEROLE where LITRIMTPCODE='+ IntToStr(ImpCheck.GetImpType(UserID, ThreadDataID)); // связки видов импорта с ролями
  ibs.ExecQuery;
  SetLength(result,100);
  while not ibs.Eof do begin  
    if (fnInIntArray(ibs.fieldByName('LITRROLECODE').asInteger, Cache.arEmplInfo[UserId].UserRoles)>-1) 
    //and (ibs.fieldByName('LITRROLECODE').asInteger<>rolSuperRegional) 
    //and (ibs.fieldByName('LITRROLECODE').asInteger<>rolRegional) 
      then begin
        result[RoleCount]:= ibs.fieldByName('LITRROLECODE').asInteger;
        inc(RoleCount);
      end;
    ibs.Next;
  end;
  ibs.Close; 
  if RoleCount <100 then SetLength(result,RoleCount);
finally
  prFreeIBSQL(ibs);
  cntsOrd.SetFreeCnt(ibdb, True);
end;
end; 

function fnReportSearchQtyMax(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,     //30
   ContentType:string; ThreadData: TThreadData; filter_data: string):string;  
const nmProc = 'fnReportSearchQtyMax'; // имя процедуры/функции
      maxSearch = 0;
      countRequest = 1;
      countRequestWare = 2;
      countRequestWareQTY = 3;
      countConnect = 4;
var FilterData: TStringList;
    s: string;
    TypeRep: integer;
begin
  FilterData:= TStringList.Create;
  try
    FilterData.Text:= filter_data;
    TypeRep := StrToInt(FilterData.Values['dop_type']); // тип отчета
    try
    if TypeRep = maxSearch then s:= fnReportSearchWareMax(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData, filter_data);//fnConnectCountUser(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData, filter_data);
    if TypeRep = countRequest then s:= fnRepCountRequestLOG(UserID, lstBodyMail, FName, Subj,ContentType, ThreadData, filter_data);//fnRepCountRequest(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData, filter_data);
    if TypeRep = countRequestWare then s:= fnRepCountRequestWareLOG(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData, filter_data);//fnRepCountRequestWare(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData, filter_data);
    if TypeRep = countRequestWareQTY then s:= fnRepCountRequestWareQTYLOG(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData, filter_data);//fnRepCountRequestWareQTY(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData, filter_data);
    if TypeRep = countConnect then s:= fnConnectCount(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData, filter_data);
    except
      on E: Exception do begin             
        s:= MessText(mtkNotFoundDataUse);
        if (Pos(s, E.Message)>0) then raise EBOBError.Create(s) else raise;
      end;
    end;
  finally
    prFree(FilterData);
  end;
end;
{----------------------------------------------------------------------------------------}
//* Отчет , статистика запросов клиентов по поиску товаров
{----------------------------------------------------------------------------------------}  
function fnProductReportSearchWareClient(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,        //rep29
   ContentType:string; ThreadData: TThreadData; filter_data: string):string;//(Stream: TBoBMemoryStream; ThreadData: TThreadData);     
const nmProc = 'fnProductReportSearchWareClient'; // имя процедуры/функции
var  
   LogIBDatabase: TIBDatabase;
   LogIBSQL: TIBSQL; //TIBQuery;
   DateStart, DateEnd: TDatetime;  
   lstParam: TStringList;
   iCount: Integer;
   RecCount: Integer;
   fcWare: Integer;
   fcOE: Integer;
   fcID: Integer;
   s,ss: String;
   List, FilterData, SLContracts: TStringList;
   Role, EmplDprtID, i, ncont: integer; 
   Content, PathFile, Title: string;
   file_csv: textfile; 
   Percent,PPercent: real; 
   RoleUser, arIDManPP: tai;  
   Ware: TWareInfo; 
   firma: TFirmInfo;
   Pool: TIBCntsPool;
//   timerStart: TDateTime;
   RegionalID, ContractID: integer;
   Man, firmName, EmplName, IDManPP, strFaccName, strFaccParentName: string;
   flSUF: boolean; 
   Contract :TContract;             
begin
//timer:= Now;
//timerStart:= Now;
//prMessageLOGS('-----------------Export29.csv--------------------','Log_prg.log' , false);
  //Percent:= 0;
  PPercent:= 0;
  s:= '';
  ss:= '';
  LogIBSQL:= nil;
  lstParam:=nil;
  List:=nil; 
  FilterData:=nil;
  SetLength(RoleUser,0);
  FilterData:= TStringList.Create;
  List:= TStringList.Create;
  List.Capacity:= 1000;
  lstParam:= TStringList.Create;
  ImpCheck.SetProcessPercent(UserId,ThreadData.ID,1);
  iCount:= 0;
  try
    FilterData.Text:= filter_data;
    DateStart:= StrToDateTime(FilterData.Values['dop_fromdate']); // получаем DateStart   
    DateEnd:= StrToDateTime(FilterData.Values['dop_todate']); // получаем DateEnd      
    if DateStart>DateEnd then begin 
      s:=  MessText(mtkEndDateMoreBegin);
      raise EBOBError.Create(s);
    end;
    if (DateEnd - DateStart)>11 then  begin
      s:=  MessText(mtkNotEndDateMore, DateToStr(Date-1));
      raise EBOBError.Create('Выбранный период не должен превышать 11 дней.');
    end;
    if DateEnd >= Date then  begin
      s:=  MessText(mtkNotEndDateMore, DateToStr(Date-1));
      raise EBOBError.Create(s);
    end;

    EmplDprtID:= Cache.arEmplInfo[UserId].EmplDprtID;   
    RoleUser:= Cache.arEmplInfo[UserId].UserRoles;//vv 1209 fnEmplRoleReg(UserId, ThreadData.ID);
    Role:= 0;

    for i:= 0 to length(RoleUser)-1 do begin
      if not (RoleUser[i] in [rolRegional, rolSuperRegional]) then begin
        Role:= 99;
        break;
      end;
    end;
    if Role <>99 then begin
      if  fnInIntArray(rolRegional, RoleUser)>-1 then begin 
        Role:= rolRegional;
        EmplName:= cache.arEmplInfo[UserId].EmplShortName;
      end;
      if  fnInIntArray(rolSuperRegional, RoleUser)>-1 then Role:= rolSuperRegional;
    end;
    flSUF:= (DateStart < Date) and cntsSUFLOG.BaseConnected; // если до вчера - берем с суфлера
    if flSUF then Pool:= cntsSufLOG else Pool:= cntsLOG;
    
    try
      LogIBDatabase:= Pool.GetFreeCnt;
    except
      exit;
    end;
    iCount:= 0;
    try
      if not GetEmplTmpFilePath(UserID, PathFile, s) then raise EBOBError.Create(s);  

      FName:= PathFile+fnFormRepFileName('29', '.csv', ImpCheck.GetCheckKind(UserID, ThreadData.ID));//'ReportSearchWare'+FormatDateTime('_dd.mm_(hh.nn)',Now)+'.csv';
      if FileExists(FName) and not SysUtils.DeleteFile(FName) then begin
        s:= MessText(mtkNotDelPrevFile);
        raise EBOBError.Create(MessText(mtkNotDelPrevFile));
      end;

    //Добавляем шапку:                  
//      Content:= '';
      Title:= 'Поисковые запросы клиентов за период '+FormatDateTime(cDateFormatY4, DateStart)+'-'+FormatDateTime(cDateFormatY4, DateEnd); 
      Content:= Title;   
      List.Add(Content);
      Content:= '';
      Content:= 'Дата;Клиент;Поисковый запрос;Спец.символ.;Товаров;Ор.номеров;Менеджер по закупкам;Менеджер по продажам;ЦФУ';
      List.Add(Content);                                                         /////////////////////////////////////////////
      Content:= '';
    //шапка добавлена 
        
      LogIBSQL:= fnCreateNewIBSQL(LogIBDatabase,'Query_'+nmProc, -1, tpRead, true);
      LogIBSQL.SQL.Text:='SELECT rBEGINTIME, rUSERID, rFIRMID, rWareQty,rWareID, rOEQty, rTemplate, rIgnore'#10+
                         'from ReportSearchWareClient(:DateStart,:DateEnd)';
      LogIBSQL.ParamByName('DateStart').AsDate := DateStart;      // Начальная дата
      LogIBSQL.ParamByName('DateEnd').AsDate   := DateEnd+1;      // Конечная дата
      LogIBSQL.ExecQuery;

      if not LogIBSQL.EOF then begin
        RecCount:= LogIBSQL.FieldByName('rWareQty').AsInteger;
        if RecCount=0 then begin 
          s:=  'Данных для формирования отчета не найдено!';      
          raise EBOBError.Create(s);
        end;
        Percent:= 80;   
        if RecCount>0 then PPercent:= Percent/RecCount else ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent); 
        LogIBSQL.Next;
      end;
      while not LogIBSQL.EOF do begin
        if Cache.FirmExist(LogIBSQL.FieldByName('rFIRMID').AsInteger) then
        try
          prStopProcess( UserID, ThreadData.ID);
          fcID:= LogIBSQL.FieldByName('rWareID').AsInteger;
          fcWare:= LogIBSQL.FieldByName('rWareQty').AsInteger;
          Ware:= Cache.GetWare(fcID); 
          fcOE:= LogIBSQL.FieldByName('rOEQty').AsInteger;
          RegionalID:= Cache.arFirmInfo[LogIBSQL.FieldByName('rFIRMID').AsInteger].Regional;
          if Cache.EmplExist(RegionalID) then Man:= Cache.arEmplInfo[RegionalID].EmplShortName
          else Man:= 'Менеджер не определен';
          firma:= Cache.arFirmInfo[LogIBSQL.FieldByName('rFIRMID').AsInteger];
          firmName:= firma.Name;    //firma.FirmTypeName
          Man:=firma.GetFirmManagersString([fmpName,fmpShort]);
          SLContracts:= firma.GetContracts;
          strFaccName:='';
          strFaccParentName:= '';
          for ncont:= 0 to SLContracts.Count-1 do begin
            contractID:= integer(SLContracts.Objects[ncont]);
            Contract:= firma.GetContract(contractID);
            if (pos(Contract.FaccName,strFaccName)=0) and (Contract.FaccName<>'') then
              strFaccName:= strFaccName+fnIfStr(strFaccName='','',', ')+Contract.FaccName;
            if (pos(Contract.FaccParentName,strFaccParentName)=0) and (Contract.FaccParentName<>'') then
              strFaccParentName:= strFaccParentName+fnIfStr(strFaccParentName='','',', ')+Contract.FaccParentName;
          end;
          prFree(SLContracts);
          
          Content:= ' '+FormatDateTime(cDateTimeFormatY2S, LogIBSQL.FieldByName('rBEGINTIME').AsDateTime) {LogIBSQL.FieldByName('rBEGINTIME').AsString}+';'+
                    firmName+';'+
                    LogIBSQL.FieldByName('rTemplate').AsString+';'+
                    fnIfStr(LogIBSQL.FieldByName('rIgnore').AsInteger>0, 'игнор', '')+';'+
                    fnIfStr(fcWare=0, '', IntToStr(fcWare))+';'+
                    fnIfStr(fcOE=0  , '',IntToStr(fcOE))+';'+
                    fnIfStr(fcID>0, Cache.arEmplInfo[Ware.ManagerID].EmplShortName, '')+';'+
                    Man+';'+strFaccName;  

(*          if Role = rolRegional  then
            if (Cache.arFirmInfo[LogIBSQL.FieldByName('rFIRMID').AsInteger].Regional=UserID) then begin 
              List.Add(Content);
              inc(iCount);                  
            end;*)
          if Role = rolRegional  then
//            if (Cache.arEmplInfo[IDClientEmpl].EmplID = UserId) then begin
            if pos(EmplName, Man) >0 then begin
              List.Add(Content);
              inc(iCount);
            end;
(*          if Role = rolSuperRegional  then
            // 121213 if (EmplDprtID=Cache.arFirmInfo[LogIBSQL.FieldByName('rFIRMID').AsInteger].FilialID) then begin 
            if (EmplDprtID=Cache.arEmplInfo[RegionalID].EmplDprtID) then begin

              List.Add(Content);
              inc(iCount);                  
            end; *)
          if Role = rolSuperRegional  then begin
              IDManPP:=firma.GetFirmManagersString([fmpCode]);          
  //            if (Cache.arEmplInfo[IDClientEmpl].EmplDprtID = Cache.arEmplInfo[UserID].EmplDprtID) then begin
              arIDManPP:= fnArrOfCodesFromString(IDManPP);
              for i:= 0 to length(arIDManPP)-1 do 
                if (Cache.arEmplInfo[arIDManPP[i]].EmplDprtID = Cache.arEmplInfo[UserID].EmplDprtID) then begin
                  List.Add(Content); 
                  inc(iCount);
                  break;
                end;
              SetLength(arIDManPP,0);
            end;
          if Role = 99 then  begin
             List.Add(Content);
             inc(iCount);                  
           end;
          if List.Count=1000 then begin
            AssignFile(file_csv, FName);
            filemode:= fmOpenReadWrite; //назначаем файл
            if FileExists(FName) then Reset(file_csv) else ReWrite(file_csv);
            Append(file_csv);
            WriteLn(file_csv, List.Text);
            CloseFile(file_csv);
            List.Clear;
            List.Capacity:= 1000;
          end;
          
          Content:= '';

        except
          on E: Exception do begin
            prMessageLOGS('Ошибка в процедуре '+nmProc+ ' '+ E.Message, 'import', false) ;
            s:= 'Ошибка при обработке результатов запроса. ';
            raise EBOBError.Create(s+E.Message);
          end;
        end;
        //lstParam.Clear;
        LogIBSQL.Next;
        ImpCheck.SetProcessPercent(UserId,ThreadData.ID,PPercent);        
      end;
          
(*      lstBodyMail.Add(' ');
      lstBodyMail.Add('Начало выполнения: '+FormatDateTime(cDateTimeFormatTSnD, timerStart));
      lstBodyMail.Add('Завершение выполнения: '+ FormatDateTime(cDateTimeFormatTSnD,Now));
      lstBodyMail.Add('Общее время выполнения: '+ FormatDateTime('hh:nn:ss',Now-timerStart));  *)
    finally
      prFreeIBSQL(LogIBSQL);
      if Pool<>nil then Pool.SetFreeCnt(LogIBDatabase, True);
    end;
  finally
    if List.Count>0 then begin
      AssignFile(file_csv, FName);
      filemode:= fmOpenReadWrite; //назначаем файл
      if FileExists(FName) then Reset(file_csv) else ReWrite(file_csv);
      Append(file_csv);
      WriteLn(file_csv, List.Text);
      CloseFile(file_csv);
      List.Clear;
      Subj:= 'Отчет 29(csv) '+FormatDateTime(cDateTimeFormatY2S, Now());
      ContentType:= CSVContentType;// for Excel(.csv)
      lstBodyMail:= TStringList.Create;
      lstBodyMail.Add(Title);   
    end;
    prFree(FilterData);
    prFree(SLContracts);
    prFree(List);
    prFree(lstParam);
    SetLength(arIDManPP,0);
    result:= s;
    if iCount=0 then begin 
      s:= MessText(mtkNotFoundDataUse);
      raise EBOBError.Create(s);
    end    
//    SetLength(RoleUser,0);
//    prMessageLOGS('Время всего'+': - '+
//        FloatToStr(RoundTo((Now-timerStart)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
  end;  
//prMessageLOGS('Время всего'+': - '+
//        FloatToStr(RoundTo((Now-timerStart)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;  
end;
//==============================================================================
function fnDinConnect30(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,     
   ContentType:string; ThreadData: TThreadData; filter_data: string): string;//30_7 
const nmProc = 'fn30_7'; // имя процедуры/функции
var 
    LogIBDatabase: TIBDatabase;
    LogIBSQL: TIBSQL;
    FilterData, SLContracts: TStringList;
    DateStart, DateO: TDatetime;   
    s, s1, Title: string;   
    Content, PathFile: string;
    file_csv: textfile;   
    flSUF: boolean;
    Pool: TIBCntsPool;
    iCount,ncont, connVlad, connOther: integer;
    Percent: real;
begin 
  s:= '';
  iCount:= 0;
  FilterData:=nil;
  FilterData:= TStringList.Create;
  LogIBSQL:= nil;
  DateStart:= 0;
//  MaxCount:= 0;
  try
    FilterData.Text:= filter_data;
//    MaxCount:= StrToIntDef(FilterData.Values['dop_qty'],-1);// максимальное допустимое кол-во
//    if MaxCount=-1 then raise EBOBError.Create('Укажите правильно количество.');
//    GroupFirst := StrToInt(FilterData.Values['dop_groupby']);
    DateStart:= StrToDateTime(FilterData.Values['dop_fromdate']); // получаем DateStart
    flSUF:= (DateStart < Date) and cntsSUFLOG.BaseConnected; // если ToDate до вчера - берем с суфлера
    if flSUF then Pool:= cntsSufLOG else Pool:= cntsLOG;
    try
      LogIBDatabase:= Pool.GetFreeCnt;
    except
      exit;
    end;
    try
      AssignFile(file_csv, FName);
      filemode:= fmOpenReadWrite; //назначаем файл
      if FileExists(FName) then Reset(file_csv) else ReWrite(file_csv);
      Append(file_csv);
    //Добавляем шапку:                  
      Title:= 'Отчет о динамике обращений за последние 30 дней на '+FormatDateTime(cDateFormatY4, DateStart);    

      Content:= Title;    
      WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
      Content:= 'Дата;ЧПФ "Владислав";Другие';
      WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
      Content:= '';
//prMessageLOGS('Приготовились'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;      
      Percent:= 10;     
      ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);    //шапка добавлена     
      LogIBSQL:= fnCreateNewIBSQL(LogIBDatabase,'Query_'+nmProc, -1, tpRead, true);
      LogIBSQL.SQL.Text:='SELECT LUCDATE, sum(LUCCONNECT) sumconnect, iif(lucfirmid=0,0,1) firmid '
                        +'FROM LOGUSERCOUNTS '
                        +'where LUCDATE> :pDateStart and LUCDATE< :pDateEnd '
                        +'group by LUCDATE, iif(lucfirmid=0,0,1) ';

      LogIBSQL.Prepare;
      LogIBSQL.ParamByName('pDateStart').AsDate := DateStart-30;      // Начальная дата
      LogIBSQL.ParamByName('pDateEnd').AsDate:= DateStart+1;       // 
      LogIBSQL.ExecQuery;

      Percent:= 60;   
      ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);
      connVlad:= 0; 
      connOther:= 0;            
      while not LogIBSQL.EOF do begin  
        try
          prStopProcess( UserID, ThreadData.ID);
          if (DateO>0) and (DateO<>LogIBSQL.FieldByName('LUCDATE').AsDate) then begin
            Content:= DateToStr(DateO)+';'+IntToStr(connVlad)+';'+          // #9 - кавычка для определения текстового поля в Excel
                      IntToStr(connOther)+';'; 
               
            WriteLn(file_csv, Content);     
            inc(iCount);
            Content:= ''; 
            connVlad:= 0;
            connOther:= 0;
          end;
          DateO:= LogIBSQL.FieldByName('LUCDATE').AsDate;
          if LogIBSQL.FieldByName('firmid').AsInteger=0 then
            connVlad:= LogIBSQL.FieldByName('sumconnect').AsInteger
          else 
            connOther:= LogIBSQL.FieldByName('sumconnect').AsInteger;
        except
          on E: Exception do begin
            prMessageLOGS('Ошибка в процедуре '+nmProc+' '+ E.Message, 'import', false) ;
            s:=  'Ошибка при обработке результатов запроса. ';
            raise Exception.Create(Title+#13+s+E.Message);
          end;
        end;
        LogIBSQL.Next;                 
      end;  
      LogIBSQL.Close;
      if (connVlad<>0) or (connOther<>0) then begin
        Content:= DateToStr(DateO)+';'+IntToStr(connVlad)+';'+          // #9 - кавычка для определения текстового поля в Excel
                        IntToStr(connOther)+';'; 
               
        WriteLn(file_csv, Content);     
        inc(iCount);
        Content:= ''; 
        connVlad:= 0;
        connOther:= 0;      
      end;
(*      if FName='' then begin
        if not GetEmplTmpFilePath(UserID, PathFile, s) then raise EBOBError.Create(s); 
        FName:= PathFile+fnFormRepFileName('30_7', '.csv', ImpCheck.GetCheckKind(UserID, ThreadData.ID));
      end;
      if FileExists(FName) and not SysUtils.DeleteFile(FName) then begin
        s:= MessText(mtkNotDelPrevFile);
        raise EBOBError.Create(MessText(mtkNotDelPrevFile));
      end;

      AssignFile(file_csv, FName);
      filemode:= fmOpenReadWrite; //назначаем файл
      if FileExists(FName) then Reset(file_csv) else ReWrite(file_csv);
      Append(file_csv);
    //Добавляем шапку:                  
//      Title:= 'Клиенты(пользователи), у которых количество поисковых запросов превышает '+
//              IntToStr(MaxCount)+' за '+FormatDateTime(cDateFormatY4, DateStart);    

      Content:= Title;    
      WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
      Content:= 'Код контрагента;Клиент;Кол-во запросов;Менеджер;ЦФУ';
      WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
      Content:= '';  


      

      Percent:= 10;     
      ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);    *)  
(*      lstBodyMail.Add(' ');
      lstBodyMail.Add('Начало выполнения: '+FormatDateTime(cDateTimeFormatTSnD, timerStart));
      lstBodyMail.Add('Завершение выполнения: '+ FormatDateTime(cDateTimeFormatTSnD,Now));
      lstBodyMail.Add('Общее время выполнения: '+ FormatDateTime('hh:nn:ss',Now-timerStart));   *)    
    finally
      prFreeIBSQL(LogIBSQL);
      if Pool<>nil then Pool.SetFreeCnt(LogIBDatabase, True);
      CloseFile(file_csv);  
    end;
  finally
    if iCount>0 then begin
      Title:= 'Отчет о динамике обращений за последние 30 дней на '+FormatDateTime(cDateFormatY4, DateStart);
      Subj:= 'Отчет 30(7) '+FormatDateTime(cDateTimeFormatY2S, Now());
      ContentType:= CSVContentType;// for Excel(.csv)
      lstBodyMail:= TStringList.Create;
      lstBodyMail.Add(Title); 
    end;
    prFree(FilterData);
    prFree(SLContracts);
    if iCount=0 then begin
      s:= MessText(mtkNotFoundDataUse);
      raise Exception.Create(Title+#10+'  '+s);
    end;  
    result:= s;      
  end; 
//prMessageLOGS('Закончили'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;  
  Percent:= 10;     
  ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);

end;   
//==============================================================================
function fnRep61(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,     
   ContentType:string; ThreadData: TThreadData; filter_data: string): string;//61
const nmProc = 'fn30_8'; // имя процедуры/функции
var 
    LogIBDatabase: TIBDatabase;
    LogIBSQL: TIBSQL;
    FilterData, SLContracts: TStringList;
    DateStart: TDatetime;   
    s, s1, Title: string;   
    Content, PathFile: string;
    file_csv: textfile;   
    flSUF: boolean;
    Pool: TIBCntsPool;
    iCount,ncont, ind: integer;
    Percent: real;
    login: string;
begin 
  s:= '';
  iCount:= 0;
  FilterData:=nil;
  FilterData:= TStringList.Create;
  LogIBSQL:= nil;
  DateStart:= 0;
  login:= '';
  try
    FilterData.Text:= filter_data;
    login:= FilterData.Values['dop_qty'];// максимальное допустимое кол-во
    if login='' then exit
    else

    DateStart:= StrToDateTime(FilterData.Values['dop_fromdate']); // получаем DateStart
    flSUF:= (DateStart < Date) and cntsSUFLOG.BaseConnected; // если ToDate до вчера - берем с суфлера
    if flSUF then Pool:= cntsSufLOG else Pool:= cntsLOG;
    try
      LogIBDatabase:= Pool.GetFreeCnt;
    except
      exit;
    end;
    try
      LogIBSQL:= fnCreateNewIBSQL(LogIBDatabase,'Query_'+nmProc, -1, tpRead, true);
      
      if FName='' then begin
        if not GetEmplTmpFilePath(UserID, PathFile, s) then raise EBOBError.Create(s); 
        FName:= PathFile+fnFormRepFileName('61', '.csv', ImpCheck.GetCheckKind(UserID, ThreadData.ID));
      end;
      if FileExists(FName) and not SysUtils.DeleteFile(FName) then begin
        s:= MessText(mtkNotDelPrevFile);
        raise EBOBError.Create(MessText(mtkNotDelPrevFile));
      end;

      AssignFile(file_csv, FName);
      filemode:= fmOpenReadWrite; //назначаем файл
      if FileExists(FName) then Reset(file_csv) else ReWrite(file_csv);
      Append(file_csv);
    //Добавляем шапку:                  
      Title:= 'Отчет об операциях пользователя '+login+' за '+FormatDateTime(cDateFormatY4, DateStart);    

      Content:= Title;    
      WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
      Content:= 'Дата;Код команды;Команда;IP;Параметры запроса;Наш текст;Текст ошибки из E.Message;Примечание;Наименование процедуры;Идентификатор браузера';
      WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
      Content:= '';  

      ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);    //шапка добавлена     
      LogIBSQL:= fnCreateNewIBSQL(LogIBDatabase,'Query_'+nmProc, -1, tpRead, true);
      LogIBSQL.SQL.Text:='select THLGCODE, THLGBEGINTIME, THLGUSERID,/* THLGENDTIME,*/ THLGCOMMAND, c.lccommdescr, ip.ipluip '#10
                        +',cast(THLGPARAMS as varchar(2500)) params'#10
                        +', cast(m.lgmsmymessage as varchar(2500)) mymessage'#10
                        +', cast(m.lgmsemessage as varchar(2500)) emessage'#10
                        +', cast(m.lgmscomment as varchar(2500)) lgmscomment'#10
                        +', m.lgmsprocname, id.iplidtext'#10
                        +'from LOGTHREADS t'#10
                        +'left outer join LOGMESSAGES m on m.lgmsthread=t.thlgcode'#10
                        +'left outer join  LOGCOMMANDS c on c.lccommand=THLGCOMMAND'#10
                        +'left outer join  IPLOGIDENT id on id.iplidcode=t.thlglogident'#10
                        +'left outer join  IPLOGUSERS ip on ip.iplucode=t.thlguserip'#10
                        +'where'#10
                        +'t.thlguserid=:pUserID'#10
                        +'and t.thlgtype=4'#10
                        +'and t.thlgcommand>1000'#10
                        +'and t.thlgcommand<>1057 and t.thlgcommand<>10090'#10
                        +'and t.thlgbegintime>:pDateStart'#10
                        +'and t.thlgbegintime<:pDateEnd'#10
                        +'order by THLGCODE';

      LogIBSQL.Prepare;
      LogIBSQL.ParamByName('pDateStart').AsDate := DateStart;      // Начальная дата
      LogIBSQL.ParamByName('pDateEnd').AsDate:= DateStart+1;       // 
      ind:= Cache.arClientInfo.WorkLogins.IndexOf(login);
      if (ind>-1) then //UserId:= integer(Cache.arClientInfo.WorkLogins.Objects[ind])
        LogIBSQL.ParamByName('pUserID').AsInteger:= integer(Cache.arClientInfo.WorkLogins.Objects[ind])
      else 
        LogIBSQL.ParamByName('pUserID').AsInteger:= 0;
      LogIBSQL.ExecQuery;

      Percent:= 60;   
      ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);
      while not LogIBSQL.EOF do begin  
        try
          prStopProcess( UserID, ThreadData.ID);
          Content:= LogIBSQL.FieldByName('THLGBEGINTIME').AsString+';'
                  + LogIBSQL.FieldByName('THLGCOMMAND').AsString+';'+LogIBSQL.FieldByName('lccommdescr').AsString+';'
                  + LogIBSQL.FieldByName('ipluip').AsString+';'
                  + StringReplace(StringReplace(LogIBSQL.FieldByName('params').AsString,#10,' ', [rfReplaceAll]),#13,' ', [rfReplaceAll])+';'
                  + StringReplace(StringReplace(LogIBSQL.FieldByName('mymessage').AsString,#10,' ', [rfReplaceAll]),#13,' ', [rfReplaceAll])+';'
                  + StringReplace(StringReplace(LogIBSQL.FieldByName('emessage').AsString,#10,' ', [rfReplaceAll]),#13,' ', [rfReplaceAll])+';'
                  + StringReplace(StringReplace(LogIBSQL.FieldByName('lgmscomment').AsString,#10,' ', [rfReplaceAll]),#13,' ', [rfReplaceAll])+';'
                  + StringReplace(StringReplace(LogIBSQL.FieldByName('lgmsprocname').AsString,#10,' ', [rfReplaceAll]),#13,' ', [rfReplaceAll])+';'
                  + StringReplace(StringReplace(LogIBSQL.FieldByName('iplidtext').AsString,#10,' ', [rfReplaceAll]),#13,' ', [rfReplaceAll])+';';
          WriteLn(file_csv, Content);     
          inc(iCount);
          Content:= ''; 
        except
          on E: Exception do begin
            prMessageLOGS('Ошибка в процедуре '+nmProc+' '+ E.Message, 'import', false) ;
            s:=  'Ошибка при обработке результатов запроса. ';
            raise Exception.Create(Title+#13+s+E.Message);
          end;
        end;
        LogIBSQL.Next;                 
      end;  
      LogIBSQL.Close;         
(*      lstBodyMail.Add(' ');
      lstBodyMail.Add('Начало выполнения: '+FormatDateTime(cDateTimeFormatTSnD, timerStart));
      lstBodyMail.Add('Завершение выполнения: '+ FormatDateTime(cDateTimeFormatTSnD,Now));
      lstBodyMail.Add('Общее время выполнения: '+ FormatDateTime('hh:nn:ss',Now-timerStart));   *)    
    finally
      prFreeIBSQL(LogIBSQL);
      if Pool<>nil then Pool.SetFreeCnt(LogIBDatabase, True);
      CloseFile(file_csv);  
    end;
  finally
    if iCount>0 then begin
      Title:= 'Отчет об операциях пользователя '+login+' за '+FormatDateTime(cDateFormatY4, DateStart);
      Subj:= 'Отчет 61 '+FormatDateTime(cDateTimeFormatY2S, Now());
      ContentType:= CSVContentType;// for Excel(.csv)
      lstBodyMail:= TStringList.Create;
      lstBodyMail.Add(Title); 
    end;
    prFree(FilterData);
    prFree(SLContracts);
    if iCount=0 then begin
      s:= MessText(mtkNotFoundDataUse);
      raise EBOBError.Create(Title+#10+'  '+s);
    end;  
    result:= s;      
  end; 
//prMessageLOGS('Закончили'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;  
  Percent:= 10;     
  ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);

end;   
//==============================================================================
function fnReportSearchWareMax(UserID: integer; var lstBodyMail: TStringList;
 var FName, Subj, ContentType: string; ThreadData: TThreadData; filter_data: string): string;
const nmProc = 'fnReportSearchWareMax'; // имя процедуры/функции
var 
    LogIBDatabase: TIBDatabase;
    LogIBSQL: TIBSQL;
    FilterData, SLContracts: TStringList;
    DateStart: TDatetime;   
    s, s1, Title: string;   
    Content, PathFile: string;
    file_csv: textfile;    
    FirmID, MaxCount, GroupFirst,  iCount,ncont: integer;  
//    timer, timerStart: TDateTime;    
    Percent: real;
    Pool: TIBCntsPool;
    FirmName, Regional, login, strFaccName, strFaccParentName: string; 
    flSUF: boolean;  
    ClientID, ContractID: integer;
    firma: TFirmInfo; 
    Contract: TContract;                              
begin
//timer:= Now;
//timerStart:= Now;
//prMessageLOGS('-----------------Export30_0.csv--------------------','Log_prg.log' , false);    
  s:= '';
  iCount:= 0;
  FilterData:=nil;
  FilterData:= TStringList.Create;
  LogIBSQL:= nil;
  DateStart:= 0;
  MaxCount:= 0;
  try
    FilterData.Text:= filter_data;
    MaxCount:= StrToIntDef(FilterData.Values['dop_qty'],-1);// максимальное допустимое кол-во
    if MaxCount=-1 then raise EBOBError.Create('Укажите правильно количество.');
    GroupFirst := StrToInt(FilterData.Values['dop_groupby']);
    DateStart:= StrToDateTime(FilterData.Values['dop_fromdate']); // получаем DateStart
    flSUF:= (DateStart < Date) and cntsSUFLOG.BaseConnected; // если ToDate до вчера - берем с суфлера
    if flSUF then Pool:= cntsSufLOG else Pool:= cntsLOG;
    try
      LogIBDatabase:= Pool.GetFreeCnt;
    except
      exit;
    end;
    try
      LogIBSQL:= fnCreateNewIBSQL(LogIBDatabase,'Query_'+nmProc, -1, tpRead, true);
      
      if FName='' then begin
        if not GetEmplTmpFilePath(UserID, PathFile, s) then raise EBOBError.Create(s); 
        FName:= PathFile+fnFormRepFileName('30_0', '.csv', ImpCheck.GetCheckKind(UserID, ThreadData.ID));
      end;
      if FileExists(FName) and not SysUtils.DeleteFile(FName) then begin
        s:= MessText(mtkNotDelPrevFile);
        raise EBOBError.Create(MessText(mtkNotDelPrevFile));
      end;

      AssignFile(file_csv, FName);
      filemode:= fmOpenReadWrite; //назначаем файл
      if FileExists(FName) then Reset(file_csv) else ReWrite(file_csv);
      Append(file_csv);
    //Добавляем шапку:                  
      Title:= 'Клиенты(пользователи), у которых количество поисковых запросов превышает '+
              IntToStr(MaxCount)+' за '+FormatDateTime(cDateFormatY4, DateStart);    

      Content:= Title;    
      WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
      if GroupFirst=1 then      
            Content:= 'Код контрагента;Клиент;Код пользователя;Логин пользователя;Кол-во запросов;Менеджер;ЦФУ'
      else  Content:= 'Код контрагента;Клиент;Кол-во запросов;Менеджер;ЦФУ';
      WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
      Content:= '';
//prMessageLOGS('Приготовились'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;      
      Percent:= 10;     
      ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);    //шапка добавлена  
      LogIBSQL:= fnCreateNewIBSQL(LogIBDatabase,'SQL_'+nmProc, -1, tpRead, true);
      
      LogIBSQL.SQL.Add('SELECT first 1 iif(exists(select * from LOGTHREADS where THLGBEGINTIME between DateADD(HOUR,5,:pDateStart) and :pDateStart+1),1,0) as ii from logserverlist');
      LogIBSQL.Prepare;
      LogIBSQL.ParamByName('pDateStart').AsDate := DateStart;      // Начальная дата
      LogIBSQL.ExecQuery;
      if not LogIBSQL.EOF then iCount:=LogIBSQL.FieldByName('ii').AsInteger;
      LogIBSQL.Close;
      LogIBSQL.SQL.Clear;
      if iCount=0 then begin
        prFreeIBSQL(LogIBSQL);
        if Pool<>nil then Pool.SetFreeCnt(LogIBDatabase, True);
        Pool:= cntsLOG;
        try
          LogIBDatabase:= Pool.GetFreeCnt;
        except
          exit;
        end;
        LogIBSQL:= fnCreateNewIBSQL(LogIBDatabase,'SQL_'+nmProc, -1, tpRead, true);
      end;
      iCount:=0;
            
      LogIBSQL.SQL.Add('SELECT LUCFIRMID, LFNFIRMNAME,');  
      if GroupFirst=1 then LogIBSQL.SQL.Add('LUCUSERID,'); 
      LogIBSQL.SQL.Add('LUCDATE, sum(LUCSEARCH) COUNTSEARCH');
      LogIBSQL.SQL.Add('FROM LOGUSERCOUNTS left outer join LOGFIRMNAMES on LFNFIRMCODE=LUCFIRMID');
      LogIBSQL.SQL.Add('where LUCDATE= :pDateStart');
      LogIBSQL.SQL.Add('group by LUCFIRMID, LFNFIRMNAME, LUCDATE'); 
      if GroupFirst=1 then LogIBSQL.SQL.Add(', LUCUSERID'); 
      LogIBSQL.SQL.Add('having sum(LUCSEARCH)> :MaxCount');  
    
      LogIBSQL.Prepare;
      LogIBSQL.ParamByName('pDateStart').AsDate := DateStart;      // Начальная дата
      LogIBSQL.ParamByName('MaxCount').AsInteger:= MaxCount;       // 
      LogIBSQL.ExecQuery;
      
//prMessageLOGS('Выполнили запрос'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;      
      Percent:= 60;   
      ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);      
      while not LogIBSQL.EOF do begin  
        try
          prStopProcess( UserID, ThreadData.ID);
FirmID:= LogIBSQL.FieldByName('LUCFIRMID').AsInteger;
          if Cache.FirmExist(FirmID) then begin
            firma:= Cache.arFirmInfo[FirmID];
            if LogIBSQL.FieldByName('LFNFIRMNAME').AsString ='' then  begin
              FirmName:= firma.Name;
            end else
              FirmName:= LogIBSQL.FieldByName('LFNFIRMNAME').AsString;
            regional:=firma.GetFirmManagersString([fmpName,fmpShort]);
            if trim(regional)='' then
(*            if Cache.EmplExist(Cache.arFirmInfo[LogIBSQL.FieldByName('LUCFIRMID').AsInteger].Regional) then
              regional:= Cache.arEmplInfo[Cache.arFirmInfo[LogIBSQL.FieldByName('LUCFIRMID').AsInteger].Regional].EmplShortName
            else*) 
              regional:= 'Менеджер для контрагента '+FirmName+' не определен';
            SLContracts:= firma.GetContracts;
            strFaccName:='';
            strFaccParentName:= '';
            for ncont:= 0 to SLContracts.Count-1 do begin
              contractID:= integer(SLContracts.Objects[ncont]);
              Contract:= firma.GetContract(contractID);
              if (pos(Contract.FaccName,strFaccName)=0) and (Contract.FaccName<>'') then
                strFaccName:= strFaccName+fnIfStr(strFaccName='','',', ')+Contract.FaccName;
              if (pos(Contract.FaccParentName,strFaccParentName)=0) and (Contract.FaccParentName<>'') then
                strFaccParentName:= strFaccParentName+fnIfStr(strFaccParentName='','',', ')+Contract.FaccParentName;
            end;
            prFree(SLContracts);
          end else begin 
            if LogIBSQL.FieldByName('LUCFIRMID').AsInteger = 0 then begin
              FirmName:= 'ЧПФ "Владислав"';
              regional:= 'сотрудник';
            end else begin
              FirmName:= 'Контрагент '+ LogIBSQL.FieldByName('LUCFIRMID').AsString +' не определен';
              regional:= 'Менеджер для фирмы '+LogIBSQL.FieldByName('LUCFIRMID').AsString+' не определен';
            end;
          end; 

          if GroupFirst=1 then begin  
            ClientID:= LogIBSQL.FieldByName('LUCUSERID').AsInteger;
            if (FirmID>0) and (Cache.ClientExist(LogIBSQL.FieldByName('LUCUSERID').AsInteger))  then
              login:= Cache.arClientInfo[LogIBSQL.FieldByName('LUCUSERID').AsInteger].Login
            else if (FirmID = 0)and (Cache.EmplExist(LogIBSQL.FieldByName('LUCUSERID').AsInteger)) then 
                login:= Cache.arEmplInfo[LogIBSQL.FieldByName('LUCUSERID').AsInteger].ServerLogin
              else
                login:='login пользователя '+LogIBSQL.FieldByName('LUCUSERID').AsString+' не определен ';
            if copy(Login,1,1)='0' 
            then s1:= #160//' '
            else s1:= '';
            Login:= s1+Login;             
            Content:= IntToStr(FirmID)+';'+FirmName{Cache.arFirmInfo[LogIBSQL.FieldByName('THLGFIRMID').AsInteger].Name}+';'+IntToStr(ClientID)+';'+          // #9 - кавычка для определения текстового поля в Excel
                      s1+login{Cache.arClientInfo[LogIBSQL.FieldByName('THLGUSERID').AsInteger].Login}+';'+
                      IntToStr(LogIBSQL.FieldByName('COUNTSEARCH').AsInteger)+';'+
                      regional//Cache.arEmplInfo[Regional].EmplShortName
                      //+';'+#9+ IntToStr(LogIBQuery.FieldByName('THLGFIRMID').AsInteger)
                      //+';'+#9+IntToStr(LogIBQuery.FieldByName('THLGUSERID').AsInteger)
                      +';'+strFaccName;
          end          
          else 
            Content:= IntToStr(FirmID)+';'+FirmName{Cache.arFirmInfo[LogIBSQL.FieldByName('THLGFIRMID').AsInteger].Name}+';'+          // #9 - кавычка для определения текстового поля в Excel
                      //#9+Cache.arClientInfo[LogIBQuery.FieldByName('THLGUSERID').AsInteger].Login+';'+
                      IntToStr(LogIBSQL.FieldByName('COUNTSEARCH').AsInteger)+';'+
                      regional//Cache.arEmplInfo[Regional].EmplShortName
                      //+';'+#9+ IntToStr(LogIBQuery.FieldByName('THLGFIRMID').AsInteger)
                      //+';'+#9+IntToStr(LogIBQuery.FieldByName('THLGUSERID').AsInteger)
                      +';'+strFaccName; 
               
          WriteLn(file_csv, Content);     
          inc(iCount);
          Content:= ''; 
        except
          on E: Exception do begin
            prMessageLOGS('Ошибка в процедуре '+nmProc+' '+ E.Message, 'import', false) ;
            s:=  'Ошибка при обработке результатов запроса. ';
            raise Exception.Create(Title+#13+s+E.Message);
          end;
        end;
        LogIBSQL.Next;                 
      end;  
      LogIBSQL.Close;
//prMessageLOGS('Заполнили'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;        
      Percent:= 10;     
      ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);      
(*      lstBodyMail.Add(' ');
      lstBodyMail.Add('Начало выполнения: '+FormatDateTime(cDateTimeFormatTSnD, timerStart));
      lstBodyMail.Add('Завершение выполнения: '+ FormatDateTime(cDateTimeFormatTSnD,Now));
      lstBodyMail.Add('Общее время выполнения: '+ FormatDateTime('hh:nn:ss',Now-timerStart));   *)    
    finally
      prFreeIBSQL(LogIBSQL);
      if Pool<>nil then Pool.SetFreeCnt(LogIBDatabase, True);
      CloseFile(file_csv);  
    end;
  finally
    if iCount>0 then begin
      Title:= 'Отчет о превышении количества поисковых запросов ('+IntToStr(MaxCount)+') за '+FormatDateTime(cDateFormatY4, DateStart);
      Subj:= 'Отчет 30(0) '+FormatDateTime(cDateTimeFormatY2S, Now());
      ContentType:= CSVContentType;// for Excel(.csv)
      lstBodyMail:= TStringList.Create;
      lstBodyMail.Add(Title); 
    end;
    prFree(FilterData);
    prFree(SLContracts);
    if iCount=0 then begin
      s:= MessText(mtkNotFoundDataUse);
      raise Exception.Create(Title+#10+'  '+s);
    end;  
    result:= s;      
  end; 
//prMessageLOGS('Закончили'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;  
  Percent:= 10;     
  ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);
//prMessageLOGS('Время всего'+': - '+
//        FloatToStr(RoundTo((Now-timerStart)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;     
end;
//==============================================================================
function fnConnectCount(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,
   ContentType:string; ThreadData: TThreadData; filter_data: string): string;
const
 nmProc = 'fnConnectCount'; // имя процедуры/функции
var 
    LogIBDatabase, OrdIBDatabase: TIBDatabase;
    LogIBSQL, LogSQL, OrdSQL: TIBSQL;
    RegionalID: integer;
    list,FilterData, SLContracts: TStringList;
    DateStart: TDatetime;   
    FirmName, Manager, Login, s, s1, Title, countWare: string;   
    Content, PathFile, strFaccName, strFaccParentName: string;
    file_csv: textfile;    
    ClientID,MaxCount, GroupFirst, iCount, FirmID, ContractID, ncont, countOrd, countFirmOrd: integer;  
//    timer, timerStart: TDateTime;    
    Percent: real;
    MsgStr: tas;
    Pool, PoolOrd: TIBCntsPool;
    flSUF: boolean;
    firma: TFirmInfo;
    Contract: TContract;
begin
//timer:= Now;
//timerStart:= Now;
//prMessageLOGS('-----------------Export30_4.csv--------------------','Log_prg.log' , false);    
  s:= '';
  iCount:= 0;
  FilterData:=nil;
  List:=nil;
  FilterData:= TStringList.Create;
  List:= TStringList.Create;
  SetLength(MsgStr, 0); 
  LogIBSQL:= nil;
  LogSQL:= nil;
  ClientID:= 0;
  countOrd:= 0;
  countWare:= '';
  try
    FilterData.Text:= filter_data;
    MaxCount:= StrToIntDef(FilterData.Values['dop_qty'],-1);// максимальное допустимое кол-во 
    if MaxCount=-1 then raise EBOBError.Create('Укажите правильно количество.');
    GroupFirst := StrToInt(FilterData.Values['dop_groupby']);
    DateStart:= StrToDateTime(FilterData.Values['dop_fromdate']); // получаем DateStart
    flSUF:= (DateStart < Date) and cntsSUFLOG.BaseConnected; // если до вчера - берем с суфлера
    if flSUF then begin 
      Pool:= cntsSufLOG;
      PoolOrd:= cntsSUFORD;
    end
    else begin
      Pool:= cntsLOG;
      PoolOrd:= cntsORD;
    end;
    try
      LogIBDatabase:= Pool.GetFreeCnt;
      OrdIBDatabase:= PoolOrd.GetFreeCnt;
    except
      exit;
    end;

    try
      if FName='' then begin
        if not GetEmplTmpFilePath(UserID, PathFile, s) then raise EBOBError.Create(s); 
        FName:= PathFile+fnFormRepFileName('30_4', '.csv', ImpCheck.GetCheckKind(UserID, ThreadData.ID));
      end;
      if FileExists(FName) and not SysUtils.DeleteFile(FName) then begin
        s:= MessText(mtkNotDelPrevFile);
        raise EBOBError.Create(MessText(mtkNotDelPrevFile));
      end;

      AssignFile(file_csv, FName);
      filemode:= fmOpenReadWrite; //назначаем файл
      if FileExists(FName) then Reset(file_csv) else ReWrite(file_csv);
      Append(file_csv);
    //Добавляем шапку:                  
      Title:= 'Клиенты(пользователи), у которых количество обращений к системе превышает '+
              IntToStr(MaxCount)+' за '+FormatDateTime(cDateFormatY4, DateStart);    

      Content:= Title;    
      WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
      if GroupFirst=1 then      
            Content:= 'Код контрагента;Клиент;Код пользователя;Логин пользователя;Кол-во запросов;Количество заказов к/а;Количество заказов, отправленных на обработку пользователем;Количество строк, добавленных в заказ;Менеджер;ЦФУ'
      else  Content:= 'Код контрагента;Клиент;Кол-во запросов;Количество заказов к/а;Количество строк, добавленных в заказ;Менеджер;ЦФУ';
      WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
      Content:= '';
//prMessageLOGS('Приготовились'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;      
      Percent:= 3;     
      ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);    //шапка добавлена  
      LogIBSQL:= fnCreateNewIBSQL(LogIBDatabase,'SQL_'+nmProc, -1, tpRead, true);

      LogIBSQL.SQL.Add('SELECT first 1 iif(exists(select * from LOGTHREADS where THLGBEGINTIME between DateADD(HOUR,5,:pDateStart) and :pDateStart+1),1,0) as ii from logserverlist');
      LogIBSQL.Prepare;
      LogIBSQL.ParamByName('pDateStart').AsDate := DateStart;      // Начальная дата
      LogIBSQL.ExecQuery;
      if not LogIBSQL.EOF then iCount:=LogIBSQL.FieldByName('ii').AsInteger;
      LogIBSQL.Close;
      LogIBSQL.SQL.Clear;
      if iCount=0 then begin
        prFreeIBSQL(LogIBSQL);
        if Pool<>nil then Pool.SetFreeCnt(LogIBDatabase, True);
        Pool:= cntsLOG;
        try
          LogIBDatabase:= Pool.GetFreeCnt;
        except
          exit;
        end;
        LogIBSQL:= fnCreateNewIBSQL(LogIBDatabase,'SQL_'+nmProc, -1, tpRead, true);
      end;
      iCount:=0;
//csCreateNewOrder              = 1005;  // Создать новый заказ      
//csSendOrderToProcessing       = 1012;  // Послать заказ на обработку
//csAddLinesToOrder             = 1042;  // Добавить строки в заказ

      LogSQL:= fnCreateNewIBSQL(LogIBDatabase,'SQL_'+nmProc, -1, tpRead, true);
      LogSQL.SQL.Add('SELECT iif(THLGCOMMAND in (1012, 1005),1012,1042) COMMAND, count(iif(THLGCOMMAND in (1012, 1005),1012,1042)) countOW, THLGFIRMID');
      if GroupFirst=1 then LogSQL.SQL.Add(', THLGUSERID');
      LogSQL.SQL.Add('FROM LOGTHREADS');
      LogSQL.SQL.Add('where THLGCOMMAND in ('+IntToStr(csSendOrderToProcessing)+','+IntToStr(csAddLinesToOrder)+',1044) and THLGBEGINTIME between :pDateStart and :pDateEnd');
      LogSQL.SQL.Add('and THLGFIRMID = :FIRMID');
      if GroupFirst=1 then LogSQL.SQL.Add(' and THLGUSERID= :USERID'); 
      LogSQL.SQL.Add('group by iif(THLGCOMMAND in (1012,1005),1012,1042),THLGFIRMID');
      if GroupFirst=1 then LogSQL.SQL.Add(', THLGUSERID'); 
      LogSQL.Prepare;
//s:=LogSQL.SQL.Text;
      LogIBSQL.SQL.Add('SELECT LUCFIRMID, LFNFIRMNAME, LUCDATE, sum(LUCCONNECT) COUNTCONN');
      if GroupFirst=1 then LogIBSQL.SQL.Add(', LUCUSERID');
      LogIBSQL.SQL.Add('FROM LOGUSERCOUNTS left outer join LOGFIRMNAMES on LFNFIRMCODE=LUCFIRMID');
      LogIBSQL.SQL.Add('where LUCDATE= :pDateStart ');
      LogIBSQL.SQL.Add('group by LUCFIRMID, LFNFIRMNAME, LUCDATE'); 
      if GroupFirst=1 then LogIBSQL.SQL.Add(', LUCUSERID'); 
      LogIBSQL.SQL.Add('having sum(LUCCONNECT)> :MaxCount');
      LogIBSQL.SQL.Add('order by LUCFIRMID'); 
    
      LogIBSQL.Prepare;
      LogIBSQL.ParamByName('pDateStart').AsDate := DateStart;      // Начальная дата
      LogIBSQL.ParamByName('MaxCount').AsInteger:= MaxCount;       // 
      LogIBSQL.ExecQuery;      

      OrdSQL:= fnCreateNewIBSQL(OrdIBDatabase,'OrdQuery_'+nmProc, -1, tpRead, true); 
      OrdSQL.SQL.Add('SELECT ORDRFIRM, count(ORDRCREATORPERSON) countord');
//      if GroupFirst=1 then 
      OrdSQL.SQL.Add(', ORDRCREATORPERSON');
      OrdSQL.SQL.Add('FROM ORDERSREESTR');
      OrdSQL.SQL.Add('where ORDRTOPROCESSDATE between :pDateStart and :pDateEnd');
      OrdSQL.SQL.Add('and ORDRFIRM = :FIRMID');
//      if GroupFirst=1 then OrdSQL.SQL.Add(' and ORDRCREATORPERSON= :USERID'); 
      OrdSQL.SQL.Add('group by ORDRFIRM');
//      if GroupFirst=1 then 
      OrdSQL.SQL.Add(', ORDRCREATORPERSON'); 
//s:=OrdSQL.SQL.Text;      
      OrdSQL.Prepare;     
//prMessageLOGS('Выполнили запрос'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;      
      Percent:= 30;   
      ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);      
      while not LogIBSQL.EOF do begin  
        prStopProcess( UserID, ThreadData.ID);                                             
        try
          countOrd:= 0;
          countWare:= '';
          strFaccName:= ''; 
          manager:= '';
          FirmID:= LogIBSQL.FieldByName('LUCFIRMID').AsInteger;
          FirmName:= LogIBSQL.FieldByName('LFNFIRMNAME').AsString;
          
          if GroupFirst=1 then ClientID:= LogIBSQL.FieldByName('LUCUSERID').AsInteger;

          
          if GroupFirst=1 then begin                                             //login
            if (FirmID>0) and Cache.ClientExist(ClientID)  then begin
                login:= Cache.arClientInfo[ClientID].Login;
                FirmID:= Cache.arClientInfo[ClientID].FirmID;
              end
              else if (FirmID=0) and Cache.EmplExist(ClientID) then 
                  login:= Cache.arEmplInfo[ClientID].ServerLogin
                else
                  login:='login пользователя '+IntToStr(ClientID)+' не определен ';
            if copy(Login,1,1)='0' 
            then s1:= #160//' '
            else s1:= '';
            Login:= s1 + Login;
          end;

          if FirmName ='' then  begin                                            //FirmName
            if Cache.FirmExist(FirmID) then
              FirmName:= Cache.arFirmInfo[FirmID].Name
            else 
              if GroupFirst=1 then begin
                if Cache.EmplExist(ClientID) then 
                  FirmName:= 'ЧПФ "Владислав"'
                else 
                  if Cache.ClientExist(UserID) then 
                    FirmName:= Cache.arClientInfo[ClientID].FirmName
                  else FirmName:= 'Контрагент '+ IntToStr(FirmID) +' не определен';
              end
              else 
                if FirmID=0 then FirmName:= 'ЧПФ "Владислав"'
                else FirmName:= 'Контрагент '+ IntToStr(FirmID) +' не определен';
          end; 

          if (Cache.FirmExist(FirmID)) {and (FirmID>-1)} then begin              //manager
//            RegionalID:= Cache.arFirmInfo[FirmID].Regional;  
            firma:= Cache.arFirmInfo[FirmID];
            Manager:=firma.GetFirmManagersString([fmpName,fmpShort]);
            if trim(Manager)='' then
(*            if Cache.EmplExist(RegionalID) {and (RegionalID>-1)} then                       
              Manager:= Cache.arEmplInfo[RegionalID].EmplShortName
            else*) manager:= 'менеджер для контрагента '+FIRMNAME+' не определен';
            SLContracts:= firma.GetContracts;
            strFaccName:='';
            strFaccParentName:= '';
            for ncont:= 0 to SLContracts.Count-1 do begin
              contractID:= integer(SLContracts.Objects[ncont]);
              Contract:= firma.GetContract(contractID);
              if (pos(Contract.FaccName,strFaccName)=0) and (Contract.FaccName<>'') then
                strFaccName:= strFaccName+fnIfStr(strFaccName='','',', ')+Contract.FaccName;
              if (pos(Contract.FaccParentName,strFaccParentName)=0) and (Contract.FaccParentName<>'') then
                strFaccParentName:= strFaccParentName+fnIfStr(strFaccParentName='','',', ')+Contract.FaccParentName;
            end;
            prFree(SLContracts);
          end
          else begin
            if GroupFirst=1 then begin
              if Cache.EmplExist(ClientID) then 
                Manager:= 'сотрудник'
              else if Cache.ClientExist(UserID) then begin
                firma:= Cache.arFirmInfo[Cache.arClientInfo[ClientID].FirmID];
                Manager:=firma.GetFirmManagersString([fmpName,fmpShort]); 
                if trim(Manager)='' then
(*                RegionalID:= Cache.arFirmInfo[Cache.arClientInfo[ClientID].FirmID].Regional;
                if Cache.EmplExist(RegionalID) {and (RegionalID>-1)} then                       
                  Manager:= Cache.arEmplInfo[RegionalID].EmplShortName
                  else*) manager:= 'менеджер для контрагента '+FIRMNAME+' не определен';
                  SLContracts:= firma.GetContracts;
                  strFaccName:='';
                  strFaccParentName:= '';
                  for ncont:= 0 to SLContracts.Count-1 do begin
                    contractID:= integer(SLContracts.Objects[ncont]);
                    Contract:= firma.GetContract(contractID);
                    if (pos(Contract.FaccName,strFaccName)=0) and (Contract.FaccName<>'') then
                      strFaccName:= strFaccName+fnIfStr(strFaccName='','',', ')+Contract.FaccName;
                    if (pos(Contract.FaccParentName,strFaccParentName)=0) and (Contract.FaccParentName<>'') then
                      strFaccParentName:= strFaccParentName+fnIfStr(strFaccParentName='','',', ')+Contract.FaccParentName;
                  end;
                  prFree(SLContracts);
              end
              else manager:= 'менеджер для контрагента '+FIRMNAME+' не определен';
            end
            else manager:= 'менеджер для контрагента '+FIRMNAME+' не определен';
          end;
          LogSQL.ParamByName('pDateStart').AsDate := DateStart;      // Начальная дата
          LogSQL.ParamByName('pDateEnd').AsDate := DateStart+1;
          LogSQL.ParamByName('FIRMID').AsInteger:= FirmID;       //
          if GroupFirst=1 then LogSQL.ParamByName('USERID').AsInteger:= ClientID;
          LogSQL.ExecQuery;
          while not LogSQL.EOF do begin
            if LogSQL.FieldByName('COMMAND').AsInteger=1012 then countOrd:= LogSQL.FieldByName('countOW').AsInteger
            else countWare:= LogSQL.FieldByName('countOW').AsString;
            LogSQL.Next;
          end;
          LogSQL.Close;
          countFirmOrd:= 0;
          if FirmID<>0 then begin
            OrdSQL.ParamByName('pDateStart').AsDate := DateStart;      // Начальная дата
            OrdSQL.ParamByName('pDateEnd').AsDate := DateStart+1;
            OrdSQL.ParamByName('FIRMID').AsInteger:= FirmID;       //
  //          if GroupFirst=1 then OrdSQL.ParamByName('USERID').AsInteger:= ClientID;
            OrdSQL.ExecQuery;
            while not OrdSQL.EOF do begin
              if (GroupFirst=1) and (OrdSQL.FieldByName('ORDRCREATORPERSON').AsInteger=ClientID) then 
                countOrd:= countOrd+OrdSQL.FieldByName('countord').AsInteger;
              countFirmOrd:= countFirmOrd+OrdSQL.FieldByName('countord').AsInteger;
              OrdSQL.Next;
            end;
            OrdSQL.Close;
          end;
          if GroupFirst=1 then  begin
            Content:= IntToStr(FirmID)+';'+FIRMNAME+';'+IntToStr(ClientID)+';'+Login+';'+ LogIBSQL.FieldByName('CountConn').AsString+';'+fnIfStr(countFirmOrd=0,'',IntToStr(countFirmOrd))+';'+fnIfStr(countOrd=0,'',IntToStr(countOrd))+';'+countWare+';'+ manager +';'+strFaccName;
          end
          else 
            Content:= IntToStr(FirmID)+';'+FIRMNAME+';'+ LogIBSQL.FieldByName('CountConn').AsString+';'+fnIfStr(countFirmOrd=0,'',IntToStr(countFirmOrd)){+';'+fnIfStr(countOrd=0,'',IntToStr(countOrd))}+';'+countWare+';'+ manager+';'+strFaccName;  
          WriteLn(file_csv, Content);     
          inc(iCount);
          countOrd:= 0;
          countWare:= '';
          strFaccName:= ''; 
          manager:= '';
        except
          on E: Exception do begin
            prMessageLOGS('Ошибка в процедуре '+nmProc+' '+ E.Message, 'import', false) ;
            s:=  'Ошибка при обработке результатов запроса. ';
            raise Exception.Create(Title+#13+s+E.Message);
          end;
        end;
        LogIBSQL.Next;                 
      end;  
      LogIBSQL.Close;

//prMessageLOGS('Заполнили'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;        
      Percent:= 50;     
      ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);      
      Title:= 'Отчет о превышении количества обращений к системе ('+IntToStr(MaxCount)+') за '+FormatDateTime(cDateFormatY4, DateStart);
      if iCount=0 then begin
        s:= MessText(mtkNotFoundDataUse);
        raise Exception.Create(Title+#10+'  '+s);
      end;
      Subj:= 'Отчет 30(4) '+FormatDateTime(cDateTimeFormatY2S, Now());
      ContentType:= CSVContentType;// for Excel(.csv)
      lstBodyMail:= TStringList.Create;
      lstBodyMail.Add(Title);  
(*      lstBodyMail.Add(' ');
      lstBodyMail.Add('Начало выполнения: '+FormatDateTime(cDateTimeFormatTSnD, timerStart));
      lstBodyMail.Add('Завершение выполнения: '+ FormatDateTime(cDateTimeFormatTSnD,Now));
      lstBodyMail.Add('Общее время выполнения: '+ FormatDateTime('hh:nn:ss',Now-timerStart));   *)   
    finally
      prFreeIBSQL(LogSQL);
      prFreeIBSQL(LogIBSQL);
      prFreeIBSQL(OrdSQL);
      if Pool<>nil then Pool.SetFreeCnt(LogIBDatabase, True);
      if PoolOrd<>nil then PoolOrd.SetFreeCnt(OrdIBDatabase, True);
      CloseFile(file_csv);  
    end;
  finally
    prFree(FilterData);
    prFree(SLContracts);
    prFree(List);
    SetLength(MsgStr, 0); 
    result:= s;
  end; 
//prMessageLOGS('Закончили'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;  
    
      //ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);
//prMessageLOGS('Время всего'+': - '+
//        FloatToStr(RoundTo((Now-timerStart)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;  
end;  
//==============================================================================
function fnRepCountRequestLOG(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,
   ContentType:string; ThreadData: TThreadData; filter_data: string): string;
const
 nmProc = 'NfnRepCountRequest'; // имя процедуры/функции
var
    LOGIBDatabase: TIBDatabase;
    LOGIBSQL: TIBSQL;
    FilterData, SLContracts: TStringList;
    s, s1: string;
    MaxCount, GroupFirst, RecCount, ncont: integer;
    DateStart: TDateTime;
    Content, PathFile, Title, strFaccName, strFaccParentName: string;
    file_csv: textfile; 
    FirmID,ClientID, ContractID: integer;
//    timer, timerStart: TDateTime;
    Percent: real;
    Pool: TIBCntsPool;
    FirmName, login, manager: string;
    flSUF: boolean;
    firma: TFirmInfo;
    Contract: TContract;
begin
//timer:= Now;
//timerStart:= Now;
//prMessageLOGS('-----------------LOGExport30_1.csv--------------------','Log_prg.log' , false);  
  s:= '';
  FilterData:=nil;
  FilterData:= TStringList.Create;
  RecCount:= 0;
  ClientID:= 0;
  Pool:= nil;
  LOGIBDatabase:= nil;
  LogIBSQL:= nil;
  try
    FilterData.Text:= filter_data;
    MaxCount:= StrToIntDef(FilterData.Values['dop_qty'],-1);// максимальное допустимое кол-во
    if MaxCount=-1 then raise EBOBError.Create('Укажите правильно количество.');
    GroupFirst:= StrToInt(FilterData.Values['dop_groupby']);
    DateStart:= StrToDateTime(FilterData.Values['dop_fromdate']); // получаем DateStart

    s:= '';
    if FName='' then begin
      if not GetEmplTmpFilePath(UserID, PathFile, s) then raise EBOBError.Create(s);  
      FName:= PathFile+fnFormRepFileName('30_1', '.csv', ImpCheck.GetCheckKind(UserID, ThreadData.ID)); {'RepCountRequest'+FormatDateTime('_dd.mm_(hh.nn)',Now)+'.csv';}
    end;
    if FileExists(FName) and not SysUtils.DeleteFile(FName) then
      raise Exception.Create(MessText(mtkNotDelPrevFile));
    try    
    AssignFile(file_csv, FName);
    filemode:= fmOpenReadWrite; //назначаем log-файл
    if FileExists(FName) then Reset(file_csv) else ReWrite(file_csv);
    Append(file_csv);               
    Content:= '';  
    //Добавляем шапку:                  
      Title:= 'Отчет о превышении количества запросов проверки наличия ('+IntToStr(MaxCount)+') за '+
              FormatDateTime(cDateFormatY4, DateStart); //+'-'+FormatDateTime('dd.mm.yyyy', DateEnd);  
      Content:= Title+' ( '+IntToStr(MaxCount)+')';    
      WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
      Content:= '';
      if GroupFirst=0 then Content:= 'Код контрагента;Клиент;Кол-во запросов;Менеджер;ЦФУ'
      else Content:= 'Код контрагента;Клиент;Код пользователя;Логин пользователя;Кол-во запросов;Менеджер;ЦФУ';
      WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
//prMessageLOGS('Приготовились'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;
      Percent:= 10;      
      ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);
    //шапка добавлена  
    Content:= '';   

    flSUF:= (DateStart < Date) and cntsSUFLOG.BaseConnected; // если до вчера - берем с суфлера
    if flSUF then Pool:= cntsSufLOG else Pool:= cntsLOG;
    try
      LogIBDatabase:= Pool.GetFreeCnt;
    except
      exit;
    end;

    LOGIBSQL:= fnCreateNewIBSQL(LOGIBDatabase,'LOGIBSQL_'+nmProc, -1, tpRead, true);//fnCreateNewIBQuery(SUFIBDatabase,'GBIBQuery_'+nmProc,ThreadData.ID);

      LogIBSQL.SQL.Add('SELECT first 1 iif(exists(select * from LOGTHREADS where THLGBEGINTIME between DateADD(HOUR,5,:pDateStart) and :pDateStart+1),1,0) as ii from logserverlist');
      LogIBSQL.Prepare;
      LogIBSQL.ParamByName('pDateStart').AsDate := DateStart;      // Начальная дата
      LogIBSQL.ExecQuery;
      if not LogIBSQL.EOF then RecCount:=LogIBSQL.FieldByName('ii').AsInteger;
      LogIBSQL.Close;
      LogIBSQL.SQL.Clear;
      if RecCount=0 then begin
        prFreeIBSQL(LogIBSQL);
        if Pool<>nil then Pool.SetFreeCnt(LogIBDatabase, True);
        Pool:= cntsLOG;
        try
          LogIBDatabase:= Pool.GetFreeCnt;
        except
          exit;
        end;
        LogIBSQL:= fnCreateNewIBSQL(LogIBDatabase,'SQL_'+nmProc, -1, tpRead, true);
      end;
      RecCount:=0;
          
    LOGIBSQL.SQL.Add('SELECT count(LDQCODE) CountRQ, LDQFIRMID, LFNFIRMNAME');
    if GroupFirst=1 then LOGIBSQL.SQL.Add(', LDQUSERID');
    LOGIBSQL.SQL.Add('FROM LOGDETAILSQTY left outer join LOGFIRMNAMES on LFNFIRMCODE=LDQFIRMID');
    LOGIBSQL.SQL.Add('where LDQBEGTIME between :begintime and :endtime');
    LOGIBSQL.SQL.Add('group by LDQFIRMID,LFNFIRMNAME');
    if GroupFirst=1 then LOGIBSQL.SQL.Add(', LDQUSERID');
    LOGIBSQL.SQL.Add('having  count(LDQCODE)>:MaxCount');   
    LogIBSQL.Prepare;
    LOGIBSQL.ParamByName('begintime').AsDate:= DateStart;
    LOGIBSQL.ParamByName('endtime').AsDate:= DateStart+1;
    LOGIBSQL.ParamByName('MaxCount').AsInteger:= MaxCount;
    LOGIBSQL.ExecQuery;
//    FirmID:= 0;
//prMessageLOGS('Запрос выпонили'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;    
      Percent:= 60;      
      ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);
      while not LOGIBSQL.EOF do begin
        try
          Content:='';
          prStopProcess( UserID, ThreadData.ID);
          FirmID:= LogIBSQL.FieldByName('LDQFIRMID').AsInteger;
          FirmName:= LogIBSQL.FieldByName('LFNFIRMNAME').AsString;
          if GroupFirst=1 then ClientID:= LogIBSQL.FieldByName('LDQUSERID').AsInteger;

          
          if GroupFirst=1 then begin                                             //login
            if (FirmID>0) and (Cache.ClientExist(ClientID))  then begin
                login:= Cache.arClientInfo[ClientID].Login;
                FirmID:= Cache.arClientInfo[ClientID].FirmID;
              end
              else if (FirmID=0) and (Cache.EmplExist(ClientID)) then 
                  login:= Cache.arEmplInfo[ClientID].ServerLogin
                else
                  login:='login пользователя '+IntToStr(ClientID)+' не определен ';
            if copy(Login,1,1)='0' 
            then s1:= #160//' '
            else s1:= '';
            Login:= s1 + Login;
          end;

          if FirmName ='' then  begin                                            //FirmName
            if Cache.FirmExist(FirmID) then
              FirmName:= Cache.arFirmInfo[FirmID].Name
            else 
              if GroupFirst=1 then begin
                if Cache.EmplExist(ClientID) then 
                  FirmName:= 'ЧПФ "Владислав"'
                else 
                  if Cache.ClientExist(ClientID) then 
                    FirmName:= Cache.arClientInfo[ClientID].FirmName
                  else FirmName:= 'Контрагент '+ IntToStr(FirmID) +' не определен';
              end
              else 
                FirmName:= 'Контрагент '+ IntToStr(FirmID) +' не определен';
          end; 

          if (Cache.FirmExist(FirmID)) {and (FirmID>-1)} then begin              //manager
            firma:= Cache.arFirmInfo[FirmID];
            Manager:=firma.GetFirmManagersString([fmpName,fmpShort]);
            if trim(Manager)='' then
(*            RegionalID:= Cache.arFirmInfo[FirmID].Regional;  
            if Cache.EmplExist(RegionalID) {and (RegionalID>-1)} then                       
              Manager:= Cache.arEmplInfo[RegionalID].EmplShortName
            else*) manager:= 'менеджер для контрагента '+FIRMNAME+' не определен';
            SLContracts:= firma.GetContracts;
            strFaccName:='';
            strFaccParentName:= '';
            for ncont:= 0 to SLContracts.Count-1 do begin
              contractID:= integer(SLContracts.Objects[ncont]);
              Contract:= firma.GetContract(contractID);
              if (pos(Contract.FaccName,strFaccName)=0) and (Contract.FaccName<>'') then
                strFaccName:= strFaccName+fnIfStr(strFaccName='','',', ')+Contract.FaccName;
              if (pos(Contract.FaccParentName,strFaccParentName)=0) and (Contract.FaccParentName<>'') then
                strFaccParentName:= strFaccParentName+fnIfStr(strFaccParentName='','',', ')+Contract.FaccParentName;
            end;
            prFree(SLContracts);
          end
          else begin
            if GroupFirst=1 then begin
              if Cache.EmplExist(ClientID) then begin
                Manager:= 'сотрудник';
                strFaccName:='';
                strFaccParentName:='';
              end
              else if Cache.ClientExist(UserID) then begin
                firma:= Cache.arFirmInfo[Cache.arClientInfo[ClientID].FirmID];
                Manager:=firma.GetFirmManagersString([fmpName,fmpShort]);
                if trim(Manager)='' then
(*                RegionalID:= Cache.arFirmInfo[Cache.arClientInfo[ClientID].FirmID].Regional;
                if Cache.EmplExist(RegionalID) {and (RegionalID>-1)} then                       
                  Manager:= Cache.arEmplInfo[RegionalID].EmplShortName
                  else*) manager:= 'менеджер для контрагента '+FIRMNAME+' не определен';
                SLContracts:= firma.GetContracts;
                strFaccName:='';
                strFaccParentName:= '';
                for ncont:= 0 to SLContracts.Count-1 do begin
                  contractID:= integer(SLContracts.Objects[ncont]);
                  Contract:= firma.GetContract(contractID);
                  if (pos(Contract.FaccName,strFaccName)=0) and (Contract.FaccName<>'') then
                    strFaccName:= strFaccName+fnIfStr(strFaccName='','',', ')+Contract.FaccName;
                  if (pos(Contract.FaccParentName,strFaccParentName)=0) and (Contract.FaccParentName<>'') then
                    strFaccParentName:= strFaccParentName+fnIfStr(strFaccParentName='','',', ')+Contract.FaccParentName;
                end;
                prFree(SLContracts);
              end
              else manager:= 'менеджер для контрагента '+FIRMNAME+' не определен';
            end
            else manager:= 'менеджер для контрагента '+FIRMNAME+' не определен';
          end;
          if GroupFirst=1 then 
            Content:= IntToStr(FirmID)+';'+FIRMNAME+';'+IntToStr(ClientID)+';'+Login+';'+ LogIBSQL.FieldByName('CountRQ').AsString+';'+ manager+';'+strFaccName 
          else 
            Content:= IntToStr(FirmID)+';'+FIRMNAME+';'+ LogIBSQL.FieldByName('CountRQ').AsString+';'+ manager+';'+strFaccName;  
          WriteLn(file_csv, Content);     
          inc(RecCount);          
          strFaccName:='';
          strFaccParentName:='';
        except
          on E: Exception do begin
            prMessageLOGS('Ошибка в процедуре '+nmProc+' ' + E.Message, 'import', false) ;
            s:=  'Ошибка при обработке результатов запроса. ';
            raise EBOBError.Create(Title+#10+s+ E.Message);
          end;
        end;
        LOGIBSQL.Next;
      end; 
//prMessageLOGS('Заполнили'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;
      Percent:= 50;      
      ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);
(*    lstBodyMail.Add(' ');
    lstBodyMail.Add('Начало выполнения: '+FormatDateTime(cDateTimeFormatTSnD, timerStart));
    lstBodyMail.Add('Завершение выполнения: '+ FormatDateTime(cDateTimeFormatTSnD,Now));
    lstBodyMail.Add('Общее время выполнения: '+ FormatDateTime('hh:nn:ss',Now-timerStart));    *)
    finally
      CloseFile(file_csv);
      prFreeIBSQL(LOGIBSQL);
      prFree(SLContracts);
      if Pool<>nil then Pool.SetFreeCnt(LOGIBDatabase, True);
    end;
  finally
    if RecCount>0 then begin
      Subj:= 'Отчет 30(1) '+FormatDateTime(cDateTimeFormatY2S, Now());
      ContentType:= CSVContentType;// for Excel(.csv)
      lstBodyMail:= TStringList.Create;
      lstBodyMail.Add(Title);  
    end;
    prFree(FilterData);
    if RecCount=0 then begin 
      s:= MessText(mtkNotFoundDataUse);
      raise Exception.Create(Title+#10+'  '+s);
    end;    
    result:= s;
  end;
//prMessageLOGS('Закончили'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now; 
   Percent:= 10;      
   ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);  
//prMessageLOGS('Время всего'+': - '+
//        FloatToStr(RoundTo((Now-timerStart)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;  
end;  


//==============================================================================
function fnRepCountRequestWareLOG(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,
   ContentType:string; ThreadData: TThreadData; filter_data: string): string;
const
 nmProc = 'fnRepCountRequestWareLOG'; // имя процедуры/функции
var
    LOGIBDatabase: TIBDatabase;
    LOGIBSQL: TIBSQL;
    FilterData, SLContracts: TStringList;
    s, s1: string;
    MaxCount, GroupFirst: integer;
    DateStart: TDateTime;
    Content, PathFile, Title: string;
    file_csv: textfile;
    iCount,i,FirmID, ClientID, WareId, ContractID, ncont: integer;
    WareName: string;
//    timer, timerStart: TDateTime;
    Percent: real;
    Pool: TIBCntsPool;
    List: TStringList;
    FirmName, login, manager, strFaccName, strFaccParentName: string;
    flSUF: boolean;   
    firma: TfirmInfo;   
    Contract: TContract;          
begin
//timer:= Now;
//timerStart:= Now;
//prMessageLOGS('-----------------Export30_2LOG.csv--------------------','Log_prg.log' , false);
  s:= '';
  FilterData:=nil;
  List:=nil;
  FilterData:= TStringList.Create;
  List:= TStringList.Create;
  ClientID:= 0;
  iCount:= 0;
  pool:= nil;
  LOGIBDatabase:= nil;
  LogIBSQL:= nil;
  try
    FilterData.Text:= filter_data;
    MaxCount:= StrToIntDef(FilterData.Values['dop_qty'],-1);// максимальное допустимое кол-во
    if MaxCount=-1 then raise EBOBError.Create('Укажите правильно количество.');
    GroupFirst := StrToInt(FilterData.Values['dop_groupby']);
    DateStart:= StrToDateTime(FilterData.Values['dop_fromdate']); // получаем DateStart

    s:= '';
    if FName='' then begin
      if not GetEmplTmpFilePath(UserID, PathFile, s) then raise EBOBError.Create(s);  
      FName:= PathFile+ fnFormRepFileName('30_2', '.csv', ImpCheck.GetCheckKind(UserID, ThreadData.ID));//'RepCountRequestWare'+FormatDateTime('_dd.mm_(hh.nn)',Now)+'.csv';
    end;
    if FileExists(FName) and not SysUtils.DeleteFile(FName) then
      raise Exception.Create(MessText(mtkNotDelPrevFile));
    try    
    AssignFile(file_csv, FName);
    filemode:= fmOpenReadWrite; //назначаем log-файл
    if FileExists(FName) then Reset(file_csv) else ReWrite(file_csv);
    Append(file_csv);               
    Content:= '';  
    //Добавляем шапку:                  
      Title:= 'Отчет о превышении количества запросов проверки наличия по одному товару ('+IntTOStr(MaxCount)+') за '+FormatDateTime(cDateFormatY4, DateStart); //+'-'+FormatDateTime('dd.mm.yyyy', DateEnd); 

      Content:= Title+' ('+IntToStr(MaxCount)+')';   
      WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
      Content:= '';
      if GroupFirst=0 then Content:= 'Код контрагента;Клиент;Кол-во запросов;Товар;Менеджер;ЦФУ'
      else Content:= 'Код контрагента;Клиент;Код пользователя;Логин пользователя;Кол-во запросов;Товар;Менеджер;ЦФУ';
      WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
//prMessageLOGS('Приготовились'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;
      Percent:= 10;      
      ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);
    //шапка добавлена  
    Content:= '';   
    flSUF:= (DateStart < Date) and cntsSUFLOG.BaseConnected; // если до вчера - берем с суфлера
    if flSUF then Pool:= cntsSufLOG else Pool:= cntsLOG;

    try
      LogIBDatabase:= Pool.GetFreeCnt;
    except
      exit;
    end;
    LOGIBSQL:= fnCreateNewIBSQL(LOGIBDatabase,'LOGIBSQL_'+nmProc, -1, tpRead, true); //fnCreateNewIBQuery(SUFIBDatabase,'GBIBQuery_'+nmProc,ThreadData.ID);
   
      LogIBSQL.SQL.Add('SELECT first 1 iif(exists(select * from LOGTHREADS where THLGBEGINTIME between DateADD(HOUR,5,:pDateStart) and :pDateStart+1),1,0) as ii from logserverlist');
      LogIBSQL.Prepare;
      LogIBSQL.ParamByName('pDateStart').AsDate := DateStart;      // Начальная дата
      LogIBSQL.ExecQuery;
      if not LogIBSQL.EOF then iCount:=LogIBSQL.FieldByName('ii').AsInteger;
      LogIBSQL.Close;
      LogIBSQL.SQL.Clear;
      if iCount=0 then begin
        prFreeIBSQL(LogIBSQL);
        if Pool<>nil then Pool.SetFreeCnt(LogIBDatabase, True);
        Pool:= cntsLOG;
        try
          LogIBDatabase:= Pool.GetFreeCnt;
        except
          exit;
        end;
        LogIBSQL:= fnCreateNewIBSQL(LogIBDatabase,'SQL_'+nmProc, -1, tpRead, true);
      end;
      iCount:=0;
   
    LOGIBSQL.SQL.Add('SELECT count(LDQCODE) CountRQ, LDQFIRMID, LFNFIRMNAME, LDQWAREID');
    if GroupFirst=1 then LOGIBSQL.SQL.Add(', LDQUSERID');
    LOGIBSQL.SQL.Add('FROM LOGDETAILSQTY left outer join LOGFIRMNAMES on LFNFIRMCODE = LDQFIRMID');
    LOGIBSQL.SQL.Add('where LDQBEGTIME between :begintime and :endtime');
    LOGIBSQL.SQL.Add('group by LDQFIRMID,LFNFIRMNAME, LDQWAREID');
    if GroupFirst=1 then LOGIBSQL.SQL.Add(', LDQUSERID');
    LOGIBSQL.SQL.Add('having  count(LDQCODE)>:MaxCount');
    LogIBSQL.Prepare;
    LOGIBSQL.ParamByName('begintime').AsDate:= DateStart;
    LOGIBSQL.ParamByName('endtime').AsDate:= DateStart+1;
    LOGIBSQL.ParamByName('MaxCount').AsInteger:= MaxCount;
    LOGIBSQL.ExecQuery;

//    WareId:= 0;
        
//prMessageLOGS('Запрос выполнили '+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now; 
      Percent:= 30;
      ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);
      i:=0;   
      while not LOGIBSQL.EOF do begin
        prStopProcess( UserID, ThreadData.ID);
        try
          Content:='';
          FirmID:= LogIBSQL.FieldByName('LDQFIRMID').AsInteger;
          if (Cache.FirmExist(FirmID))  then begin              //manager
            firma:= Cache.arFirmInfo[FirmID];
            Manager:=firma.GetFirmManagersString([fmpName,fmpShort]);
            if trim(Manager)='' then
(*            RegionalID:= Cache.arFirmInfo[FirmID].Regional;  
            if Cache.EmplExist(RegionalID) then                       
              Manager:= Cache.arEmplInfo[RegionalID].EmplShortName
            else*) manager:= 'менеджер для контрагента '+FIRMNAME+' не определен';
            SLContracts:= firma.GetContracts;
            strFaccName:='';
            strFaccParentName:= '';
            for ncont:= 0 to SLContracts.Count-1 do begin
              contractID:= integer(SLContracts.Objects[ncont]);
              Contract:= firma.GetContract(contractID);
              if (pos(Contract.FaccName,strFaccName)=0) and (Contract.FaccName<>'') then
                strFaccName:= strFaccName+fnIfStr(strFaccName='','',', ')+Contract.FaccName;
              if (pos(Contract.FaccParentName,strFaccParentName)=0) and (Contract.FaccParentName<>'') then
                strFaccParentName:= strFaccParentName+fnIfStr(strFaccParentName='','',', ')+Contract.FaccParentName;
            end;
            prFree(SLContracts);
          end
          else begin
            if GroupFirst=1 then begin
              if Cache.EmplExist(ClientID) then begin
                Manager:= 'сотрудник';
                strFaccName:='';
                strFaccParentName:='';
              end
              else if Cache.ClientExist(ClientID) then begin
                firma:= Cache.arFirmInfo[Cache.arClientInfo[ClientID].FirmID];
                Manager:=firma.GetFirmManagersString([fmpName,fmpShort]);
                if trim(Manager)='' then
                  manager:= 'менеджер для контрагента '+FIRMNAME+' не определен';
                SLContracts:= firma.GetContracts;
                strFaccName:='';
                strFaccParentName:= '';
                for ncont:= 0 to SLContracts.Count-1 do begin
                  contractID:= integer(SLContracts.Objects[ncont]);
                  Contract:= firma.GetContract(contractID);
                  if (pos(Contract.FaccName,strFaccName)=0) and (Contract.FaccName<>'') then
                    strFaccName:= strFaccName+fnIfStr(strFaccName='','',', ')+Contract.FaccName;
                  if (pos(Contract.FaccParentName,strFaccParentName)=0) and (Contract.FaccParentName<>'') then
                    strFaccParentName:= strFaccParentName+fnIfStr(strFaccParentName='','',', ')+Contract.FaccParentName;
                end;
                prFree(SLContracts);
              end
              else manager:= 'менеджер для контрагента '+FIRMNAME+' не определен';
            end
            else manager:= 'менеджер для контрагента '+FIRMNAME+' не определен';
          end;
          FirmName:= LogIBSQL.FieldByName('LFNFIRMNAME').AsString;
          if GroupFirst=1 then ClientID:= LogIBSQL.FieldByName('LDQUSERID').AsInteger;

          if StrToIntDef(LOGIBSQL.FieldByName('LDQWAREID').AsString,-1)>-1 then begin      //WareName
             WareID:= StrToIntDef(LOGIBSQL.FieldByName('LDQWAREID').AsString,-1);
             if Cache.WareExist(WareID) then
               WareName:= Cache.arWareInfo[WareID].Name
             else 
               WareName:= 'Наименование товара '+LOGIBSQL.FieldByName('LDQWAREID').AsString+' не найдено или товар архивный';
          end
          else WareName:= 'Нет товара '+LOGIBSQL.FieldByName('LDQWAREID').AsString;
          if copy(WareName,1,1)='0' then WareName:= ' '+WareName;
          
          if GroupFirst=1 then begin                                             //login
            if (FirmID>0) and Cache.ClientExist(ClientID)  then begin
                login:= Cache.arClientInfo[ClientID].Login;
                FirmID:= Cache.arClientInfo[ClientID].FirmID;
              end
              else begin
                if (FirmID=0) and Cache.EmplExist(ClientID) then
                  login:= Cache.arEmplInfo[ClientID].ServerLogin
                else
                  login:='login пользователя '+IntToStr(ClientID)+' не определен ';
                strFaccName:='';
                strFaccParentName:='';
              end;    
            if copy(Login,1,1)='0' 
            then s1:= #160//' '
            else s1:= '';
            Login:= s1 + Login;
          end;

          if FirmName ='' then  begin                                            //FirmName
            if Cache.FirmExist(FirmID) then
              FirmName:= Cache.arFirmInfo[FirmID].Name
            else 
              if GroupFirst=1 then begin
                if Cache.EmplExist(ClientID) then 
                  FirmName:= 'ЧПФ "Владислав"'
                else 
                  if Cache.ClientExist(ClientID) then 
                    FirmName:= Cache.arClientInfo[ClientID].FirmName
                  else FirmName:= 'Контрагент '+ IntToStr(FirmID) +' не определен';
              end
              else 
                FirmName:= 'Контрагент '+ IntToStr(FirmID) +' не определен';
          end; 

(*          if (Cache.FirmExist(FirmID))  then begin              //manager
            firma:= Cache.arFirmInfo[FirmID];
            Manager:=firma.GetFirmManagersString([fmpName,fmpShort]);
            if trim(Manager)='' then
              manager:= 'менеджер для контрагента '+FIRMNAME+' не определен';
            SLContracts:= firma.GetContracts;
            strFaccName:='';
            strFaccParentName:= '';
            for ncont:= 0 to SLContracts.Count-1 do begin
              contractID:= integer(SLContracts.Objects[ncont]);
              Contract:= firma.GetContract(contractID);
              if (pos(Contract.FaccName,strFaccName)=0) and (Contract.FaccName<>'') then
                strFaccName:= strFaccName+fnIfStr(strFaccName='','',', ')+Contract.FaccName;
              if (pos(Contract.FaccParentName,strFaccParentName)=0) and (Contract.FaccParentName<>'') then
                strFaccParentName:= strFaccParentName+fnIfStr(strFaccParentName='','',', ')+Contract.FaccParentName;
            end;
            prFree(SLContracts);
          end
          else begin
            if GroupFirst=1 then begin
              if Cache.EmplExist(ClientID) then begin
                Manager:= 'сотрудник';
                strFaccName:='';
                strFaccParentName:='';
              end
              else if Cache.ClientExist(ClientID) then begin
                firma:= Cache.arFirmInfo[Cache.arClientInfo[ClientID].FirmID];
                Manager:=firma.GetFirmManagersString([fmpName,fmpShort]);
                if trim(Manager)='' then
                  manager:= 'менеджер для контрагента '+FIRMNAME+' не определен';
                SLContracts:= firma.GetContracts;
                strFaccName:='';
                strFaccParentName:= '';
                for ncont:= 0 to SLContracts.Count-1 do begin
                  contractID:= integer(SLContracts.Objects[ncont]);
                  Contract:= firma.GetContract(contractID);
                  if (pos(Contract.FaccName,strFaccName)=0) and (Contract.FaccName<>'') then
                    strFaccName:= strFaccName+fnIfStr(strFaccName='','',', ')+Contract.FaccName;
                  if (pos(Contract.FaccParentName,strFaccParentName)=0) and (Contract.FaccParentName<>'') then
                    strFaccParentName:= strFaccParentName+fnIfStr(strFaccParentName='','',', ')+Contract.FaccParentName;
                end;
                prFree(SLContracts);
              end
              else manager:= 'менеджер для контрагента '+FIRMNAME+' не определен';
            end
            else manager:= 'менеджер для контрагента '+FIRMNAME+' не определен';
          end; *)
          if GroupFirst=1 then 
            Content:= IntToStr(FirmID)+';'+FIRMNAME+';'+IntToStr(ClientID)+';'+Login+';'+ LogIBSQL.FieldByName('CountRQ').AsString+';'+WareName+';'+ manager+';'+strFaccName 
          else 
            Content:= IntToStr(FirmID)+';'+FIRMNAME+';'+ LogIBSQL.FieldByName('CountRQ').AsString+';'+WareName+';'+ manager+';'+strFaccName;  
          WriteLn(file_csv, Content);     
          inc(iCount);        
        //Regional:= Cache.arFirmInfo[SUFIBQuery.FieldByName('FIRMID').AsInteger].Regional;

        except
          on E: Exception do begin
            prMessageLOGS(IntToStr(i)+ ' Ошибка в процедуре '+nmProc +' '+ E.Message+ ' FirmID '+LOGIBSQL.FieldByName('THLGFIRMID').AsString 
            +' UserID '+LogIBSQL.FieldByName('THLGUSERID').AsString+' WareID '+LOGIBSQL.FieldByName('WareCode').AsString, 'import', false) ;
            s:=  'Ошибка при обработке результатов запроса. ';
            raise EBOBError.Create(Title+#10+s+ E.Message);
          end;
        end; 
        LOGIBSQL.Next;
      end;

//prMessageLOGS('Заполнили'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now; 
   
    finally
      CloseFile(file_csv);
      prFreeIBSQL(LOGIBSQL);
      prFree(SLContracts);
      if pool<>nil then pool.SetFreeCnt(LOGIBDatabase, True);    
    end;
  finally
    if iCount>0 then begin 
      Subj:= 'Отчет 30(2) '+FormatDateTime(cDateTimeFormatY2S, Now());
      ContentType:= CSVContentType;// for Excel(.csv)
      lstBodyMail:= TStringList.Create;
      lstBodyMail.Add(Title);
    end;
    prFree(FilterData);
    prFree(List);
    if iCount=0 then begin 
      s:= '  '+MessText(mtkNotFoundDataUse);
      raise Exception.Create(Title+#10+s);
    end;
    result:= s;
  end;
//prMessageLOGS('Закончили'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now; 
  Percent:= 10;      
  ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);
//prMessageLOGS('Общее время'+': - '+
//        FloatToStr(RoundTo((Now-timerStart)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;  
end;  
 
//==============================================================================
function fnRepCountRequestWareQTYLOG(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,
   ContentType:string; ThreadData: TThreadData; filter_data: string): string;
const
 nmProc = 'fnRepCountRequestWare'; // имя процедуры/функции
var
    LOGIBDatabase: TIBDatabase;
    LOGIBSQL: TIBSQL;
    FilterData, SLContracts: TStringList;
    s, s1: string;
    MaxCount, RecCount: integer;
    DateStart: TDateTime;
    Content, PathFile, Title: string;
    file_csv: textfile;
    FirmID, ClientID, WareID, ContractID, ncont: integer;
//    timer, timerStart: TDateTime;
    Percent: real;
    Pool: TIBCntsPool;
    login, manager, FirmName, WareName, strFaccName, strFaccParentName: string;
    flSUF: boolean;
    firma: TfirmInfo;
    Contract: TContract;
begin
//timer:= Now;
//timerStart:= Now;
//prMessageLOGS('-----------------Export30_3LOG.csv--------------------','Log_prg.log' , false);
  s:= '';
  RecCount:= 0;
  FilterData:=nil;
  FilterData:= TStringList.Create;
  pool:= nil;
  LOGIBDatabase:= nil;
  LogIBSQL:= nil;
  try
    FilterData.Text:= filter_data;
    MaxCount:= StrToIntDef(FilterData.Values['dop_qty'],-1);// максимальное допустимое кол-во 
    if MaxCount=-1 then raise EBOBError.Create('Укажите правильно количество.');
    DateStart:= StrToDateTime(FilterData.Values['dop_fromdate']); // получаем DateStart

    s:= '';
    if FName='' then begin
      if not GetEmplTmpFilePath(UserID, PathFile, s) then raise EBOBError.Create(s); 
      FName:= PathFile+fnFormRepFileName('30_3', '.csv', ImpCheck.GetCheckKind(UserID, ThreadData.ID));//'RepCountRequestQTYWare'+FormatDateTime('_dd.mm_(hh.nn)',Now)+'.csv';
    end;
    if FileExists(FName) and not SysUtils.DeleteFile(FName) then
      raise Exception.Create(MessText(mtkNotDelPrevFile));
    try    
    AssignFile(file_csv, FName);
    filemode:= fmOpenReadWrite; //назначаем log-файл
    if FileExists(FName) then Reset(file_csv) else ReWrite(file_csv);
    Append(file_csv);
    Content:= '';
    //Добавляем шапку:                  
    Title:= 'Отчет о превышении количества в проверке наличия ('+IntToStr(MaxCount)+') за '+FormatDateTime(cDateFormatY4, DateStart); //+'-'+FormatDateTime('dd.mm.yyyy', DateEnd); 
    Content:= Title;       
    WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
    Content:= 'Код контрагента;Клиент;Код пользователя;Логин пользователя;Товар;Кол-во;Время;Менеджер;ЦФУ';
    WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
//prMessageLOGS('Приготовились'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66%
//timer:= now;
    Percent:= 10;
    ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);
    //шапка добавлена
    Content:= '';   
    flSUF:= (DateStart < Date) and cntsSUFLOG.BaseConnected; // если до вчера - берем с суфлера
    if flSUF then Pool:= cntsSufLOG else Pool:= cntsLOG;
    try
      LogIBDatabase:= Pool.GetFreeCnt;
    except
      exit;
    end;
    LOGIBSQL:= fnCreateNewIBSQL(LOGIBDatabase,'LOGIBSQL_'+nmProc, -1, tpRead, true); //fnCreateNewIBQuery(SUFIBDatabase,'GBIBQuery_'+nmProc,ThreadData.ID);

      LogIBSQL.SQL.Add('SELECT first 1 iif(exists(select * from LOGTHREADS where THLGBEGINTIME between DateADD(HOUR,5,:pDateStart) and :pDateStart+1),1,0) as ii from logserverlist');
      LogIBSQL.Prepare;
      LogIBSQL.ParamByName('pDateStart').AsDate := DateStart;      // Начальная дата
      LogIBSQL.ExecQuery;
      if not LogIBSQL.EOF then RecCount:=LogIBSQL.FieldByName('ii').AsInteger;
      LogIBSQL.Close;
      LogIBSQL.SQL.Clear;
      if RecCount=0 then begin
        prFreeIBSQL(LogIBSQL);
        if Pool<>nil then Pool.SetFreeCnt(LogIBDatabase, True);
        Pool:= cntsLOG;
        try
          LogIBDatabase:= Pool.GetFreeCnt;
        except
          exit;
        end;
        LogIBSQL:= fnCreateNewIBSQL(LogIBDatabase,'SQL_'+nmProc, -1, tpRead, true);
      end;
      RecCount:=0;
    
    LOGIBSQL.SQL.Add('SELECT LDQCODE, LDQFIRMID, LFNFIRMNAME, LDQUSERID, LDQBEGTIME, LDQWAREID, LDQWAREQTY');
    LOGIBSQL.SQL.Add('FROM LOGDETAILSQTY  left outer join LOGFIRMNAMES on LFNFIRMCODE = LDQFIRMID');
    LOGIBSQL.SQL.Add('where  LDQBEGTIME between :begintime and :endtime and LDQWAREQTY> :MaxQTY');
    LOGIBSQL.SQL.Add('order by LDQFIRMID, LDQUSERID, LDQWAREID');
    LOGIBSQL.Prepare;
    LOGIBSQL.ParamByName('begintime').AsDate:= DateStart;
    LOGIBSQL.ParamByName('endtime').AsDate:= DateStart+1;
    LOGIBSQL.ParamByName('MaxQTY').AsInteger:= MaxCount;
    LOGIBSQL.ExecQuery;
         
//prMessageLOGS('Запрос выполнили '+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now; 
      Percent:= 60;
      ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);   
      while not LOGIBSQL.EOF do begin
        prStopProcess( UserID, ThreadData.ID);
        //Regional:= Cache.arFirmInfo[SUFIBQuery.FieldByName('FIRMID').AsInteger].Regional;
        try
          Content:='';
          strFaccName:='';
          strFaccParentName:= '';
          FirmID:= LogIBSQL.FieldByName('LDQFIRMID').AsInteger;
          FirmName:= LogIBSQL.FieldByName('LFNFIRMNAME').AsString;
          ClientID:= LogIBSQL.FieldByName('LDQUSERID').AsInteger;

          if StrToIntDef(LOGIBSQL.FieldByName('LDQWAREID').AsString,-1)>-1 then begin      //WareName
             WareID:= StrToIntDef(LOGIBSQL.FieldByName('LDQWAREID').AsString,-1);
             if Cache.WareExist(WareID) then
               WareName:= Cache.arWareInfo[WareID].Name
             else 
               WareName:= 'Наименование товара '+LOGIBSQL.FieldByName('LDQWAREID').AsString+' не найдено или товар архивный';
          end
          else WareName:= 'Нет товара '+LOGIBSQL.FieldByName('LDQWAREID').AsString;
          if copy(WareName,1,1)='0' then WareName:= ' '+WareName;
          
                                                       
          if (FirmID>0) and Cache.ClientExist(ClientID)  then begin                           //login
              login:= Cache.arClientInfo[ClientID].Login;
              FirmID:= Cache.arClientInfo[ClientID].FirmID;
            end
            else if (FirmID=0) and Cache.EmplExist(ClientID) then 
                login:= Cache.arEmplInfo[ClientID].ServerLogin
              else
                login:='login пользователя '+IntToStr(ClientID)+' не определен ';
          if copy(Login,1,1)='0' 
          then s1:= ''''
          else s1:= '';
          Login:= s1 + Login;
          

          if FirmName ='' then  begin                                            //FirmName
            if Cache.FirmExist(FirmID) then
              FirmName:= Cache.arFirmInfo[FirmID].Name
            else 
              if Cache.EmplExist(ClientID) then 
                FirmName:= 'ЧПФ "Владислав"'
              else 
                if Cache.ClientExist(ClientID) then 
                  FirmName:= Cache.arClientInfo[ClientID].FirmName
                else FirmName:= 'Контрагент '+ IntToStr(FirmID) +' не определен';
          end; 

          if (Cache.FirmExist(FirmID)) {and (FirmID>-1)} then begin              //manager
            firma:= Cache.arFirmInfo[FirmID];
            Manager:=firma.GetFirmManagersString([fmpName,fmpShort]);
            if trim(Manager)='' then
(*            RegionalID:= Cache.arFirmInfo[FirmID].Regional;  
            if Cache.EmplExist(RegionalID) {and (RegionalID>-1)} then                       
              Manager:= Cache.arEmplInfo[RegionalID].EmplShortName
            else*) manager:= 'менеджер для контрагента '+FIRMNAME+' не определен';
            SLContracts:= firma.GetContracts;
            strFaccName:='';
            strFaccParentName:= '';
            for ncont:= 0 to SLContracts.Count-1 do begin
              contractID:= integer(SLContracts.Objects[ncont]);
              Contract:= firma.GetContract(contractID);
              if (pos(Contract.FaccName,strFaccName)=0) and (Contract.FaccName<>'') then
                strFaccName:= strFaccName+fnIfStr(strFaccName='','',', ')+Contract.FaccName;
              if (pos(Contract.FaccParentName,strFaccParentName)=0) and (Contract.FaccParentName<>'') then
                strFaccParentName:= strFaccParentName+fnIfStr(strFaccParentName='','',', ')+Contract.FaccParentName;
            end;
            prFree(SLContracts);
          end
          else begin
            if Cache.EmplExist(ClientID) then 
              Manager:= 'сотрудник'
            else if Cache.ClientExist(ClientID) then begin
              firma:= Cache.arFirmInfo[Cache.arClientInfo[ClientID].FirmID];
              Manager:=firma.GetFirmManagersString([fmpName,fmpShort]);
              if trim(Manager)='' then
(*              RegionalID:= Cache.arFirmInfo[Cache.arClientInfo[ClientID].FirmID].Regional;
              if Cache.EmplExist(RegionalID) {and (RegionalID>-1)} then                       
                Manager:= Cache.arEmplInfo[RegionalID].EmplShortName
              else manager:= 'менеджер для контрагента '+FIRMNAME+' не определен';
            end
            else*) manager:= 'менеджер для контрагента '+FIRMNAME+' не определен';
            SLContracts:= firma.GetContracts;
            strFaccName:='';
            strFaccParentName:= '';
            for ncont:= 0 to SLContracts.Count-1 do begin
              contractID:= integer(SLContracts.Objects[ncont]);
              Contract:= firma.GetContract(contractID);
              if (pos(Contract.FaccName,strFaccName)=0) and (Contract.FaccName<>'') then
                strFaccName:= strFaccName+fnIfStr(strFaccName='','',', ')+Contract.FaccName;
              if (pos(Contract.FaccParentName,strFaccParentName)=0) and (Contract.FaccParentName<>'') then
                strFaccParentName:= strFaccParentName+fnIfStr(strFaccParentName='','',', ')+Contract.FaccParentName;
            end;
            prFree(SLContracts);
            end;
          end;

          Content:= IntToStr(FirmID)+';'+FIRMNAME+';'+IntToStr(ClientID)+';'+ Login+';'+WareName+';'+LogIBSQL.FieldByName('LDQWAREQTY').AsString+';'+LogIBSQL.FieldByName('LDQBEGTIME').AsString +';'+ manager+';'+strFaccName;  
          if Content <> '' then begin
            WriteLn(file_csv, Content);
            inc(RecCount);
            Content:= ''
          end;

        except
          on E: Exception do begin
            prMessageLOGS('Ошибка в процедуре '+nmProc+' '+ E.Message, 'import', false) ;
            s:=  'Ошибка при обработке результатов запроса. ';
            raise Exception.Create(Title+#10+s+E.Message);        
          end;
        end;        
        LOGIBSQL.Next;
      end;
//prMessageLOGS('Заполнили'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now; 
      Percent:= 10;      
      ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);     
    finally
    CloseFile(file_csv);
    prFreeIBSQL(LOGIBSQL);
    prFree(SLContracts);
    if pool<>nil then pool.SetFreeCnt(LOGIBDatabase, True);
    end;
  finally
    if RecCount>0 then begin 
      Subj:= 'Отчет 30(3) '+FormatDateTime(cDateTimeFormatY2S, Now());
      ContentType:= CSVContentType;// for Excel(.csv)
      lstBodyMail:= TStringList.Create;
      lstBodyMail.Add(Title);  
    end;
    prFree(FilterData);
    if RecCount=0 then begin 
      s:= MessText(mtkNotFoundDataUse);
      raise Exception.Create(Title+#10+'  '+s);   
    end;    
    result:= s;
  end;
//prMessageLOGS('Закончили'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now; 
   Percent:= 10;      
   ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);  
//prMessageLOGS('Общее время'+': - '+
//        FloatToStr(RoundTo((Now-timerStart)*60*60*24,-5))+' сек','Log_prg.log' , false); //66%
//timer:= now;  
end;  
//==============================================================================
procedure prGetReport26CSV(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,
   ContentType:string; ThreadData: TThreadData; filter_data: string);
const
 nmProc = 'prGetReport26CSV'; // имя процедуры/функции
var IBDatabase: TIBDatabase;
    IBSQL: TIBSQL;
    DateStart, DateEnd: TDatetime;
    FilterData, SLContracts: TStringList;
    file_csv: textfile;
    RoleUser, arIDManPP: tai;
    RecCount, Role, i, iCount, ncont: integer;
    Pool: TIBCntsPool;
    Content, PathFile, s, Title: string; 
    IDClient, IDFirm, IDClientEmpl, IDWare, IDManager, ContractID: integer;  
    Percent: real;
    FirmTypeName,FirmClasses,Manager: string;
    ILFirmClasses: TIntegerList;
    flSUF: boolean;
    firma: TFirmInfo;
    ManPP, firmName, EmplName, IDManPP, strFaccName, strFaccParentName: string;
    Contract: TContract;
begin
  IBSQL:= nil;
  IBDatabase:= nil;
  firma:= nil;
  FilterData:=nil;
//  ILFirmClasses:=nil;
  FilterData:= TStringList.Create;
  iCount:= 0;
  pool:=nil;
  RoleUser:= Cache.arEmplInfo[UserId].UserRoles;//vv 1209 fnEmplRoleReg(UserId, ThreadData.ID);
  Role:= 0;
  RecCount:= 0;
  IDClientEmpl:= 0;
  for i:= 0 to length(RoleUser)-1 do begin
    if not (RoleUser[i] in [rolRegional, rolSuperRegional, rolProduct]) then begin
      Role:= 99;
      break;
    end;
  end;
  if Role <>99 then begin
    if  fnInIntArray(rolRegional, RoleUser)>-1 then begin 
      Role:= rolRegional;
      EmplName:= cache.arEmplInfo[UserId].EmplShortName;
    end;
    if  fnInIntArray(rolSuperRegional, RoleUser)>-1 then Role:= rolSuperRegional;
    if  fnInIntArray(rolProduct, RoleUser)>-1 then Role:= rolProduct;
  end;
  try
    FilterData.Text:= filter_data;
    DateStart:= StrToDateTime(FilterData.Values['dop_fromdate']); // получаем DateStart
    DateEnd:= StrToDateTime(FilterData.Values['dop_todate']); // получаем DateEnd  
    flSUF:= (DateStart < Date) and cntsSUFORD.BaseConnected; // если до вчера - берем с суфлера
    if flSUF then Pool:= cntsSufORD else Pool:= cntsORD;

    try
      IBDatabase:= Pool.GetFreeCnt;
    except
      exit;
    end;  
    IBSQL:= fnCreateNewIBSQL(IBDatabase, 'SQL_'+nmProc, -1, tpRead, true);
    IBSQL.SQL.Text:= 'SELECT WRTIME, WRWAREID, WRUSERID, iif(WRFROM=1,"T", "F") WRFROM, WRQTY, WRREST'+#10+
          'FROM WAREREQUESTS q where  WRTIME between :DateBegin and :DateEnd '+#10+
          'union'+#10+
          'SELECT null WRTIME, count(WRCODE) WRWAREID, null WRUSERID, null WRFROM, null WRQTY, null WRREST'+#10+
          'FROM WAREREQUESTS q where  WRTIME between :DateBegin and :DateEnd';
    IBSQL.ParamByName('DateBegin').AsDate:= DateStart;
    IBSQL.ParamByName('DateEnd').AsDate:= DateEnd+1;  
    IBSQL.Prepare;               
    IBSQL.ExecQuery;
    if not GetEmplTmpFilePath(UserID, PathFile, s) then raise EBOBError.Create(s); 
    ImpCheck.SetProcessPercent(UserId,ThreadData.ID,10);
    if not IBSQL.EOF then begin
      RecCount:= IBSQL.FieldByName('WRWAREID').AsInteger;
      IBSQL.Next;
    end;
    if RecCount>0 then begin
      Percent:= 80;
      Percent:= Percent/RecCount;
      FName:= PathFile+fnFormRepFileName('26', '.csv', ImpCheck.GetCheckKind(UserID, ThreadData.ID));//'RequestQtyWareRep'+FormatDateTime('_dd.mm_(hh.nn)',Now)+'.csv';
      if FileExists(FName) and not SysUtils.DeleteFile(FName) then
        raise Exception.Create(MessText(mtkNotDelPrevFile));
        
      AssignFile(file_csv, FName);
      filemode:= fmOpenReadWrite; //назначаем log-файл
      if FileExists(FName) then Reset(file_csv) else ReWrite(file_csv);
      Append(file_csv);               
      Content:= '';

      Title:= 'Отчет по запросам количеств товаров за период '+
        FormatDateTime(cDateFormatY4, DateStart)+'-'+FormatDateTime(cDateFormatY4, DateEnd);  

    //Добавляем шапку:
      Content:= Title;        
      WriteLn(file_csv, Content);
      Content:= 'Дата;Контрагент;Тип;Товар;Из заказа; Количество из запроса;Остаток товара по видимым клиенту складам;Контроль обращений;Менеджер по закупкам;Менеджер по продажам;Тип клиента; Категории клиента;ЦФУ';
      WriteLn(file_csv, Content);
      //шапка добавлена
      while not IBSQL.EOF do begin
        try    
          if Cache.ClientExist(IBSQL.FieldByName('WRUSERID').AsInteger) then begin 
            IDClient:= IBSQL.FieldByName('WRUSERID').AsInteger;
            IDFirm:= Cache.arClientInfo[IDClient].FirmID; 
            firma:= Cache.arFirmInfo[IDFirm];
            firmName:= firma.Name;    //firma.FirmTypeName
            ManPP:='';
            ManPP:=firma.GetFirmManagersString([fmpName,fmpShort]);
            SLContracts:= firma.GetContracts;
            strFaccName:='';
            strFaccParentName:= '';
            for ncont:= 0 to SLContracts.Count-1 do begin
              contractID:= integer(SLContracts.Objects[ncont]);
              Contract:= firma.GetContract(contractID);
              if (pos(Contract.FaccName,strFaccName)=0) and (Contract.FaccName<>'') then
                strFaccName:= strFaccName+fnIfStr(strFaccName='','',', ')+Contract.FaccName;
              if (pos(Contract.FaccParentName,strFaccParentName)=0) and (Contract.FaccParentName<>'') then
                strFaccParentName:= strFaccParentName+fnIfStr(strFaccParentName='','',', ')+Contract.FaccParentName;
            end;
            prFree(SLContracts);
           
            FirmTypeName:= firma.FirmTypeName;
//          FirmTypeName:= Cache.arFirmInfo[IDFirm].FirmTypeName;
            ILFirmClasses:= Cache.arFirmInfo[IDFirm].FirmClasses; 
            FirmClasses:='';
            for i := 0 to ILFirmClasses.Count-1 do begin
              FirmClasses:= FirmClasses+','+Cache.GetFirmClassName(ILFirmClasses[i]);
            end;
            if length(FirmClasses)>0 then FirmClasses:= FirmClasses+',';
          end
          else begin {IDClient:= 0;} IDFirm:= 0; end;

(*          if Cache.EmplExist(Cache.arFirmInfo[IDFirm].Regional) then IDClientEmpl:= Cache.arFirmInfo[IDFirm].Regional
          else IDClientEmpl:= 0 ; *)
        
          if Cache.WareExist(IBSQL.FieldByName('WRWAREID').AsInteger) then begin
            IDWare:= IBSQL.FieldByName('WRWAREID').AsInteger;
            if cache.EmplExist(Cache.arWareInfo[IDWare].ManagerID) then 
               IDManager:= Cache.arWareInfo[IDWare].ManagerID
               else IDManager:= 0;
          end   
          else begin {IDWare:= 0;} IDManager:= 0;end;
          if IDManager=0 then Manager:= 'Менеджер не определен' 
          else Manager:= Cache.arEmplInfo[IDManager].EmplShortName;
          
          Content:= IBSQL.FieldByName('WRTIME').AsString+';'+
                   //Cache.arFirmInfo[Cache.arClientInfo[SUFIBQuery.FieldByName('WRRQPERSONCODE').AsInteger].FirmID].Name+';'+
                   firmName{Cache.arFirmInfo[IDFirm].Name}+';'+
                   FirmTypeName{Cache.GetFirmTypeName(IDFirm)}+';'+
                   Cache.GetWare(IBSQL.FieldByName('WRWAREID').AsInteger).Name+';'+
                   IBSQL.FieldByName('WRFROM').AsString+';'+            
                   IBSQL.FieldByName('WRQTY').AsString+';'+
                   IBSQL.FieldByName('WRREST').AsString+';'+
                   ''+';'+
                   Manager+';'+
                   ManPP{Cache.arEmplInfo[IDClientEmpl].EmplShortName}+';'+
                   FirmTypeName+';'+
                   FirmClasses+';'+strFaccName;

          if Role = rolRegional  then
//            if (Cache.arEmplInfo[IDClientEmpl].EmplID = UserId) then begin
            if pos(EmplName, ManPP) >0 then begin
              WriteLn(file_csv, Content);
              inc(iCount);
            end;
          if Role = rolSuperRegional  then begin
            IDManPP:=firma.GetFirmManagersString([fmpCode]);          
//            if (Cache.arEmplInfo[IDClientEmpl].EmplDprtID = Cache.arEmplInfo[UserID].EmplDprtID) then begin
            arIDManPP:= fnArrOfCodesFromString(IDManPP);
            for i:= 0 to length(arIDManPP)-1 do 
              if (Cache.arEmplInfo[arIDManPP[i]].EmplDprtID = Cache.arEmplInfo[UserID].EmplDprtID) then begin
                WriteLn(file_csv, Content);
                inc(iCount);
                break;
              end;
            SetLength(arIDManPP,0);
          end;
          if Role = rolProduct  then  begin
            if Cache.arEmplInfo[IDManager].EmplID = UserId then begin
              WriteLn(file_csv, Content);
              inc(iCount);
            end;
            if (fnInIntArray(rolSuperRegional, Cache.arEmplInfo[UserId].UserRoles)> -1)  and
               (Cache.arEmplInfo[IDClientEmpl].EmplDprtID = Cache.arEmplInfo[UserID].EmplDprtID) and
               not(Cache.arEmplInfo[IDManager].EmplID = UserId) then begin
              WriteLn(file_csv, Content);
              inc(iCount);
            end;
            if (fnInIntArray(rolRegional, Cache.arEmplInfo[UserId].UserRoles)> -1)  and
               (Cache.arEmplInfo[IDClientEmpl].EmplID = UserId) and
               not(Cache.arEmplInfo[IDManager].EmplID = UserId) then begin
              WriteLn(file_csv, Content);
              inc(iCount);
            end;
          end;
          if Role = 99 then  begin
             WriteLn(file_csv, Content);
             inc(iCount);
          end;

          Content:= '';
          ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);
          prStopProcess( UserID, ThreadData.ID);

        except
          on E: Exception do begin
            prMessageLOGS('Ошибка в процедуре '+nmProc, 'import', false) ;
            raise EBOBError.Create('Ошибка при обработке результатов запроса. '+ E.Message);
          end;
        end;
        IBSQL.Next;
      end;
      if iCount=0 then raise EBOBError.Create(MessText(mtkNotFoundDataUse));
//prMessageLOGS('Заполнили файл'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66%
//timer:= now;
      Content:= '';

      prStopProcess( UserID, ThreadData.ID);
      Subj:= 'Отчет 26(csv) '+FormatDateTime(cDateTimeFormatY2S, Now());
      ContentType:= CSVContentType;// for Excel(.csv)
      lstBodyMail:= TStringList.Create;
      lstBodyMail.Add(Title);   

      ImpCheck.SetProcessPercent(UserId,ThreadData.ID,10);
      prStopProcess( UserID, ThreadData.ID);                             

    end
    else raise EBOBError.Create(GetProcessName(UserID, ThreadData.ID)+#10+
        'Нет данных за выбранный период. Укажите другой период. ');
  finally
    CloseFile(file_csv);  
    prFree(FilterData);
    prFree(SLContracts);
    prFreeIBSQL(IBSQL);
    if pool<>nil then pool.SetFreeCnt(IBDatabase, True);
    SetLength(arIDManPP,0);
  end;
end;
procedure prGetReport26(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,
   ContentType: string; ThreadData: TThreadData; filter_data: string);
const
 nmProc = 'prGetReport26'; // имя процедуры/функции
var 
    IBDatabase: TIBDatabase;
    IBSQL: TIBSQL;
    DateStart, DateEnd: TDatetime;
    RecCount: integer;
    FilterData, SLContracts: TStringList;
    CellStylesArray: TXmlCellStylesArray;
    TextStyle: TXmlReportStyle;
    BoldHeaderStyle: TXmlReportStyle;
    List: TStringList;
    ExcType,Content, Comment, CommentName, CommentSt, PathFile, s: string;
    DelimWares: string;
    SideHeaderEmptines: TXmlReportStyle;   
//    timer, timerStart: TDateTime;  
    Percent: Real;
    IDClient, IDFirm, IDClientEmpl, IDWare, IDManager, ContractID: integer;
    RoleUser, arIDManPP: tai;
    Role, i, iCount, ncont: integer;
    Pool: TIBCntsPool;
    FirmTypeName,FirmClasses,Manager, EmplName, IDManPP: string;
    ILFirmClasses: TIntegerList;
    flSUF: boolean;
    firma: TFirmInfo;
    ManPP, firmName, strFaccName, strFaccParentName: string;
    Contract: TContract;
begin
//timer:= Now;
//timerStart:= Now;
//prMessageLOGS('-----------------Export26--------------------','Log_prg.log' , false);
  pool:= nil;
  IBSQL:= nil;
  IBDatabase:= nil;
  FilterData:=nil;
//  ILFirmClasses:= nil;
  List:=nil;
  FilterData:= TStringList.Create;
  RecCount:= 0;
  IDClientEmpl:=0;
  firma:= nil;
    FilterData.Text:= filter_data;
    DateStart:= StrToDateTime(FilterData.Values['dop_fromdate']); // получаем DateStart
    DateEnd:= StrToDateTime(FilterData.Values['dop_todate']); // получаем DateEnd
    ExcType:= FilterData.Values['dop_importtype26'];
    if AnsiUpperCase(trim(ExcType))=AnsiUpperCase('csv') then prGetReport26CSV(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData, filter_data)
    else  begin
    try
    RoleUser:= Cache.arEmplInfo[UserId].UserRoles;//vv 1209 fnEmplRoleReg(UserId, ThreadData.ID);
    Role:= 0;
    iCount:= 0;

    for i:= 0 to length(RoleUser)-1 do begin
      if not (RoleUser[i] in [rolRegional, rolSuperRegional, rolProduct]) then begin
        Role:= 99;
        break;
      end;
    end;
    if Role <>99 then begin
      if  fnInIntArray(rolRegional, RoleUser)>-1 then begin 
        Role:= rolRegional;
        EmplName:= cache.arEmplInfo[UserId].EmplShortName;
      end;
      if  fnInIntArray(rolSuperRegional, RoleUser)>-1 then Role:= rolSuperRegional;
      if  fnInIntArray(rolProduct, RoleUser)>-1 then Role:= rolProduct;
    end;      

    flSUF:= (DateStart < Date) and cntsSUFORD.BaseConnected; // если до вчера - берем с суфлера
    if flSUF then Pool:= cntsSufORD else Pool:= cntsORD;
    try
      IBDatabase:= Pool.GetFreeCnt;
    except
      exit;
    end;
    IBSQL:= fnCreateNewIBSQL(IBDatabase,'GBIBQuery_'+nmProc, -1, tpRead, true);//fnCreateNewIBQuery(SUFIBDatabase,'GBIBQuery_'+nmProc,ThreadData.ID);

    IBSQL.SQL.Text:= 'SELECT WRTIME, WRWAREID, WRUSERID, iif(WRFROM=1,"T", "F") WRFROM, WRQTY, WRREST'+#10+
          'FROM WAREREQUESTS q where  WRTIME between :DateBegin and :DateEnd '+#10+
          'union'+#10+
          'SELECT null WRTIME, count(WRCODE) WRWAREID, null WRUSERID, null WRFROM, null WRQTY, null WRREST'+#10+
          'FROM WAREREQUESTS q where  WRTIME between :DateBegin and :DateEnd';
    IBSQL.ParamByName('DateBegin').AsDate:= DateStart;
    IBSQL.ParamByName('DateEnd').AsDate:= DateEnd+1;                
    IBSQL.ExecQuery; 

    ImpCheck.SetProcessPercent(UserId,ThreadData.ID,10);  
    if not IBSQL.EOF then begin
      RecCount:= IBSQL.FieldByName('WRWAREID').AsInteger;
      IBSQL.Next;
    end;  
    if RecCount = 0 
    then raise EBOBError.Create(GetProcessName(UserID, ThreadData.ID)+#10+'Нет данных за выбранный период. Укажите другой период. ')
    else begin
//prMessageLOGS('Приготовились'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;            
      Content:= '';
      Percent:= 70;
      Percent:= Percent/RecCount;
      //-=Создаем стили для оформления документа
      CellStylesArray:= TXmlCellStylesArray.Create;

      BoldHeaderStyle:= CellStylesArray.AddStyle(TXmlReportStyle.Create(cnHeaderCell,
                           'Center','Center',[fsBold],cnHeaderText, true, true, cnHeaderBorder));

      SideHeaderEmptines:= CellStylesArray.AddStyle(TXmlReportStyle.Create(cnHeaderCell,
                           'Center','Center',[],cnHeaderText, true));

      TextStyle:= CellStylesArray.AddStyle(TXmlReportStyle.Create);

        //=-стили созданы
      List:= TStringList.Create;                                                    ///////////////////////////////
      List.Add(cEX_Doc_Begin);
      List.Add(cEX_Workbook_Begin);
      List.Add(CellStylesArray.GetXmlStyles);
       
      Content:= '';                                      //////////////////////////////
      Content:= Content+fnOpenWorksheet(FormatDateTime(cDateFormatY4, DateStart)+'-'+FormatDateTime(cDateFormatY4, DateEnd))+#10;  //открываем worksheet;   
      List.Add(Content);                                                           ///////////////////////////////////////
      Content:= '';

      Content:= Content+'<Column ss:Width="100"/>'#10
                      +'<Column ss:Width="200"/>'#10
                      +'<Column ss:Width="50"/>'#10
                      +'<Column ss:Width="200"/>'#10
                      +'<Column ss:Width="50"/>'#10
                      +'<Column ss:Width="50"/>'#10
                      +'<Column ss:Width="50"/>'#10
                      +'<Column ss:Width="50"/>'#10
                      +'<Column ss:Width="100"/>'#10
                      +'<Column ss:Width="100"/>'#10
                      +'<Column ss:Width="100"/>'#10
                      +'<Column ss:Width="100"/>'#10
                      +'<Column ss:Width="100"/>'#10
                      +'<Column ss:Width="100"/>'#10;
      List.Add(Content);                                                           ///////////////////////////////////////
      Content:= '';
    //Добавляем шапку:
      Comment:= '';  
      CommentName:= Comment+ string(AnsiToUTF8('Название GrossBee'));
      CommentSt:= Comment+ string(AnsiToUTF8('По тем складам, которые пользователь определил для себя, как видимые'));  

      Content:= Content+'<Row ss:Height="37">'#10
                       +fnGenerateXMLcell('Дата', BoldHeaderStyle)
                       +fnGenerateXMLcell('Контрагент', BoldHeaderStyle)
                       +fnGenerateXMLcell('Тип', BoldHeaderStyle)
                       +fnGenerateXMLcell('Товар', BoldHeaderStyle,CommentName)
                       +fnGenerateXMLcell('Из заказа', BoldHeaderStyle)
                       +fnGenerateXMLcell('Количество из запроса', BoldHeaderStyle) 
                      +fnGenerateXMLcell('Остаток товара по видимым клиенту складам', BoldHeaderStyle, CommentSt)
                       +fnGenerateXMLcell('Контроль обращений', BoldHeaderStyle)
                       +fnGenerateXMLcell('Менеджер по закупкам', BoldHeaderStyle)
                       +fnGenerateXMLcell('Менеджер по продажам', BoldHeaderStyle)
                       +fnGenerateXMLcell('Тип клиента', BoldHeaderStyle)
                       +fnGenerateXMLcell('Категории клиента', BoldHeaderStyle)
                       +fnGenerateXMLcell('ЦФУ', BoldHeaderStyle)
//                       +fnGenerateXMLcell('Мастер ЦФУ', BoldHeaderStyle)
                       +'</Row>'#10;
    //шапка добавлена
      List.Add(Content);                                                           /////////////////////////////////////////////
      Content:= '';
    //Создаем горизонтальный разделитель
      DelimWares:= '';
      DelimWares:= DelimWares+'<Row ss:Height="6">'#10;
      DelimWares:= DelimWares+fnGenerateXMLcell('',SideHeaderEmptines);
      DelimWares:= DelimWares+fnGenerateXMLcell('',SideHeaderEmptines);
      DelimWares:= DelimWares+'</Row>'#10;
     //приготовили все для xml

      while not IBSQL.EOF do begin
        try      
        if Cache.ClientExist(IBSQL.FieldByName('WRUSERID').AsInteger) then begin 
            IDClient:= IBSQL.FieldByName('WRUSERID').AsInteger;
            IDFirm:= Cache.arClientInfo[IDClient].FirmID; 
            firma:= Cache.arFirmInfo[IDFirm];
            firmName:= firma.Name;    //firma.FirmTypeName
            SLContracts:= firma.GetContracts;
            strFaccName:='';
            strFaccParentName:= '';
            for ncont:= 0 to SLContracts.Count-1 do begin
              contractID:= integer(SLContracts.Objects[ncont]);
              Contract:= firma.GetContract(contractID);
              if (pos(Contract.FaccName,strFaccName)=0) and (Contract.FaccName<>'') then
                strFaccName:= strFaccName+fnIfStr(strFaccName='','',', ')+Contract.FaccName;
              if (pos(Contract.FaccParentName,strFaccParentName)=0) and (Contract.FaccParentName<>'') then
                strFaccParentName:= strFaccParentName+fnIfStr(strFaccParentName='','',', ')+Contract.FaccParentName;
            end;
            prFree(SLContracts);
            ManPP:='';
            ManPP:=firma.GetFirmManagersString([fmpName,fmpShort]);
            FirmTypeName:= firma.FirmTypeName;
//            FirmTypeName:= Cache.arFirmInfo[IDFirm].FirmTypeName;
            ILFirmClasses:= Cache.arFirmInfo[IDFirm].FirmClasses; 
            FirmClasses:='';
            for i := 0 to ILFirmClasses.Count-1 do begin
              FirmClasses:= FirmClasses+','+Cache.GetFirmClassName(ILFirmClasses[i]);
            end;
            if length(FirmClasses)>0 then FirmClasses:= FirmClasses+',';
          end
          else begin {IDClient:= 0;} IDFirm:= 0; end;

(*          if Cache.EmplExist(Cache.arFirmInfo[IDFirm].Regional) then IDClientEmpl:= Cache.arFirmInfo[IDFirm].Regional
          else IDClientEmpl:= 0 ; *)
        
          if Cache.WareExist(IBSQL.FieldByName('WRWAREID').AsInteger) then begin
            IDWare:= IBSQL.FieldByName('WRWAREID').AsInteger;
            if cache.EmplExist(Cache.arWareInfo[IDWare].ManagerID) then 
               IDManager:= Cache.arWareInfo[IDWare].ManagerID
               else IDManager:= 0;
          end   
          else begin {IDWare:= 0;} IDManager:= 0;end;
          if IDManager=0 then Manager:= 'Менеджер не определен' 
          else Manager:= Cache.arEmplInfo[IDManager].EmplShortName;
           Content:= Content+'<Row>'#10
                    +fnGenerateXMLcell(IBSQL.FieldByName('WRTIME').AsString, TextStyle)
                    +fnGenerateXMLcell(Cache.arFirmInfo[IDFirm].Name, TextStyle)
//                    +fnGenerateXMLcell(Cache.GetFirmTypeName(IDFirm), TextStyle)
                    +fnGenerateXMLcell(FirmTypeName, TextStyle)
                    +fnGenerateXMLcell(Cache.GetWare(IBSQL.FieldByName('WRWAREID').AsInteger).Name, TextStyle)
                    +fnGenerateXMLcell(IBSQL.FieldByName('WRFROM').AsString, TextStyle)
                    +fnGenerateXMLcell(IBSQL.FieldByName('WRQTY').AsString, TextStyle)
                    +fnGenerateXMLcell(IBSQL.FieldByName('WRREST').AsString, TextStyle)
                    +fnGenerateXMLcell('', TextStyle)
                    +fnGenerateXMLcell(Cache.arEmplInfo[IDManager].EmplShortName, TextStyle)
                    +fnGenerateXMLcell(ManPP, TextStyle)
//                    +fnGenerateXMLcell(Cache.arEmplInfo[IDClientEmpl].EmplShortName, TextStyle)
                    +fnGenerateXMLcell(FirmTypeName, TextStyle)
                    +fnGenerateXMLcell(FirmClasses, TextStyle)
                    +fnGenerateXMLcell(strFaccName, TextStyle)
//                    +fnGenerateXMLcell(strFaccParentName, TextStyle)
                    +'</Row>'#10;
(*            if Role = rolRegional  then
              if (Cache.arEmplInfo[IDClientEmpl].EmplID = UserId) then begin 
                List.Add(Content); 
                inc(iCount);                  
              end;
            if Role = rolSuperRegional  then
              if (Cache.arEmplInfo[IDClientEmpl].EmplDprtID = Cache.arEmplInfo[UserID].EmplDprtID) then begin 
                List.Add(Content); 
                inc(iCount);                  
              end;  *)
            if Role = rolRegional  then
//            if (Cache.arEmplInfo[IDClientEmpl].EmplID = UserId) then begin
            if pos(EmplName, ManPP) >0 then begin
              List.Add(Content); 
              inc(iCount);
            end;
            if Role = rolSuperRegional  then begin
              IDManPP:=firma.GetFirmManagersString([fmpCode]);          
  //            if (Cache.arEmplInfo[IDClientEmpl].EmplDprtID = Cache.arEmplInfo[UserID].EmplDprtID) then begin
              arIDManPP:= fnArrOfCodesFromString(IDManPP);
              for i:= 0 to length(arIDManPP)-1 do 
                if (Cache.arEmplInfo[arIDManPP[i]].EmplDprtID = Cache.arEmplInfo[UserID].EmplDprtID) then begin
                  List.Add(Content); 
                  inc(iCount);
                  break;
                end;
              SetLength(arIDManPP,0);
            end;
            if Role = rolProduct  then  begin
              if Cache.arEmplInfo[IDManager].EmplID = UserId then begin
                List.Add(Content); 
                inc(iCount);
              end;
              if (fnInIntArray(rolSuperRegional, Cache.arEmplInfo[UserId].UserRoles)> -1)  and 
                 (Cache.arEmplInfo[IDClientEmpl].EmplDprtID = Cache.arEmplInfo[UserID].EmplDprtID) and 
                 not(Cache.arEmplInfo[IDManager].EmplID = UserId) then begin 
                List.Add(Content);
                inc(iCount);                  
              end;
              if (fnInIntArray(rolRegional, Cache.arEmplInfo[UserId].UserRoles)> -1)  and 
                 (Cache.arEmplInfo[IDClientEmpl].EmplID = UserId) and 
                 not(Cache.arEmplInfo[IDManager].EmplID = UserId) then begin 
                List.Add(Content); 
                inc(iCount);                  
              end;            
            end;
            if Role = 99 then  begin
               List.Add(Content);     
               inc(iCount);                  
            end;                           
          
        Content:= '';
        ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);
        prStopProcess( UserID, ThreadData.ID);
        except
          on E: Exception do begin
            prMessageLOGS('Ошибка в процедуре '+nmProc, 'import', false) ;
   
            raise EBOBError.Create('Ошибка при обработке результатов запроса. '+ E.Message);
            end;
        end;      
        IBSQL.Next;
      end;
    end;

  if iCount=0 then raise EBOBError.Create(MessText(mtkNotFoundDataUse));
//prMessageLOGS('Заполнили файл'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;    
    //List.Add(Content);
    Content:= '';
    Content:= Content+fnCloseWorkSheet(fnGetWorkSheetOptions(1,1))+#10;  //закрываем worksheet;
    List.Add(Content);                                                           /////////////////////////////////////////////
    Content:= '';
    List.Add(cEX_Workbook_End); 
    if not GetEmplTmpFilePath(UserID, PathFile, s) then raise EBOBError.Create(s); 

    FName:= PathFile+fnFormRepFileName('26', '.xml', ImpCheck.GetCheckKind(UserID, ThreadData.ID));//'RequestQtyWareRep'+FormatDateTime('_dd.mm_(hh.nn)',Now)+'.xml';
    if FileExists(FName) and not SysUtils.DeleteFile(FName) then
      raise Exception.Create(MessText(mtkNotDelPrevFile));
    prStopProcess( UserID, ThreadData.ID);
    SaveToFile(List,FName);
    Subj:= 'Отчет 26(xml) '+FormatDateTime(cDateTimeFormatY2S, Now());
    ContentType:= XMLContentType;
    lstBodyMail:= TStringList.Create;
    lstBodyMail.Add('Отчет по запросам количеств товаров за период '+FormatDateTime(cDateFormatY4, DateStart)+'-'+FormatDateTime(cDateFormatY4, DateEnd));
(*    lstBodyMail.Add(' ');
    lstBodyMail.Add(' ');
    lstBodyMail.Add('Начало выполнения: '+FormatDateTime(cDateTimeFormatTSnD, timerStart));
    lstBodyMail.Add('Завершение выполнения: '+ FormatDateTime(cDateTimeFormatTSnD,Now));
    lstBodyMail.Add('Общее время выполнения: '+ FormatDateTime('hh:nn:ss',Now-timerStart));  *)
    ImpCheck.SetProcessPercent(UserId,ThreadData.ID,10);
    prStopProcess( UserID, ThreadData.ID);  
                              
  finally      //vv
    prFree(List);
    prFree(FilterData);
    prFree(SLContracts);
    prFree(CellStylesArray);
    prFreeIBSQL(IBSQL);
    if pool<>nil then pool.SetFreeCnt(IBDatabase, True);
    SetLength(arIDManPP,0);
//prMessageLOGS('Время выполнения'+': - '+
//        FloatToStr(RoundTo((Now-timerStart)*60*60*24,-5))+' сек','Log_prg.log' , false); //66%    
  end;
end;  
end;   
//==============================================================================
procedure prShowCurrentOperations(Stream: TBoBMemoryStream; ThreadData: TThreadData);
const nmProc = 'prShowCurrentOperations'; // имя процедуры/функции
var
  UserId, FirmID, UserOperID, UserIDAbout,i: integer;
  errmess: string;
  Process: TCheckProcess;
  PList: TStringList;
begin
  Stream.Position:= 0;
  try
    UserID       := Stream.ReadInt;       //кто запрашивает список
    UserOperID   := Stream.ReadInt;       //код хозяина процессов, если -1, то все 
    FirmID:= isWe;
    PList:=nil;
    prSetThLogParams(ThreadData, 0, UserId, 0, ' UserOperID='+IntToStr(UserOperID));

    if CheckNotValidUser(UserID, FirmID, errmess) then raise EBOBError.Create(errmess);
    if (UserOperID>-1) and CheckNotValidUser(UserOperID, FirmID, errmess) then raise EBOBError.Create(errmess);

    Stream.Clear;
    Stream.WriteInt(aeSuccess);
    UserIDAbout:= UserID;
    //for i:= 0 to length(cache.arEmplInfo)-1 do begin
    //  if (cache.arEmplInfo[i].EmplID= UserID) and (cache.arEmplInfo[i].UserRoleExists(rolManageUsers)) then begin
    if cache.EmplExist(UserID) then
      if cache.arEmplInfo[UserID].UserRoleExists(rolManageUsers) then
        UserIDAbout:= UserOperID;
    //    break;
    //  end;
    //end;
 
    PList:= TStringList.Create;
    ImpCheck.ListUserProcess(UserID, UserIDAbout, PList ); 
  
    Stream.WriteInt(PList.Count); // кол-во передаваемых элементов

    for i:= 0 to PList.Count-1 do begin
      Process:= TCheckProcess(PList.Objects[i]);
      Stream.WriteDouble(Process.FCheckTimeBegin);//(Now()-3);   // дата/время начала операции
      Stream.WriteInt(Process.FCheckKind);
      Stream.WriteInt(Process.FCheckEmpl);     // код хозяина процесса
      Stream.WriteInt(Process.FCheckThreadDataID);         // код ThreadData
      Stream.WriteStr(cache.arEmplInfo[Process.FCheckEmpl].EmplShortName);  // Фио хозяина процесса
      Stream.WriteStr(cache.GetImpTypeName(Process.FCheckImpType)+' '+ Process.FCheckFilterComment);  // название операции
      Stream.WriteDouble(Process.FCheckPercent);  // процент выполнения
    end;

  except
    on E: EBOBError do begin
      Stream.Clear;
      Stream.WriteInt(aeCommonError);
      Stream.WriteStr(E.Message);
      fnWriteToLog(ThreadData, lgmsUserError, nmProc, '', E.Message, '');
    end;
    on E: Exception do begin
      Stream.Clear;
      Stream.WriteInt(aeCommonError);
      Stream.WriteStr(MessText(mtkErrProcess));
      fnWriteToLog(ThreadData, lgmsSysError, nmProc, '', E.Message, '');
    end;
  end;
  Stream.Position:= 0;
  prFree(PList);
  //PList.Free;
end; // prShowCurrentOperations

procedure prStopIEOperation(Stream: TBoBMemoryStream; ThreadData: TThreadData);
const nmProc = 'prStopIEOperation'; // имя процедуры/функции
var
  UserId, FirmID, ThreadDataID: integer;
  errmess: string;

begin
  Stream.Position:= 0;
  try
    UserID       := Stream.ReadInt;
    ThreadDataID := Stream.ReadInt;
    FirmID       := isWe;

    prSetThLogParams(ThreadData, 0, UserId, 0, ' UserID='+IntToStr(UserID)+' ThreadDataID='+ IntToStr(ThreadDataID) ); // дописать подробности!

    if CheckNotValidUser(UserID, FirmID, errmess) then raise EBOBError.Create(errmess);
    //if CheckNotValidUser(UserOperID, FirmID, errmess) then raise EBOBError.Create(errmess);
    //if not (Cache.CheckEmplImpType(UserOperID, OperId)) 
    //  then raise Exception.Create('Пользователь '+ cache.arEmplInfo[UserOperID].EmplShortName+' не может выполнять операцию '+ cache.GetImpTypeName(OperId));
    //if (OperType <> constOpExport) and (OperType <> constOpImport) 
    //  then raise EBOBError.Create('Выбранная операция не является операцией импорта/экспорта');
    // Проверки на правильность прочих данных

    Stream.Clear;
    Stream.WriteInt(aeSuccess);
    ImpCheck.SetCheckStop( UserID, ThreadDataID);
    // сбственно удаление процесса  (проставление признака удаления)

  except
    on E: EBOBError do begin
      Stream.Clear;
      Stream.WriteInt(aeCommonError);
      Stream.WriteStr(E.Message);
      fnWriteToLog(ThreadData, lgmsUserError, nmProc, '', E.Message, '');
    end;
    on E: Exception do begin
      Stream.Clear;
      Stream.WriteInt(aeCommonError);
      Stream.WriteStr(MessText(mtkErrProcess));
      fnWriteToLog(ThreadData, lgmsSysError, nmProc, '', E.Message, '');
    end;
  end;
  Stream.Position:= 0;
end; // prStopIEOperation  

function fnGetNewLinkManager(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,
                                 ContentType:string; ThreadData: TThreadData; filter_data: string):string;
  const nmProc = 'fnGetNewLinkManager';
var
    IBORDSQL: TIBSQL;
    IBORD: TIBDatabase;
    QList: TStringList;
    FilterData: TStringList;
    DateStart, DateEnd: TDatetime;
    rolProductCount,i, qty: integer;
    s: string;
    CellStylesArray: TXmlCellStylesArray;
    NumberStyle,  TextStyle: TXmlReportStyle;
    BoldHeaderStyle: TXmlReportStyle;
    List: TStringList;
    Manager,Content, PathFile: string;
//    timer, timerStart: TDateTime;
    Percent: Real;
    TDWare, ONWareH, ONWareE, Link3WareTDA, Link3WareE: string;
    TDWareWrong, ONWareHWrong, ONWareEWrong, Link3WareTDAWrong, Link3WareEWrong: string;
    Pool: TIBCntsPool;
    flSUF: boolean;
begin
//timer:= Now;
//timerStart:= Now;
//prMessageLOGS('-----------------ExportMen--------------------','Log_prg.log' , false);
  rolProductCount:= 0;      //кол-во продукт-менеджеров
  qty:= 0;
  DateStart:= 0;
  DateEnd:= 0;
  IBORD:= nil;
  IBORDSQL:= nil;
  pool:= nil;
  List:= nil;                                                    ///////////////////////////////
  QList:= nil;
  FilterData:= nil;
  FilterData:= TStringList.Create;
  if  cache.arEmplInfo[UserID].UserRoleExists(rolProductDirector) then
    s:= ''
  else s:= ' and EMPLCODE=' +IntToStr(UserID);
  if s='' then
    for i:= 0 to length(cache.arEmplInfo)-1 do begin
      if (cache.arEmplInfo[i].UserRoleExists(rolProduct)) then inc(rolProductCount);
    end 
  else rolProductCount:= 1;
  try
    if not GetEmplTmpFilePath(UserID, PathFile, s) then raise EBOBError.Create(s); 
    s:= '';

    FName:= PathFile+fnFormRepFileName('27', '.xml', ImpCheck.GetCheckKind(UserID, ThreadData.ID));//'Report'+FormatDateTime('_dd.mm_(hh.nn)',Now)+'.xml';
    if FileExists(FName) and not SysUtils.DeleteFile(FName) then
      raise Exception.Create(MessText(mtkNotDelPrevFile));
        
    FilterData.Text:= filter_data;
    DateStart:= StrToDateTime(FilterData.Values['dop_fromdate']); // получаем DateStart
    DateEnd:= StrToDateTime(FilterData.Values['dop_todate']); // получаем DateEnd
  
//-=Создаем стили для оформления документа
    CellStylesArray:= TXmlCellStylesArray.Create;

    BoldHeaderStyle:= CellStylesArray.AddStyle(TXmlReportStyle.Create(cnHeaderCell,
                         'Center','Center',[fsBold],cnHeaderText, true, true, cnHeaderBorder));

    TextStyle:= CellStylesArray.AddStyle(TXmlReportStyle.Create('#FFFFFF',
                         'Left','Bottom',[],'#0D0D0D',true,true,'#0D0D0D'));

    NumberStyle:= CellStylesArray.AddStyle(TXmlReportStyle.Create('#FFFFFF',
                         'Right','Bottom',[],'#0D0D0D',true,true,'#0D0D0D','#,##0'));    
      //=-стили созданы
    List:= TStringList.Create;                                                    ///////////////////////////////
    QList:= TStringList.Create;
    List.Add(cEX_Doc_Begin);
    List.Add(cEX_Workbook_Begin);
    List.Add(CellStylesArray.GetXmlStyles);
       
    Content:= '';                                      //////////////////////////////
    Content:= Content+fnOpenWorksheet(FormatDateTime(cDateFormatY4, DateStart)+'-'+FormatDateTime(cDateFormatY4, DateEnd))+#10;  //открываем worksheet;   
    List.Add(Content);                                                           ///////////////////////////////////////
    Content:= '';

    Content:= Content+'<Column ss:Width="150"/>'#10
                    +'<Column ss:Width="70"/>'#10
                    +'<Column ss:Width="70"/>'#10
                    +'<Column ss:Width="70"/>'#10
                    +'<Column ss:Width="70"/>'#10
                    +'<Column ss:Width="70"/>'#10
                    +'<Column ss:Width="70"/>'#10
                    +'<Column ss:Width="70"/>'#10
                    +'<Column ss:Width="70"/>'#10
                    +'<Column ss:Width="70"/>'#10
                    +'<Column ss:Width="70"/>'#10;
    List.Add(Content);                                                           
    Content:= '';
  //Добавляем шапку:
 
    Content:= Content+'<Row ss:Height="30">'#10
                     +fnGenerateXMLcell('Ф.И.О. менеджера', BoldHeaderStyle,'','',2)
                     +fnGenerateXMLcell('Связи товаров GrossBee с артикулами TecDoc', BoldHeaderStyle,'','',1,1)
                     +fnGenerateXMLcell('Привязано оригинальных номеров к товарам', BoldHeaderStyle,'','',0,3)
                     +fnGenerateXMLcell('Привязано моделей к товарам ', BoldHeaderStyle,'','',0,3)
                     +'</Row>'#10;
    List.Add(Content);                                                           
    Content:= '';                     
    Content:= Content+'<Row ss:Height="25">'#10
                     //+fnGenerateXMLcell('', BoldHeaderStyle)
                     //+fnGenerateXMLcell('', BoldHeaderStyle)
                     +fnGenerateXMLcell('Ручной ввод', BoldHeaderStyle,'','',0,1,4)              //Привязано оригинальных номеров к товарам
                     +fnGenerateXMLcell('Ввод из Excel-файла', BoldHeaderStyle,'','',0,1)        //Привязано оригинальных номеров к товарам
                     +fnGenerateXMLcell('Ввод из TecDoc по аналогам', BoldHeaderStyle,'','',0,1) //Привязано моделей к товарам
                     +fnGenerateXMLcell('Ввод из Excel-файла', BoldHeaderStyle,'','',0,1)        //Привязано моделей к товарам     
                     +'</Row>'#10;  
    List.Add(Content);                                                           
    Content:= '';                     
    Content:= Content+'<Row ss:Height="25">'#10
                     //+fnGenerateXMLcell('', BoldHeaderStyle)
                     +fnGenerateXMLcell('Всего', BoldHeaderStyle,'','',0,0,2)            //Связи товаров GrossBee с артикулами TecDoc
                     +fnGenerateXMLcell('в т.ч. как ошибочные', BoldHeaderStyle)             //Связи товаров GrossBee с артикулами TecDoc
                     +fnGenerateXMLcell('Всего', BoldHeaderStyle)                        //Ручной ввод
                     +fnGenerateXMLcell('в т.ч. как ошибочные', BoldHeaderStyle)             //Ручной ввод
                     +fnGenerateXMLcell('Всего', BoldHeaderStyle)                        //Ввод из Excel-файла
                     +fnGenerateXMLcell('в т.ч. как ошибочные', BoldHeaderStyle)             //Ввод из Excel-файла
                     +fnGenerateXMLcell('Всего', BoldHeaderStyle)                        //Ввод из Excel-файла по аналогам ТД
                     +fnGenerateXMLcell('в т.ч. как ошибочные', BoldHeaderStyle)             //Ввод из Excel-файла по аналогам ТД
                     +fnGenerateXMLcell('Всего', BoldHeaderStyle)                        //Ввод из Excel-файла
                     +fnGenerateXMLcell('в т.ч. как ошибочные', BoldHeaderStyle)             //Ввод из Excel-файла
                     +'</Row>'#10;  //шапка добавлена
    List.Add(Content);                                                           /////////////////////////////////////////////
    Content:= '';
 
    ImpCheck.SetProcessPercent(UserId,ThreadData.ID,5);
    prStopProcess( UserID, ThreadData.ID); 
    flSUF:= (DateStart < Date) and cntsSUFORD.BaseConnected; // если до вчера - берем с суфлера
    if flSUF then Pool:= cntsSufORD else Pool:= cntsORD;  

//    IBORD:= pool.GetFreeCnt;
    try
      IBOrd:= Pool.GetFreeCnt;
    except
      exit;
    end;
    IBORDSQL:= fnCreateNewIBSQL(IBORD, 'SQL_'+nmProc, -1, tpRead, true);

    IBORDSQL.SQL.Text:= 'select emplcode,'+#10+
    '(SELECT count(WATDCODE) FROM WAREARTICLETD where WATDUSERID= emplcode and '+#10+
    'WATDTIMEADD between :DateStart and :DateEnd) as TDWare,'+#10+
    '(SELECT count(WATDCODE) FROM WAREARTICLETD where WATDUSERID= emplcode and '+#10+
    'WATDTIMEADD between :DateStart and :DateEnd and trim(WATDWRONG)="T") as TDWareWrong,'+#10+    
    '(SELECT count(ORLKCODE) FROM ORIGINALLINKWARE where ORLKUSERID=emplcode and ' +#10+
    'ORLKTIMEADD between :DateStart and :DateEnd and ORLKSOURCECODE in (1))as ONWareH,'+#10+
    '(SELECT count(ORLKCODE) FROM ORIGINALLINKWARE where ORLKUSERID=emplcode and ' +#10+
    'ORLKTIMEADD between :DateStart and :DateEnd and ORLKSOURCECODE in (1) and trim(ORLKWRONG)="T")as ONWareHWrong,'+#10+    
    '(SELECT count(ORLKCODE) FROM ORIGINALLINKWARE where ORLKUSERID=emplcode and ' +#10+
    'ORLKTIMEADD between :DateStart and :DateEnd and ORLKSOURCECODE in (3,6))as ONWareE,'+#10+
    '(SELECT count(ORLKCODE) FROM ORIGINALLINKWARE where ORLKUSERID=emplcode and ' +#10+
    'ORLKTIMEADD between :DateStart and :DateEnd and ORLKSOURCECODE in (3,6) and trim(ORLKWRONG)="T")as ONWareEWrong,'+#10+    
    '(SELECT count(LDMWCODE) FROM LINKDETMODWARE where LDMWUSERID=emplcode and '+#10+
    'LDMWTIMEADD between :DateStart and :DateEnd and LDMWSRCLECODE in (3)) as Link3WareTDA,'+#10+
    '(SELECT count(LDMWCODE) FROM LINKDETMODWARE where LDMWUSERID=emplcode and '+#10+
    'LDMWTIMEADD between :DateStart and :DateEnd and LDMWSRCLECODE in (3) and trim(LDMWWRONG)="T") as Link3WareTDAWrong,'+#10+    
    '(SELECT count(LDMWCODE) FROM LINKDETMODWARE where LDMWUSERID=emplcode and '+#10+
    'LDMWTIMEADD between :DateStart and :DateEnd and LDMWSRCLECODE in (6)) as Link3WareE,'+#10+
    '(SELECT count(LDMWCODE) FROM LINKDETMODWARE where LDMWUSERID=emplcode and '+#10+
    'LDMWTIMEADD between :DateStart and :DateEnd and LDMWSRCLECODE in (6) and trim(LDMWWRONG)="T") as Link3WareEWrong'+#10+    
    ' from employees inner join EMPLOYEESROLES on EMRLEMPLCODE = emplcode where EMRLROLECODE in (9,15,16,17,18)'+s+#10+
    'group by emplcode, empllogin order by empllogin';
    IBORDSQL.Prepare;
    IBORDSQL.ParamByName('DateStart').AsDateTime:= DateStart;
    IBORDSQL.ParamByName('DateEnd').AsDateTime:= DateEnd+1;
    IBORDSQL.ExecQuery;
//prMessageLOGS('Приготовились'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now; 
    ImpCheck.SetProcessPercent(UserId,ThreadData.ID,60); 
    Percent:= 30;  
    if s='' then Percent:= Percent/rolProductCount;
    
       
    qty:= 0;
    while not IBORDSQL.EOF do begin
      if (IBORDSQL.FieldByName('TDWare').AsInteger>0) 
      or (IBORDSQL.FieldByName('TDWareWrong').AsInteger>0)
      or (IBORDSQL.FieldByName('ONWareH').AsInteger>0)
      or (IBORDSQL.FieldByName('ONWareHWrong').AsInteger>0)
      or (IBORDSQL.FieldByName('ONWareE').AsInteger>0) 
      or (IBORDSQL.FieldByName('ONWareEWrong').AsInteger>0)
      //or (IBORDQuery.FieldByName('Link3WareH').AsInteger>0)
      or (IBORDSQL.FieldByName('Link3WareTDA').AsInteger>0) 
      or (IBORDSQL.FieldByName('Link3WareTDAWrong').AsInteger>0)
      or (IBORDSQL.FieldByName('Link3WareE').AsInteger>0)
      or (IBORDSQL.FieldByName('Link3WareEWrong').AsInteger>0)
      then begin 
      TDWare:= ''; 
      ONWareH:= '';
      ONWareE:= '';
      Link3WareTDA:= '';
      Link3WareE:= '';
      TDWareWrong:= ''; 
      ONWareHWrong:= '';
      ONWareEWrong:= '';
      Link3WareTDAWrong:= '';
      Link3WareEWrong:= '';      
      if IBORDSQL.FieldByName('TDWare').AsInteger>0 then 
        TDWare:= fnGenerateXMLcell(IBORDSQL.FieldByName('TDWare').AsString,NumberStyle,'','',0,0,0,cnXmlNumber )
      else TDWare:= fnGenerateXMLcell('',NumberStyle); 
      if IBORDSQL.FieldByName('TDWareWrong').AsInteger>0 then
        TDWareWrong:= fnGenerateXMLcell(IBORDSQL.FieldByName('TDWareWrong').AsString,NumberStyle,'','',0,0,0,cnXmlNumber )
      else TDWareWrong:= fnGenerateXMLcell('',NumberStyle);
      if IBORDSQL.FieldByName('ONWareH').AsInteger>0 then 
        ONWareH:= fnGenerateXMLcell(IBORDSQL.FieldByName('ONWareH').AsString,NumberStyle,'','',0,0,0,cnXmlNumber )
      else ONWareH:= fnGenerateXMLcell('',NumberStyle);
      if IBORDSQL.FieldByName('ONWareH').AsInteger>0 then 
        ONWareH:= fnGenerateXMLcell(IBORDSQL.FieldByName('ONWareH').AsString,NumberStyle,'','',0,0,0,cnXmlNumber )
      else ONWareH:= fnGenerateXMLcell('',NumberStyle);
      if IBORDSQL.FieldByName('ONWareHWrong').AsInteger>0 then 
        ONWareHWrong:= fnGenerateXMLcell(IBORDSQL.FieldByName('ONWareHWrong').AsString,NumberStyle,'','',0,0,0,cnXmlNumber )
      else ONWareHWrong:= fnGenerateXMLcell('',NumberStyle);
      if IBORDSQL.FieldByName('ONWareE').AsInteger>0 then 
        ONWareE:= fnGenerateXMLcell(IBORDSQL.FieldByName('ONWareE').AsString,NumberStyle,'','',0,0,0,cnXmlNumber )
      else ONWareE:= fnGenerateXMLcell('',NumberStyle);
      if IBORDSQL.FieldByName('ONWareEWrong').AsInteger>0 then 
        ONWareEWrong:= fnGenerateXMLcell(IBORDSQL.FieldByName('ONWareEWrong').AsString,NumberStyle,'','',0,0,0,cnXmlNumber )
      else ONWareEWrong:= fnGenerateXMLcell('',NumberStyle);
      if IBORDSQL.FieldByName('Link3WareTDA').AsInteger>0 then 
        Link3WareTDA:= fnGenerateXMLcell(IBORDSQL.FieldByName('Link3WareTDA').AsString,{nil}NumberStyle,'','',0,0,0,cnXmlNumber )
      else Link3WareTDA:= fnGenerateXMLcell('',NumberStyle);
      if IBORDSQL.FieldByName('Link3WareTDAWrong').AsInteger>0 then 
        Link3WareTDAWrong:= fnGenerateXMLcell(IBORDSQL.FieldByName('Link3WareTDAWrong').AsString,{nil}NumberStyle,'','',0,0,0,cnXmlNumber )
      else Link3WareTDAWrong:= fnGenerateXMLcell('',NumberStyle);
      if IBORDSQL.FieldByName('Link3WareE').AsInteger>0 then 
        Link3WareE:= fnGenerateXMLcell(IBORDSQL.FieldByName('Link3WareE').AsString,{nil}NumberStyle,'','',0,0,0,cnXmlNumber )
      else Link3WareE:= fnGenerateXMLcell('',NumberStyle);
      if IBORDSQL.FieldByName('Link3WareEWrong').AsInteger>0 then 
        Link3WareEWrong:= fnGenerateXMLcell(IBORDSQL.FieldByName('Link3WareEWrong').AsString,{nil}NumberStyle,'','',0,0,0,cnXmlNumber )
      else Link3WareEWrong:= fnGenerateXMLcell('',NumberStyle);
      if cache.EmplExist(IBORDSQL.FieldByName('emplcode').AsInteger) then Manager:= cache.arEmplInfo[IBORDSQL.FieldByName('emplcode').AsInteger].EmplShortName
      else Manager:= 'не определен';
      
        Content:= '<Row>'+' '
                         +fnGenerateXMLcell(cache.arEmplInfo[IBORDSQL.FieldByName('emplcode').AsInteger].EmplShortName, TextStyle )
                         + TDWare + TDWareWrong
                         + ONWareH + ONWareHWrong
                         + ONWareE + ONWareEWrong
                         + Link3WareTDA + Link3WareTDAWrong
                         + Link3WareE + Link3WareEWrong
                         +'</Row>'#10;
        QList.Add(Content);
        qty:= qty + IBORDSQL.FieldByName('TDWare').AsInteger + IBORDSQL.FieldByName('ONWareH').AsInteger + IBORDSQL.FieldByName('ONWareE').AsInteger
        + IBORDSQL.FieldByName('Link3WareTDA').AsInteger + IBORDSQL.FieldByName('Link3WareE').AsInteger; 
      end;  
      prStopProcess( UserID, ThreadData.ID);
      IBORDSQL.Next;
      ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);      
    end; 
    IBORDSQL.close;
//prMessageLOGS('Приготовились для записи тела файла'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;    
    QList.Sort;
    for i:= 0 to QList.Count -1 do begin
      List.Add(QList[i]);
    end;
//prMessageLOGS('Заполнили'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;
finally
  if s<>'' then s:= 'пользователем '+ cache.arEmplInfo[UserID].EmplShortName;
  if qty > 0 then begin
    Content:= '';
    Content:= Content+fnCloseWorkSheet(fnGetWorkSheetOptions(1,3))+#10;  //закрываем worksheet;
    List.Add(Content);                                                           /////////////////////////////////////////////
    Content:= '';
   
    List.Add(cEX_Workbook_End); 

    SaveToFile(List,FName);
    Subj:= 'Отчет по количеству добавленных менеджерами связей  '+FormatDateTime(cDateTimeFormatY2S, Now());
    ContentType:= XMLContentType;
    lstBodyMail:= TStringList.Create;
    lstBodyMail.Add('За период '+FormatDateTime(cDateFormatY4, DateStart)+'-'+FormatDateTime(cDateFormatY4, DateEnd)
    +' общее количество добавленных связей : '+IntToStr(qty));
(*    lstBodyMail.Add(' ');
    lstBodyMail.Add(' ');
    lstBodyMail.Add('Начало выполнения: '+FormatDateTime(cDateTimeFormatTSnD, timerStart));
    lstBodyMail.Add('Завершение выполнения: '+ FormatDateTime(cDateTimeFormatTSnD,Now));
    lstBodyMail.Add('Общее время выполнения: '+ FormatDateTime('hh:nn:ss',Now-timerStart));   *)
    ImpCheck.SetProcessPercent(UserId,ThreadData.ID,10);
  end;
  if qty = 0 then 
    raise EBOBError.Create('За период '+s+' никаких изменений не внесено. ');

  prFree(FilterData);
  prFree(List);
  prFree(QList);
  prFree(CellStylesArray);
  prFreeIBSQL(IBORDSQL);
  if pool<>nil then pool.SetFreeCnt(IBORD, True);
  //cntsORD.SetFreeCnt(IBORD, True);
//prMessageLOGS('Общее время'+': - '+
//        FloatToStr(RoundTo((Now-timerStart)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;  
end;

end;

function fnGetOriginalNumsFreeON(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,               //rep28
                                 ContentType, s:string; ThreadData: TThreadData; filter_data: string):string;
const nmProc = 'fnGetOriginalNumsFreeON';
var
    FilterData,WareList, SLWareInfo: TStringList;
    List: TStringList;
    BrandName, wareinfo, textSQL, WareName: string;
    CurBrand, Content, DeclareCols: string;
    Brand,iWare, iAnalogs, j, iON, nwareinfo: integer;
    Ware: TWareInfo;
    ArrOrigNum: arTOE;
    ArrAnalogs: tai;
    CellStylesArray: TXmlCellStylesArray;
    PathFile, Comment: String;
    AllCols, countON, countWare: integer;
//    timer, timerStart: TDateTime;  
    Percent, PPercent: Real;
    OriginalNum: TOriginalNumInfo; 
    IBORDSQL: TIBSQL;
    IBORD: TIBDatabase; 
begin
//timer:= Now;
//timerStart:= Now;
//prMessageLOGS('-----------------Export28ON--------------------','Log_prg.log' , false);
  BrandName:= '';
  Content:= '';
  FilterData:= nil;
  WareList:= nil;
  SLWareInfo:= nil;
  List:= nil;
  FilterData:= TStringList.Create;
  SLWareInfo:= TStringList.Create;
  PPercent:= 0;
  countWare:= 0;
  countON:= 0;
//  IBORDSQL:= nil;
//  IBORD:= nil;
  wareinfo:= '';
  nwareinfo:= 0;
  textSQL:= '';
  AllCols:= 0;
  try
  
    FilterData.Text:= filter_data;
    CurBrand:= FilterData.Values['dop_gbbrand']; // получаем код бренда
    AllCols:= 0;
    try  // проверяю на целочисленность
      Brand:= StrToInt(CurBrand);
    except
      s:=MessText(mtkNotFoundBrand, CurBrand);
    end;
    BrandName:= TBrandItem(Cache.WareBrands[Brand]).Name;
    if (not Cache.WareBrands.ItemExists(Brand)) then begin
      s:=MessText(mtkNotFoundBrand, CurBrand);
    end;
    if not GetEmplTmpFilePath(UserID, PathFile, s) then result:=s; 
    BrandName:= StringReplace(BrandName, '/', '_',[rfReplaceAll, rfIgnoreCase]);  
    BrandName:= StringReplace(BrandName, '\', '_',[rfReplaceAll, rfIgnoreCase]);                            
    BrandName:= StringReplace(BrandName, ' ', '_', [rfReplaceAll]);
    BrandName:= StringReplace(BrandName, '__', '_', [rfReplaceAll]);   
    BrandName:= StringReplace(BrandName, '__', '_', [rfReplaceAll]);                         
    FName:= PathFile+ fnFormRepFileName('28'+stringreplace(BrandName,' ','_',[rfReplaceAll]), '.xml', ImpCheck.GetCheckKind(UserID, ThreadData.ID));//BrandName +'_OriginalNumsManuf'+FormatDateTime('_dd.mm_(hh.nn)',Now)+'.xml';
    if FileExists(FName) and not SysUtils.DeleteFile(FName) then 
      s:=MessText(mtkNotDelPrevFile);

//prMessageLOGS('Проверка фильтра'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;
    Comment:= '';
    
    WareList:= Cache.GetSysManagerWares(constIsAuto, UserID, Brand, True);
    //WareList:=fnGetWareListByBrand(Brand, constIsAuto, true);
    if WareList.Count=0 then begin
      s:='У данного менеджера по этому бренду товары не найдены';
    end
    else begin
      IBORD:= cntsORD.GetFreeCnt;
      IBORDSQL:= fnCreateNewIBSQL(IBORD,'IBQuery_'+nmProc, -1, tpRead, true);
      textSQL:= 'SELECT ORLKCODEWARE, ORNWCODE, ORNWMFAUCODE, ORNWORIGNUMWARE FROM ORIGINALNUMWARE, ORIGINALLINKWARE '
              + 'where ORLKONUMCODE= ORNWCODE and ORLKWRONG<>"T" and ORLKCODEWARE in (';
        
      //-=Создаем стили для оформления документа
      CellStylesArray:= TXmlCellStylesArray.Create;
      prStopProcess( UserID, ThreadData.ID);      
      ImpCheck.SetProcessPercent( UserID, ThreadData.ID,5 );      
       
      //=-стили созданы
      List:= TStringList.Create;                                                    ///////////////////////////////
      List.Add(cEX_Doc_Begin);
      List.Add(cEX_Workbook_Begin);

      List.Add(CellStylesArray.GetXmlStyles);
       
      Content:= '';                                      //////////////////////////////
      Content:= Content+fnOpenWorksheet(fnWrkShtNameSpotter(BrandName))+#10;  //открываем worksheet;   
      List.Add(Content);                                                           ///////////////////////////////////////
      Content:= '';
      List.Add(Content);
      Percent:= 80;
      if WareList.Count>0 then Percent:= Percent/WareList.Count else ImpCheck.SetProcessPercent( UserID, ThreadData.ID, Percent);   
      for iWare := 0 to WareList.Count-1 do begin
        Ware:= Cache.GetWare(integer(WareList.Objects[iWare]));
        if Ware.IsInfoGr then begin
          wareinfo:= wareinfo+fnIfStr(WareInfo<>'',',','')+ IntToStr(integer(WareList.Objects[iWare]));
          inc(nWareInfo);
          if nWareInfo=20 then begin
            SLWareInfo.Add(WareInfo);
            nWareInfo:= 0;  
            WareInfo:='';
          end;
        end
        else if Ware.ManagerID= UserID then begin
          SetLength(ArrOrigNum,0);
          SetLength(ArrAnalogs,0);
          j:= 0;
          ArrAnalogs:= Ware.ONumLinks.GetLinkListCodes(lkLnkByID); //список кодов ОН
          SetLength(ArrOrigNum,length(ArrAnalogs));  
          //if length(ArrAnalogs)>0 then PPercent:= Percent/length(ArrAnalogs) else ImpCheck.SetProcessPercent( UserID, ThreadData.ID, Percent);      
          for iAnalogs:= 0 to length(ArrAnalogs)-1 do begin
            prStopProcess( UserID, ThreadData.ID);
            if Cache.FDCA.OrigNumExist(ArrAnalogs[iAnalogs]) then begin
              OriginalNum:= Cache.FDCA.GetOriginalNum(ArrAnalogs[iAnalogs]);
              ArrOrigNum[j]:= OriginalNum;
              inc(j); 
            end;//  if Cache.FDCA.OrigNumExist
          end; //for iAnalogs
          //строка
          if j > 0 then PPercent:= Percent/j else ImpCheck.SetProcessPercent( UserID, ThreadData.ID, Percent);                     
          if j>0 then begin
            inc(countWare);
            countON:= countON+j;
            SetLength(ArrOrigNum,j);
            Content:= '';
            Content:= Content+'<Row>'#10;
            Content:= Content+fnGenerateXMLcell('');
            Comment:= Comment+ string(AnsiToUTF8(Ware.Comment))+'&#10;';
            Content:= Content+fnGenerateXMLcell(Ware.Name,nil,Comment);
            Comment:= '';
            for iON:= 0 to j-1 do begin
              prStopProcess( UserID, ThreadData.ID);
             //TestCssStopException;
              Content:= Content+ fnGenerateXMLcell(ArrOrigNum[iON].ManufName);
              Content:= Content+fnGenerateXMLcell(ArrOrigNum[iON].OriginalNum,nil,Comment);
              Comment:= '';
              ImpCheck.SetProcessPercent( UserID, ThreadData.ID, PPercent); 
            end;
            Content:= Content+'</Row>'#10;
            List.Add(Content); 
            SetLength(ArrOrigNum,0);
            if AllCols<j then AllCols:= j;
          end; //if length(ArrOrigNum)<j-1 
        end;//if Ware.ManagerID= UserID
      end; //for iWare 
      if WareInfo<>'' then SLWareInfo.Add(WareInfo);
//      j:= 0;
      for iWare := 0 to SLWareInfo.Count-1 do begin
        IBORDSQL.SQL.Text:= textSQL+ SLWareInfo[iWare]+') order by  ORLKCODEWARE,ORNWORIGNUMWARE';
        IBORDSQL.ExecQuery;
        WareName:='';
        j:= 0;
        s:='';
        while not IBORDSQL.EOF do begin
          Ware:= Cache.GetWare(IBORDSQL.FieldByName('ORLKCODEWARE').AsInteger);
          if (WareName<>Ware.Name) or (WareName='') then begin
            Content:= '';
            if WareName<>'' then
            Content:= Content+'</Row>'#10;
            if AllCols<j then AllCols:= j;
            j:= 0;
            Content:= Content+'<Row>'#10;
            Content:= Content+fnGenerateXMLcell('');
            Comment:= Comment+ string(AnsiToUTF8(Ware.Comment))+'&#10;';
            Content:= Content+fnGenerateXMLcell(Ware.Name,nil,Comment);
            List.Add(Content);
            inc(countWare);
            Content:= '';
            Comment:= '';
          end;
          OriginalNum:= Cache.FDCA.GetOriginalNum(IBORDSQL.FieldByName('ORNWCODE').AsInteger);
          Content:= '';
          Comment:= '';
          Content:= Content+ fnGenerateXMLcell(OriginalNum.ManufName);
          Content:= Content+fnGenerateXMLcell(OriginalNum.OriginalNum,nil,Comment);
          List.Add(Content);
          Content:= '';
          inc(countON);
          inc(j);
          WareName:= Ware.Name;
          IBORDSQL.Next;
        end;
        if j>0 then begin
        Content:= Content+'</Row>'#10;
        List.Add(Content);    
        end;
        IBORDSQL.Close;
      end;//for iWare := 0 to SLWareInfo.Count-1 do begin
    end; //else WareList.Count=0 
   
//prMessageLOGS('заполнили файл'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;
  finally
    if AllCols>0 then begin
      //Задаем ширину колонок
        DeclareCols:= '<Column ss:Width="50"/>'#10;
      for j:= 0 to AllCols do begin
//      <Column ss:AutoFitWidth="0" ss:Width="..."/>
        DeclareCols:= DeclareCols+'<Column ss:Width="100"/>'#10 + '<Column ss:Width="100"/>'#10; //'<Column ss:AutoFitWidth="0" ss:Width="'+
                      //IntToStr((WidthArray[j])*5)+'"/>'#10;
      end;
      //Дописываем полный текст в уже открытый Worksheet и закрываем его перед объявлением следующего
      //  WorkSheets:= WorkSheets+DeclareCols;
      List.Strings[4]:= DeclareCols; 
    end; //AllCols>0

    if assigned(List) and (List.Count>0) then begin
      Content:= '';
      Content:= Content+fnCloseWorkSheet()+#10;  //закрываем worksheet;
      List.Add(Content);                                                           /////////////////////////////////////////////
      Content:= '';    
      List.Add(cEX_Workbook_End);
      SaveToFile(List,FName);   
      //List.SaveToFile(FName);
    end; //if List.Count>0
    ImpCheck.SetProcessPercent( UserID, ThreadData.ID, 2);    
    Subj:= BrandName+'. Список оригинальных номеров от '+FormatDateTime(cDateTimeFormatY2S, Now());
    ContentType:= XMLContentType;
    lstBodyMail:= TStringList.Create;
    lstBodyMail.Add(' Количество : ');
    lstBodyMail.Add('   товаров = '+IntToStr(countWare));
    lstBodyMail.Add('   оригинальных номеров к товарам = '+IntToStr(countON));
(*    lstBodyMail.Add(' ');
    lstBodyMail.Add(' ');
    lstBodyMail.Add(' ');
    lstBodyMail.Add('Начало выполнения: '+FormatDateTime(cDateTimeFormatTSnD, timerStart));
    lstBodyMail.Add('Завершение выполнения: '+ FormatDateTime(cDateTimeFormatTSnD,Now));
    lstBodyMail.Add('Общее время выполнения: '+ FormatDateTime('hh:nn:ss',Now-timerStart));    *)
    if countON<1 then
        s:='У данного менеджера по товарам бренда '+BrandName+' нет оригинальных номеров.';
    SetLength(ArrOrigNum,0);
    prFree(FilterData);
    prFree(List);
    prFree(WareList);
    prFree(SLWareInfo);
//prMessageLOGS('общее время'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;   
    result:= s;
  end;  
end;

function fnGetOriginalNumsFreeI(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,
                                 ContentType:string; ThreadData: TThreadData; filter_data: string):string;
const nmProc = 'fnGetOriginalNumsFreeI';
var
    FilterData,WareList: TStringList;
    PList,List: TStringList;
    BrandName: string;
    CurBrand, Content: string; 
    Brand, j: integer; 
    OWare, AWare, Ware{, WareAnalog}: TWareInfo; 
    CellStylesArray: TXmlCellStylesArray;
    WareName,    PathFile, Comment, s, ss: String;
    countON, countWare: integer;
//    timer, timerStart: TDateTime;  
    Percent: Real;
    AllWareList: TStringList;  
    LenWare, i: integer;
    OLAWare: TObjectList;
    stopped: boolean;
begin
//timer:= Now;
//timerStart:= Now;
//prMessageLOGS('-----------------Export03I--------------------','Log_prg.log' , false);
  BrandName:= '';
  Content:= '';
  FilterData:= nil;
  WareList:= nil;
  PList:= nil;
  List:=nil;
  AllWareList:=nil;
  OLAWare:= nil;
  FilterData:= TStringList.Create;
  countON:= 0;
  countWare:= 0;
  //Percent:= 0;
  stopped:= false;

  try
  
    FilterData.Text:= filter_data;
    CurBrand:= FilterData.Values['dop_gbbrand']; // получаем код бренда
    try  // проверяю на целочисленность
      Brand:= StrToInt(CurBrand);
    except
      raise EBOBError.Create(MessText(mtkNotFoundBrand, CurBrand));
    end;

    if (not Cache.WareBrands.ItemExists(Brand)) then
      raise EBOBError.Create(MessText(mtkNotFoundBrand, CurBrand));

    ImpCheck.SetProcessPercent( UserID, ThreadData.ID, 6);
//prMessageLOGS('Проверка фильтра'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;     
    Comment:= '';
    BrandName:= TBrandItem(Cache.WareBrands[Brand]).Name;
    WareList:= fnGetWareListByBrand(Brand, constIsAuto, true);    //товары менеджера по бренду
    if WareList.Count=0 then begin
      raise EBOBError.Create(MessText(mtkNotFoundBrandWar));
    end
    else begin
      AllWareList:= TStringList.Create;
      AllWareList:= Cache.GetSysManagerWares();          //все товары
      LenWare:= AllWareList.Count; //Length(Cache.arWareInfo);         
      OLAWare:= TObjectList.Create;
      PList:= TStringList.Create;
      try
        Percent:= 60;
        if LenWare>0 then Percent:= Percent/LenWare else ImpCheck.SetProcessPercent( UserID, ThreadData.ID, Percent);
        for i:=0 to LenWare-1 do  begin
          OWare:= Cache.GetWare(integer(AllWareList.Objects[i]));
          if OWare.IsINFOgr and (OWare.WareBrandID=1) and 
            ((trim(OWare.CommentUP)='') or(trim(OWare.CommentUP)='OE') or (trim(OWare.CommentUP)='ОЕ') ) then begin
            OLAWare:= OWare.GetSrcAnalogs(ca_GR_Ex_TD);   //аналоги не инфо
            prStopProcessS( UserID, ThreadData.ID, stopped);
            try
            for j := 0 to OLAWare.Count-1 do begin
              AWare:= Cache.GetWare(TTwoCodes(OLAWare[j]).ID1);   
              if (WareList.IndexOf(AWare.Name)>-1) and not(AWare.FindOriginalNum(-1,0,OWare.NameBS)) then
                PList.AddObject(AWare.Name, TTwoCodes.Create(AWare.ID, OWare.ID)); //(AWare.Name, Pointer(OWare.ID));    /////////////////  
             //not(Ware.FindOriginalNum(-1,0,Ware.NameBS));
             //iWare:= OWare.WareBrandID;
            end;
          except
            on E: EBOBError do begin
              prMessageLOGS(nmProc+':1 ' +E.Message,'import' , false);
            end;
            on E: Exception do prMessageLOGS(nmProc +('analogs')+': '+E.Message,'Log_prg.log' , false);
          end;
            OLAWare.Clear;
          end;
          ImpCheck.SetProcessPercent( UserID, ThreadData.ID, Percent);
        end;
      except
        on E: EBOBError do begin
          prMessageLOGS(nmProc+': ' +E.Message,'import' , false);
          if pos(' прерван ',E.Message)>0 then begin
            ss:= E.Message;
            raise EBOBError.Create(E.Message);
          end;
        end;
        on E: Exception do prMessageLOGS(nmProc +': '+E.Message,'Log_prg.log' , false);
      end;
    end;
    finally
      if PList.Count<1 then
        raise EBOBError.Create('У бренда '+BrandName+' нет не привязанных оригинальных номеров.');
      PList.Sort;
      WareName:= '';
      Percent:= 20;
      if PList.Count>0 then Percent:= Percent/PList.Count else ImpCheck.SetProcessPercent( UserID, ThreadData.ID, Percent);
      if PList.Count>0 then begin
        //-=Создаем стили для оформления документа
        CellStylesArray:= TXmlCellStylesArray.Create;
//03        prStopProcess( UserID, ThreadData.ID);      
        ImpCheck.SetProcessPercent( UserID, ThreadData.ID, 2);      
       
        //=-стили созданы
        List:= TStringList.Create;                                                    ///////////////////////////////
        List.Add(cEX_Doc_Begin);
        List.Add(cEX_Workbook_Begin);

        List.Add(CellStylesArray.GetXmlStyles);
       
        Content:= '';                                      //////////////////////////////
        Content:= Content+fnOpenWorksheet(fnWrkShtNameSpotter(BrandName))+#10;  //открываем worksheet;   
        List.Add(Content);                                                           ///////////////////////////////////////
        Content:= '';
      
        for i := 0 to PList.Count-1 do begin
          if WareName<>PList[i] then begin
            if i>0 then Content:= Content+'</Row>'#10;
            if Content<>'' then List.Add(Content);
            inc(countWare);
            Content:= '';
            Ware:= Cache.GetWare(TTwoCodes(PList.Objects[i]).ID1);
            Comment:= Comment+ string(AnsiToUTF8(Ware.Comment))+'&#10;';
//Content:= Content+fnGenerateXMLcell(Ware.Name,nil,Comment);
            Content:= Content+'<Row>'+fnGenerateXMLcell('')+fnGenerateXMLcell(PList[i],nil,Comment)+fnGenerateXMLcell('');
            Comment:= '';
          end;
          OWare:= Cache.GetWare(TTwoCodes(PList.Objects[i]).ID2);
          //OWare:= Cache.GetWare(integer(PList.Objects[i]));
 
          Comment:= Comment+ 'Группа: '+OWare.GrpName+'&#10;';
          Comment:= Comment+ 'Подгруппа: '+OWare.PgrName +'&#10;';
          Comment:= Comment +OWare.Comment+'&#10;';  
//Content:= Content+fnGenerateXMLcell(ArrOrigNum[iON].NameBS,nil,Comment);
          Content:= Content+ fnGenerateXMLcell(OWare.NameBS,nil,Comment)+fnGenerateXMLcell('');
          Comment:= '';
          inc(countON);
          WareName:= PList[i];
          ImpCheck.SetProcessPercent( UserID, ThreadData.ID, Percent);
        end;
        Content:= Content+'</Row>'#10;
        if Content<>'' then List.Add(Content);
        Content:= '';
      end;

      if List.Count>0 then begin
        Content:= '';
        Content:= Content+fnCloseWorkSheet()+#10;  //закрываем worksheet;
        List.Add(Content);                                                           /////////////////////////////////////////////
        Content:= '';    
        List.Add(cEX_Workbook_End);

        if not GetEmplTmpFilePath(UserID, PathFile, s) then raise EBOBError.Create(s); 

        BrandName:= StringReplace(BrandName, '/', '_',[rfReplaceAll, rfIgnoreCase]);
        BrandName:= StringReplace(BrandName, '\', '_',[rfReplaceAll, rfIgnoreCase]);                            
        BrandName:= StringReplace(BrandName, ' ', '_', [rfReplaceAll]);
        BrandName:= StringReplace(BrandName, '__', '_', [rfReplaceAll]);   
        BrandName:= StringReplace(BrandName, '__', '_', [rfReplaceAll]);                         
        FName:= PathFile+ fnFormRepFileName('03'+stringreplace(BrandName,' ','_',[rfReplaceAll]), '.xml', ImpCheck.GetCheckKind(UserID, ThreadData.ID));//'_OriginalNumsFree'+FormatDateTime('_dd.mm_(hh.nn)',Now)+'.xml';
        if FileExists(FName) and not SysUtils.DeleteFile(FName) then
          raise Exception.Create(MessText(mtkNotDelPrevFile));
//03        prStopProcess( UserID, ThreadData.ID);  
        SaveToFile(List,FName);  
        //List.SaveToFile(FName);
      end; //if List.Count>0
      ImpCheck.SetProcessPercent( UserID, ThreadData.ID, 2);    
      Subj:= BrandName+'. Не привязанные оригинальные номера от '+FormatDateTime(cDateTimeFormatY2S, Now());
      ContentType:= XMLContentType;
      lstBodyMail:= TStringList.Create;
      if stopped then lstBodyMail.Add(ss);
      lstBodyMail.Add(' ');
      lstBodyMail.Add(' Количество :');
      lstBodyMail.Add('   товаров = '+IntToStr(countWare));
      lstBodyMail.Add('   аналогов по оригинальным номерам = '+IntToStr(countON));
(*      lstBodyMail.Add(' ');
      lstBodyMail.Add(' ');
      lstBodyMail.Add(' ');
      lstBodyMail.Add(' Начало выполнения: '+FormatDateTime(cDateTimeFormatTSnD, timerStart));
      lstBodyMail.Add(' Завершение выполнения: '+ FormatDateTime(cDateTimeFormatTSnD,Now));
      lstBodyMail.Add(' Общее время выполнения: '+ FormatDateTime('hh:nn:ss',Now-timerStart));   *)
//03    end;
//  finally
    prFree(WareList);
    prFree(List);
    prFree(FilterData);
    prFree(OLAWare);
    prFree(PList);
    prFree(AllWareList);
  end;
end;
  
 
function fnGetOriginalNumsFree(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,
                                 ContentType:string; ThreadData: TThreadData; filter_data: string):string;
const nmProc = 'fnGetOriginalNumsFree';
var
    FilterData,WareList: TStringList;
    List: TStringList;
    BrandName: string;
    CurBrand, Content, DeclareCols: string; 
    Brand,iWare, iAnalogs, j, iON: integer; 
    Ware, WareAnalog: TWareInfo; 
    ArrOrigNum: array of TWareInfo; 
    ArrAnalogs: tai;
    CellStylesArray: TXmlCellStylesArray;
    PathFile, Comment, s: String;
    AllCols, countON, countWare: integer;
  //timer, timerStart: TDateTime;  
    Percent, PPercent: Real;
begin
//timer:= Now;
//timerStart:= Now;
//prMessageLOGS('-----------------Export03--------------------','Log_prg.log' , false);
  BrandName:= '';
  Content:= '';
  FilterData:= nil;
  WareList:= nil;
  List:= nil;
  FilterData:= TStringList.Create;
  countON:= 0;
  countWare:= 0;
  //Percent:= 0;
  PPercent:= 0;  
  try
  
    FilterData.Text:= filter_data;
    CurBrand:= FilterData.Values['dop_gbbrand']; // получаем код бренда
    AllCols:= 0;
    try  // проверяю на целочисленность
      Brand:= StrToInt(CurBrand);
    except
      raise EBOBError.Create(MessText(mtkNotFoundBrand, CurBrand));
    end;

    if (not Cache.WareBrands.ItemExists(Brand)) then
      raise EBOBError.Create(MessText(mtkNotFoundBrand, CurBrand));

    ImpCheck.SetProcessPercent( UserID, ThreadData.ID, 66);
//prMessageLOGS('Проверка фильтра'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;     
    Comment:= '';
    BrandName:= TBrandItem(Cache.WareBrands[Brand]).Name;
    WareList:= fnGetWareListByBrand(Brand, constIsAuto, true);
    if WareList.Count=0 then begin
      raise EBOBError.Create(MessText(mtkNotFoundBrandWar));
    end
    else begin
      //-=Создаем стили для оформления документа
      CellStylesArray:= TXmlCellStylesArray.Create;
      prStopProcess( UserID, ThreadData.ID);      
      ImpCheck.SetProcessPercent( UserID, ThreadData.ID, 20);      
       
      //=-стили созданы
      List:= TStringList.Create;                                                    ///////////////////////////////
      List.Add(cEX_Doc_Begin);
      List.Add(cEX_Workbook_Begin);

      List.Add(CellStylesArray.GetXmlStyles);
       
      Content:= '';                                      //////////////////////////////
      Content:= Content+fnOpenWorksheet(fnWrkShtNameSpotter(BrandName))+#10;  //открываем worksheet;   
      List.Add(Content);                                                           ///////////////////////////////////////
      Content:= '';
   
      Percent:= 10;
      if WareList.Count>0 then Percent:= Percent/WareList.Count else ImpCheck.SetProcessPercent( UserID, ThreadData.ID, Percent);   
      for iWare := 0 to WareList.Count-1 do begin
        Ware:= Cache.GetWare(integer(WareList.Objects[iWare]));
        if Ware.ManagerID= UserID then begin
          SetLength(ArrOrigNum,0);
//          SetLength(ArrAnalogs,0);          
          j:= 0;
          ArrAnalogs:= Ware.analogs; 

          SetLength(ArrOrigNum,length(ArrAnalogs));        
          for iAnalogs:= 0 to length(ArrAnalogs)-1 do begin
            prStopProcess( UserID, ThreadData.ID);
            WareAnalog:= Cache.arWareInfo[ArrAnalogs[iAnalogs]];
            if (WareAnalog.IsINFOgr) and not(Ware.FindOriginalNum(-1,0,WareAnalog.NameBS)) then begin
              ArrOrigNum[j]:= WareAnalog;
              inc(j);
             end;//  if ArrAnalogs[
          end; //for iAnalogs
          //строка
          if j > 0 then PPercent:= Percent/j else ImpCheck.SetProcessPercent( UserID, ThreadData.ID, Percent);                     
          if j>0 then begin
            inc(countWare);
            countON:= countON+j;
            SetLength(ArrOrigNum,j);
            Content:= '';
            Content:= Content+'<Row>'#10;
            Content:= Content+fnGenerateXMLcell('');
            Comment:= Comment+ string(AnsiToUTF8(Ware.Comment))+'&#10;';
            Content:= Content+fnGenerateXMLcell(Ware.Name,nil,Comment);
            Comment:= '';
            for iON:= 0 to j-1 do begin
              prStopProcess( UserID, ThreadData.ID);
             //TestCssStopException;
              Content:= Content+ fnGenerateXMLcell('');
              Comment:= Comment+ string(AnsiToUTF8('Группа: '))+string(AnsiToUTF8(ArrOrigNum[iON].GrpName))+'&#10;';
              Comment:= Comment+ string(AnsiToUTF8('Подгруппа: '))+string(AnsiToUTF8(ArrOrigNum[iON].PgrName)) +'&#10;';
              Comment:= Comment +string(AnsiToUTF8(ArrOrigNum[iON].Comment))+'&#10;';  
              Content:= Content+fnGenerateXMLcell(ArrOrigNum[iON].NameBS,nil,Comment);
              Comment:= '';
            end;
            {if j<2 then Content:=Content+ fnGenerateXMLcell('', TextStyle) + fnGenerateXMLcell('', TextStyle);}
            Content:= Content+'</Row>'#10;
            List.Add(Content); 
            SetLength(ArrOrigNum,0);
            if AllCols<j then AllCols:= j;
            ImpCheck.SetProcessPercent( UserID, ThreadData.ID, PPercent);            
          end; //if length(ArrOrigNum)<j-1 
        end;//if Ware.ManagerID= UserID
      end; //for iWare 
    end; //else WareList.Count=0 
  
    if AllCols>0 then begin
        //Задаем ширину колонок
          DeclareCols:= '<Column ss:Width="50"/>'#10;
        for j:= 0 to AllCols do begin
  //      <Column ss:AutoFitWidth="0" ss:Width="..."/>
          DeclareCols:= DeclareCols+'<Column ss:Width="100"/>'#10 + '<Column ss:Width="100"/>'#10; //'<Column ss:AutoFitWidth="0" ss:Width="'+
                        //IntToStr((WidthArray[j])*5)+'"/>'#10;
        end;

      //Дописываем полный текст в уже открытый Worksheet и закрываем его перед объявлением следующего
        List.Strings[4]:= DeclareCols; 
    end; //AllCols>0

    prStopProcess( UserID, ThreadData.ID);    
    if List.Count>0 then begin
      Content:= '';
      Content:= Content+fnCloseWorkSheet()+#10;  //закрываем worksheet;
      List.Add(Content);                                                           /////////////////////////////////////////////
      Content:= '';    
      List.Add(cEX_Workbook_End);

      if not GetEmplTmpFilePath(UserID, PathFile, s) then raise EBOBError.Create(s); 

      if countON<1 then
        raise EBOBError.Create('У бренда '+BrandName+' нет не привязанных оригинальных номеров.');

      BrandName:= StringReplace(BrandName, '/', '_',[rfReplaceAll, rfIgnoreCase]);  
      BrandName:= StringReplace(BrandName, '\', '_',[rfReplaceAll, rfIgnoreCase]);                            
      BrandName:= StringReplace(BrandName, ' ', '_', [rfReplaceAll]);
      BrandName:= StringReplace(BrandName, '__', '_', [rfReplaceAll]);   
      BrandName:= StringReplace(BrandName, '__', '_', [rfReplaceAll]);                         
      FName:= PathFile+ fnFormRepFileName('03'+stringreplace(BrandName,' ','_',[rfReplaceAll]), '.xml', ImpCheck.GetCheckKind(UserID, ThreadData.ID));//'_OriginalNumsFree'+FormatDateTime('_dd.mm_(hh.nn)',Now)+'.xml';
      if FileExists(FName) and not SysUtils.DeleteFile(FName) then
        raise Exception.Create(MessText(mtkNotDelPrevFile));
      prStopProcess( UserID, ThreadData.ID);  
      SaveToFile(List,FName);  
      //List.SaveToFile(FName);
    end; //if List.Count>0
    ImpCheck.SetProcessPercent( UserID, ThreadData.ID, 2);    
    Subj:= BrandName+'. Не привязанные оригинальные номера от '+FormatDateTime(cDateTimeFormatY2S, Now());
    ContentType:= XMLContentType;
    lstBodyMail:= TStringList.Create;
    lstBodyMail.Add(' Количество :');
    lstBodyMail.Add('   товаров = '+IntToStr(countWare));
    lstBodyMail.Add('   аналогов по оригинальным номерам = '+IntToStr(countON));

  finally;
    SetLength(ArrOrigNum,0);
    prFree(WareList);
    prFree(List);
    prFree(FilterData);
//    SetLength(ArrAnalogs, 0);
  end;  
end;
  
function AnalogsWare(const UserId: integer; const Manufactur: integer; var maxWare: integer;
         var maxGB: integer; var maxON: integer;var pAll,pTecDoc: boolean ): TRecArray;
{type TRec = record
      IdMan : integer;
      IdBrand : integer;
      idModelLine : integer;
      idModel : integer;
      idNode : integer;
      ArrGB : tai;
      ArrON : tai;
      end; }
const nmProc = 'AnalogsWare';      
var //ManagerArr:  TRecArray;//array of TRec;
    {ManufacturersCount,} ModelLinesCount, ModelsCount, NodeCount, WareCount:  integer;
    {ManufacturersIndex,} ModelLinesIndex, ModelsIndex, NodeIndex, WareIndex:  integer;
    {ManufacturersList,} ModelLinesList, ModelsList:  TStringList;
    Manufacturer:  TManufacturer;
    ModelLine:  TModelLine;
    Model:  TModelAuto;
    NodeList:  TList;
    Link2:  TSecondLink;
    Ware, WareArr, AnalogsArr, AnalogsWArr, AnalogsGBArr, AnalogsONArr, AnalogsWGBArr, AnalogsWGBONArr, pAr1:  tai;
    Node:  TAutoTreeNode;
    AWare:  TWareInfo;
    j, w, i,l, m, lenAnalogsGBArr,lenAnalogsONArr, lenResult, ManID:  integer;
    //maxGB, maxON : integer;
    //ss:  string;
    IBORDQuery:  TIBSQL;
    IBORD:  TIBDatabase; 
    WrAnalogsONArr, WrAnalogsGBArr, countRows, MaxRows:  integer; 
    pIniFile:  TIniFile;
begin
  ModelLinesList:= nil; 
  ModelsList:= nil;
  NodeList:= nil;
  SetLength(Result, 0);
  pIniFile:= TINIFile.Create(nmIniFileBOB);
  pAll:= True;
//  IBORD:= nil;
//  IBORDQuery:= nil;
  IBORD:= cntsORD.GetFreeCnt;
  IBORDQuery:= fnCreateNewIBSQL(IBORD, 'Query_'+nmProc, -1, tpRead, true);
  countRows:= 0;
  SetLength(AnalogsWArr,0);
  SetLength(AnalogsWGBArr,0);
  SetLength(AnalogsWGBONArr,0);
  //SetLength(ArrGB,0);
  //SetLength(ArrON,0);
  SetLength(Result,0);
  maxGB:= 0;
  maxON:= 0;
  ManId:= 0;
  if (maxWare=0) or (maxWare > pIniFile.ReadInteger('reports', 'rep23', 30000)) then  
  MaxRows:= pIniFile.ReadInteger('reports', 'rep23', 30000)
  else MaxRows:= maxWare;
  maxWare:= 0;
//  lenAnalogsGBArr:= 0;
//  lenAnalogsONArr:= 0;
  lenResult:= 0;
  m:= 0;
  w:= 0;
try
  try
   {ManufacturersList:=Cache.FDCA.Manufacturers.GetSortedList(constIsAuto);
   ss:= ManufacturersList.CommaText;
   ManufacturersCount:= ManufacturersList.Count-1;
   for ManufacturersIndex := 0 to ManufacturersCount do begin }
     Manufacturer:= Cache.FDCA.Manufacturers[Manufactur];//TManufacturer(ManufacturersList.Objects[ManufacturersIndex]);
     if Manufacturer.CheckIsVisible(constIsAuto) then begin
       ModelLinesList:= Manufacturer.GetModelLinesList(constIsAuto, False);
       ModelLinesCount:=  ModelLinesList.Count-1;
       for ModelLinesIndex:= 0 to ModelLinesCount do begin
         ModelLine:= TModelLine(Cache.FDCA.ModelLines.Items[integer(ModelLinesList.Objects[ModelLinesIndex])]);
         if ModelLine.IsVisible and ModelLine.HasVisModels then begin
           ModelsList:= ModelLine.GetListModels(False);
           ModelsCount:= ModelsList.Count-1;
           for ModelsIndex:= 0 to ModelsCount do begin
             Model:= TModelAuto(Cache.FDCA.Models.Items[integer(ModelsList.Objects[ModelsIndex])]);
             if Model.IsVisible and Model.ModelHasWares then begin
               NodeList:= Model.GetModelNodesList;
               NodeCount:= NodeList.Count-1;
               for NodeIndex := 0 to NodeCount do begin
               Link2:= NodeList.Items[NodeIndex];
               Node:= TAutoTreeNode(link2.LinkPtr);  //
               SetLength(WareArr,0);
               SetLength(AnalogsGBArr,0);
               SetLength(AnalogsONArr,0);
                 if ((Link2.IsLinkNode) and
                    ((TAutoTreeNode(Link2.LinkPtr).Children = nil) or
                     (TAutoTreeNode(Link2.LinkPtr).Children.Count<1) ) and
                     (Node.MainCode=Node.ID)) then begin
                   SetLength(WareArr,0);
                   w:= 0;                   
                   SetLength(Ware,w);
                   WareArr:= Link2.GetWareCodes;
                   WareCount:= length(WareArr)-1;
                   SetLength(Ware,length(WareArr));
                   for WareIndex:= 0 to WareCount do begin
                    TestCssStopException;
                     AnalogsArr:= Cache.arWareInfo[WareArr[WareIndex]].analogs;
                     AnalogsWArr:= fnGetDifferentArrayComparisons(AnalogsArr, WareArr,0);
                     AnalogsWGBArr:= fnGetDifferentArrayComparisons(AnalogsWArr, AnalogsGBArr,0);
                     lenAnalogsGBArr:= length(AnalogsGBArr);
                     l:= 0;
                       for i:= 0 to length(AnalogsWGBArr)-1 do begin
                         AWare:= Cache.arWareInfo[AnalogsWGBArr[i]];
                         //if (Cache.arWareInfo[AnalogsWGBArr[i]].ManagerID=UserId) and not(Cache.arWareInfo[AnalogsWGBArr[i]].IsINFOgr)
                         if pTecDoc then
                           if (AWare.ManagerID=UserId) and not(AWare.IsINFOgr) and (AWare.ArticleTD='')
                           then inc(l) else AnalogsWGBArr[i]:= 0;
                         if not pTecDoc then
                           if (AWare.ManagerID=UserId) and not(AWare.IsINFOgr) 
                           then inc(l) else AnalogsWGBArr[i]:= 0;                         
                       end; // i
                       SetLength(AnalogsGBArr, lenAnalogsGBArr+l);
                       l:= 0;
                       for i:= 0 to length(AnalogsWGBArr)-1 do begin
                         if AnalogsWGBArr[i]<>0 then begin
                           AnalogsGBArr[lenAnalogsGBArr+l]:= AnalogsWGBArr[i];
                           inc(l);
                           if fnInIntArray(WareArr[WareIndex], Ware)=-1 then begin
                             Ware[w]:= WareArr[WareIndex];
                             inc(w);
                           end;                           
                         end;
                       end; // i
                     SetLength(AnalogsArr,0);   //15.07
                     SetLength(AnalogsWArr,0);
                     SetLength(AnalogsWGBArr,0);
                     SetLength(AnalogsWGBONArr,0);
                   end; // WareIndex GB
                   for WareIndex:= 0 to WareCount do begin
                    TestCssStopException;
                     Cache.FDCA.fnGetListAnalogsWithManufacturer(WareArr[WareIndex],Manufactur,AnalogsArr,pAr1);
                     AnalogsWArr:= fnGetDifferentArrayComparisons(AnalogsArr, WareArr,0);
                     AnalogsWGBArr:= fnGetDifferentArrayComparisons(AnalogsWArr, AnalogsGBArr,0);
                     AnalogsWGBONArr:= fnGetDifferentArrayComparisons(AnalogsWGBArr, AnalogsONArr,0);
                     lenAnalogsONArr:= length(AnalogsONArr);
                     l:= 0;
                       for i:= 0 to length(AnalogsWGBONArr)-1 do begin
                         AWare:= Cache.arWareInfo[AnalogsWGBONArr[i]]; 
                         if pTecDoc then
                           if (AWare.ManagerID=UserId) and not(AWare.IsINFOgr) and (AWare.ArticleTD='')
                           then inc(l) else AnalogsWGBONArr[i]:= 0;
                         if not pTecDoc then
                           if (AWare.ManagerID=UserId) and not(AWare.IsINFOgr) 
                           then inc(l) else AnalogsWGBONArr[i]:= 0;                         
                       end; // i
                       SetLength(AnalogsONArr, lenAnalogsONArr+l);
                       l:= 0;
                       for i:= 0 to length(AnalogsWGBONArr)-1 do begin
                         if AnalogsWGBONArr[i]<>0 then begin
                           AnalogsONArr[lenAnalogsONArr+l]:= AnalogsWGBONArr[i];
                           inc(l);
                           if fnInIntArray(WareArr[WareIndex], Ware)=-1 then begin
                             Ware[w]:= WareArr[WareIndex];
                             inc(w);
                           end;
                         end;
                       end; // i
                     SetLength(AnalogsArr,0);   //15.07
                     SetLength(AnalogsWArr,0);
                     SetLength(AnalogsWGBArr,0);
                     SetLength(AnalogsWGBONArr,0);
                   end; // WareIndex ON

                   
                 end; //Link2.IsLinkNode
                   SetLength(Ware,w);
                  WrAnalogsONArr:= 0;
                  WrAnalogsGBArr:= 0;
                  //1902                   
                  if (length(AnalogsGBArr)>0) or (length(AnalogsONArr)>0) then begin
                  IBORDQuery.SQL.Text:= 'SELECT LDMWCODE, LDMWLDEMCODE, LDMWWARECODE, LDMWSRCLECODE, LDMWWRONG, LDMWUSERID, LDMWTIMEADD '
                  + 'FROM LINKDETMODWARE where LDMWWRONG="T" and '
                  + 'LDMWLDEMCODE = (SELECT LDEMCODE FROM LINKDETAILMODEL, DIRMODELS '
                  + 'where  LDEMDMOSCODE= DMOSCODE '
                  + 'and LDEMTRNACODE='+IntToStr(Node.ID)+' and DMOSDRMLCODE='+IntToStr(ModelLine.ID)+' and DMOSCODE='+IntToStr(Model.ID)+')';
                  IBORDQuery.Prepare;
                  IBORDQuery.ExecQuery; 
                  while not IBORDQuery.EOF do begin
                    for i:= 0 to length(AnalogsGBArr)-1 do begin
                      if  AnalogsGBArr[i]= IBORDQuery.FieldByName('LDMWWARECODE').AsInteger then begin
                        AnalogsGBArr[i]:= 0;
                        inc(WrAnalogsGBArr);
                      end;
                    end;
                    for i:= 0 to length(AnalogsONArr)-1 do begin
                      if  AnalogsONArr[i]= IBORDQuery.FieldByName('LDMWWARECODE').AsInteger then begin
                        AnalogsONArr[i]:= 0;
                        inc(WrAnalogsONArr);
                      end;  
                    end;  
                    IBORDQuery.Next;
                  end; 
                  IBORDQuery.close;
                  if WrAnalogsGBArr= length(AnalogsGBArr) then SetLength(AnalogsGBArr,0);
                  if WrAnalogsONArr= length(AnalogsONArr) then SetLength(AnalogsONArr,0);
                  end;//1902

                   if (length(AnalogsGBArr)>0) or (length(AnalogsONArr)>0) then begin
                   inc(lenResult);
                   inc(countRows);                   
                   if length(Result)< lenResult then 
                   SetLength(Result,length(Result)+5000);
                   Result[m].IdMan:= UserID;
                   Result[m].ManufacturerName:= Manufacturer.Name;
                   Result[m].ModelLineName:= ModelLine.Name;
                   Result[m].ModelName:= Model.Name+'   ***'+IntToStr(Model.ID)+'***';
                   Result[m].NodeName:= Node.Name+'   ***'+IntToStr(Node.ID)+'***';
                   SetLength(Result[m].ArrWare,length(WareArr));
                   SetLength(Result[m].ArrGB,length(AnalogsGBArr)-WrAnalogsGBArr);
                   SetLength(Result[m].ArrON,length(AnalogsONArr)-WrAnalogsONArr);
                     for i:= 0 to length(WareArr)-1 do begin
                       Result[m].ArrWare[i]:= WareArr[i];//Cache.GetWare(WareArr[i]).Name;//
                     end;
                     j:= 0;                     
                     for i:= 0 to length(AnalogsGBArr)-1 do begin
                       if AnalogsGBArr[i]<>0 then begin
                         Result[m].ArrGB[j]:= AnalogsGBArr[i];//Cache.GetWare(AnalogsGBArr[i]).Name;//
                         inc(j); 
                         inc(countRows);                                                 
                       end;
                     end;
                     j:= 0;                     
                     for i:= 0 to length(AnalogsONArr)-1 do begin
                       if AnalogsONArr[i]<>0 then begin
                         Result[m].ArrON[j]:= AnalogsONArr[i];//Cache.GetWare(AnalogsONArr[i]).Name;//
                         inc(j);   
                         inc(countRows);                                               
                       end;
                     end;
                   //prMessageLOGS(IntToStr(ManagerArr[m].idNode)+':'+fnArrOfIntToString(ManagerArr[m].ArrGB,',')+':'+ fnArrOfIntToString(ManagerArr[m].ArrON,','), 'Log_prg.log',false);
                   inc(m);
                   if maxWare<length(WareArr) then maxWare:= length(Ware);
                   if maxGB<length(AnalogsGBArr) then maxGB:= length(AnalogsGBArr)-WrAnalogsGBArr;
                   if maxON<length(AnalogsONArr) then maxON:= length(AnalogsONArr)-WrAnalogsONArr;
                   
                   if countRows>MaxRows then begin 
                     pAll:= False;  
                     break; 
                   end;
                   end;

               end; //NodeIndex
             NodeList.Clear;   
             prFree(NodeList);
             end; // Model.IsVisible
             if countRows>MaxRows then break;             
           end; //ModelsIndex
         end; //ModelLine.IsVisible
       if countRows>MaxRows then break;        
       end; //ModelLineIndex
     end; // Manufacturer.VisibleSet
  // end; //ManufacturerIndex
  if length(Result)> lenResult then 
  SetLength(Result,lenResult);
  except
    raise EBOBError.Create('Ошибка процедуры при выборе не привязанных аналогов');
  end;
finally
  prFreeIBSQL(IBORDQuery);
  cntsORD.SetFreeCnt(IBORD, True);
  prFree(NodeList);
  SetLength(AnalogsGBArr,0);
  SetLength(AnalogsONArr,0);
  SetLength(WareArr,0);
  SetLength(Ware,0);
  prFree(pIniFile);  
end;
end;
//--============================================================================================--//
function fnGetAnalogsFree(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,
                                 ContentType:string; ThreadData: TThreadData; filter_data: string):string;
//const nmProc = 'fnGetAnalogsFree';
var
  FilterData: TStringList;
  {WareList,} List: TStringList;
  CurManufacturer, Content, s: string;
  DelimWares: string;
  ManufacturerName: string;
  Ware: TWareInfo;
  PathFile: String;
  Manufacturer, i, j, jj: integer;
  CellStylesArray: TXmlCellStylesArray;
  BoldHeaderStyle, ItalicStyle: TXmlReportStyle;
  TextStyle, DelimStyle: TXmlReportStyle;
  SideHeaderEmptines: TXmlReportStyle;
  ManagerArr: TRecArray;
  maxWare, maxGB, maxON, countWare, countGB, countON : integer;
  pAll, pTecDoc: boolean;
  AnalogsArr, pAr1: tai;
  Comment: string;

  XL: TExcelApplication;
  WorkBook: Excel_TLB._Workbook;
  WorkSheet: Excel_TLB._Worksheet;
  countRows, {rows, irow,} str: integer;
  FNameXml, Macro: string;
  ArrStr: tas;
  PosBegin, PosEnd, ModelCode: integer;
  Model: TModelAuto;
  pTecDocStr{, countRowsStr}: string;  
  timer: TDateTime;  
begin
//  timerStart:= now;
  timer:= now;   
  FilterData:=nil;
//  WareList:= nil;
  List:= nil; 
  FilterData:= TStringList.Create;
  SetLength(ArrStr,1000); 
  try
    FilterData.Text:= filter_data;
    CurManufacturer:= FilterData.Values['dop_manuflistauto']; // получаем код бренда

    try  // проверяю на целочисленность
      Manufacturer:= StrToInt(CurManufacturer);
    except
      raise EBOBError.Create(MessText(mtkNotValidParam)+' производителя авто - "'+CurManufacturer+'"');
    end;
    if (not Cache.FDCA.ManufAutoExist(Manufacturer)) then
      raise EBOBError.Create(MessText(mtkNotFoundManuf, CurManufacturer));

    if (not Cache.FDCA.Manufacturers[Manufacturer].HasVisModelLines(constIsAuto)) then
      raise EBOBError.Create('У этого производителя авто нет видимых модельных рядов ');

    if (not Cache.FDCA.Manufacturers[Manufacturer].HasVisMLModels(constIsAuto)) then
      raise EBOBError.Create('У этого производителя авто нет видимых моделей ');

    if (not Cache.FDCA.Manufacturers[Manufacturer].ManufHasWares) then
      raise EBOBError.Create('Для этого производителя авто не найдены товары ');

    if not GetEmplTmpFilePath(UserID, PathFile, s) then raise EBOBError.Create(s); 
    s:= '';

//FilterData.Text:= FilterData.Text+#10+'dop_rowcount=25000'+#10+'dop_tecdoconly=True';    
    countRows:= StrToIntDef(FilterData.Values['dop_rowcount'],0); // получаем ограничение файла
    pTecDocStr:= FilterData.Values['dop_tecdoconly']; // получаем призкак по tecdoc
    pTecDoc:= (AnsiUpperCase(trim(pTecDocStr))=AnsiUpperCase('On'));
    ManufacturerName:= Cache.FDCA.Manufacturers[Manufacturer].Name;
    maxWare:= countRows;
    maxGB:= 0;
    maxON:= 0;
    pAll:= True;
    countWare:= 0;
    countGB:= 0;
    countON:= 0;
    ModelCode:= 0;
//prMessageLOGS('-----------------'+ManufacturerName+'--------------------','Log_prg.log' , false); 
// основная процедура
   ManagerArr:= AnalogsWare(UserId, Manufacturer, maxWare, maxGB, maxON,pAll, pTecDoc);
//prMessageLOGS('основная процедура'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
timer:= now;
          
   if length(ManagerArr)=0 then 
   raise EBOBError.Create(GetProcessName(UserID, ThreadData.ID)+#10+'По производителю '+ManufacturerName+' нет таких товаров.');
   ImpCheck.SetProcessPercent( UserID, ThreadData.ID, 3);
  
//-=Создаем стили для оформления документа
    CellStylesArray:= TXmlCellStylesArray.Create;

    BoldHeaderStyle:= CellStylesArray.AddStyle(TXmlReportStyle.Create(cnHeaderCell,
                         'Center','Center',[fsBold],cnHeaderText, true, true, cnHeaderBorder));
    ItalicStyle:= CellStylesArray.AddStyle(TXmlReportStyle.Create('',
                         '','',[fsItalic]));                         

    SideHeaderEmptines:= CellStylesArray.AddStyle(TXmlReportStyle.Create(cnHeaderCell,
                         'Center','Center',[],cnHeaderText, true));

    TextStyle:= CellStylesArray.AddStyle(TXmlReportStyle.Create);

    DelimStyle:= CellStylesArray.AddStyle(TXmlReportStyle.Create(cnGreenCell));
//=-стили созданы
    List:= TStringList.Create;                                                    ///////////////////////////////
    List.Add(cEX_Doc_Begin);
    List.Add(cEX_Workbook_Begin);

    List.Add(CellStylesArray.GetXmlStyles);                                      //////////////////////////////

    Content:= Content+fnOpenWorksheet(fnWrkShtNameSpotter(ManufacturerName))+#10  //открываем worksheet;
//    Content:=Content+'<Column ss:Width="70"/>'#10;
                      +'<Column ss:Width="100"/>'#10
                      +'<Column ss:Width="100"/>'#10
                      +'<Column ss:Width="150"/>'#10
                      +'<Column ss:Width="150"/>'#10
                      +'<Column ss:Width="150"/>'#10
                      +'<Column ss:Width="10"/>'#10
                      +'<Column ss:Width="200"/>'#10
                      +'<Column ss:Width="200"/>'#10
                      +'<Column ss:Width="200"/>'#10;    
    List.Add(Content);                                                           ///////////////////////////////////////
    Content:= '';
  //Добавляем шапку:
    Content:= Content+'<Row ss:Height="37">'#10
//    Content:=Content+fnGenerateXMLcell('Производитель авто', BoldHeaderStyle)
                      +fnGenerateXMLcell('Модельный ряд', BoldHeaderStyle)
                      +fnGenerateXMLcell('Модель', BoldHeaderStyle)
                      +fnGenerateXMLcell('Узел', BoldHeaderStyle)
    {Content:=Content+fnGenerateXMLcell ('Список товаров', BoldHeaderStyle,'','',0 , maxWare-1);
    Content:= Content+fnGenerateXMLcell(' ', BoldHeaderStyle); }
                      +fnGenerateXMLcell ('Аналоги GrossBee', BoldHeaderStyle)
                      +fnGenerateXMLcell('Аналоги по оригинальным номерам', BoldHeaderStyle)
                      +fnGenerateXMLcell('', BoldHeaderStyle)
                      +fnGenerateXMLcell('Описание', BoldHeaderStyle)
                      +fnGenerateXMLcell('Техническая информация (условия применимости и т.п.) (до 1200 символов)', BoldHeaderStyle)
                      +fnGenerateXMLcell('Информация по монтажу (до 1200 символов)', BoldHeaderStyle)
                      +'</Row>'#10;
  //шапка добавлена
    List.Add(Content);                                                           /////////////////////////////////////////////
    Content:= '';
  //Создаем горизонтальный разделитель
    DelimWares:= '';
    DelimWares:= DelimWares+'<Row ss:Height="6">'#10
                           +fnGenerateXMLcell('',SideHeaderEmptines)
                           +fnGenerateXMLcell('',SideHeaderEmptines)
                           +'</Row>'#10;
   str:= 2;
   
   for i:= 0 to length(ManagerArr)-1 do begin
    Content:= '';
        Content:= Content+'<Row>'#10
//        Content:=Content+fnGenerateXMLcell((ManagerArr[i].ManufacturerName), TextStyle);
                         +fnGenerateXMLcell((ManagerArr[i].ModelLineName), TextStyle);
        Comment:= '';
        if ManagerArr[i].ModelName<>'' then begin
          PosBegin:= pos('***', ManagerArr[i].ModelName)+3;
          PosEnd:= pos('***', copy(ManagerArr[i].ModelName,PosBegin,length(ManagerArr[i].ModelName)-PosBegin+1))-1;
          ModelCode:= StrToIntDef(copy(ManagerArr[i].ModelName,PosBegin,PosEnd), -100500);
        end; 
        Model:= cache.FDCA.Models[ModelCode];
        Comment:= Comment+fnMakeAddCharStr(inttostr(Model.Params.pMStart), 2, '0') +'.'+ inttostr(Model.Params.pYStart)+
        ' - '+fnMakeAddCharStr(inttostr(Model.Params.pMEnd), 2, '0')+'.'+inttostr(Model.Params.pYEnd)+'&#10;';
        Comment:= Comment+ inttostr(Model.Params.pHP) + string(AnsiToUTF8(' л.с.')) +'&#10;';
        Comment:= Comment+ (Model.MarksCommaText)+'&#10;';
        Content:= Content+fnGenerateXMLcell((ManagerArr[i].ModelName), TextStyle, Comment);

        Comment:= '';
        for j:= 0 to length(ManagerArr[i].ArrWare)-1 do begin                      //список товаров
          Comment:= Comment+ Cache.GetWare(ManagerArr[i].ArrWare[j]).Name+'&#10;';
          inc(countWare);
        end;
       
        Content:= Content+fnGenerateXMLcell((ManagerArr[i].NodeName), TextStyle, fnAdvXmlComment('Товары:',Comment))
                         +fnGenerateXMLcell('', TextStyle)
                         +fnGenerateXMLcell('', TextStyle)
                         +fnGenerateXMLcell(' ', TextStyle)
                         +fnGenerateXMLcell('', TextStyle)
                         +fnGenerateXMLcell('', TextStyle) 
                         +fnGenerateXMLcell('', TextStyle)       
                         +'</Row>'#10;
        //inc(countRows);
        if length(ArrStr)=str-2 then SetLength(ArrStr,length(ArrStr)+1000);
        ArrStr[str-2]:= 'D'+inttostr(str);
        inc(str);
        List.Add(Content);                                                           /////////////////////////////////////////////
        Content:= '';        
        for j:= 0 to length(ManagerArr[i].ArrGB)-1 do begin                       // + список аналогов GrossBee +
          prStopProcess( UserID, ThreadData.ID);
         //TestCssStopException;
          Content:= Content+'<Row>'#10
//          Content:=Content+fnGenerateXMLcell('');
                            +fnGenerateXMLcell('')
                            +fnGenerateXMLcell('')
                            +fnGenerateXMLcell('');
          AnalogsArr:= Cache.arWareInfo[ManagerArr[i].ArrGB[j]].analogs;
          Comment:= '';  
            for jj:= 0 to length(AnalogsArr)-1 do begin                      //список товаров
              if fnInIntArray(AnalogsArr[jj], ManagerArr[i].ArrWare)>-1 then
                Comment:= Comment+ Cache.GetWare(AnalogsArr[jj]).Name+'&#10;';
            end;
          Ware:= Cache.GetWare(ManagerArr[i].ArrGB[j]);
          Content:= Content+fnGenerateXMLcell(Ware.Name,nil ,fnAdvXmlComment('Аналоги GB:',Comment) )//(ManagerArr[i].ArrGB[j]); //(TWareInfo(ManagerArr[i].ArrGB[j]).Name);//
                           +fnGenerateXMLcell('')
                           +fnGenerateXMLcell(' ')
                           +fnGenerateXMLcell(Ware.Comment,ItalicStyle) //(TWareInfo(ManagerArr[i].ArrGB[j]).Comment);//      //описание
                           +fnGenerateXMLcell('')
                           +fnGenerateXMLcell('')          
                           +'</Row>'#10;
          //inc(countRows);
          inc(countGB);
          if length(ArrStr)=str-2 then SetLength(ArrStr,length(ArrStr)+1000);
          ArrStr[str-2]:= 'E'+inttostr(str);          
          inc(str);
          SetLength(AnalogsArr, 0);
        end;
        List.Add(Content);                                                           /////////////////////////////////////////////
        Content:= '';        
        for j:= 0 to length(ManagerArr[i].ArrON)-1 do begin                       // + список аналогов по оригинальным номерам
          prStopProcess( UserID, ThreadData.ID);
          //TestCssStopException;
          Content:= Content+'<Row>'#10
//          Content:=Content+fnGenerateXMLcell('');
                          +fnGenerateXMLcell('')
                          +fnGenerateXMLcell('')
                          +fnGenerateXMLcell('')
                          +fnGenerateXMLcell('');
          Cache.FDCA.fnGetListAnalogsWithManufacturer(ManagerArr[i].ArrON[j],Manufacturer,AnalogsArr,pAr1);
          Comment:= '';  
          for jj:= 0 to length(AnalogsArr)-1 do begin                      //список товаров
            if fnInIntArray(AnalogsArr[jj], ManagerArr[i].ArrWare)>-1 then
             Comment:= Comment+ Cache.GetWare(AnalogsArr[jj]).Name+'&#10;';
          end;   
          Ware:= Cache.GetWare(ManagerArr[i].ArrON[j]);       
          Content:= Content+fnGenerateXMLcell(Ware.Name, nil,fnAdvXmlComment('Аналоги по ОН:',Comment))
                          +fnGenerateXMLcell(' ')
                          +fnGenerateXMLcell(Ware.Comment,ItalicStyle)//(ManagerArr[i].ArrDiscON[j]);       //описание
                          +fnGenerateXMLcell('')
                          +fnGenerateXMLcell('')          
                          +'</Row>'#10;
          //inc(countRows);                          
          inc(countON);
          if length(ArrStr)=str-2 then SetLength(ArrStr,length(ArrStr)+1000);
          ArrStr[str-2]:= 'F'+inttostr(str);          
          inc(str);
        end;
//if countRows>30000 then break;        
        List.Add(Content);                                                           /////////////////////////////////////////////
        Content:= '';        
    end;
    prStopProcess( UserID, ThreadData.ID);
    if not pAll then  
      Content:= Content+'<Row>'#10
                      +fnGenerateXMLcell(' Внимание! Данные ограничены размером файла, следующую порцию можно получить только после обработки файла и импорта в базу.')
                      +fnGenerateXMLcell('')
                      +fnGenerateXMLcell('')
                      +fnGenerateXMLcell('')
                      +fnGenerateXMLcell('')
                      +fnGenerateXMLcell('')
                      +fnGenerateXMLcell('')
                      +fnGenerateXMLcell('')
                      +fnGenerateXMLcell('')
                      +'</Row>'#10;
    List.Add(Content);
    Content:= '';
    Content:= Content+fnCloseWorkSheet(fnGetWorkSheetOptions(3,1))+#10;  //закрываем worksheet;
    List.Add(Content);                                                           /////////////////////////////////////////////
    Content:= '';
    SetLength(ArrStr,0);

    List.Add(cEX_Workbook_End);

    //FNameXml:=PathFile+StringReplace(ManufacturerName, ' ', '_', [rfReplaceAll])+'_AnalogsFree'+FormatDateTime('_dd.mm_(hh.nn)',Now)+'.xml';
    FNameXml:= PathFile+fnFormRepFileName('23_'+StringReplace(ManufacturerName, ' ', '_', [rfReplaceAll]), '.xml', ImpCheck.GetCheckKind(UserID, ThreadData.ID));      //ImpCheck.GetCheckKind(UserID, ThreadData.ID)
    if FileExists(FNameXml) and not SysUtils.DeleteFile(FNameXml) then
      raise Exception.Create(MessText(mtkNotDelPrevFile));
    prStopProcess( UserID, ThreadData.ID);
    SaveToFile(List,FNameXml);
    ImpCheck.SetProcessPercent( UserID, ThreadData.ID, 2);    
    
    if str<length(ArrStr) then  SetLength(ArrStr,str-2);

  try  //1  
    prStopProcess( UserID, ThreadData.ID);   
    //прочитать и исправить примечания
    XL:= TExcelApplication.Create(nil);
    WorkBook:= nil;
//--== Инициализируем работу экземпляра Excel
    CoInitializeEx(nil, COINIT_MULTITHREADED);
    XL.ConnectKind:= ckNewInstance;
    XL.Connect;
    XL.Visible[lcid]:= False;
    //XL.AutoQuit:= False;
    XL.ScreenUpdating[lcid]:= False;
    XL.DisplayAlerts[lcid]:= False;
    XL.Calculation[lcid] := xlManual;
//    XL.AlertBeforeOverwriting[lcid]:= false;
 // отменяем автоматическую проверку ошибок в ячейках
    with XL.ErrorCheckingOptions do begin
      BackgroundChecking := False;
      NumberAsText := False;
      InconsistentFormula := False;
    end;
    prStopProcess( UserID, ThreadData.ID);
 // открываем  файл  FName
    if Assigned(XL) and (not Assigned(WorkBook)) then begin
      prStopProcess( UserID, ThreadData.ID);
      //TestCssStopException;
      WorkBook := XL.Workbooks.Open (FNameXml,       // 1// const Filename: WideString;
                                     0,              // 2// UpdateLinks: OleVariant;
                                     false,          // 3// ReadOnly: OleVariant;
                                     EmptyParam,     // 4// Format: OleVariant;
                                     EmptyParam,     // 5// Password: OleVariant;
                                     EmptyParam,     // 6// WriteResPassword: OleVariant;
                                     true,           // 7// IgnoreReadOnlyRecommended: OleVariant;
                                     EmptyParam,     // 8// Origin: OleVariant;
                                     5,              // 9// Delimiter: OleVariant;
                                     False,          //10// Editable: OleVariant;
                                     false,          //11// Notify: OleVariant;
                                     EmptyParam,     //12// Converter: OleVariant;
                                     EmptyParam,     //13// Local: OleVariant;
                                     EmptyParam,     //14// CorruptLoad: OleVariant;
                                     false,          //15// AddToMru: OleVariant;
                                     lcid);          //16// lcid: Integer): Workbook; safecall;

    //  WorkBook.CheckCompatibility:= false;
    end;
    //==-- Excel-файл готов к обработке
    prStopProcess( UserID, ThreadData.ID);
    ImpCheck.SetProcessPercent( UserID, ThreadData.ID, 37);
    WorkSheet:= WorkBook.Sheets.Item[1] as Excel_TLB._Worksheet;
    prStopProcess( UserID,{ImpTypeId}ThreadData.ID);        
    Macro:= 'Sub ИзменениеРазмераПримечания()' +#13#10+
    'Application.ScreenUpdating = false' +#13#10+
    'For i = 2 To ActiveSheet.Cells.SpecialCells(xlCellTypeLastCell).Row Step 1' +#13#10+
    'If Cells(i, 5).Text <> "" Then' +#13#10+
    'Cells(i, 5).Comment.Shape.TextFrame.AutoSize = True' +#13#10+
    'Else' +#13#10+
    ' If Cells(i, 4).Text <> "" Then' +#13#10+
    ' Cells(i, 4).Comment.Shape.TextFrame.AutoSize = True' +#13#10+
    ' Else' +#13#10+
    '  If Cells(i, 3).Text <> "" Then' +#13#10+
    '  Cells(i, 3).Comment.Shape.TextFrame.AutoSize = True' +#13#10+
    '  End If' +#13#10+
    '  If Cells(i, 2).Text <> "" Then' +#13#10+
    '  Cells(i, 2).Comment.Shape.TextFrame.AutoSize = True' +#13#10+
    '  End If' +#13#10+    
    'End If' +#13#10+  
    'End If' +#13#10+
    'Next' +#13#10+
    'Application.ScreenUpdating = true' +#13#10+ 
    'End Sub';
    
    //i := XL.VBE.ActiveVBProject.VBComponents.Count;
    For i:= 1 to XL.Workbooks[1].VBProject.VBComponents.Count do begin
         s:= XL.Workbooks[1].VBProject.VBComponents.Item(i).Name;
         If s= ManufacturerName then //'ЭтаКнига' then
            begin   
      //XL.Workbooks[1].VBProject.VBComponents.Item(i).CodeModule.AddFromString( Macro);       
            end;
     end;
     ImpCheck.SetProcessPercent( UserID, ThreadData.ID, 2);   
     XL.Workbooks[1].VBProject.VBComponents.Item(1).CodeModule.AddFromString( Macro);
{ выполнение макроса
XL.Application.Run('ЭтаКнига.Макрос1',EmptyParam, EmptyParam, EmptyParam, EmptyParam, EmptyParam, EmptyParam, EmptyParam,
      EmptyParam, EmptyParam, EmptyParam, EmptyParam, EmptyParam, EmptyParam, EmptyParam,
      EmptyParam, EmptyParam, EmptyParam, EmptyParam, EmptyParam, EmptyParam, EmptyParam,
      EmptyParam, EmptyParam, EmptyParam, EmptyParam, EmptyParam, EmptyParam, EmptyParam,
      EmptyParam, EmptyParam); }   
             
//сохраняем и закрываем  Excel
//XL.Application.DisplayAlerts[LCID]:=False;    //  не предупреждать о том, что макрос в таком расширении не запишется
if pTecDoc then s:= '_NotArticleTecDoc' else s:= '';
     FName:= PathFile+fnFormRepFileName('23_'+StringReplace(ManufacturerName, ' ', '_', [rfReplaceAll]), '.xlsm', ImpCheck.GetCheckKind(UserID, ThreadData.ID));//StringReplace(ManufacturerName, ' ', '_', [rfReplaceAll])+'_AnalogsFree'+FormatDateTime('_dd.mm_(hh.nn)',Now)+s+'.xlsm';
     if FileExists(FName) and not SysUtils.DeleteFile(FName) then
       raise EBOBError.Create('Невозможно удалить предыдущий xlsm-файл.');
     prStopProcess( UserID, ThreadData.ID);
     //TestCssStopException;
     Workbook.CheckCompatibility := False; 
     WorkBook.SaveAs(FName,               // 1//  const Filename: WideString;
     xlOpenXMLWorkbookMacroEnabled,       // 2//  FileFormat: OleVariant;
     EmptyParam,                          // 3//  Password: OleVariant;
     EmptyParam,                          // 4//  WriteResPassword: OleVariant;
     false,                               // 5//  ReadOnlyRecommended: OleVariant;
     false,                               // 6//  CreateBackup: OleVariant;
     xlNoChange{xlExclusive},             // 7//  AccessMode: OleVariant;
     EmptyParam,                          // 8//  ConflictResolution: OleVariant;
     false,                               // 9//  AddToMru: OleVariant;
     EmptyParam,                          //10//  TextCodepage: OleVariant;
     EmptyParam,                          //11//  TextVisualLayout: OleVariant;
     EmptyParam,                          //12//  Local: OleVariant;
     LCID);                               //13//  lcid: OleVariant
     prStopProcess( UserID, ThreadData.ID);

     ImpCheck.SetProcessPercent( UserID, ThreadData.ID, 50);   
{ 
FName:=PathFile+StringReplace(ManufacturerName, ' ', '_', [rfReplaceAll])+'_AnalogsFree'+FormatDateTime('_dd.mm_(hh.nn)',Now)+'.xlsx';
    if FileExists(FName) then
      if not SysUtils.DeleteFile(FName) then
        raise Exception.Create('Невозможно удалить предыдущий xlsx-файл.');
        
WorkBook.SaveAs(FName, xlOpenXMLWorkbook,'','',false,false,xlShared,
EmptyParam,EmptyParam,EmptyParam,EmptyParam,EmptyParam,LCID);  }
//prMessageLOGS('Сохранили xlsm-файл '+': - '+
//        FloatToStr(RoundTo((Now-LocalStart)*60*60*24,-5))+' сек','Log_prg.log' , false);
//XL.Application.DisplayAlerts[LCID]:=True;
         
    Subj:= ManufacturerName+'. Аналоги в GrossBee и по оригинальным номерам от '+FormatDateTime(cDateTimeFormatY2S, Now());
    ContentType:= XMLContentType;
    lstBodyMail:= TStringList.Create;
    if not pAll then
    lstBodyMail.Add('Внимание! Данные ограничены размером файла. Следующую порцию можно получить только после обработки файла и импорта в базу.'); 
    lstBodyMail.Add(' В приложенном файле по производителю '+ManufacturerName+':');
    lstBodyMail.Add('    товаров = '+IntToStr(countWare));
    lstBodyMail.Add('    аналогов в GrossBee = '+IntToStr(countGB));
    lstBodyMail.Add('    аналогов по оригинальным номерам = '+IntToStr(countON));
(*    lstBodyMail.Add(' ');
    lstBodyMail.Add(' ');
    lstBodyMail.Add(' ');
    lstBodyMail.Add('Начало выполнения: '+FormatDateTime(cDateTimeFormatTSnD, timerStart));
    lstBodyMail.Add('Завершение выполнения: '+ FormatDateTime(cDateTimeFormatTSnD,Now));
    lstBodyMail.Add('Общее время выполнения: '+ FormatDateTime('hh:nn:ss',Now-timerStart));  *)  
  finally   // 1
    WorkBook.Close(false,EmptyParam,EmptyParam,lcid);
    XL.Quit;// закрыть Excel
    XL.Disconnect;
    CoUnInitialize;
    prFree(XL);
    if FileExists(FNamexml) then
      if not SysUtils.DeleteFile(FNamexml) then
        raise EBOBError.Create('Невозможно удалить предыдущий xml-файл.');
  end;  //finally
  finally
    SetLength(AnalogsArr, 0);
    SetLength(ManagerArr,0);
    prFree(FilterData);
    prFree(List);
//    prFree(WareList);
    prFree(CellStylesArray);
 
    ImpCheck.SetProcessPercent( UserID, ThreadData.ID, 3);
//prMessageLOGS('время'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66%
//prMessageLOGS('Общее время'+': - '+
//        FloatToStr(RoundTo((Now-timerStart)*60*60*24,-5))+' сек','Log_prg.log' , false); //66%  
  end;
end;
//--============================================================================================--//
procedure prUpdateGraFiles(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,
   ContentType:string; ThreadData: TThreadData);
var
  XL: TExcelApplication;
  WorkBook: Excel_TLB._Workbook;
  WorkSheet: Excel_TLB._Worksheet;
  usedRng: Range;
  isWarningCell: integer;
  isErrorCell: integer;
  isHeaderCell: integer;

  i, j{, PosBegin, PosEnd}: integer;
  SheetCount: integer;
  SheetID: integer;
  SheetName: string;
  rows: integer;
  recs: integer;
  irow: integer;
  ErrMsg: array of TStringList;
  LogStr: Tas;
  Rang{, TextValue}: string;
  ResCode: integer;
//timer, timerStart: TDateTime;
  PPercent: real;
  FNameI, WareID, ManID, SupID, ArtTD: string;
  FileBMP, FileJPG, Folder, PFbmp, BaseUrl, Path, PathBMP{, NameBMP, NameJPG}: string;
  pIniFile: TINIFile;
  IBORDSQLdel: TIBSQL;
  IBORD: TIBDatabase;
const nmProc = 'prUpdateGraFiles'; // имя процедуры/функции
//      TypeSys = 1;
begin
    
 isHeaderCell := cHexToInt(cnHeaderCell);
 isWarningCell:= cHexToInt(cnYellowCell);
 isErrorCell:= cHEXtoINT(cnRedCell);

 PPercent:= 0; 
 IBORDSQLdel:= nil;
 IBORD:= nil;
 
  try   //1
  pIniFile:= TINIFile.Create(nmIniFileBOB); 
  BaseUrl:= pIniFile.ReadString('Options', 'warefiles', '');  
  Path:= BaseUrl+'\tdfiles\';
  PathBMP:= BaseUrl+'\tdfilesBMP\';
  if not DirectoryExists(BaseUrl+'\tdfilesBMP') then CreateDir(BaseUrl+'\tdfilesBMP');

    IBORD:= cntsORD.GetFreeCnt;
//    if not Assigned(IBORD) then exit;  
      IBORDSQLdel:= fnCreateNewIBSQL(IBORD, 'SQLdel_'+nmProc, -1, tpWrite, true);
      IBORDSQLdel.SQL.Text:= 'delete from LINKWAREGRAFILES where  '+
      #10+' LWGFWGFCODE= (SELECT WGFCODE FROM WAREGRAFILES where trim(WGFFILENAME)=trim(:FNameBMP)and WGFSUPTD= :Sup_ID)'+
      #10+' and LWGFWAREID=(SELECT WATDWARECODE FROM WAREARTICLETD where WATDWRONG="F" and WATDWARECODE=:WareID and WATDARTSUP=:Sup_MF )';
      IBORDSQLdel.Prepare;
      IBORDSQLdel.ParamByName('FNameBMP').AsString:= FileBMP;
      IBORDSQLdel.ParamByName('Sup_ID').AsString:= SupID;
      IBORDSQLdel.ParamByName('WareID').AsString:= WareID;
      IBORDSQLdel.ParamByName('Sup_MF').AsString:= ManID;
      
    prStopProcess( UserID, ThreadData.ID);
    //TestCssStopException; 
    XL:= TExcelApplication.Create(nil);
    WorkBook:= nil;
//--== Инициализируем работу экземпляра Excel
    CoInitializeEx(nil, COINIT_MULTITHREADED);
    XL.ConnectKind:= ckNewInstance;
    XL.Connect;
    XL.Visible[lcid]:= False;
    //XL.AutoQuit:= False;
    XL.ScreenUpdating[lcid]:= False;
    XL.DisplayAlerts[lcid]:= False;
    XL.Calculation[lcid] := xlManual;
//    XL.AlertBeforeOverwriting[lcid]:= false;
 // отменяем автоматическую проверку ошибок в ячейках
    with XL.ErrorCheckingOptions do begin
      BackgroundChecking := False;
      NumberAsText := False;
      InconsistentFormula := False;
    end;
    prStopProcess( UserID, ThreadData.ID);
    //TestCssStopException; 
    if copy(FName, length(FName)-5+1,5)='.xlsx' then
      prAutoFilterXLSX(FName);
 // открываем импортируемый файл
    if Assigned(XL) and (not Assigned(WorkBook)) then begin
      prStopProcess( UserID, ThreadData.ID);
      //TestCssStopException;
//FName:='D:\Projects\full server\Server\DublPictchVV.xlsx';      
      WorkBook := XL.Workbooks.Open (FName,     // 1// const Filename: WideString;
                                     0,              // 2// UpdateLinks: OleVariant;
                                     false,          // 3// ReadOnly: OleVariant;
                                     EmptyParam,     // 4// Format: OleVariant;
                                     EmptyParam,     // 5// Password: OleVariant;
                                     EmptyParam,     // 6// WriteResPassword: OleVariant;
                                     true,           // 7// IgnoreReadOnlyRecommended: OleVariant;
                                     EmptyParam,     // 8// Origin: OleVariant;
                                     5,              // 9// Delimiter: OleVariant;
                                     False,          //10// Editable: OleVariant;
                                     false,          //11// Notify: OleVariant;
                                     EmptyParam,     //12// Converter: OleVariant;
                                     EmptyParam,     //13// Local: OleVariant;
                                     EmptyParam,     //14// CorruptLoad: OleVariant;
                                     false,          //15// AddToMru: OleVariant;
                                     lcid);          //16// lcid: Integer): Workbook; safecall;

    //  WorkBook.CheckCompatibility:= false;
    end;
//==-- импортируемый Excel-файл готов к обработке  
      SetLength(ErrMsg,0);
      SetLength(LogStr,0);
      SheetCount:= WorkBook.Worksheets.Count; //количество листов excel
      SheetID:= 1;
      SetLength(ErrMsg, SheetCount);      
      while SheetID <= SheetCount do begin
        ErrMsg[SheetID-1]:= TStringList.Create;        
        WorkSheet:= WorkBook.Sheets.Item[SheetID] as Excel_TLB._Worksheet;
        SheetName:= AnsiUpperCase(WorkSheet.Name);
        //перевод указателя на последнюю используемую ячейку листа
        usedRng:= WorkSheet.Range['A1', EmptyParam].SpecialCells(xlCellTypeLastCell,EmptyParam);
        rows:= usedRng.Row;
          if rows>1 then begin 
//            irow:= 2;
            for irow:= 2 to 10{rows} do begin
              usedRng:= WorkSheet.Range['A'+IntToStr(irow), EmptyParam];   //
              if fnOleXLCellReader(usedRng.Value2)<>'' then begin
                WareID:= fnOleXLCellReader(usedRng.Value2);
                usedRng:= WorkSheet.Range['B'+IntToStr(irow), EmptyParam];
                if fnOleXLCellReader(usedRng.Value2)<>'' then
                ManID:= fnOleXLCellReader(usedRng.Value2);
                usedRng:= WorkSheet.Range['C'+IntToStr(irow), EmptyParam];
                if fnOleXLCellReader(usedRng.Value2)<>'' then
                SupID:= fnOleXLCellReader(usedRng.Value2);
                usedRng:= WorkSheet.Range['E'+IntToStr(irow), EmptyParam];
                if fnOleXLCellReader(usedRng.Value2)<>'' then
                ArtTD:= fnOleXLCellReader(usedRng.Value2);
                usedRng:= WorkSheet.Range['F'+IntToStr(irow), EmptyParam];
                if fnOleXLCellReader(usedRng.Value2)<>'' then
                FileJPG:= fnOleXLCellReader(usedRng.Value2);              
                usedRng:= WorkSheet.Range['G'+IntToStr(irow), EmptyParam];
                if fnOleXLCellReader(usedRng.Value2)<>'' then
                FileBMP:= fnOleXLCellReader(usedRng.Value2);   
                usedRng:= WorkSheet.Range['H'+IntToStr(irow), EmptyParam];
                if fnOleXLCellReader(usedRng.Value2)<>'' then
                Folder:= fnOleXLCellReader(usedRng.Value2);   
                usedRng:= WorkSheet.Range['K'+IntToStr(irow), EmptyParam];
                if fnOleXLCellReader(usedRng.Value2)<>'' then
                PFbmp:= fnOleXLCellReader(usedRng.Value2);              
                // delete link
                if not DirectoryExists(PathBMP+Folder) then CreateDir(PathBMP+Folder);  
                (*NameJPG:= Path+Folder+'\'+ FileJPG; 
                if FileExists(NameJPG) then
                if not FileExists(PathBMP+Folder+'\'+ FileJPG) then //FileExists(PathBMP+Folder+'\vlad_'+ stringreplace(FileBMP,'.bmp','.jpg',[rfReplaceAll, rfIgnoreCase])) then 
                  //CopyFile(PChar(NameJPG),PChar(PathBMP+Folder+'\'+ FileJPG){PChar(PathBMP+Folder+'\vlad_'+ stringreplace(FileBMP,'.bmp','.jpg',[rfReplaceAll, rfIgnoreCase]))}, true);
                  try
                    RenameFile(NameJPG, PathBMP+Folder+'\'+ FileJPG);
                  except
                    on E: Exception do begin
                      ErrMsg[SheetID-1].AddObject('Ошибка '#9+'Не удалось перенести файл '+'\'+FileJPG+ #10+#9+SheetName+#9+Rang+IntToStr(irow),
                      pointer(-1*100000-irow));
                      WorkSheet.Range[Rang+IntToStr(irow), EmptyParam].Interior.Color:= isErrorCell;
                      inc(ErrCount);  
                    end;
                  end;
                *)  
(*19.07                NameJPG:= Path+Folder+'\vlad_'+ FileJPG; 
                if FileExists(NameJPG) then
                if not FileExists(PathBMP+Folder+'\vlad_'+ FileJPG) then //FileExists(PathBMP+Folder+'\vlad_'+ stringreplace(FileBMP,'.bmp','.jpg',[rfReplaceAll, rfIgnoreCase])) then 
                  //CopyFile(PChar(NameJPG),PChar(PathBMP+Folder+'\vlad_'+ FileJPG){PChar(PathBMP+Folder+'\vlad_'+ stringreplace(FileBMP,'.bmp','.jpg',[rfReplaceAll, rfIgnoreCase]))}, true);           
                  try
                    if not RenameFile(NameJPG, PathBMP+Folder+'\vlad_'+ FileJPG) then begin
                      ErrMsg[SheetID-1].AddObject('Ошибка '#9+'Не удалось перенести файл '+'vlad_'+FileJPG+ #10+#9+SheetName+#9+Rang+IntToStr(irow),
                      pointer(-3*100000-irow));
                      //WorkSheet.Range[Rang+IntToStr(irow), EmptyParam].Interior.Color:= isErrorCell;
                      inc(ErrCount);
                    end;
                  except
                    on E: Exception do begin
                      ErrMsg[SheetID-1].AddObject('Ошибка '#9+'Не удалось перенести файл '+'\vlad_'+FileJPG+ #10+#9+SheetName+#9+Rang+IntToStr(irow),
                      pointer(-3*100000-irow));
                      //WorkSheet.Range[Rang+IntToStr(irow), EmptyParam].Interior.Color:= isErrorCell;
                      inc(ErrCount);  
                    end;
                  end;
                  
                NameBMP:= Path+Folder+'\'+ FileBMP;
                if FileExists(NameBMP) then
                if not FileExists(PathBMP+Folder+'\'+ FileBMP) then //FileExists(PathBMP+Folder+'\vlad_'+ stringreplace(FileBMP,'.bmp','.jpg',[rfReplaceAll, rfIgnoreCase])) then 
                  //CopyFile(PChar(NameBMP),PChar(PathBMP+Folder+'\'+ FileBMP){PChar(PathBMP+Folder+'\vlad_'+ stringreplace(FileBMP,'.bmp','.jpg',[rfReplaceAll, rfIgnoreCase]))}, true);
                  try
                    if not RenameFile(NameBMP, PathBMP+Folder+'\'+ FileBMP) then begin
                      ErrMsg[SheetID-1].AddObject('Ошибка '#9+'Не удалось перенести файл '+FileBMP+ #10+#9+SheetName+#9+Rang+IntToStr(irow),
                      pointer(-5*100000-irow));
                      //WorkSheet.Range[Rang+IntToStr(irow), EmptyParam].Interior.Color:= isErrorCell;
                      inc(ErrCount);
                    end;
                  except
                    on E: Exception do begin
                      ErrMsg[SheetID-1].AddObject('Ошибка '#9+'Не удалось перенести файл '+FileBMP+ #10+#9+SheetName+#9+Rang+IntToStr(irow),
                      pointer(-5*100000-irow));
                      //WorkSheet.Range[Rang+IntToStr(irow), EmptyParam].Interior.Color:= isErrorCell;
                      inc(ErrCount);  
                    end;
                  end;
                NameBMP:= Path+Folder+'\vlad_'+ stringreplace(FileBMP,'.bmp','.jpg',[rfReplaceAll, rfIgnoreCase]);
                if FileExists(NameBMP) and (AnsiUpperCase(NameBMP)<>AnsiUpperCase(NameJPG)) then
                if not FileExists(PathBMP+Folder+'\vlad_'+ stringreplace(FileBMP,'.bmp','.jpg',[rfReplaceAll, rfIgnoreCase])) then 
                  //CopyFile(PChar(NameBMP),PChar(PathBMP+Folder+'\vlad_'+ stringreplace(FileBMP,'.bmp','.jpg',[rfReplaceAll, rfIgnoreCase])), true);  
                  try
                    if not RenameFile(NameBMP, PathBMP+Folder+'\vlad_'+ stringreplace(FileBMP,'.bmp','.jpg',[rfReplaceAll, rfIgnoreCase])) then begin
                      ErrMsg[SheetID-1].AddObject('Ошибка '#9+'Не удалось перенести файл '
                      +'vlad_'+ stringreplace(FileBMP,'.bmp','.jpg',[rfReplaceAll, rfIgnoreCase])+#10+#9+SheetName+#9+Rang+IntToStr(irow),
                      pointer(-7*100000-irow));
                      //WorkSheet.Range[Rang+IntToStr(irow), EmptyParam].Interior.Color:= isErrorCell;
                      inc(ErrCount);
                    end;
                  except
                    on E: Exception do begin
                      ErrMsg[SheetID-1].AddObject('Ошибка '#9+'Не удалось перенести файл '
                      +'vlad_'+ stringreplace(FileBMP,'.bmp','.jpg',[rfReplaceAll, rfIgnoreCase])+#10+#9+SheetName+#9+Rang+IntToStr(irow),
                      pointer(-7*100000-irow));
                      //WorkSheet.Range[Rang+IntToStr(irow), EmptyParam].Interior.Color:= isErrorCell;
                      inc(ErrCount);  
                    end;
                  end; 19.07*)
                try
                  try
                    IBORDSQLdel.ParamByName('FNameBMP').AsString:= FileBMP;
                    IBORDSQLdel.ParamByName('Sup_ID').AsString:= SupID;
                    IBORDSQLdel.ParamByName('WareID').AsString:= WareID{+'_'};
                    IBORDSQLdel.ParamByName('Sup_MF').AsString:= ManID;
                    if not IBORDSQLdel.Transaction.InTransaction then IBORDSQLdel.Transaction.StartTransaction;
                    IBORDSQLdel.ExecQuery;
                    IBORDSQLdel.Transaction.Commit;    
                  except
                    on E: Exception do begin
                      ErrMsg[SheetID-1].AddObject('Ошибка '#9+'Не удалось удалить связку. '#10+#9+SheetName+#9+Rang+IntToStr(irow),
                      pointer(-9*100000-irow));
                      //WorkSheet.Range[Rang+IntToStr(irow), EmptyParam].Interior.Color:= isErrorCell;
  //                    inc(ErrCount);
                    end;
                  end;  
                finally
                  prFreeIBSQL(IBORDSQLdel);
                end;                           
              end; // if fnOleXLCellReader(usedRng.Value2)<>'' then begin
            end; //for irow:=2 to 10{rows} do begin
            inc(SheetID);
          end //if rows>1 then begin
          else inc(SheetID);
      end;  // while SheetID <= SheetCount
      
      // Добавим один новый лист после 
   
      XL.ActiveWorkbook.Sheets.Add(EmptyParam, WorkBook.Sheets.Item[WorkBook.Sheets.Count], 1, xlWorksheet, lcid);
      WorkSheet:= WorkBook.Sheets.Item[WorkBook.Sheets.Count] as Excel_TLB._Worksheet;
      WorkSheet.Name:= 'Импорт от'+FormatDateTime(' dd.mm hh_nn ',Now);
    
      recs:= 1;      
    //-=создаем шапку для лога импорта

      WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= 'Статус  сообщения';
      WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= 'Лист';
      WorkSheet.Range['C'+IntToStr(recs), EmptyParam].Value2:= '   Строка   ';
      WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= 'Сообщение';
      usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
      usedRng.EntireRow.RowHeight:= usedRng.EntireRow.RowHeight*2;
      usedRng.Interior.Color:= isHeaderCell;
      usedRng.Font.Color:= cHEXtoINT(cnHeaderText);
      usedRng.Font.Bold:= True;
      usedRng.HorizontalAlignment:= xlCenter;
      usedRng.VerticalAlignment:= xlCenter;
      usedRng.Borders.Color:= cHEXtoINT(cnHeaderBorder);
      usedRng.BorderAround(xlContinuous, xlHairLine, xlColorIndexAutomatic, EmptyParam, EmptyParam);
      XL.ActiveWindow.SplitRow:= 1;
      XL.ActiveWindow.FreezePanes := True;
      prStopProcess( UserID, ThreadData.ID);
      //TestCssStopException; 
  //=-шапка создана
      inc(recs);
            
      for j := 0 to High(ErrMsg) do begin
        ErrMsg[j].CustomSort(@SizeCustomSort);
        rows:= ErrMsg[j].Count;
        
        for i := 0 to rows-1 do begin
         //prStopProcess( UserID, ThreadData.ID);
         //TestCssStopException;
        //  ErrMsg[j][i]:=IntToStr(j)+'|'+IntToStr(integer(ErrMsg[j].Objects[i]))+'|'+ErrMsg[j][i];
//          LogStr:= SplitString(ErrMsg[j].Strings[i]);
          LogStr:= fnSplitStringChar(ErrMsg[j].Strings[i]);   
          ResCode:= trunc((integer(ErrMsg[j].Objects[i]))/100000);
          Case ResCode of
            -11..-10: begin
              WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
              WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
              usedRng:= WorkSheet.Range['C'+IntToStr(recs),EmptyParam];
              usedRng.Value2:= LogStr[3];
              WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam, EmptyParam,
                EmptyParam);
              WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
              usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
              usedRng.Interior.Color:= isWarningCell;
            end;
            -9..-1: begin
              WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
              WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
              usedRng:= WorkSheet.Range['C'+IntToStr(recs),EmptyParam];
              usedRng.Value2:= LogStr[3];
              WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam,EmptyParam,
                EmptyParam);
              WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
              usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
              usedRng.Interior.Color:= isErrorCell;
            end;
           (* 1..2: begin
              WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
              WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
              usedRng:= WorkSheet.Range['B'+IntToStr(recs), EmptyParam];
              usedRng.Value2:= LogStr[2];      //Excel.ActiveSheet.Hyperlinks.Add(Excel.ActiveWorkBook.WorkSheets[1].Cells[k,1],Excel.ActiveWorkBook.WorkSheets[1].Cells[k,1]);
              WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam,EmptyParam,
                EmptyParam);
              WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
              usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
              usedRng.Interior.Color:= isGreenCell;
            end; *)
          end;
          inc (recs);
          ImpCheck.SetProcessPercent( UserID, ThreadData.ID, PPercent);
        end;  //i

      end; //j

      usedRng:= WorkSheet.Range['A1', 'D'+IntToStr(recs-1)];
      usedRng.WrapText:= False;
      usedRng.EntireRow.AutoFit;
      usedRng.EntireColumn.AutoFit;
      prStopProcess( UserID, ThreadData.ID);      
      //TestCssStopException; 
      //ImpCheck.SetProcessPercent( UserID, ThreadData.ID, 30);      

  finally   // 1
    if assigned(IBORDSQLdel) then prFreeIBSQL(IBORDSQLdel);
    if assigned(IBORD) then cntsORD.SetFreeCnt(IBORD, True);
    Workbook.CheckCompatibility := False;
    WorkBook.Save(lcid);
    WorkBook.Close(false,EmptyParam,EmptyParam,lcid);
//    XL.Workbooks.Close(lcid);
    XL.Quit;// закрыть Excel
    XL.Disconnect;
    CoUnInitialize;
    prFree(XL);
    FNameI:= ExtractFilePath(FName)+fnFormRepFileName(IntToStr(ImpCheck.GetImpType(UserID, ThreadData.ID)), FName, constOpImport);                 
    RenameFile(FName, FNameI);
    FName:= FNameI;
//FN:= fnFormRepFileName('23_'+ImpCheck.GetCheckComment(UserID, ThreadData.ID),ExtractFileName(FName),constOpImport);   //ImpCheck.GetCheckComment()
//PF:= ExtractFilePath(FName);
//RenameFile(FName, ExtractFilePath(FName)+fnFormRepFileName('23_',ExtractFileName(FName),constOpImport));
//FName:= ExtractFilePath(FName)+fnFormRepFileName('23_',ExtractFileName(FName),constOpImport);
    SetLength(LogStr, 0);
    for i:= 0 to High(ErrMsg) do begin
      if ErrMsg[i] <> nil then prFree (ErrMsg[i]);
    end;
    SetLength(ErrMsg,0);
    prFree(pIniFile);  

  end;  //finally
end;
//==============================================================================
procedure prImportAnalogs(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,    // импорт 35
   ContentType:string; ThreadData: TThreadData);
const  nmProc='prImport'   ;
var XL: TExcelApplication;
    WorkBook: Excel_TLB._Workbook;
    WorkSheet: Excel_TLB._Worksheet;
    isGreenCell: integer;
    isWarningCell: integer;
    isErrorCell: integer;
    isHeaderCell: integer;
    usedRng: Range;   
    ErrMsg: array of TStringList;
    LogStr: Tas;
    MsgStr: string;
    WareID, CrossID: integer;
    i, j, k, n, ErrCount: integer; 
    rows, cols, irow, {icol, }recs: integer;
    SheetCount, SheetID: integer;
    ss,SheetName: string;
    FNameI, WareName, AName: string;
    ManWaresList, AWaresList: TStringList;
    LinkAdd, LinkWrong, ResCode: integer;
ErrPos: integer;   
Percent: real; 
begin
 isGreenCell := cHexToInt(cnGreenCell);
 isHeaderCell := cHexToInt(cnHeaderCell);
 isWarningCell:= cHexToInt(cnYellowCell);
 isErrorCell:= cHEXtoINT(cnRedCell);
 LinkAdd:= 0;
 LinkWrong:= 0;
 ErrCount:=0;
 ManWaresList:=nil;
 ss:='';
  try   //1
    ManWaresList:= Cache.GetSysManagerWares(0, UserID);
    AWaresList:= Cache.GetSysManagerWares();
    if ManWaresList.Count<1 then EBOBError.Create('У менеджера '+Cache.arEmplInfo[UserID].EmplShortName+' нет товаров'); 
//    prStopProcess( UserID, ThreadData.ID);
    //TestCssStopException; 
ErrPos:= 1;    
try    
    XL:= TExcelApplication.Create(nil);
    WorkBook:= nil;
//--== Инициализируем работу экземпляра Excel
    CoInitializeEx(nil, COINIT_MULTITHREADED);
    XL.ConnectKind:= ckNewInstance;
    XL.Connect;
    XL.Visible[lcid]:= False;
    //XL.AutoQuit:= False;
    XL.ScreenUpdating[lcid]:=False;
    XL.DisplayAlerts[lcid]:= False;
    XL.Calculation[lcid] := xlManual;
//    XL.AlertBeforeOverwriting[lcid]:= false;
 // отменяем автоматическую проверку ошибок в ячейках
    with XL.ErrorCheckingOptions do begin
      BackgroundChecking := False;
      NumberAsText := False;
      InconsistentFormula := False;
    end;
//    prStopProcess( UserID, ThreadData.ID);
    //TestCssStopException; 
    if copy(FName, length(FName)-5+1,5)='.xlsx' then
      prAutoFilterXLSX(FName);
 // открываем импортируемый файл
    if Assigned(XL) and (not Assigned(WorkBook)) then begin
//      prStopProcess( UserID, ThreadData.ID);
      //TestCssStopException;
      WorkBook := XL.Workbooks.Open (FName,     // 1// const Filename: WideString;
                                     0,              // 2// UpdateLinks: OleVariant;
                                     false,          // 3// ReadOnly: OleVariant;
                                     EmptyParam,     // 4// Format: OleVariant;
                                     EmptyParam,     // 5// Password: OleVariant;
                                     EmptyParam,     // 6// WriteResPassword: OleVariant;
                                     true,           // 7// IgnoreReadOnlyRecommended: OleVariant;
                                     EmptyParam,     // 8// Origin: OleVariant;
                                     5,              // 9// Delimiter: OleVariant;
                                     False,          //10// Editable: OleVariant;
                                     false,          //11// Notify: OleVariant;
                                     EmptyParam,     //12// Converter: OleVariant;
                                     EmptyParam,     //13// Local: OleVariant;
                                     EmptyParam,     //14// CorruptLoad: OleVariant;
                                     false,          //15// AddToMru: OleVariant;
                                     lcid);          //16// lcid: Integer): Workbook; safecall;
//ErrPos:=2;                                     
      try

        SetLength(ErrMsg,0);
        SetLength(LogStr,0);
        lstBodyMail:= TStringList.Create;
        SheetCount:= WorkBook.Worksheets.Count; //количество листов excel
        SetLength(ErrMsg, SheetCount);
        SheetID:= 1;
Percent:= 10;        
ImpCheck.SetProcessPercent( UserID, ThreadData.ID, Percent);        
        while SheetID <= SheetCount do begin
          ErrMsg[SheetID-1]:= TStringList.Create;        
          WorkSheet:= WorkBook.Sheets.Item[SheetID] as Excel_TLB._Worksheet;
          SheetName:= AnsiUpperCase(WorkSheet.Name);
          ImpCheck.SetComment( UserID, ThreadData.ID, SheetName); 
//          prStopProcess( UserID, ThreadData.ID);
          //TestCssStopException;        
          //перевод указателя на последнюю используемую ячейку листа
          usedRng:= WorkSheet.Range['A1', EmptyParam].SpecialCells(xlCellTypeLastCell,EmptyParam);
          rows:= usedRng.Row;   
          cols:= usedRng.Column;
          if cols<2 then begin
            //raise EBOBError.Create('Не указаны аналоги.Проверьте файл для импорта аналогов.');
            ErrMsg[SheetID-1].AddObject('Ошибка '#9+'Лист '+IntToStr(SheetID)+'. Не указаны товары.'+#9+SheetName+{#9+MsgStr+}#9+'A1',
                                         pointer(-15*100000-cols));
            WorkSheet.Range['A1', EmptyParam].Interior.Color:= isErrorCell;
            inc(ErrCount);
            inc(SheetID);
          end
          else if rows>0 then begin 
//ErrPos:=3;  
            Percent:= 80;
            if rows>0 then Percent:= Percent/rows else ImpCheck.SetProcessPercent( UserID, ThreadData.ID, Percent);        
            for irow:= 1 to rows do begin                                         // по строкам**************
              prStopProcess( UserID, ThreadData.ID);
              usedRng:= WorkSheet.Range['A'+IntToStr(irow), EmptyParam];
              AName:= fnOleXLCellReader(VarToStr(usedRng.Value2));
              AName:= StringReplace(AName, cWebSpace, ' ', [rfReplaceAll]);
              AName:= ConvertKod(AName,#160,#32);
              if AName<>'' then begin
              //поверяем правильность наименования и принадлежности товара
                k:= ManWaresList.IndexOf(AName); //AWaresList.IndexOf(AName); по письму Андрея от 6,02,2015
                if k > -1 then begin
                  CrossID:= integer(ManWaresList.Objects[k]);  //integer(AWaresList.Objects[k]); по письму Андрея от 6,02,2015
                  if Cache.arWareInfo[CrossID].IsWare then 
(* 130715                   if Cache.arWareInfo[CrossID].IsINFOgr then begin
                      ErrMsg[SheetID-1].AddObject('Ошибка '#9+'Аналог "'+AName+'" - это товар из инфо-группы.'+#9+SheetName+{#9+MsgStr+}#9+'A'+IntToStr(irow),
                                             pointer(-13*100000-irow));
                      WorkSheet.Range['A'+IntToStr(irow), EmptyParam].Interior.Color:= isErrorCell;
                      inc(ErrCount);
                    end else*)
                    for j:= 1 to cols-1 do begin
                      usedRng:= WorkSheet.Range[IntToABC(j)+IntToStr(irow), EmptyParam];
                      WareName:= fnOleXLCellReader(VarToStr(usedRng.Value2));
                      WareName:= StringReplace(WareName, cWebSpace, ' ', [rfReplaceAll]);
                      WareName:= ConvertKod(WareName,#160,#32);
                      if (WareName<>'') then begin
                        if (WareName = AName) then begin
                          ErrMsg[SheetID-1].AddObject('Ошибка '#9+'Аналог "'+AName+'" Товар и аналог совпадают.'+#9+SheetName+{#9+MsgStr+}#9+IntToABC(j)+IntToStr(irow),
                                           pointer(-13*100000-irow));
                          WorkSheet.Range[IntToABC(j)+IntToStr(irow), EmptyParam].Interior.Color:= isErrorCell;
                          inc(ErrCount);
                        end
                        else begin
                          n:= AWaresList.IndexOf(WareName);//ManWaresList.IndexOf(WareName);   по письму Андрея от 6,02,2015
                          if n > -1 then  begin
                            WareID:= integer(AWaresList.Objects[n]);//integer(ManWaresList.Objects[n]); по письму Андрея от 6,02,2015
                            if Cache.arWareInfo[WareID].IsWare then
                            begin   
                                ResCode:= 1;
                                MsgStr:= Cache.CheckWareCrossLink(WareID, CrossID, ResCode, soExcel,UserID);
//ErrPos:=4;                                
                                Case ResCode of
                                  resError: begin
                                      ErrMsg[SheetID-1].AddObject('Ошибка '#9+'Аналог "'+AName+'" не удалось  '+
                                        'добавить в связку к товару "'+WareName+'": '+MsgStr+#10+#9+SheetName+#9+IntToABC(j)+IntToStr(irow),
                                        pointer(-9*100000-irow));
                                      WorkSheet.Range[IntToABC(j)+IntToStr(irow), EmptyParam].Interior.Color:= isErrorCell;
                                      inc(ErrCount);
                                      end;
                                  resDoNothing: begin
                                      ErrMsg[SheetID-1].AddObject('Внимание'#9+'Товар "' +AName+'" уже '+
                                        'указан как аналог товара"' +WareName+'" '#10+#9+
                                      SheetName+#9+IntToABC(j)+IntToStr(irow), pointer(-11*100000-irow));
                                      //inc(NotEditLink2Count);
                                      WorkSheet.Range[IntToABC(j)+IntToStr(irow), EmptyParam].Interior.Color:= isGreenCell;
                                      end;
                                  resAdded: begin
                                      inc(LinkAdd);
                                      WorkSheet.Range[IntToABC(j)+IntToStr(irow), EmptyParam].Interior.Color:= isGreenCell;
                                      end;  //resAdded
                                end;
                            end   //if Cache.arWareInfo[WareID].IsWare then
                            else begin
                              ErrMsg[SheetID-1].AddObject('Ошибка '#9+'"'+WareName+'" не указан как товар.'+#9+SheetName+{#9+MsgStr+}#9+IntToABC(j)+IntToStr(irow),
                                             pointer(-13*100000-irow));
                              WorkSheet.Range[IntToABC(j)+IntToStr(irow), EmptyParam].Interior.Color:= isErrorCell;
                              inc(ErrCount);    
                            end;  
                          end  //if n > -1 then  begin
                          else begin
                            ErrMsg[SheetID-1].AddObject('Ошибка '#9+'"'+WareName+'" не найден в списке товаров.'+#9+SheetName+{#9+MsgStr+}#9+'A'+IntToStr(irow),
//6,02,2015                            ErrMsg[SheetID-1].AddObject('Ошибка '#9+'В списке ваших товаров наименование"'+WareName+'" не обнаружено.'+#9+SheetName+{#9+MsgStr+}#9+'A'+IntToStr(irow),
                                pointer(-3*100000-irow));
                            WorkSheet.Range['A'+IntToStr(irow), EmptyParam].Interior.Color:= isErrorCell;
                            inc(ErrCount);
                          end;
                        end; //else (WareName = AName)
                      end; //if (WareName<>'') then begin
                    end  //if Cache.arWareInfo[CrossID].IsWare then for j:= 1 to cols-1 do begin
                  else begin
                    ErrMsg[SheetID-1].AddObject('Ошибка '#9+'В списке Ваших товаров наименование"'+AName+'" не обнаружено.'+#9+SheetName+{#9+MsgStr+}#9+'A'+IntToStr(irow),
//6,02,2015                    ErrMsg[SheetID-1].AddObject('Ошибка '#9+'Аналог "'+AName+'" не указан как товар.'+#9+SheetName+{#9+MsgStr+}#9+'A'+IntToStr(irow),
                                 pointer(-13*100000-irow));
                    WorkSheet.Range['A'+IntToStr(irow), EmptyParam].Interior.Color:= isErrorCell;
                    inc(ErrCount);
                  end;
                end   //if k > -1 
                else begin
                  ErrMsg[SheetID-1].AddObject('Ошибка '#9+'В списке товаров наименование "'+AName+'" не обнаружено.'+#9+SheetName+{#9+MsgStr+}#9+'A'+IntToStr(irow),
                                          pointer(-5*100000-irow));
                  WorkSheet.Range['A'+IntToStr(irow), EmptyParam].Interior.Color:= isErrorCell;
                  inc(ErrCount);
                end;
              end;  //if AName<>''  
              ImpCheck.SetProcessPercent( UserID, ThreadData.ID, Percent);       
            end;
            ErrMsg[SheetID-1].AddObject('ИТОГО'#9+'Добавлено аналогов: '+IntToStr(LinkAdd)+#9+SheetName+#9+'A1', pointer(1*100000+2));
            //ErrMsg[SheetID-1].AddObject('ИТОГО'#9+'из них ошибочных: '+IntToStr(LinkWrong)+#9+SheetName+#9+'A1', pointer(1*100000+1));            
            lstBodyMail.Add('Добавлено аналогов: '+IntToStr(LinkAdd));
            //lstBodyMail.Add('из них ошибочных: '+IntToStr(LinkWrong));
            inc(SheetID);// переходим к следующему листу документа
          end 
          else
            inc(SheetID);
        end;
      except  //2
        on E: EStopError do ss:= E.Message;
        on E: Exception do begin
          prMessageLOGS(' '+nmProc+': '+E.Message+ 'ErrPos='+IntToStr(ErrPos), 'Import', false);
        end;  
      end; //except
    end; //if Assigned(XL) and (not Assigned(WorkBook)) then begin
    //Отправка письма
except  
  on E: EStopError do ss:= E.Message;
  on E: Exception do begin
    prMessageLOGS(' '+nmProc+': '+E.Message+ 'ErrPos='+IntToStr(ErrPos), 'Import', false);
  end;  
end; //except 
        // Добавим один новый лист после 
//ErrPos:=5;  
  finally 
        XL.ActiveWorkbook.Sheets.Add(EmptyParam, WorkBook.Sheets.Item[WorkBook.Sheets.Count], 1, xlWorksheet, lcid);
        WorkSheet:= WorkBook.Sheets.Item[WorkBook.Sheets.Count] as Excel_TLB._Worksheet;
        WorkSheet.Name:= 'Импорт от'+FormatDateTime(' dd.mm hh_nn ',Now);
    
        recs:= 1;
      //-=создаем шапку для лога импорта

        WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= 'Статус  сообщения';
        WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= 'Лист';
        WorkSheet.Range['C'+IntToStr(recs), EmptyParam].Value2:= '   Ячейка   ';
        WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= 'Сообщение';
        usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
        usedRng.EntireRow.RowHeight:= usedRng.EntireRow.RowHeight*2;
        usedRng.Interior.Color:= isHeaderCell;
        usedRng.Font.Color:= cHEXtoINT(cnHeaderText);
        usedRng.Font.Bold:= True;
        usedRng.HorizontalAlignment:= xlCenter;
        usedRng.VerticalAlignment:= xlCenter;
        usedRng.Borders.Color:= cHEXtoINT(cnHeaderBorder);
        usedRng.BorderAround(xlContinuous, xlHairLine, xlColorIndexAutomatic, EmptyParam, EmptyParam);
        XL.ActiveWindow.SplitRow:= 1;
        XL.ActiveWindow.FreezePanes := True;
//        prStopProcess( UserID, ThreadData.ID);
        //TestCssStopException; 
    //=-шапка создана
        inc(recs);
        //Percent:= 30;      
        //if High(ErrMsg)>-1 then Percent:= Percent/(High(ErrMsg)+1) else ImpCheck.SetProcessPercent( UserID, ThreadData.ID, Percent);
//ErrPos:=6;
        for j := 0 to High(ErrMsg) do begin
          ErrMsg[j].CustomSort(@SizeCustomSort);
          rows:= ErrMsg[j].Count;
          //if rows> 0 then PPercent:= Percent/(rows) else ImpCheck.SetProcessPercent( UserID, ThreadData.ID, Percent);
          for i := 0 to rows-1 do begin
//           prStopProcess( UserID, ThreadData.ID);
           //TestCssStopException;
          //  ErrMsg[j][i]:=IntToStr(j)+'|'+IntToStr(integer(ErrMsg[j].Objects[i]))+'|'+ErrMsg[j][i];
  //          LogStr:= SplitString(ErrMsg[j].Strings[i]);
            LogStr:= fnSplitStringChar(ErrMsg[j].Strings[i]);   
            ResCode:= trunc((integer(ErrMsg[j].Objects[i]))/100000);
            Case ResCode of
              -15..-14: begin
                WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                usedRng:= WorkSheet.Range['C'+IntToStr(recs),EmptyParam];
                usedRng.Value2:= LogStr[3];
                WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam, EmptyParam,
                  EmptyParam);
                WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
                usedRng.Interior.Color:= isErrorCell;
              end;            
              -13..-12: begin
                WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                usedRng:= WorkSheet.Range['C'+IntToStr(recs),EmptyParam];
                usedRng.Value2:= LogStr[3];
                WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam, EmptyParam,
                  EmptyParam);
                WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
                usedRng.Interior.Color:= isErrorCell;
              end;            
              -11..-10: begin
                WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                usedRng:= WorkSheet.Range['C'+IntToStr(recs),EmptyParam];
                usedRng.Value2:= LogStr[3];
                WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam, EmptyParam,
                  EmptyParam);
                WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
                usedRng.Interior.Color:= isWarningCell;
              end;
              -9..-6: begin
                WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                usedRng:= WorkSheet.Range['C'+IntToStr(recs),EmptyParam];
                usedRng.Value2:= LogStr[3];
                WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam,EmptyParam,
                  EmptyParam);
                WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
                usedRng.Interior.Color:= isErrorCell;
              end;
              -5..-4: begin
                WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                usedRng:= WorkSheet.Range['C'+IntToStr(recs),EmptyParam];
                usedRng.Value2:= LogStr[3];
                WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam,EmptyParam,
                  EmptyParam);
                WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
                usedRng.Interior.Color:= isErrorCell;
              end;              
              -3..-1: begin
                WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                usedRng:= WorkSheet.Range['C'+IntToStr(recs),EmptyParam];
                usedRng.Value2:= LogStr[3];
                WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam,EmptyParam,
                  EmptyParam);
                WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
                usedRng.Interior.Color:= isErrorCell;
              end;              
              1..2: begin
                WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                usedRng:= WorkSheet.Range['B'+IntToStr(recs), EmptyParam];
                usedRng.Value2:= LogStr[2];      //Excel.ActiveSheet.Hyperlinks.Add(Excel.ActiveWorkBook.WorkSheets[1].Cells[k,1],Excel.ActiveWorkBook.WorkSheets[1].Cells[k,1]);
                WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam,EmptyParam,
                  EmptyParam);
                WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
                usedRng.Interior.Color:= isGreenCell;
              end;
            end;
            inc (recs);
            //ImpCheck.SetProcessPercent( UserID, ThreadData.ID, PPercent);
          end;  //i

        end; //j

        usedRng:= WorkSheet.Range['A1', 'D'+IntToStr(recs-1)];
        usedRng.WrapText:= False;
        usedRng.EntireRow.AutoFit;
        usedRng.EntireColumn.AutoFit;
//        prStopProcess( UserID, ThreadData.ID);
        //TestCssStopException; 
        //ImpCheck.SetProcessPercent( UserID, ThreadData.ID, 30);      

(*      except  //2
        on E: Exception do begin
          prMessageLOGS(' '+nmProc+': '+E.Message+ 'ErrPos='+IntToStr(ErrPos), 'Import', false);
        end;  
      end; //except
    end; //if Assigned(XL) and (not Assigned(WorkBook)) then begin
    //Отправка письма
except  
  on E: Exception do begin
    prMessageLOGS(' '+nmProc+': '+E.Message+ 'ErrPos='+IntToStr(ErrPos), 'Import', false);
  end;  
end; //except      *)
    Subj:= WorkBook.Name+' Загрузка аналогов товаров от '+FormatDateTime(cDateTimeFormatY2S, Now());
    ContentType:= XMLContentType;
    if ErrCount = 0 then lstBodyMail.Add(MessText(mtkImportSuccess))     
    else lstBodyMail.Add(MessText(mtkImportError));   
    lstBodyMail.Add(' ');
    if ss<>'' then  lstBodyMail.Add(ss);
    Percent:= 10;        
    ImpCheck.SetProcessPercent( UserID, ThreadData.ID, Percent);    
//  finally
    Workbook.CheckCompatibility := False;
    WorkBook.Save(lcid);
    WorkBook.Close(false,EmptyParam,EmptyParam,lcid);
//    XL.Workbooks.Close(lcid);
    XL.Quit;// закрыть Excel
    XL.Disconnect;
    CoUnInitialize;
    prFree(XL);
    prFree (ManWaresList);
    prFree (AWaresList);
//    FN:= fnFormRepFileName('23_'+ImpCheck.GetCheckComment(UserID, ThreadData.ID),ExtractFileName(FName),constOpImport);   //ImpCheck.GetCheckComment()
//    PF:= ExtractFilePath(FName);
    FNameI:= ExtractFilePath(FName)+fnFormRepFileName(IntToStr(ImpCheck.GetImpType(UserID, ThreadData.ID)), FName, constOpImport);                 
    RenameFile(FName, FNameI);
    FName:= FNameI;
    SetLength(LogStr, 0);
    for i:= 0 to High(ErrMsg) do begin
      if ErrMsg[i] <> nil then prFree (ErrMsg[i]);
    end;
    SetLength(ErrMsg,0);
    ImpCheck.SetProcessPercent( UserID, ThreadData.ID, 9);
    
  end;  
end;  
//--============================================================================================--//
procedure prImportAnalogsFreeLink(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,
   ContentType:string; ThreadData: TThreadData);
const nmProc = 'prImportAnalogsFreeLink'; // имя процедуры/функции   
var
  XL: TExcelApplication;
  WorkBook: Excel_TLB._Workbook;
  WorkSheet: Excel_TLB._Worksheet;                
  usedRng: Range;

  isGreenCell: integer;
  isWarningCell: integer;
  isErrorCell: integer;
  isHeaderCell: integer;

  i, j, PosBegin, PosEnd: integer;
  {k, l,} ModelCode, NodeCode: integer;
  SheetCount: integer;
  SheetID: integer;
  SheetName: string;
  rows: integer;
  recs: integer;
  irow: integer;
  ErrCount: integer;
  err: string;
  ErrMsg: array of TStringList;
  LogStr: Tas;
  MsgStr: string;
  ManufacturerName, ModelLineName, ModelName, NodeName, WareName: string;
  w, WareID, TypeID: integer;
  Rang, TextValue: string;

  LinkAdd, LinkWrong, TextAdd: integer;
  AutoWaresList: TStringList;

  ResCode: integer;
//timer, timerStart: TDateTime;
  Percent, PPercent: real;
  FN, PF: string;
//      TypeSys = 1;
begin
 AutoWaresList:= nil;   
//if (AppStatus in [stSuspending, stExiting]) then ; // CSS-сервер останавливается - надо прервать процесс
 isGreenCell := cHexToInt(cnGreenCell);
 isHeaderCell := cHexToInt(cnHeaderCell);
 isWarningCell:= cHexToInt(cnYellowCell);
 isErrorCell:= cHEXtoINT(cnRedCell);
 i:= 0;
// Percent:= 0;
 PPercent:= 0;  
  try   //1
    prStopProcess( UserID, ThreadData.ID);
    //TestCssStopException; 
    XL:= TExcelApplication.Create(nil);
    WorkBook:= nil;
//--== Инициализируем работу экземпляра Excel
    CoInitializeEx(nil, COINIT_MULTITHREADED);
    XL.ConnectKind:= ckNewInstance;
    XL.Connect;
    XL.Visible[lcid]:= False;
    //XL.AutoQuit:= False;
    XL.ScreenUpdating[lcid]:=False;
    XL.DisplayAlerts[lcid]:= False;
    XL.Calculation[lcid] := xlManual;
//    XL.AlertBeforeOverwriting[lcid]:= false;
 // отменяем автоматическую проверку ошибок в ячейках
    with XL.ErrorCheckingOptions do begin
      BackgroundChecking := False;
      NumberAsText := False;
      InconsistentFormula := False;
    end;
    prStopProcess( UserID, ThreadData.ID);
    //TestCssStopException; 
    if copy(FName, length(FName)-5+1,5)='.xlsx' then
      prAutoFilterXLSX(FName);
 // открываем импортируемый файл
    if Assigned(XL) and (not Assigned(WorkBook)) then begin
      prStopProcess( UserID, ThreadData.ID);
      //TestCssStopException;
      WorkBook := XL.Workbooks.Open (FName,     // 1// const Filename: WideString;
                                     0,              // 2// UpdateLinks: OleVariant;
                                     false,          // 3// ReadOnly: OleVariant;
                                     EmptyParam,     // 4// Format: OleVariant;
                                     EmptyParam,     // 5// Password: OleVariant;
                                     EmptyParam,     // 6// WriteResPassword: OleVariant;
                                     true,           // 7// IgnoreReadOnlyRecommended: OleVariant;
                                     EmptyParam,     // 8// Origin: OleVariant;
                                     5,              // 9// Delimiter: OleVariant;
                                     False,          //10// Editable: OleVariant;
                                     false,          //11// Notify: OleVariant;
                                     EmptyParam,     //12// Converter: OleVariant;
                                     EmptyParam,     //13// Local: OleVariant;
                                     EmptyParam,     //14// CorruptLoad: OleVariant;
                                     false,          //15// AddToMru: OleVariant;
                                     lcid);          //16// lcid: Integer): Workbook; safecall;

    //  WorkBook.CheckCompatibility:= false;
    end;
    prStopProcess( UserID, ThreadData.ID);
    //TestCssStopException; 
    
//==-- импортируемый Excel-файл готов к обработке

    try   //2
      lstBodyMail:= TStringList.Create;
      AutoWaresList:= Cache.GetSysManagerWares(constIsAuto,UserID);

      SetLength(ErrMsg,0);
      SetLength(LogStr,0);
      SheetCount:= WorkBook.Worksheets.Count; //количество листов excel
      SheetID:= 1;
      LinkAdd:= 0;
      LinkWrong:= 0;
      ManufacturerName:= '';
      ModelLineName:= '';
      ModelName:= '';
      NodeName:= '';
      ModelCode:= 0;
      NodeCode:= 0;
      SetLength(ErrMsg, SheetCount);
      Percent:= 50;
      if SheetCount>0 then Percent:= Percent/SheetCount else ImpCheck.SetProcessPercent( UserID, ThreadData.ID, Percent);                                                                 //**********************
      while SheetID <= SheetCount do begin
        ErrMsg[SheetID-1]:= TStringList.Create;        
        WorkSheet:= WorkBook.Sheets.Item[SheetID] as Excel_TLB._Worksheet;
        SheetName:= AnsiUpperCase(WorkSheet.Name);
        ImpCheck.SetComment( UserID, ThreadData.ID, SheetName); 
        prStopProcess( UserID, ThreadData.ID);
        //TestCssStopException;        
        //перевод указателя на последнюю используемую ячейку листа
        usedRng:= WorkSheet.Range['A1', EmptyParam].SpecialCells(xlCellTypeLastCell,EmptyParam);
        rows:= usedRng.Row;
        //Percent:= 50/(rows-1); 
        //ImpCheck.SetProcessPercent( UserID, ThreadData.ID, 11);        

          if rows>1 then PPercent:= Percent/(rows-1) else ImpCheck.SetProcessPercent( UserID, ThreadData.ID, Percent);          
          if rows>1 then begin 
//            irow:= 2;
            for irow:= 2 to rows do begin                                         // по строкам**************
              prStopProcess( UserID, ThreadData.ID);
              //TestCssStopException;
              //if (AppStatus in [stSuspending, stExiting]) then break; // CSS-сервер останавливается - надо прервать процесс
//              usedRng:= WorkSheet.Range['A'+IntToStr(irow), EmptyParam];
//              if fnOleXLCellReader(usedRng.Value2)<>'' then
//              ManufacturerName:= fnOleXLCellReader(usedRng.Value2);
              usedRng:= WorkSheet.Range['A'+IntToStr(irow), EmptyParam];
              if fnOleXLCellReader(usedRng.Value2)<>'' then
              ModelLineName:= fnOleXLCellReader(usedRng.Value2);  
              usedRng:= WorkSheet.Range['B'+IntToStr(irow), EmptyParam];
              if fnOleXLCellReader(usedRng.Value2)<>'' then begin
                ModelName:= fnOleXLCellReader(usedRng.Value2);    
                if ModelName<>'' then begin
                  try
                    PosBegin:= pos('***', ModelName)+3;
                    PosEnd:= pos('***', copy(ModelName,PosBegin,length(ModelName)-PosBegin+1))-1;
                    ModelCode:= StrToIntDef(copy(ModelName,PosBegin,PosEnd), -100500);
                  except
                    on E: Exception do begin
                      err:= E.Message;
                      prMessageLOGS(err+#10+'i = '+IntToStr(irow)+#10+ModelName+#10+' код модели не числовой','Import', false);
                    end;
                  end;
                end; //ModelName<>''
              end; //fnOleXLCellReader(usedRng.Value2)<>''   
              usedRng:= WorkSheet.Range['C'+IntToStr(irow), EmptyParam];
              if fnOleXLCellReader(usedRng.Value2)<>'' then begin
                NodeName:= fnOleXLCellReader(usedRng.Value2);    
                if NodeName<>'' then begin
                  try
                    PosBegin:= pos('***', NodeName)+3;
                    PosEnd:= pos('***', copy(NodeName,PosBegin,length(NodeName)-PosBegin+1))-1;
                    NodeCode:= StrToIntDef(copy(NodeName,PosBegin,PosEnd), -100500);
                  except
                    on E: Exception do begin
                      err:= E.Message;
                      prMessageLOGS(err+#10+'i = '+IntToStr(irow)+#10+NodeName+#10+' код узла не числовой','Import', false);
                    end;
                  end;
                end; //NodeName<>''
              end; //fnOleXLCellReader(usedRng.Value2)<>''  
              WareName:= ''; 
              usedRng:= WorkSheet.Range['E'+IntToStr(irow), EmptyParam];
              if fnOleXLCellReader(usedRng.Value2)<>'' then begin
              WareName:= fnOleXLCellReader(usedRng.Value2);
              Rang:= 'E';
              end
              else begin
              usedRng:= WorkSheet.Range['D'+IntToStr(irow), EmptyParam];
              if fnOleXLCellReader(usedRng.Value2)<>'' then begin
              WareName:= fnOleXLCellReader(usedRng.Value2);
              Rang:= 'D';             
              end;              
              end; 
              if WareName <> '' then begin
                w:= AutoWaresList.IndexOf(WareName);
                if w > -1 then begin
                  prStopProcess( UserID, ThreadData.ID);
                  //TestCssStopException;
                  MsgStr:= AutoWaresList[w];
                  WareID:= integer(AutoWaresList.Objects[w]);//TWareInfo(AutoWaresList.Objects[w]).ID;
                  ResCode:= resAdded;
                  //MsgStr:= Cache.CheckModelNodeWareTextLink(ResCode, ModelCode, NodeCode, WareID, TextValue, TypeID, , UserID, srcID)

                  MsgStr:= Cache.FDCA.CheckWareModelNodeLink(WareID, ModelCode, NodeCode, ResCode, soTecDoc, userID);   // пытаемся сделать связку 3
                  
                  Case ResCode of
                       resError: begin
                            ErrMsg[SheetID-1].AddObject('Ошибка '#9+{'Товар "'+WareName+'"не удалось  '+
                              'добавить в связку. '#10+}MsgStr+#9+SheetName+#9+Rang+IntToStr(irow),
                              pointer(-9*100000-irow));
                            WorkSheet.Range[Rang+IntToStr(irow), EmptyParam].Interior.Color:= isErrorCell;
                            inc(ErrCount);
                            end;
                       resDoNothing: begin
                            ErrMsg[SheetID-1].AddObject('Внимание'#9+{'Товар "' +WareName+'" уже '+
                              'присутсвует в данной "связке 3". '#10+}MsgStr+#9+
                            SheetName+#9+Rang+IntToStr(irow), pointer(-11*100000-irow));
                            //inc(NotEditLink2Count);
                            WorkSheet.Range[Rang+IntToStr(irow), EmptyParam].Interior.Color:= isGreenCell;
                            end;
                       resAdded: begin
                            inc(LinkAdd);
                            WorkSheet.Range[Rang+IntToStr(irow), EmptyParam].Interior.Color:= isGreenCell;
                            end;  //resAdded

                  end;  //case CheckWareModelNodeLink
                  if (ResCode = resAdded) or (ResCode = resDoNothing) then begin 
                    TextValue:= ''; 
                    ResCode:= resAdded;
                    usedRng:= WorkSheet.Range['F'+IntToStr(irow), EmptyParam];
                    if fnOleXLCellReader(usedRng.Value2)<>'' then begin
                      TextValue:= fnOleXLCellReader(usedRng.Value2);
                      if Trim(TextValue)='-1' then begin
                        prStopProcess( UserID, ThreadData.ID);
                        //TestCssStopException; 
                        ResCode:= resWrong;                            
                        MsgStr:= Cache.FDCA.CheckWareModelNodeLink(WareID, ModelCode, NodeCode, ResCode, soTecDoc, userID);   // отмечаем связку 3 как ошибочную
                  
                        Case ResCode of
                             resError: begin
                                  ErrMsg[SheetID-1].AddObject('Ошибка '#9+{'Товар "'+WareName+'"не удалось  '+
                                    'отметить связку как не правильную. '#10+}MsgStr+#9+SheetName+#9+Rang+IntToStr(irow),
                                    pointer(-9*100000-irow));
                                  WorkSheet.Range[Rang+IntToStr(irow), EmptyParam].Interior.Color:= isErrorCell;
                                  inc(ErrCount);
                                  end;
                             (*resDoNothing: begin
                                  ErrMsg[SheetID-1].AddObject('Внимание'#9+{'Товар "' +WareName+'" уже '+
                                    'присутсвует в данной "связке 3". '#10+}MsgStr+#9+
                                  SheetName+#9+Rang+IntToStr(irow), pointer(-11*100000-irow));
                                  //inc(NotEditLink2Count);
                                  WorkSheet.Range[Rang+IntToStr(irow), EmptyParam].Interior.Color:= isGreenCell;
                                  end;  *)
                             resWrong: begin
                                  inc(LinkWrong); //???????????
                                  WorkSheet.Range[Rang+IntToStr(irow), EmptyParam].Interior.Color:= isGreenCell;
                                  end;  //resWrong

                        end;  //case CheckWareModelNodeLink
                      end;  //TextValue<>'-1'
                    end; // fnOleXLCellReader(usedRng.Value2)

                    TextValue:= ''; 
                    ResCode:= resAdded;
                    usedRng:= WorkSheet.Range['I'+IntToStr(irow), EmptyParam];
                    if fnOleXLCellReader(usedRng.Value2)<>'' then begin
                      TextValue:= fnOleXLCellReader(usedRng.Value2);
                      TypeID:= 60;       
                      Rang:= 'H';
                      if TextValue<>'' then begin
                        prStopProcess( UserID, ThreadData.ID);
                        //TestCssStopException;                             
                        MsgStr:= Cache.CheckModelNodeWareTextLink(ResCode, ModelCode, NodeCode, WareID, TextValue, TypeID,'', UserID, soTecDoc);    //пытаемся занести текст условий
                        Case ResCode of
                            resError: begin
                              ErrMsg[SheetID-1].AddObject('Ошибка '#9+
                              {copy(fnOleXLCellReader(WorkSheet.Range['H1', EmptyParam].Value2),1,pos('(',fnOleXLCellReader(WorkSheet.Range['H1', EmptyParam].Value2))-1)+
                              ' для товара "'+WareName+'"не была добавлена. '#10 +  }
                              MsgStr+#9+SheetName+#9+Rang+IntToStr(irow),
                              pointer(-9*100000-irow));
                              WorkSheet.Range[Rang+IntToStr(irow), EmptyParam].Interior.Color:=
                              isErrorCell;
                              inc(ErrCount);
                            end;
                            resDoNothing: begin
                              ErrMsg[SheetID-1].AddObject('Внимание'#9+
                              {copy(fnOleXLCellReader(WorkSheet.Range['H1', EmptyParam].Value2),1,pos('(',fnOleXLCellReader(WorkSheet.Range['H1', EmptyParam].Value2))-1)+
                              ' для товара "' +WareName+'" уже занесена. '#10+} MsgStr+#9+
                              SheetName+#9+Rang+IntToStr(irow), pointer(-11*100000-irow));
                              //inc(NotEditLink2Count);
                              WorkSheet.Range[Rang+IntToStr(irow), EmptyParam].Interior.Color:=
                              isGreenCell;
                            end;
                            resAdded: begin
                              inc(TextAdd);
                              WorkSheet.Range[Rang+IntToStr(irow), EmptyParam].Interior.Color:=
                              isGreenCell;                                
                            end;
                        end; //Case  CheckModelNodeWareTextLink
                      end;  //TextValue<>''
                    end; // fnOleXLCellReader(usedRng.Value2) 
                    TextValue:= ''; 
                    ResCode:= resAdded;
                    usedRng:= WorkSheet.Range['J'+IntToStr(irow), EmptyParam];
                    if fnOleXLCellReader(usedRng.Value2)<>'' then begin
                      TextValue:= fnOleXLCellReader(usedRng.Value2);
                      TypeID:= 59;
                      Rang:= 'I';
                      if TextValue<>'' then begin
                        prStopProcess( UserID, ThreadData.ID);
                        //TestCssStopException;                             
                        MsgStr:= Cache.CheckModelNodeWareTextLink(ResCode, ModelCode, NodeCode, WareID, TextValue, TypeID,'', UserID, soTecDoc);    //пытаемся занести текст условий
                        Case ResCode of
                          resError: begin
                            ErrMsg[SheetID-1].AddObject('Ошибка '#9+
                            {copy(fnOleXLCellReader(WorkSheet.Range['I1', EmptyParam].Value2),1,pos('(',fnOleXLCellReader(WorkSheet.Range['I1', EmptyParam].Value2))-1)+
                            ' для товара "'+WareName+'"не была добавлена. '#10 +}
                            MsgStr+#9+SheetName+#9+Rang+IntToStr(irow),
                            pointer(-9*100000-irow));
                            WorkSheet.Range[Rang+IntToStr(irow), EmptyParam].Interior.Color:=
                            isErrorCell;
                            inc(ErrCount);
                          end;
                          resDoNothing: begin
                            ErrMsg[SheetID-1].AddObject('Внимание'#9+
                            {copy(fnOleXLCellReader(WorkSheet.Range['I1', EmptyParam].Value2),1,pos('(',fnOleXLCellReader(WorkSheet.Range['I1', EmptyParam].Value2))-1)+
                            ' для товара "' +WareName+'" уже занесена. '#10+} MsgStr+#9+
                            SheetName+#9+Rang+IntToStr(irow), pointer(-11*100000-irow));
                            //inc(NotEditLink2Count);
                            WorkSheet.Range[Rang+IntToStr(irow), EmptyParam].Interior.Color:=
                            isGreenCell;
                          end;
                          resAdded: begin
                            inc(TextAdd);
                            WorkSheet.Range[Rang+IntToStr(irow), EmptyParam].Interior.Color:=
                            isGreenCell;                                
                          end;
                       end; //Case  CheckModelNodeWareTextLink
                     end;  //TextValue<>''
                   end; // fnOleXLCellReader(usedRng.Value2) 
                 end; //(ResCode = resAdded) or (ResCode = resDoNothing) 
                end else begin                                                     //w > -1
                        ErrMsg[SheetID-1].AddObject('Ошибка "3"'#9+'Товар "'+WareName+'" не найден. '#9+
                          SheetName+#9+Rang+IntToStr(irow),
                          pointer(-8*100000-i));
                        WorkSheet.Range[Rang+IntToStr(irow), EmptyParam].Interior.Color:=
                          isErrorCell;
                        inc(ErrCount);
                end;                                                         //else
                
              end; //WareName <> ''                  
              ImpCheck.SetProcessPercent( UserID, ThreadData.ID, PPercent);
              prStopProcess( UserID, ThreadData.ID);
              //TestCssStopException; 
            end;  //for irow:=2
           
            ErrMsg[SheetID-1].AddObject('ИТОГО'#9+
            'Добавлено связок 3: '+IntToStr(LinkAdd)+#9+
            SheetName+#9+'A1', pointer(1*100000+4));
            ErrMsg[SheetID-1].AddObject('ИТОГО'#9+
            'из них ошибочных: '+IntToStr(LinkWrong)+#9+
            SheetName+#9+'A1', pointer(1*100000+4));            
            lstBodyMail.Add('Добавлено связок 3: '+IntToStr(LinkAdd));
            lstBodyMail.Add('из них ошибочных: '+IntToStr(LinkWrong));
            inc(SheetID);// переходим к следующему листу документа
          end else begin
          inc(SheetID);
          end;
      end;// while SheetID <= SheetCount do begin
      prStopProcess( UserID, ThreadData.ID);
      //TestCssStopException;
      // Добавим один новый лист после 
   
      XL.ActiveWorkbook.Sheets.Add(EmptyParam, WorkBook.Sheets.Item[WorkBook.Sheets.Count], 1, xlWorksheet, lcid);
      WorkSheet:= WorkBook.Sheets.Item[WorkBook.Sheets.Count] as Excel_TLB._Worksheet;
      WorkSheet.Name:= 'Импорт от'+FormatDateTime(' dd.mm hh_nn ',Now);
    
      recs:= 1;
    //-=создаем шапку для лога импорта

      WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= 'Статус  сообщения';
      WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= 'Лист';
      WorkSheet.Range['C'+IntToStr(recs), EmptyParam].Value2:= '   Ячейка   ';
      WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= 'Сообщение';
      usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
      usedRng.EntireRow.RowHeight:= usedRng.EntireRow.RowHeight*2;
      usedRng.Interior.Color:= isHeaderCell;
      usedRng.Font.Color:= cHEXtoINT(cnHeaderText);
      usedRng.Font.Bold:= True;
      usedRng.HorizontalAlignment:= xlCenter;
      usedRng.VerticalAlignment:= xlCenter;
      usedRng.Borders.Color:= cHEXtoINT(cnHeaderBorder);
      usedRng.BorderAround(xlContinuous, xlHairLine, xlColorIndexAutomatic, EmptyParam, EmptyParam);
      XL.ActiveWindow.SplitRow:= 1;
      XL.ActiveWindow.FreezePanes := True;
      prStopProcess( UserID, ThreadData.ID);
      //TestCssStopException; 
  //=-шапка создана
      inc(recs);
      Percent:= 30;      
      if High(ErrMsg)>-1 then Percent:= Percent/(High(ErrMsg)+1) else ImpCheck.SetProcessPercent( UserID, ThreadData.ID, Percent);
      for j := 0 to High(ErrMsg) do begin
        ErrMsg[j].CustomSort(@SizeCustomSort);
        rows:= ErrMsg[j].Count;
        if rows> 0 then PPercent:= Percent/(rows) else ImpCheck.SetProcessPercent( UserID, ThreadData.ID, Percent);
        for i := 0 to rows-1 do begin
         prStopProcess( UserID, ThreadData.ID);
         //TestCssStopException;
        //  ErrMsg[j][i]:=IntToStr(j)+'|'+IntToStr(integer(ErrMsg[j].Objects[i]))+'|'+ErrMsg[j][i];
//          LogStr:= SplitString(ErrMsg[j].Strings[i]);
          LogStr:= fnSplitStringChar(ErrMsg[j].Strings[i]);   
          ResCode:= trunc((integer(ErrMsg[j].Objects[i]))/100000);
          Case ResCode of
            -11..-10: begin
              WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
              WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
              usedRng:= WorkSheet.Range['C'+IntToStr(recs),EmptyParam];
              usedRng.Value2:= LogStr[3];
              WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam, EmptyParam,
                EmptyParam);
              WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
              usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
              usedRng.Interior.Color:= isWarningCell;
            end;
            -9..-1: begin
              WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
              WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
              usedRng:= WorkSheet.Range['C'+IntToStr(recs),EmptyParam];
              usedRng.Value2:= LogStr[3];
              WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam,EmptyParam,
                EmptyParam);
              WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
              usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
              usedRng.Interior.Color:= isErrorCell;
            end;
            1..2: begin
              WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
              WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
              usedRng:= WorkSheet.Range['B'+IntToStr(recs), EmptyParam];
              usedRng.Value2:= LogStr[2];      //Excel.ActiveSheet.Hyperlinks.Add(Excel.ActiveWorkBook.WorkSheets[1].Cells[k,1],Excel.ActiveWorkBook.WorkSheets[1].Cells[k,1]);
              WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam,EmptyParam,
                EmptyParam);
              WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
              usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
              usedRng.Interior.Color:= isGreenCell;
            end;
          end;
          inc (recs);
          ImpCheck.SetProcessPercent( UserID, ThreadData.ID, PPercent);
        end;  //i

      end; //j

      usedRng:= WorkSheet.Range['A1', 'D'+IntToStr(recs-1)];
      usedRng.WrapText:= False;
      usedRng.EntireRow.AutoFit;
      usedRng.EntireColumn.AutoFit;
      prStopProcess( UserID, ThreadData.ID);
      //TestCssStopException; 
      //ImpCheck.SetProcessPercent( UserID, ThreadData.ID, 30);      

    except  //2
      on E: Exception do begin
        prMessageLOGS(' '+nmProc+': '+E.Message, 'Import', false);
      end;  
    end; //except
    
    //Отправка письма
    Subj:= WorkBook.Name+'. Привязка аналогов GrossBee и по оригинальным номерам от '+FormatDateTime(cDateTimeFormatY2S, Now());
    ContentType:= XMLContentType;
    if ErrCount = 0 then lstBodyMail.Add(MessText(mtkImportSuccess))     
    else lstBodyMail.Add(MessText(mtkImportError));                      

  finally   // 1
    Workbook.CheckCompatibility := False;
    WorkBook.Save(lcid);
    WorkBook.Close(false,EmptyParam,EmptyParam,lcid);
//    XL.Workbooks.Close(lcid);
    XL.Quit;// закрыть Excel
    XL.Disconnect;
    CoUnInitialize;
    prFree(XL);
    FN:= fnFormRepFileName('23_'+ImpCheck.GetCheckComment(UserID, ThreadData.ID),ExtractFileName(FName),constOpImport);   //ImpCheck.GetCheckComment()
    PF:= ExtractFilePath(FName);
    RenameFile(FName, ExtractFilePath(FName)+fnFormRepFileName('23_',ExtractFileName(FName),constOpImport));
    FName:= ExtractFilePath(FName)+fnFormRepFileName('23_',ExtractFileName(FName),constOpImport);
    SetLength(LogStr, 0);
    for i:= 0 to High(ErrMsg) do begin
      if ErrMsg[i] <> nil then prFree (ErrMsg[i]);
    end;
    SetLength(ErrMsg,0);
    ImpCheck.SetProcessPercent( UserID, ThreadData.ID, 9);
    prFree (AutoWaresList);

  end;  //finally
end;

//--============================================================================================--//
procedure prImportActionText(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,
   ContentType:string; ThreadData: TThreadData);    //import 44
const  nmProc='prImportActionText'   ;
var XL: TExcelApplication;
    WorkBook: Excel_TLB._Workbook;
    WorkSheet: Excel_TLB._Worksheet;
    isGreenCell: integer;
    isWarningCell: integer;
    isErrorCell: integer;
    isHeaderCell: integer;
    usedRng: Range;   
    ErrMsg: array of TStringList;
    LogStr: Tas;
    i, j, k, ErrCount: integer; 
    rows, cols, irow, recs: integer;
    SheetCount, SheetID: integer;
    SheetName: string;
    FNameI: string;
    LinkAdd, ResCode: integer;  
    ErrPos: integer;   
    ss, MText, Text, FirmName: string; 
    Firm: TFirmInfo;
    SLFirms: TStringList;
    ibd: TIBDatabase;
    ibs: TIBSQL;
    Percent,PPercent: real;
begin
 PPercent:= 0;
 isGreenCell := cHexToInt(cnGreenCell);
 isHeaderCell := cHexToInt(cnHeaderCell);
 isWarningCell:= cHexToInt(cnYellowCell);
 isErrorCell:= cHEXtoINT(cnRedCell);
 LinkAdd:= 0;
 ErrCount:=0;
// ibd:= nil;
 ibs:= nil; 
 SLFirms:= nil;
 SLFirms:= TStringList.Create;
 for i:= 0 to length(cache.arFirmInfo)-1 do begin
   if cache.FirmExist(i) then begin
     Firm:=cache.arFirmInfo[i];
     SLFirms.AddObject(Firm.UPPERSHORTNAME,Pointer(Firm.ID))
   end;
 end;
 ibd:= cntsORD.GetFreeCnt;
// if not Assigned(ibd) then raise EBOBError.Create(MessText(mtkErrConnectToDB));
 ibs:= fnCreateNewIBSQL(ibd, 'ibs_'+nmProc, ThreadData.ID, tpWrite, True);

 ibs.SQL.Text:= 'update WEBORDERFIRMS set WOFRACTIONSTATETEXT=:pText '
             + 'where WOFRCODE= :pFrCode and trim(WOFRACTIONSTATETEXT)<>trim(:pText)';
 ibs.ParamByName('pText').AsString:= '';
 ibs.ParamByName('pFrCode').AsInteger:= 0;
 ibs.Prepare;
//ibs.ExecQuery;
  try   //1
ErrPos:= 1;    
try    
    XL:= TExcelApplication.Create(nil);
    WorkBook:= nil;
//--== Инициализируем работу экземпляра Excel
    CoInitializeEx(nil, COINIT_MULTITHREADED);
    XL.ConnectKind:= ckNewInstance;
    XL.Connect;
    XL.Visible[lcid]:= False;
    //XL.AutoQuit:= False;
    XL.ScreenUpdating[lcid]:=False;
    XL.DisplayAlerts[lcid]:= False;
    XL.Calculation[lcid] := xlManual;
//    XL.AlertBeforeOverwriting[lcid]:= false;
 // отменяем автоматическую проверку ошибок в ячейках
    with XL.ErrorCheckingOptions do begin
      BackgroundChecking := False;
      NumberAsText := False;
      InconsistentFormula := False;
    end;
//    prStopProcess( UserID, ThreadData.ID);
    //TestCssStopException; 
    if copy(FName, length(FName)-5+1,5)='.xlsx' then
      prAutoFilterXLSX(FName);
 // открываем импортируемый файл
    if Assigned(XL) and (not Assigned(WorkBook)) then begin
//      prStopProcess( UserID, ThreadData.ID);
      //TestCssStopException;
      WorkBook := XL.Workbooks.Open (FName,     // 1// const Filename: WideString;
                                     0,              // 2// UpdateLinks: OleVariant;
                                     false,          // 3// ReadOnly: OleVariant;
                                     EmptyParam,     // 4// Format: OleVariant;
                                     EmptyParam,     // 5// Password: OleVariant;
                                     EmptyParam,     // 6// WriteResPassword: OleVariant;
                                     true,           // 7// IgnoreReadOnlyRecommended: OleVariant;
                                     EmptyParam,     // 8// Origin: OleVariant;
                                     5,              // 9// Delimiter: OleVariant;
                                     False,          //10// Editable: OleVariant;
                                     false,          //11// Notify: OleVariant;
                                     EmptyParam,     //12// Converter: OleVariant;
                                     EmptyParam,     //13// Local: OleVariant;
                                     EmptyParam,     //14// CorruptLoad: OleVariant;
                                     false,          //15// AddToMru: OleVariant;
                                     lcid);          //16// lcid: Integer): Workbook; safecall;
//ErrPos:=2;                                     
      try

        SetLength(ErrMsg,0);
        SetLength(LogStr,0);
        lstBodyMail:= TStringList.Create;
        SheetCount:= WorkBook.Worksheets.Count; //количество листов excel
        SetLength(ErrMsg, SheetCount);
        SheetID:= 1;
        ImpCheck.SetProcessPercent( UserID, ThreadData.ID, 10);
        while SheetID <= SheetCount do begin
          ErrMsg[SheetID-1]:= TStringList.Create;        
          WorkSheet:= WorkBook.Sheets.Item[SheetID] as Excel_TLB._Worksheet;
          SheetName:= AnsiUpperCase(WorkSheet.Name);
          ImpCheck.SetComment( UserID, ThreadData.ID, SheetName); 
//          prStopProcess( UserID, ThreadData.ID);
          //TestCssStopException;        
          //перевод указателя на последнюю используемую ячейку листа
          usedRng:= WorkSheet.Range['A1', EmptyParam].SpecialCells(xlCellTypeLastCell,EmptyParam);
          rows:= usedRng.Row;   
          cols:= usedRng.Column;
          if cols<2 then begin
            //raise EBOBError.Create('Не указаны аналоги.Проверьте файл для импорта аналогов.');
            ErrMsg[SheetID-1].AddObject('Ошибка '#9+'Лист '+IntToStr(SheetID)+'. Не занесены данные.'+#9+SheetName+{#9+MsgStr+}#9+'A1',
                                         pointer(-15*100000-cols));
            WorkSheet.Range['A1', EmptyParam].Interior.Color:= isErrorCell;
            inc(ErrCount);
            inc(SheetID);
          end
          else 
            if rows>0 then begin 
              if rows=1 then begin
                ErrMsg[SheetID-1].AddObject('Ошибка '#9+'Лист '+IntToStr(SheetID)+'. Не указаны контрагенты.'+#9+SheetName+{#9+MsgStr+}#9+'A1',
                                         pointer(-12*100000-cols));
                WorkSheet.Range['A1', EmptyParam].Interior.Color:= isErrorCell;
                inc(ErrCount);
                inc(SheetID);
              end
              else begin
                usedRng:= WorkSheet.Range['A1', EmptyParam];
                MText:=fnOleXLCellReader(VarToStr(usedRng.Value2),false);
                if pos(cActionTextDelim,MText)=0 then  begin
                  ErrMsg[SheetID-1].AddObject('Ошибка '#9+'Лист '+IntToStr(SheetID)+'. Отсутствует маркер.'+#9+SheetName+{#9+MsgStr+}#9+'A1',
                                           pointer(-10*100000-cols));
                  WorkSheet.Range['A1', EmptyParam].Interior.Color:= isErrorCell;
                  inc(ErrCount);
                  inc(SheetID);
                end
                else begin
                  if MText<>Cache.GetConstItem(pcCommonActionText).StrValue then  Cache.SaveNewConstValue(pcCommonActionText,UserID,MText);                
                  if not ibs.Transaction.Active then ibs.Transaction.StartTransaction;//ibs.Transaction.StartTransaction;                
                  Percent:= 80;
                  PPercent:=Percent/rows;
                  for irow:= 2 to rows do begin                                         // по строкам**************
                    prStopProcess( UserID, ThreadData.ID);
//                    TestCssStopException; 
                    ImpCheck.SetProcessPercent( UserID, ThreadData.ID, PPercent);
                    usedRng:= WorkSheet.Range['A'+IntToStr(irow), EmptyParam];
                    FirmName:= fnOleXLCellReader(VarToStr(usedRng.Value2));
                    if FirmName<>'' then begin
                    //поверяем правильность наименования
                      k:= SLFirms.IndexOf(FirmName);// 
                      if k > -1 then begin
                        usedRng:= WorkSheet.Range['B'+IntToStr(irow), EmptyParam];
                        Text:= fnOleXLCellReader(VarToStr(usedRng.Value2),false);
                        {/if Text<>'' then begin}
                          ////заносим в базу
                          ibs.ParamByName('pText').AsString:= Text;
                          ibs.ParamByName('pFrCode').AsInteger:= integer(SLFirms.Objects[k]);
                          if not ibs.Transaction.Active then ibs.Transaction.StartTransaction;
                          ibs.ExecQuery;
                          //ibs.Transaction.Commit;      
                          usedRng:= WorkSheet.Range['A'+IntToStr(irow),'B'+IntToStr(irow)];
                          usedRng.Interior.Color:= isGreenCell;                  
                          inc(LinkAdd);               
                       (* end
                        else begin
                          ErrMsg[SheetID-1].AddObject('Ошибка '#9+'Лист '+IntToStr(SheetID)+'. Данные не занесены.'+#9+SheetName+{#9+MsgStr+}#9+'B'+IntToStr(irow),
                                               pointer(-8*100000-cols));
                          WorkSheet.Range['B'+IntToStr(irow), EmptyParam].Interior.Color:= isErrorCell;
                          inc(ErrCount);
                        end;*)
                      end
                      else begin
                        ErrMsg[SheetID-1].AddObject('Ошибка '#9+'Лист '+IntToStr(SheetID)+'. Такая фирма не найдена.'+#9+SheetName+{#9+MsgStr+}#9+'A'+IntToStr(irow),
                                             pointer(-6*100000-cols));
                        WorkSheet.Range['A'+IntToStr(irow), EmptyParam].Interior.Color:= isErrorCell;
                        inc(ErrCount);
                      end; 
                    end
                    else begin
                      ErrMsg[SheetID-1].AddObject('Ошибка '#9+'Лист '+IntToStr(SheetID)+'. Не указана фирма.'+#9+SheetName+{#9+MsgStr+}#9+'A'+IntToStr(irow),
                                               pointer(-4*100000-cols));
                      WorkSheet.Range['A'+IntToStr(irow), EmptyParam].Interior.Color:= isErrorCell;
                      inc(ErrCount);
                    end;
                  end;
                  if ibs.Transaction.Active then ibs.Transaction.Commit;
                end;
              end;
            ErrMsg[SheetID-1].AddObject('ИТОГО'#9+'Занесено : '+IntToStr(LinkAdd)+#9+SheetName+#9+'A1', pointer(1*100000+2));
            lstBodyMail.Add('Занесено : '+IntToStr(LinkAdd));
            inc(SheetID);// переходим к следующему листу документа
          end 
          else
            inc(SheetID);
        end;
      except  //2
        on E: EStopError do ss:= E.Message;
        on E: Exception do begin
          prMessageLOGS(' '+nmProc+': '+E.Message+ 'ErrPos='+IntToStr(ErrPos), 'Import', false);
        end;  
      end; //except
    end; //if Assigned(XL) and (not Assigned(WorkBook)) then begin
    //Отправка письма
except  
  on E: EStopError do ss:= E.Message;
  on E: Exception do begin
    prMessageLOGS(' '+nmProc+': '+E.Message+ 'ErrPos='+IntToStr(ErrPos), 'Import', false);
  end;  
end; //except

  finally      
        // Добавим один новый лист после 
//ErrPos:=5;   
        XL.ActiveWorkbook.Sheets.Add(EmptyParam, WorkBook.Sheets.Item[WorkBook.Sheets.Count], 1, xlWorksheet, lcid);
        WorkSheet:= WorkBook.Sheets.Item[WorkBook.Sheets.Count] as Excel_TLB._Worksheet;
        WorkSheet.Name:= 'Импорт от'+FormatDateTime(' dd.mm hh_nn ',Now);
    
        recs:= 1;
      //-=создаем шапку для лога импорта

        WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= 'Статус  сообщения';
        WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= 'Лист';
        WorkSheet.Range['C'+IntToStr(recs), EmptyParam].Value2:= '   Ячейка   ';
        WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= 'Сообщение';
        usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
        usedRng.EntireRow.RowHeight:= usedRng.EntireRow.RowHeight*2;
        usedRng.Interior.Color:= isHeaderCell;
        usedRng.Font.Color:= cHEXtoINT(cnHeaderText);
        usedRng.Font.Bold:= True;
        usedRng.HorizontalAlignment:= xlCenter;
        usedRng.VerticalAlignment:= xlCenter;
        usedRng.Borders.Color:= cHEXtoINT(cnHeaderBorder);
        usedRng.BorderAround(xlContinuous, xlHairLine, xlColorIndexAutomatic, EmptyParam, EmptyParam);
        XL.ActiveWindow.SplitRow:= 1;
        XL.ActiveWindow.FreezePanes := True;
//        prStopProcess( UserID, ThreadData.ID);
        //TestCssStopException; 
    //=-шапка создана
        inc(recs);
        Percent:= 10;      
        if High(ErrMsg)>-1 then Percent:= Percent/(High(ErrMsg)+1) else ImpCheck.SetProcessPercent( UserID, ThreadData.ID, Percent);
//ErrPos:=6;
        for j := 0 to High(ErrMsg) do begin
          ErrMsg[j].CustomSort(@SizeCustomSort);
          rows:= ErrMsg[j].Count;
          if rows> 0 then PPercent:= Percent/(rows) else ImpCheck.SetProcessPercent( UserID, ThreadData.ID, Percent);
          for i := 0 to rows-1 do begin
//           prStopProcess( UserID, ThreadData.ID);
           //TestCssStopException;
          //  ErrMsg[j][i]:=IntToStr(j)+'|'+IntToStr(integer(ErrMsg[j].Objects[i]))+'|'+ErrMsg[j][i];
  //          LogStr:= SplitString(ErrMsg[j].Strings[i]);
            LogStr:= fnSplitStringChar(ErrMsg[j].Strings[i]);   
            ResCode:= trunc((integer(ErrMsg[j].Objects[i]))/100000);
            Case ResCode of
              -15..-13: begin
                WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                usedRng:= WorkSheet.Range['C'+IntToStr(recs),EmptyParam];
                usedRng.Value2:= LogStr[3];
                WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam, EmptyParam,
                  EmptyParam);
                WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
                usedRng.Interior.Color:= isErrorCell;
              end;            
              -12..-11: begin
                WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                usedRng:= WorkSheet.Range['C'+IntToStr(recs),EmptyParam];
                usedRng.Value2:= LogStr[3];
                WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam, EmptyParam,
                  EmptyParam);
                WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
                usedRng.Interior.Color:= isErrorCell;
              end;            
              -10..-9: begin
                WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                usedRng:= WorkSheet.Range['C'+IntToStr(recs),EmptyParam];
                usedRng.Value2:= LogStr[3];
                WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam, EmptyParam,
                  EmptyParam);
                WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
                usedRng.Interior.Color:= isErrorCell;
              end;
              -8..-7: begin
                WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                usedRng:= WorkSheet.Range['C'+IntToStr(recs),EmptyParam];
                usedRng.Value2:= LogStr[3];
                WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam,EmptyParam,
                  EmptyParam);
                WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
                usedRng.Interior.Color:= isErrorCell;
              end;
              -6..-6: begin
                WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                usedRng:= WorkSheet.Range['C'+IntToStr(recs),EmptyParam];
                usedRng.Value2:= LogStr[3];
                WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam,EmptyParam,
                  EmptyParam);
                WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
                usedRng.Interior.Color:= isErrorCell;
              end;              
              -3..-1: begin
                WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                usedRng:= WorkSheet.Range['C'+IntToStr(recs),EmptyParam];
                usedRng.Value2:= LogStr[3];
                WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam,EmptyParam,
                  EmptyParam);
                WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
                usedRng.Interior.Color:= isErrorCell;
              end;              
              1..2: begin
                WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                usedRng:= WorkSheet.Range['B'+IntToStr(recs), EmptyParam];
                usedRng.Value2:= LogStr[2];      //Excel.ActiveSheet.Hyperlinks.Add(Excel.ActiveWorkBook.WorkSheets[1].Cells[k,1],Excel.ActiveWorkBook.WorkSheets[1].Cells[k,1]);
                WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam,EmptyParam,
                  EmptyParam);
                WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
                usedRng.Interior.Color:= isGreenCell;
              end;
            end;
            inc (recs);
            ImpCheck.SetProcessPercent( UserID, ThreadData.ID, PPercent);
          end;  //i

        end; //j

        usedRng:= WorkSheet.Range['A1', 'D'+IntToStr(recs-1)];
        usedRng.WrapText:= False;
        usedRng.EntireRow.AutoFit;
        usedRng.EntireColumn.AutoFit;
//        prStopProcess( UserID, ThreadData.ID);
        //TestCssStopException; 
        //ImpCheck.SetProcessPercent( UserID, ThreadData.ID, 30);      

(*      except  //2
        on E: Exception do begin
          prMessageLOGS(' '+nmProc+': '+E.Message+ 'ErrPos='+IntToStr(ErrPos), 'Import', false);
        end;  
      end; //except
    end; //if Assigned(XL) and (not Assigned(WorkBook)) then begin
    //Отправка письма
except  
  on E: Exception do begin
    prMessageLOGS(' '+nmProc+': '+E.Message+ 'ErrPos='+IntToStr(ErrPos), 'Import', false);
  end;  
end; //except   *) 
    Subj:= WorkBook.Name+' Заполнение данных для фирм по акциям от '+FormatDateTime(cDateTimeFormatY2S, Now());
    ContentType:= XMLContentType;
    if ErrCount = 0 then lstBodyMail.Add(MessText(mtkImportSuccess))     
    else lstBodyMail.Add(MessText(mtkImportError)); 
    lstBodyMail.Add(' ');
    if ss<>'' then lstBodyMail.Add(ss);
                         
//  finally
    Workbook.CheckCompatibility := False;
    WorkBook.Save(lcid);
    WorkBook.Close(false,EmptyParam,EmptyParam,lcid);
//    XL.Workbooks.Close(lcid);
    XL.Quit;// закрыть Excel
    XL.Disconnect;
    CoUnInitialize;
    prFree(XL);
    FNameI:= ExtractFilePath(FName)+fnFormRepFileName(IntToStr(ImpCheck.GetImpType(UserID, ThreadData.ID)), FName, constOpImport);                 
    RenameFile(FName, FNameI);
    FName:= FNameI;
    SetLength(LogStr, 0);
    for i:= 0 to High(ErrMsg) do begin
      if ErrMsg[i] <> nil then prFree (ErrMsg[i]);
    end;
    SetLength(ErrMsg,0);
    ImpCheck.SetProcessPercent( UserID, ThreadData.ID, 9);
    prFreeIBSQL(ibs);
    if assigned(ibd) then cntsOrd.SetFreeCnt(ibd, True);
    if assigned(SLFirms) then prFree(SLFirms);
  end;  
end;  
//==============================================================================
function fnRepActionText(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,
   ContentType:string; ThreadData: TThreadData; filter_data: string): string;
const
 nmProc = 'fnRepActionText'; // имя процедуры/функции
var 
    IBDatabase: TIBDatabase;
    IBS: TIBSQL;
    Content, PathFile: string;
    file_csv: textfile;    
//    timer, timerStart: TDateTime;    
    Percent: real;
    i, k, iCount: integer;
    Firm: TFirmInfo;
    ILFirmClasses: TIntegerList;
    Title, s, s1, FirmTypeName,FirmClasses: string;
begin
//timer:= Now;
//timerStart:= Now;
//prMessageLOGS('-----------------Export44.csv--------------------','Log_prg.log' , false);  

  s:= '';
  iCount:= 0;
//  IBDatabase:=nil;
  IBS:= nil;
//  ILFirmClasses:= nil;
  try
    IBDatabase:= cntsOrd.GetFreeCnt;

//    if (IBDatabase=nil) then Exit;

    try
      IBS:= fnCreateNewIBSQL(IBDatabase,'Query_'+nmProc, -1, tpRead, true);

      if FName='' then begin
        if not GetEmplTmpFilePath(UserID, PathFile, s) then raise EBOBError.Create(s); 
        FName:= PathFile+fnFormRepFileName('44_', '.csv', ImpCheck.GetCheckKind(UserID, ThreadData.ID));
      end;
      if FileExists(FName) and not SysUtils.DeleteFile(FName) then begin
        s:= MessText(mtkNotDelPrevFile);
        raise EBOBError.Create(MessText(mtkNotDelPrevFile));
      end;

      AssignFile(file_csv, FName);
      filemode:= fmOpenReadWrite; //назначаем файл
      if FileExists(FName) then Reset(file_csv) else ReWrite(file_csv);
      Append(file_csv);
    //Добавляем шапку:                  
      Title:= 'Информация о начислении баллов по акции ';    

      Content:= Title;    
      WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
      Content:= 'Краткое наименование фирмы;Баллы;Наименование контрагента;Тип контрагента;Категория контрагента';
      WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
      Content:= '';
//prMessageLOGS('Приготовились'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;      
      Percent:= 3;     
      ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);    //шапка добавлена  

      IBS.SQL.Text:='SELECT WOFRCODE, WOFRACTIONSTATETEXT '
                   +'FROM WEBORDERFIRMS '
                   +'where WOFRACTIONSTATETEXT<>"" and not WOFRACTIONSTATETEXT is null';
      IBS.Prepare;
      IBS.ExecQuery;      


      Percent:= 80;   
      ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);      
      while not IBS.EOF do begin  
        prStopProcess( UserID, ThreadData.ID);
        try
        if IBS.FieldByName('WOFRCODE').AsString<>'' then begin
          k:= IBS.FieldByName('WOFRCODE').AsInteger;// 

            if cache.FirmExist(k) then begin
              Firm:=cache.arFirmInfo[k];
              FirmTypeName:= Firm.FirmTypeName;
              ILFirmClasses:= Firm.FirmClasses; 
              FirmClasses:='';
              for i := 0 to ILFirmClasses.Count-1 do begin
                FirmClasses:= FirmClasses+','+Cache.GetFirmClassName(ILFirmClasses[i]);
              end;
              if length(FirmClasses)>0 then FirmClasses:= FirmClasses+',';  
              {if copy(Firm.UPPERSHORTNAME,1,1)='0' 
                then} s1:= #160+fnDelSpcAndSumb(Firm.UPPERSHORTNAME);//' '
               // else s1:= Firm.UPPERSHORTNAME;            
              Content:= s1{fnDelSpcAndSumb(Firm.UPPERSHORTNAME)}+';'+IBS.FieldByName('WOFRACTIONSTATETEXT').AsString+';'+
                        Firm.Name+';'+FirmTypeName+';'+FirmClasses;
              WriteLn(file_csv, Content);
              Content:='';  
              inc(icount);      
            end;

        end;
        except
          on E: EStopError do begin
            s:= E.Message;
            raise EStopError.Create(E.Message);            
          end;        
          on E: Exception do begin
            prMessageLOGS('Ошибка в процедуре '+nmProc+' '+ E.Message, 'import', false) ;
            s:=  'Ошибка при обработке результатов запроса. ';
            raise Exception.Create(Title+#13+s+E.Message);
          end;
        end;
        
        IBS.Next;                 
      end;  
      IBS.Close;
    finally      
//prMessageLOGS('Заполнили'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;        
      Percent:= 10;     
      ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);      
      Title:= 'Информация о начислении баллов по акции ';
      if iCount>0 then begin
        Subj:= 'Отчет 44 '+FormatDateTime(cDateTimeFormatY2S, Now());
        ContentType:= CSVContentType;// for Excel(.csv)
        lstBodyMail:= TStringList.Create;
        lstBodyMail.Add(Title); 
      end;

      prFreeIBSQL(IBS);
      if assigned(IBDataBase) then cntsOrd.SetFreeCnt(IBDataBase, True);
      CloseFile(file_csv);  
      if iCount=0 then begin
        s:= MessText(mtkNotFoundDataUse);
        raise EBOBError.Create(Title+#10+'  '+s)
       // raise Exception.Create(Title+#10+'  '+s);
      end;      
    end;
  finally
    result:= s;
  end; 
//prMessageLOGS('Закончили'+': - '+
//        FloatToStr(RoundTo((Now-timer)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;  
    
      //ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);
//prMessageLOGS('Время всего'+': - '+
//        FloatToStr(RoundTo((Now-timerStart)*60*60*24,-5))+' сек','Log_prg.log' , false); //66% 
//timer:= now;  
end;  //44
//=======================================================================================
procedure prImpOETecDoc45(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,
   ContentType:string; ThreadData: TThreadData); //45 imp
//Установить  связь с артиклем TecDoc
//удаление / добавление / редактирование связки 2 по группе дубликатов нод
//удаление / добавление / редактирование связки 3
//удаление / добавление условия применения связки 3   
const nmProc = 'prImpOETecDoc45';
      RepType = 45;
      FirstPos = 2;
      cnPsdCrit = '***';
var
  XL: TExcelApplication;
  WorkBook: Excel_TLB._Workbook;
  WorkSheet: Excel_TLB._Worksheet;
  usedRng: Range;
  isBorderGreenCell, isGreenCell, isHeaderCell: integer;
  isWarningCell, isErrorCell, isCellBorder, TypeSys: integer;
  i, j, l, k, m, n, p, ii, jj{,edge, yy, zz, lb, hb}: integer;
  NodeID, WareID, ModelID, {L2Qty,} SheetCount, SheetID: integer;
  offset, ResCode, cols, rows, recs, color, CrntPos, NextPos: integer;
  AddLink3Count, AddLink3usageClause, UpdLink3usageClause, ErrCount: integer;
//  Ware: TWareInfo;
  Node: TAutoTreeNode;
  ModelLine: TModelLine;
  Model: TModelAuto;
  Manuf: TManufacturer;
  Wares, Models: TStringList;
  FNameI, NodeName, WareName, SheetName, s, CellValue, MsgStr, ss, sss: string;
  ErrMsg: TASL;
  isWorkBookReadable, isWorkSheetReadable, isModelLine: boolean;
  isLink2_Exist, isLink3_Exist, MotoLink2advices: boolean;
  readSheets, ListFirstReadRow, WareCellIndexes: Tai;
  WaresVarArray, NodesVarArray: OleVariant;
  LogStr: Tas;
  Link3toAdd_ar: array of Link3data;
  Link3usageClauseToAdd_ar: array of Link3CritData;
//  Qty: double;
  SecondLink: TSecondLink;
  L2Qty: real;
  Status, ManufF, ModelLineF, ModelF, YMD: string;  
  Percent, PPercent: real;

  SLFileXML: TStringList;
  row, FileName: string;
  LZip: TZipFile;
  delDir: boolean;
begin
  isGreenCell:= cHexToInt(cnGreenCell);
  isBorderGreenCell:= cHexToInt(cnGreenBorderedCell);
  isHeaderCell:= cHexToInt(cnHeaderCell);
  isWarningCell:= cHexToInt(cnYellowCell);
  isErrorCell:= cHEXtoINT(cnRedCell);
  isCellBorder:= cHEXtoINT(cnCellBorder);
  l:= 0;
try  
  try
    SecondLink:= nil;
    n:= 0;
//    ii:= 0;
    lstBodyMail:= TStringList.Create;
    ErrCount:= 0;
    SetLength(ErrMsg, 0);
    SetLength(readSheets, 0);
    SetLength(ListFirstReadRow, 0);
    isWorkBookReadable:= False;
//    NodeID:= 0;
    TypeSys:= constBegTypeSys;
    sss:= '';
//    Percent:=0;
    PPercent:= 0;
{vv    if not fnUserRolesEntree(RepType, fnGetUserRoles(UserID)) then begin
      for i:= 0 to High(Cache.arWareInfo) do begin
        if not Cache.WareExist(i) then Continue;
        Ware:= Cache.arWareInfo[i];
        if Ware.ManagerID <> UserID then Continue;
        if (Ware.IsAUTOWare) and (not Ware.IsMOTOWare) then begin
          TypeSys:= constIsAuto;
          Break;
        end;
        if (Ware.IsMOTOWare) and (not Ware.IsAUTOWare) then begin
          TypeSys:= constIsMoto;
          Break;
        end;
      end;

    end else begin
      TypeSys:= fnTypeSysDecision(UserID);
      if TypeSys = constIsMoto then MotoLink2advices:= True;
    end;  }
TypeSys:= constIsAuto;//vv
    if not ((TypeSys > constBegTypeSys) and (TypeSys < constEndTypeSys)) then
      Raise EBOBError.Create (MessText(mtkNotFoundTypeSys));
      
    //Получаем список товаров с которым будем работать при импорте данных
      if not fnUserRolesEntree(RepType, fnGetUserRoles(UserID)) then
        Wares:= Cache.GetSysManagerWares(TypeSys, UserID)
      else Wares:= Cache.GetSysManagerWares(TypeSys);      

    XL:= TExcelApplication.Create(nil);
    WorkBook:= nil;
 //--== Инициализируем работу экземпляра Excel
    CoInitializeEx(nil, COINIT_MULTITHREADED);
    XL.ConnectKind:= ckNewInstance;
    XL.Connect;
    XL.Visible[lcid]:= False;
    //XL.AutoQuit:= False;
    XL.ScreenUpdating[lcid]:= False;
    XL.DisplayAlerts[lcid]:= False;
    XL.Calculation[lcid]:= xlManual;
 // отменяем автоматическую проверку ошибок в ячейках
    with XL.ErrorCheckingOptions do begin
      BackgroundChecking:= False;
      NumberAsText:= False;
      InconsistentFormula:= False;
    end;
    if copy(FName, length(FName)-5+1,5)='.xlsx' then
      prAutoFilterXLSX(FName);
    
(*     
    ZipExtractFiles(FName, s, ExtractFilePath(FName));
    FileName := ExtractFilePath(FName) + 'xl\workbook.xml';
    SLFileXML:= TStringList.Create;
    SLFileXML.LoadFromFile(FileName);
    ss:=SLFileXML.CommaText;
    for i:= 0 to SLFileXML.Count-1 do 
    if pos('_FilterDatabase',SLFileXML[i])>0 then begin
      k:= 1;
      ss:= SLFileXML[i];
      row:= '';
      while pos('_FilterDatabase',ss)>0 do begin
        sss:= Copy(ss,1,pos('_FilterDatabase',ss)+length('_FilterDatabase'));
        sss:= StringReplace(sss, '_FilterDatabase', 'a'+IntToStr(k)+'_FilterDatabase', [rfReplaceAll]);
        inc(k);
        ss:= Copy(ss,pos('_FilterDatabase',ss)+length('_FilterDatabase')+1,length(ss));
        row:= row+sss;
      end;
      SLFileXML[i]:= row+ss;
    end;
    SLFileXML.SaveToFile(FileName);  
//ss:= FName+','+ FileName;    
    ZipAddFiles(FName, s);
    LogStr:= fnSplitString(s,',');
    for i:= 0 to length(LogStr)-1 do begin
      k:= pos('/',LogStr[i]);
      if FileExists(StringReplace(LogStr[i],'\','/', [rfReplaceAll])) then SysUtils.DeleteFile(StringReplace(LogStr[i],'\','/', [rfReplaceAll]));
      ss:= LogStr[i];
      row:='';
      while pos('/',ss)>0 do begin
        sss:= Copy(ss,1,pos('/',ss));
//        sss:= StringReplace(sss, '_FilterDatabase', 'a'+IntToStr(k)+'_FilterDatabase', [rfReplaceAll]);
//        inc(k);
        ss:= Copy(ss,pos('/',ss)+1,length(ss));
        row:= row+sss;
      end;
      if row<>'' then delDir:= RemoveDir(row);
      
    end;  

//    ZipAddFiles(FName, FileName);
    ss:='';
    sss:='';
    k:= 0;
    row:= '';
*)    
// открываем импортируемый файл
    if Assigned(XL) and (not Assigned(WorkBook)) then    
      WorkBook:= XL.Workbooks.Open (FName,          // 1// const Filename: WideString;
                                     0,              // 2// UpdateLinks: OleVariant;
                                     false,          // 3// ReadOnly: OleVariant;
                                     EmptyParam,     // 4// Format: OleVariant;
                                     EmptyParam,     // 5// Password: OleVariant;
                                     EmptyParam,     // 6// WriteResPassword: OleVariant;
                                     true,           // 7// IgnoreReadOnlyRecommended: OleVariant;
                                     EmptyParam,     // 8// Origin: OleVariant;
                                     5,              // 9// Delimiter: OleVariant;
                                     False,          //10// Editable: OleVariant;
                                     false,          //11// Notify: OleVariant;
                                     EmptyParam,     //12// Converter: OleVariant;
                                     EmptyParam,     //13// Local: OleVariant;
                                     EmptyParam,     //14// CorruptLoad: OleVariant;
                                     false,          //15// AddToMru: OleVariant;
                                     lcid);          //16// lcid: Integer): Workbook; safecall;
                                   
//==-- импортируемый Excel-файл готов к обработке

//  SheetID:= 1; //ставим указатель на первый лист импортируемого документа
    SheetCount:= WorkBook.Sheets.Count; //определяем количество листов в книге Excel
Percent:= 5;     
ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);  
//prStopProcess( UserID, ThreadData.ID);
  //Находим в файле листы с необходимой для импорта структурой данных
    for SheetID:= 1 to SheetCount do begin
      WorkSheet:= WorkBook.Sheets.Item[SheetID] as Excel_TLB._Worksheet;
      SheetName:= WorkSheet.Name;
      isWorkSheetReadable:= false;
      if not ((SheetName = constNodeListName) or (SheetName = constCriteriaListName) or (SheetName = constWareListName)) then begin
      //перевод указателя на последнюю используемую ячейку листа
        usedRng:= WorkSheet.Range['A1', EmptyParam].SpecialCells(xlCellTypeLastCell,EmptyParam);
        cols:= usedRng.Column;
        rows:= usedRng.Row;
      //если на листе нет минимально необходимых данных игнорируем его
        if rows < 2 then Continue
        else if cols < 7 then begin
          lstBodyMail.Add('На листе "'+SheetName+'" нет необходимой для импорта структуры данных.');
          Continue;
        end;

        for i:= FirstPos to rows do begin
(*          usedRng:= WorkSheet.Range['B'+IntToStr(i),EmptyParam];
          CellValue:= usedRng.Text;
          if CellValue <> '' then begin
            color:= usedRng.Borders.Item[xlEdgeRight].Color;
            NodeID:= fnColorDemodulator(color);
            if Cache.FDCA.AutoTreeNodesSys[TypeSys].NodeGet(NodeID, Node) then begin
              if (Node.Name = CellValue) and (Node.ID = NodeID) then begin *)

          usedRng:= WorkSheet.Range['A'+IntToStr(i),EmptyParam];
          CellValue:= usedRng.Text;
          if CellValue <> '' then begin    
            k:= Wares.IndexOf(CellValue);
            if k>-1 then begin
                isWorkSheetReadable:= True;
                j:= Length(ReadSheets);
                SetLength(ReadSheets, j+1);
                readSheets[j]:= SheetID;
                SetLength(ListFirstReadRow, j+1);
                ListFirstReadRow[j]:= i;
                isWorkBookReadable:= isWorkBookReadable or isWorkSheetReadable;
                Break;
//vv              end;// if (Node.Name = CellValue) and (Node.ID = NodeID) then begin
            end;// if Cache.FDCA.AutoTreeNodesSys[TypeSys].NodeGet(NodeID, Node) then begin
          end;// if CellValue <> '' then begin
        end;// for i:= 2 to rows do begin
      end;// if not ((SheetName = constNodeListName) or (SheetName = constAutoListName)) then begin
    end;// for SheetID:=1 to SheetCount do begin
  //Поиск окончен
Percent:= 50;  
if Length(readSheets)>0 then Percent:= Percent/Length(readSheets) else ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);
    if not isWorkBookReadable then begin
      s:= fnIfStr(TypeSys=constIsAuto, 'Авто', 'Мото');
      lstBodyMail.Add ('В указанном файле не удалось распознать данные для импорта привязок товаров к моделям '+
        s+'.'#10+'Убедитесь что соблюдена требуемая структура файла. К данному виду импорта на сайте есть "Help".');
    end
    else begin
(*    //Получаем список товаров с которым будем работать при импорте данных
      if not fnUserRolesEntree(RepType, fnGetUserRoles(UserID)) then
        Wares:= Cache.GetSysManagerWares(TypeSys, UserID)
      else Wares:= Cache.GetSysManagerWares(TypeSys);   *)

      SetLength(ErrMsg, Length(readSheets));

      for l:= 0 to high(readSheets) do begin
//        prStopProcess( UserID, ThreadData.ID);
        WorkSheet:= WorkBook.Sheets.Item[(readSheets[l])] as Excel_TLB._Worksheet;
        SheetName:= WorkSheet.Name;
        AddLink3Count:= 0;
        AddLink3usageClause:= 0;
        UpdLink3usageClause:= 0;
        ErrMsg[l]:= TStringList.Create;
      //перевод указателя на последнюю используемую ячейку листа
        usedRng:= WorkSheet.Range['A1', EmptyParam].SpecialCells(xlCellTypeLastCell,EmptyParam);
        cols:= usedRng.Column;
        rows:= usedRng.Row;
        usedRng:= WorkSheet.Range['A1', 'A'+IntToStr(rows)];
        WaresVarArray:= usedRng.Value[xlRangeValueDefault];
        jj:= 100;
        SetLength(WareCellIndexes, jj);
//        ii:= 0;
//        i:= ListFirstReadRow[l];
        jj:= 100;
        SetLength(Link3toAdd_ar, jj);
        ii:= 0;    
    //--==========================
      k:= -1;
      if rows>0 then PPercent:= Percent/Length(readSheets) else ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);
      
      for i := ListFirstReadRow[l] to rows do begin   //111111111111111111111111
        prStopProcess( UserID, ThreadData.ID);
  //--==Блок подготовки "СВЯЗКИ 3"
        {edge:= High(WareCellIndexes);
        for i:= 0 to edge do begin  }
          usedRng:= WorkSheet.Range['A'+IntToStr(i),EmptyParam];
          WareName:= fnOleXLCellReader(usedRng.Text, False);
          if WareName<>'' then 
            k:= Wares.IndexOf(WareName);
          usedRng:= WorkSheet.Range['D'+IntToStr(i), EmptyParam];
          Status:= usedRng.Value2;
          if Status='' then continue;
          if usedRng.Interior.Color=isGreenCell then continue;
          if (StrToIntDef(Status,-100500)= -100500) or not (StrToIntDef(Status,-100500) in [resAdded, resDeleted, resWrong, resNotWrong]) then  begin
            ErrMsg[l].AddObject('Ошибка "3"'#9+'Неизвестный статус '+
                      #9+SheetName+#9+'D'+IntToStr(i), pointer(-2*100000-i));   
            WorkSheet.Range['D'+IntToStr(i), EmptyParam].Interior.Color:= isErrorCell;
            inc(ErrCount);
            continue;
          end;
          if k>-1 then begin
            WareID:= integer(Wares.Objects[k]);
            if WareName<>'' then 
              usedRng.Interior.Color:= isGreenCell;
          end
          else begin 
            if WareName<>'' then begin
              usedRng:= WorkSheet.Range['A'+IntToStr(i),EmptyParam];
              usedRng.Interior.Color:= isErrorCell;
              ErrMsg[l].AddObject('Ошибка'#9+
                 'В списке ваших товаров наименование"'+WareName+'" не обнаружено.'#9+
                    SheetName+#9+'A'+IntToStr(i), pointer(-2*100000-i));
              inc(ErrCount); // 
            end;
            continue;
          end;
          //теперь проверяем узлы
              isModelLine:= False;
              usedRng:= WorkSheet.Range['B'+IntToStr(i),EmptyParam];
              CellValue:= usedRng.Value2;
              if CellValue <> '' then begin    
                color:= usedRng.Borders.Item[xlEdgeRight].Color;
                NodeID:= fnColorDemodulator(color);
                if not (Cache.FDCA.AutoTreeNodesSys[TypeSys].NodeGet(NodeID, Node)) then begin
                  usedRng.Borders.Item[xlEdgeRight].LineStyle:= xlNone;

                  ErrMsg[l].AddObject('Ошибка'#9+'Не опознан код узла. '#9+
                    SheetName+#9+'B'+IntToStr(i), pointer(-3*100000-(i)));

                  usedRng.Interior.Color:= isErrorCell;
                  inc(ErrCount);
                end// if Cache.FDCA.AutoTreeNodesSys[TypeSys].NodeGet(NodeID, Node) then begin
                else if Node.Name <> CellValue then begin
                  usedRng.Borders.Item[xlEdgeRight].LineStyle:= xlNone;

                  ErrMsg[l].AddObject('Ошибка'#9+'Не совпадает имя узла с именем узла найденным по коду.'#9+
                    SheetName+#9+'B'+IntToStr(i), pointer(-3*100000-(i)));
                  inc(ErrCount);
                  usedRng.Interior.Color:= isErrorCell;
                end else begin
                  NodeName:= Node.Name;

                  usedRng:= WorkSheet.Range['G'+IntToStr(i) ,EmptyParam];

                  if ((usedRng.Interior.Color <> isGreenCell) and
                    (usedRng.Interior.Color <> isBorderGreenCell)) then begin

                    color:= usedRng.Borders.Item[xlEdgeRight].Color;
                    ModelID:= fnColorDemodulator(color);

                    if Cache.FDCA.ModelLines.ModelLineExists(ModelID) then begin
                      ModelLine:= Cache.FDCA.ModelLines.GetModelLine(ModelID);
                      Manuf:= Cache.FDCA.Manufacturers.Items[ModelLine.MFAID];
                      ss:= fnGetYMBE(ModelLine.YStart, ModelLine.MStart, ModelLine.YEnd, ModelLine.MEnd);
                      MsgStr:= Manuf.Name+' '+ModelLine.Name+' '+StringReplace(ss, cWebSpace, ' ', [rfReplaceAll]);

                      if TRIM(MsgStr) = TRIM(usedRng.Text) then begin
                        isModelLine:= True;
                      //проверяем наличие "псевдокритерия с количеством по "связке 2"
                        usedRng:= WorkSheet.Range['K'+IntToStr(i) ,EmptyParam];
                        s:= TRIM(usedRng.Text);
                        if copy (s, 1, 3) = cnPsdCrit then
                          L2Qty:= StrToFloatDef(copy(s, 4, Length(s)), -100500)
                        else L2Qty:= -1;   //vv 2509  L2Qty:=0

                        usedRng:= WorkSheet.Range['C'+IntToStr(i) ,EmptyParam];

                        Models:= ModelLine.GetListModels;
                        for m:= 0 to Models.Count-1 do begin
                          if ii = jj then begin
                            jj:= jj+100;
                            SetLength(Link3toAdd_ar, jj);
                          end;
                          Link3toAdd_ar[ii].wareID:= WareID;
                          Link3toAdd_ar[ii].modelID:= integer(Models.Objects[m]);
                          Link3toAdd_ar[ii].nodeID:= NodeID;
                          Link3toAdd_ar[ii].userID:= UserID;
                          Link3toAdd_ar[ii].L2Qty:= L2Qty;
                          Link3toAdd_ar[ii].Row:= usedRng.Row;
                          inc(ii);
                        end;
                      end;
                    end;// if Cache.FDCA.ModelLines.ModelLineExists(ModelID) then begin

                  //если указан был не модельный ряд, проверяем не является ли он моделью
                    if not isModelLine then begin
                      if Cache.FDCA.Models.ModelExists(ModelID) then begin
                        Model:= Cache.FDCA.Models.GetModel(ModelID);
                        ModelLine:= Cache.FDCA.ModelLines.GetModelLine(Model.ModelLineID);
                        Manuf:= Cache.FDCA.Manufacturers.Items[ModelLine.MFAID];

                        with Model do begin
                          ss:= fnGetYMBE(Params.pYStart, Params.pMStart, Params.pYEnd, Params.pMEnd);
                          s:= StringReplace(ss,cWebSpace, ' ', [rfReplaceAll]);
                        end;

                        MsgStr:= Manuf.Name+' '+ModelLine.Name+' '+Model.Name+' '+s;
                        ModelF:= usedRng.Text;
                        usedRng:= WorkSheet.Range['F'+IntToStr(i) ,EmptyParam];
                        ModelLineF:= usedRng.Text;
                        usedRng:= WorkSheet.Range['E'+IntToStr(i) ,EmptyParam];
                        ManufF:= usedRng.Text;
                        usedRng:= WorkSheet.Range['H'+IntToStr(i) ,EmptyParam];
                        YMD:= usedRng.Text;
                        
                        if TRIM(MsgStr) = TRIM(ManufF+' '+ModelLineF+' '+ModelF+' '+YMD) then begin
                        //проверяем наличие "псевдокритерия с количеством по "связке 2"
                          usedRng:= WorkSheet.Range['K'+IntToStr(i) ,EmptyParam];
                          s:= TRIM(usedRng.Text);
                          if copy (s, 1, 3) = cnPsdCrit then
                            L2Qty:= StrToFloatDef(copy(s, 4, Length(s)), -100500)
                          else L2Qty:= -1; //vv 2509  L2Qty:=0
                          usedRng:= WorkSheet.Range['K'+IntToStr(i) ,EmptyParam];

                          if ii = jj then begin
                            jj:= jj+100;
                            SetLength(Link3toAdd_ar, jj);
                          end;
                          Link3toAdd_ar[ii].wareID:= WareID;
                          Link3toAdd_ar[ii].modelID:= ModelID;
                          Link3toAdd_ar[ii].nodeID:= NodeID;
                          Link3toAdd_ar[ii].userID:= UserID;
                          Link3toAdd_ar[ii].L2Qty:= L2Qty;
                          Link3toAdd_ar[ii].Row:= usedRng.Row;
                          inc(ii);
                        end else begin
                          ErrMsg[l].AddObject('Ошибка'#9+
                            'Наименоваение "модели/модельного ряда" не совпадает с найденным по коду.'#9+
                            SheetName+#9+'G'+IntToStr(usedRng.Row), pointer(-5*100000-usedRng.Row));

                          usedRng.Borders.Item[xlEdgeRight].LineStyle:= xlNone;
                          usedRng.Interior.Color:= isErrorCell;
                        end;

                      end else begin
                        ErrMsg[l].AddObject('Ошибка'#9+
                          'По указанному коду "модели/модельного ряда" ничего не обнаружено.'#9+
                          SheetName+#9+'G'+IntToStr(usedRng.Row), pointer(-4*100000-usedRng.Row));

                        usedRng.Borders.Item[xlEdgeRight].LineStyle:= xlNone;
                        usedRng.Interior.Color:= isErrorCell;
                        inc(ErrCount);
                      end;
                    end;// if not isModelLine then begin
                  end;
                end;
              end;// if CellValue <> '' then begin

          NodesVarArray:= Unassigned;
          ImpCheck.SetProcessPercent(UserId,ThreadData.ID,PPercent);
//vv        end;// for i:= 0 to High(WareCellIndexes) do begin
      end;//111111111111111111111111111111111111111111111111111111111111111111111        
        WaresVarArray:= Unassigned;
        SetLength(Link3toAdd_ar, ii);
        SetLength(Link3usageClauseToAdd_ar, 0);
        prMessageLOGS(nmProc+'. Связок 3 для посадки подготовлено: '+IntToStr(Length(Link3toAdd_ar)), 'Import_test', false);
        ii:= 0;
        jj:= 100;
        SetLength(Link3usageClauseToAdd_ar, jj);
    //--==========================
  //--=="СВЯЗКИ 3" листа для посадки собраны
    //====================================--

  //--==ПОСАДКА "СВЯЗОК 3" листа и их УСЛОВИЙ ПРИМЕНЕНИЯ
        CrntPos:= -1;
        offset:= 3;
        Percent:= 40;  
        if High(Link3toAdd_ar)>0 then Percent:= Percent/High(Link3toAdd_ar) else ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);
        for i:= 0 to High(Link3toAdd_ar) do begin
          prStopProcess( UserID, ThreadData.ID);
          prMessageLOGS(nmProc+'. Посадка связки 3:'#10+
            'Товар: '+fnMakeAddCharStr(IntToStr(Link3toAdd_ar[i].wareID), 8, True)+
            'Модель: '+fnMakeAddCharStr(IntToStr(Link3toAdd_ar[i].modelID), 8, True)+
            'Узел: '+fnMakeAddCharStr(IntToStr(Link3toAdd_ar[i].nodeID), 8, True)+
            'User: '+fnMakeAddCharStr(IntToStr(Link3toAdd_ar[i].userID), 8, True)+
            'Excel: '+IntToStr(Link3toAdd_ar[i].Row), 'Import_test', false);

          isLink3_Exist:= False;
          if Link3toAdd_ar[i].Row <> CrntPos then begin
            CrntPos:= Link3toAdd_ar[i].Row;
            isModelLine:= False;
          end else begin//предполагаем, что работаем не с отдельной моделью, а с модельным рядом
            isModelLine:= True;
          end;

          isLink2_Exist:= False;

          Model:= Cache.FDCA.Models.GetModel(Link3toAdd_ar[i].modelID);
          nodeID:= Link3toAdd_ar[i].nodeID;
          L2Qty:= Link3toAdd_ar[i].L2Qty;
//TSecondLink(Model.NodeLinks[nodeId]).Qty
          if Model.NodeLinks.LinkExists(nodeId) then
          SecondLink:= TSecondLink(Model.NodeLinks[nodeId])
          else if L2Qty= -1 then Link3toAdd_ar[i].L2Qty:= 0;

          if (not Model.NodeLinks.LinkExists(nodeId)) or (Model.NodeLinks.LinkExists(nodeId) and (L2Qty>-1) and (SecondLink.Qty<>L2Qty)) then begin //vv 2009 or (L2Qty<>0) then begin
            MsgStr:= '';
(*            ResCode:= fnAddLink2fromReport(Link3toAdd_ar[i], MsgStr);
            ResCode:= 0; *)
            MsgStr:= Cache.FDCA.CheckModelNodeLinkDup(Link3toAdd_ar[i].modelID, Link3toAdd_ar[i].NodeID,
                     FloatToStr(Link3toAdd_ar[i].L2Qty), ResCode, soExcel, Link3toAdd_ar[i].UserID);  
        // ResCode на выходе: resError- ошибка, resDoNothing - не менялось,
        // resAdded - добавление, resEdited - редактирование, resDeleted - удаление

            Case ResCode of
              resError: begin
                  ErrMsg[l].AddObject('Ошибка'#9+'Не удалось создать связь модели с узлом. '+
                    MsgStr+#9+SheetName+#9+'G'+IntToStr(CrntPos), pointer(-6*100000-i));
                  prMessageLOGS(nmProc+' (CheckModelNodeLinkDup): '+MsgStr, 'Import', False);
                  WorkSheet.Range['G'+IntToStr(CrntPos), EmptyParam].Interior.Color:= isErrorCell;
                  inc(ErrCount);
                end;
              resDoNothing: begin
                  prMessageLOGS(nmProc+' (CheckModelNodeLinkDup): изменений не произведено. Код модели: '+IntToStr(Link3toAdd_ar[i].modelID)+
                    ', код узла: '+IntToStr(Link3toAdd_ar[i].nodeID)+', переданное значение: 0', 'Import_test', false);
                  isLink2_Exist:= True;
                end;
              resAdded: begin
                  if MotoLink2advices then
                    ErrMsg[l].AddObject('Сообщение'#9+'Добавлена новая "связка 2". '+
                      MsgStr+#9+SheetName+#9+'G'+IntToStr(CrntPos), pointer(-13*100000-i));
                  isLink2_Exist:= True;
                end;
              resEdited: begin
                  if MotoLink2advices then
                    ErrMsg[l].AddObject('Сообщение'#9+'Количество по "связке 2" у данных узла и модели изменено. '+
                      MsgStr+#9+SheetName+#9+'G'+IntToStr(CrntPos), pointer(-14*100000-i));
                  isLink2_Exist:= True;
                  prMessageLOGS(nmProc+' (CheckModelNodeLinkDup): Количество по "связке 2" изменено на "Н/Д". Код модели: '+
                    IntToStr(Link3toAdd_ar[i].modelID)+', код узла: '+IntToStr(Link3toAdd_ar[i].nodeID)+
                    ', переданное значение: 0', 'Import_test', false);
                end;
            (*
              resDeleted: begin
                  inc(DelLink2Count);
                  WorkSheet.Range[IntToABC(l)+IntToStr(Link2Grid[i]), EmptyParam].Interior.Color:=
                    isBorderGreenCell;
                end;             *)
            end;

          end else begin
            isLink2_Exist:= True;
          end;

          prMessageLOGS(nmProc+': ErrPos = 2403 Строка: '+IntToStr(Link3toAdd_ar[i].Row), 'Import_test', false);

          if isLink2_Exist then begin
            MsgStr:= '';
//vv            ResCode:= fnAddLink3fromRecord(Link3toAdd_ar[i], MsgStr);
// вид операции - ResCode - на входе (resAdded, resDeleted, resWrong, resNotWrong)   
            usedRng:= WorkSheet.Range['D'+IntToStr(Link3toAdd_ar[i].Row), EmptyParam];
            ResCode:= StrToIntDef(usedRng.Text,-100500);    
            MsgStr:= Cache.FDCA.CheckWareModelNodeLink(Link3toAdd_ar[i].wareID, Link3toAdd_ar[i].modelID,
                       Link3toAdd_ar[i].NodeID, ResCode, soExcel, Link3toAdd_ar[i].UserID);
    //        ResCode на выходе: resError- ошибка, resDoNothing - не менялось, resAdded - добавлена,
    //        resDeleted - удалена, resWrong - отмечена, как неверная, resNotWrong - восстановлена
            Case ResCode of
              resError: begin
                ErrMsg[l].AddObject('Ошибка "3"'#9+'Товар "'+Cache.GetWare(Link3toAdd_ar[i].wareID, true).Name+
                      '" не удалось добавить в связку c моделью "'+
                      StringReplace(Cache.FDCA.Models.GetModel(Link3toAdd_ar[i].modelID).WebName, cWebSpace, ' ', [rfReplaceAll])+
                      '". '#10+MsgStr+#9+SheetName+#9+'G'+IntToStr(CrntPos), pointer(-7*100000-i));
                WorkSheet.Range['G'+IntToStr(CrntPos), EmptyParam].Interior.Color:= isErrorCell;
                inc(ErrCount);
              end;
              resDoNothing: begin
                    ErrMsg[l].AddObject('Внимание'#9+'Товар "'+Cache.GetWare(Link3toAdd_ar[i].wareID, true).Name+
                      '" уже присутсвует в данной связке c моделью "'+
                      StringReplace(Cache.FDCA.Models.GetModel(Link3toAdd_ar[i].modelID).WebName, cWebSpace, ' ',[rfReplaceAll])+
                      '. '#9+SheetName+#9+'G'+IntToStr(CrntPos), pointer(-11*100000-i));
                    if not isModelLine then
                      WorkSheet.Range['G'+IntToStr(CrntPos), EmptyParam].Interior.Color:= isGreenCell
                    else
                WorkSheet.Range['G'+IntToStr(CrntPos), EmptyParam].Interior.Color:= isBorderGreenCell;
                isLink3_Exist:= True;
              end;
              resAdded: begin
                inc(AddLink3Count);
                if not isModelLine then
                      WorkSheet.Range['G'+IntToStr(CrntPos), EmptyParam].Interior.Color:= isGreenCell
                else
                      WorkSheet.Range['G'+IntToStr(CrntPos), EmptyParam].Interior.Color:= isBorderGreenCell;
                    isLink3_Exist:= True;
              end;
            end;// Case ResCode of
          end;// if isLink2_Exist then begin
          prMessageLOGS(nmProc+': ErrPos = 2460 Строка: '+IntToStr(Link3toAdd_ar[i].Row), 'Import_test', false);

        //проверяем условия применения и при необходимости добавляем их в массив записей
          if isLink3_Exist then begin
            if not isModelLine then begin
              n:= 0;
            //  usedRng:= WorkSheet.Range['D'+IntToStr(CrntPos), EmptyParam].End_[xlToRight];
              usedRng:= WorkSheet.Range[IntToABC(cols)+IntToStr(CrntPos), EmptyParam].End_[xlToLeft];
              NextPos:= usedRng.Column-1;
            //  cols:= usedRng.Column-1;
            //проверяем есть ли к данной модели/модельному ряду "условия применения"
//              if NextPos >= offset then begin
                j:= 10;
                while j <= 13 do begin
                  s:='';
                  usedRng:= WorkSheet.Range[IntToABC(j)+IntToStr(CrntPos), EmptyParam];
                  if usedRng.Interior.Color <> isGreenCell then begin
                    if ii = jj then begin
                      jj:= jj+100;
                      SetLength(Link3usageClauseToAdd_ar, jj);
                    end;
                    CellValue:= Trim(usedRng.Text);

                    if CellValue <> '' then begin
                      s:= Copy(CellValue, 1, 3);
                      if s <> cnPsdCrit then begin
                        Link3usageClauseToAdd_ar[ii].wareID:= Link3toAdd_ar[i].wareID;
                        Link3usageClauseToAdd_ar[ii].ModelID:= Link3toAdd_ar[i].modelID;
                        Link3usageClauseToAdd_ar[ii].nodeID:= Link3toAdd_ar[i].nodeID;
                        Link3usageClauseToAdd_ar[ii].userID:= Link3toAdd_ar[i].userID;
                        Link3usageClauseToAdd_ar[ii].Col:= j;
                        Link3usageClauseToAdd_ar[ii].Row:= Link3toAdd_ar[i].Row;
                        Link3usageClauseToAdd_ar[ii].UsageClauseName:= CellValue;
                        usedRng:= WorkSheet.Range[IntToABC(j+1)+IntToStr(CrntPos), EmptyParam];
                        Link3usageClauseToAdd_ar[ii].UsageClauseValue:= usedRng.Text;
                        inc(ii);
                        inc(n);
                      end;
                    end;
                  end;
                  j:= j+2;
                end;//while j <= cols do begin
//              end;// if cols > offset then begin

            end else begin//если работаем с модельным рядом, то используем уже считанные "условия применения"
              if ii = jj then begin
                jj:= jj+100;
                SetLength(Link3usageClauseToAdd_ar, jj);
              end;
              if ii > 0 then begin
                if n > 1 then begin
                  for p:= n downto 1 do begin
                    Link3usageClauseToAdd_ar[ii].wareID:= Link3toAdd_ar[i].wareID;
                    Link3usageClauseToAdd_ar[ii].ModelID:= Link3toAdd_ar[i].modelID;
                    Link3usageClauseToAdd_ar[ii].nodeID:= Link3toAdd_ar[i].nodeID;
                    Link3usageClauseToAdd_ar[ii].userID:= Link3toAdd_ar[i].userID;
                    Link3usageClauseToAdd_ar[ii].Col:= Link3usageClauseToAdd_ar[ii-n].Col;
                    Link3usageClauseToAdd_ar[ii].Row:= Link3usageClauseToAdd_ar[ii-n].Row;
                    Link3usageClauseToAdd_ar[ii].UsageClauseName:= Link3usageClauseToAdd_ar[ii-n].UsageClauseName;
                    Link3usageClauseToAdd_ar[ii].UsageClauseValue:= Link3usageClauseToAdd_ar[ii-n].UsageClauseValue;
                    inc(ii);
                  end;
                end else if n > 0 then begin
                  Link3usageClauseToAdd_ar[ii].wareID:= Link3toAdd_ar[i].wareID;
                  Link3usageClauseToAdd_ar[ii].ModelID:= Link3toAdd_ar[i].modelID;
                  Link3usageClauseToAdd_ar[ii].nodeID:= Link3toAdd_ar[i].nodeID;
                  Link3usageClauseToAdd_ar[ii].userID:= Link3toAdd_ar[i].userID;
                  Link3usageClauseToAdd_ar[ii].Col:= Link3usageClauseToAdd_ar[ii-1].Col;
                  Link3usageClauseToAdd_ar[ii].Row:= Link3usageClauseToAdd_ar[ii-1].Row;
                  Link3usageClauseToAdd_ar[ii].UsageClauseName:= Link3usageClauseToAdd_ar[ii-1].UsageClauseName;
                  Link3usageClauseToAdd_ar[ii].UsageClauseValue:= Link3usageClauseToAdd_ar[ii-1].UsageClauseValue;
                  inc(ii);
                end;// if n > 1 then begin
              end;// if ii > 0 then begin
            end;// if not isModelLine then begin
          end;// if isLink3_Exist then begin
          ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);
        end;// for i:= 0 to High(Link3toAdd_ar) do begin
        SetLength(Link3usageClauseToAdd_ar,ii);
(*
        prMessageLOGS(nmProc+'. Условий применения "связок 3" для посадки подготовлено: '+
          IntToStr(Length(Link3usageClauseToAdd_ar)), 'Import_test', false);

        for i:= 0 to High(Link3usageClauseToAdd_ar) do begin
          prMessageLOGS(nmProc+'. Посадка критерия:'#10+
            'Товар: '+fnMakeAddCharStr(IntToStr(Link3usageClauseToAdd_ar[i].wareID), 8, True)+
            'Модель: '+fnMakeAddCharStr(IntToStr(Link3usageClauseToAdd_ar[i].modelID), 8, True)+
            'Узел: '+fnMakeAddCharStr(IntToStr(Link3usageClauseToAdd_ar[i].nodeID), 8, True)+
            'User: '+fnMakeAddCharStr(IntToStr(Link3usageClauseToAdd_ar[i].userID), 8, True)+
            'Excel: '+IntToStr(Link3usageClauseToAdd_ar[i].Row)+#10+
            '  Критерий: '+Link3usageClauseToAdd_ar[i].UsageClauseName+
            '  Значение: '+Link3usageClauseToAdd_ar[i].UsageClauseValue, 'Import_test', false);
          MsgStr:= '';
//          ResCode:= fnAddUsageClausefromRecord(Link3usageClauseToAdd_ar[i],MsgStr);

          Case ResCode of
            resError: begin
                ErrMsg[l].AddObject('Ошибка'#9+'Не удалось добавить условие применения. '#10+MsgStr+#9+SheetName+#9+
                  IntToABC(Link3usageClauseToAdd_ar[i].Col)+IntToStr(Link3usageClauseToAdd_ar[i].Row), pointer(-8*100000-i));
                usedRng:= WorkSheet.Range[IntToABC(Link3usageClauseToAdd_ar[i].Col)+IntToStr(Link3usageClauseToAdd_ar[i].Row), EmptyParam];
                usedRng.Interior.Color:= isErrorCell;
                inc (ErrCount);
              end;
            resDoNothing: begin
                ErrMsg[l].AddObject('Внимание'#9+'Указанное условие применения товара совпадает с существующим.'#9+SheetName+#9+
                  IntToABC(Link3usageClauseToAdd_ar[i].Col)+IntToStr(Link3usageClauseToAdd_ar[i].Row), pointer(-12*100000-i));
                usedRng:= WorkSheet.Range[IntToABC(Link3usageClauseToAdd_ar[i].Col)+IntToStr(Link3usageClauseToAdd_ar[i].Row), EmptyParam];
                usedRng.Interior.Color:= isGreenCell;
                usedRng:= WorkSheet.Range[IntToABC(Link3usageClauseToAdd_ar[i].Col+1)+IntToStr(Link3usageClauseToAdd_ar[i].Row), EmptyParam];
                usedRng.Interior.Color:= isGreenCell;
              end;
            resAdded: begin
                usedRng:= WorkSheet.Range[IntToABC(Link3usageClauseToAdd_ar[i].Col)+IntToStr(Link3usageClauseToAdd_ar[i].Row), EmptyParam];
                usedRng.Interior.Color:= isGreenCell;
                usedRng:= WorkSheet.Range[IntToABC(Link3usageClauseToAdd_ar[i].Col+1)+IntToStr(Link3usageClauseToAdd_ar[i].Row), EmptyParam];
                usedRng.Interior.Color:= isGreenCell;
                inc(AddLink3usageClause);
              end;
            resEdited: begin
                ErrMsg[l].AddObject('Внимание'#9+'Указанное условие применения товара было изменено.'#9+SheetName+#9+
                  IntToABC(Link3usageClauseToAdd_ar[i].Col)+IntToStr(Link3usageClauseToAdd_ar[i].Row), pointer(-10*100000-i));
                usedRng:= WorkSheet.Range[IntToABC(Link3usageClauseToAdd_ar[i].Col)+IntToStr(Link3usageClauseToAdd_ar[i].Row), EmptyParam];
                usedRng.Interior.Color:= isGreenCell;
                inc(UpdLink3usageClause);
              end;
          end;
        end; *)
        Percent:= 10;
        ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);    
(*        lstBodyMail.Add('С листа "'+SheetName+'" импортированы следующие данные:'#10);
        lstBodyMail.Add('Создано привязок товаров к моделям: '+IntToStr(AddLink3Count)+#10);
        lstBodyMail.Add('Создано условий применения товаров: '+IntToStr(AddLink3usageClause)+#10);
        lstBodyMail.Add('Изменено условий применения товаров: '+IntToStr(AddLink3Count)+#10);

        ErrMsg[l].AddObject('ИТОГО'#9+'Добавлено привязок товаров к моделям: '+
          IntToStr(AddLink3Count)+#9+SheetName+#9+'A1', pointer(2*100000));
        ErrMsg[l].AddObject('ИТОГО'#9+'Добавлено условий применения товаров: '+
          IntToStr(AddLink3usageClause)+#9+SheetName+#9+'A1',pointer(1*100000+2));
        ErrMsg[l].AddObject('ИТОГО'#9+'Изменено условий применения товаров: '+
          IntToStr(UpdLink3usageClause)+#9+SheetName+#9+'A1',pointer(1*100000+1));  *)

        SetLength(Link3usageClauseToAdd_ar, 0);
        SetLength(Link3toAdd_ar, 0);
      end;//l:= 0 to high(readSheets) do begin
    end;// if isWorkBookReadable then begin  
  except
    on E: EStopError do begin
      sss:= E.Message;
      lstBodyMail.Add('С листа "'+SheetName+'" импортированы следующие данные:'#10);
        lstBodyMail.Add('Создано привязок товаров к моделям: '+IntToStr(AddLink3Count)+#10);
        lstBodyMail.Add('Создано условий применения товаров: '+IntToStr(AddLink3usageClause)+#10);
        lstBodyMail.Add('Изменено условий применения товаров: '+IntToStr(AddLink3Count)+#10);

        ErrMsg[l].AddObject('ИТОГО'#9+'Добавлено привязок товаров к моделям: '+
          IntToStr(AddLink3Count)+#9+SheetName+#9+'A1', pointer(2*100000));
      if TypeSys= constIsMoto then begin          
        ErrMsg[l].AddObject('ИТОГО'#9+'Добавлено условий применения товаров: '+
          IntToStr(AddLink3usageClause)+#9+SheetName+#9+'A1',pointer(1*100000+2));
        ErrMsg[l].AddObject('ИТОГО'#9+'Изменено условий применения товаров: '+
          IntToStr(UpdLink3usageClause)+#9+SheetName+#9+'A1',pointer(1*100000+1));
      end;
    end;
    on E: Exception do prMessageLOGS(nmProc+': '+E.Message, 'Import', False);
  end;      
finally
        
    // Добавим один новый лист после текущего
      XL.ActiveWorkbook.Sheets.Add(EmptyParam, WorkBook.Sheets.Item[SheetCount], 1, xlWorksheet, lcid);
      WorkSheet:= WorkBook.Sheets.Item[WorkBook.Sheets.Count] as Excel_TLB._Worksheet;
      WorkSheet.Name:= 'Импорт от'+FormatDateTime(' dd.mm hh_nn ',Now);
      recs:= 1;
  //-=создаем шапку для лога импорта

      WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= 'Статус  сообщения';
      WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= 'Лист';
      WorkSheet.Range['C'+IntToStr(recs), EmptyParam].Value2:= '   Ячейка   ';
      WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= 'Сообщение';
      usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
      usedRng.EntireRow.RowHeight:= usedRng.EntireRow.RowHeight*2;
      usedRng.Interior.Color:= isHeaderCell;
      usedRng.Font.Color:= cHEXtoINT(cnHeaderText);
      usedRng.Font.Bold:= True;
      usedRng.HorizontalAlignment:= xlCenter;
      usedRng.VerticalAlignment:= xlCenter;
      usedRng.Borders.Color:= cHEXtoINT(cnHeaderBorder);
      usedRng.BorderAround(xlContinuous, xlHairLine, xlColorIndexAutomatic, EmptyParam, EmptyParam);
      XL.ActiveWindow.SplitRow:= 1;
      XL.ActiveWindow.FreezePanes:= True;

  //=-шапка создана
      inc(recs);
      for j:= 0 to High(ErrMsg) do begin
        ErrMsg[j].CustomSort(@SizeCustomSort);
        rows:= ErrMsg[j].Count;
        for i:= 0 to rows-1 do begin
//          TestCssStopException;

          LogStr:= fnSplitStringChar(ErrMsg[j].Strings[i]);
          try
            ResCode:= trunc((integer(ErrMsg[j].Objects[i]))/100000);
            Case ResCode of
              -14..-10: begin
                  WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                  WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                  usedRng:= WorkSheet.Range['C'+IntToStr(recs),EmptyParam];
                  usedRng.Value2:= LogStr[3];
                  WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam, EmptyParam, EmptyParam);
                  WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                  usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
                  usedRng.Interior.Color:= isWarningCell;
                end;
              -9..-2: begin
                  WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                  WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                  usedRng:= WorkSheet.Range['C'+IntToStr(recs),EmptyParam];
                  usedRng.Value2:= LogStr[3];
                  WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam,EmptyParam, EmptyParam);
                  WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                  usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
                  usedRng.Interior.Color:= isErrorCell;
                end;
              -1: begin
                  WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                  usedRng:= WorkSheet.Range['B'+IntToStr(recs), EmptyParam];
                  usedRng.Value2:= LogStr[2];
                  WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam,EmptyParam, EmptyParam);
                  WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                  usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
                  usedRng.Interior.Color:= isErrorCell;
                end;
              1..2: begin
                  WorkSheet.Range['A'+IntToStr(recs), EmptyParam].Value2:= LogStr[0];
                  WorkSheet.Range['B'+IntToStr(recs), EmptyParam].Value2:= LogStr[2];
                  usedRng:= WorkSheet.Range['B'+IntToStr(recs), EmptyParam];
                  usedRng.Value2:= LogStr[2];
                  WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam,EmptyParam, EmptyParam);
                  WorkSheet.Range['D'+IntToStr(recs), EmptyParam].Value2:= LogStr[1];
                  usedRng:= WorkSheet.Range['A'+IntToStr(recs),'D'+IntToStr(recs)];
                  usedRng.Interior.Color:= isBorderGreenCell;
                end;
            end;
            inc (recs);
          finally
            SetLength(LogStr, 0);
          end;
        end;
      end;

      usedRng:= WorkSheet.Range['A1', 'D'+IntToStr(recs-1)];
      usedRng.Cells.WrapText:= False;
      usedRng.EntireRow.AutoFit;
      usedRng.EntireColumn.AutoFit;

      if ErrCount = 0 then
        lstBodyMail.Add('Ошибок импорта при обработке данного файла не обнаружено.')
      else
        lstBodyMail.Add('Во время импорта обнаружены ошибки. Некоторые данные не удалось занести в систему.'#10+
          'Подробнее смотрите на листе отчета по импорту в полученном файле.');
      lstBodyMail.Add(' ');
      if sss<>'' then lstBodyMail.Add(sss);    
(*
    end else begin
      s:= fnIfStr(TypeSys=constIsAuto, 'Авто', 'Мото');
      lstBodyMail.Add ('В указанном файле не удалось распознать данные для импорта привязок товаров к моделям '+
        s+'.'#10+'Убедитесь что соблюдена требуемая структура файла. К данному виду импорта на сайте есть "Help".');
    end;// if isWorkBookReadable then begin   

  except
    on E: EStopError do ss:= E.Message;
    on E: Exception do prMessageLOGS(nmProc+': '+E.Message, 'Import', False);
  end;
*)
  Subj:= 'Результаты импорта связок товаров с моделями  по ТД от '+FormatDateTime(cDateTimeFormatY2S, Now());
  ContentType:= XMLContentType;

//Секция очисток памяти
  if Assigned(WorkBook) then begin
    Workbook.CheckCompatibility := False;
    WorkBook.Save(lcid);
    WorkBook.Close(false, EmptyParam, EmptyParam, lcid);
  end;
  if Assigned(XL) then begin
    XL.Quit;// закрыть Excel
    XL.Disconnect;
    prFree(XL);
  end;
  FNameI:= ExtractFilePath(FName)+fnFormRepFileName(IntToStr(ImpCheck.GetImpType(UserID, ThreadData.ID)), FName, constOpImport);                 
  RenameFile(FName, FNameI);
  FName:= FNameI;
  prFree(Wares);
  SetLength(ListFirstReadRow, 0);
  SetLength(WareCellIndexes, 0);
  SetLength(readSheets, 0);
  SetLength(LogStr, 0);
  SetLength(Link3usageClauseToAdd_ar, 0);
  SetLength(Link3toAdd_ar, 0);
  for i:= 0 to High(ErrMsg) do if ErrMsg[i]<>nil then prFree(ErrMsg[i]); 
  SetLength(ErrMsg, 0);
end;
end;
//=======================================================================================
function fnRepOETecDoc45(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,
   ContentType:string; ThreadData: TThreadData; filter_data: string): string;
const
 nmProc = 'fnOETecDoc'; // имя процедуры/функции
var
  XL: TExcelApplication;
  WorkBook: Excel_TLB._Workbook;
  WorkSheet, WorkSheet1: Excel_TLB._Worksheet;  
  usedRng: Range;
  SheetCount, SheetC: integer;
  SheetID, rows, irow, cols: integer;
  SheetName: string;
  IBD, ORD_IBD: TIBDatabase;
  IBS, IBSText, IBSLink3, ORD_IBS: TIBSQL;
  Content, Comment, PathFile, s: string;
  iCount, iCol, iR, LenWare, i, j, iArt, iArticle, iArticleON, {iModelLine,} iModID: integer;
  Ware: TWareInfo;
  ArtID,BrandID,CManufID, CModelID, CModelLineID, ModelID, ModelLineID, ManufID: integer;
  Title, ss, OE, WareName: string;
  arComment, arArticle, arArticleON: tas;
  Manuf: TManufacturer;
  ModelLine: TModelLine;
  Model: TModelAuto;
  arON, arModID: tai;
  ONum: TOriginalNumInfo;
  MWareList, List{, CriUsedList,UseTextList} : TStringList;
  arBrand, arWaresDop: tas;
  BrandList: TStringList;
  isColorCell, isYellowCell, isGreenCell, isHeaderCell,isHeaderText, isGrayCell, isGrayModel: integer;
//  isErrorCell: integer;
  Product, IBSRes: boolean;
  Percent: real;
  ii, jj, k, countNode, nn, n: integer; 
  FilterData: TStringList;
  Filters,WaresDop, Link3, NLink3: string;
  Node: TAutoTreeNode;
  arNodeID: array of TTwoCodes; 
  arWareID: tai;
  Rep: string;// RepExcel,RepArray
//  timerStart: TDateTime;
begin 
//  timerStart:= Now;
  SheetC:=0;
  Filters:='';
  s:= '';
  iCount:= 0;
  ModelLine:=nil;
  Model:= nil;
  IBD:=nil;
  IBS:= nil;
  IBSText:= nil;
  ORD_IBD:=nil;
  IBSLink3:= nil;
  ORD_IBS:= nil;
  MWareList:= nil;
  SetLength(arArticle, 0);
  SetLength(arComment, 0);
  iArticle:=0;
  List:=nil;
  isColorCell:=0;
  iModID:=0;
  iR:=0;
  iCol:=0;  
  jj:= 0;
//  CModelLineID:= -1;
  CModelID:= -1;
if FName='' then Rep:= 'RepArray'
else Rep:= '(по файлу '+ExtractFileName(FName)+')';
if Rep = 'RepArray' then begin
  FilterData:=nil;
  FilterData:= TStringList.Create;
  FilterData.Text:= filter_data;
  WaresDop:= FilterData.Values['dop_ware'];
//WaresDop:='ALPHA 0004,ALPHA 0001,ALPHA 0068,ALPHA 102,ALPHA 103, ALPHA 106,ALPHA 107,ALPHA 109,ALPHA 110';
  arWaresDop:= fnSplitString(WaresDop, ',');
  if FName='' then begin
    if not GetEmplTmpFilePath(UserID, PathFile, s) then raise EBOBError.Create(s); 
    FName:= PathFile+fnFormRepFileName('45_', '.xlsx', ImpCheck.GetCheckKind(UserID, ThreadData.ID));
  end;
  if FileExists(FName) and not SysUtils.DeleteFile(FName) then begin
    s:= MessText(mtkNotDelPrevFile);
    raise EBOBError.Create(MessText(mtkNotDelPrevFile));
  end;  
end;
  SetLength(arBrand,100);
  BrandList:= nil;
  BrandList:= cache.BrandTDList;
  for i := 0 to BrandList.Count-1 do begin
    j:=integer(BrandList.Objects[i]);
    if length(arBrand)<j then SetLength(arBrand,j+1); 
    arBrand[j]:= BrandList[i];
  end;
  SetLength(arWareID,1);
Percent:= 2;
ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);  
  try
    IBD:= cntsTDT.GetFreeCnt;

//    if (IBD=nil) then Exit;

    try
      IBS:= fnCreateNewIBSQL(IBD,'Query_'+nmProc, -1, tpRead, true);
      IBSText:= fnCreateNewIBSQL(IBD,'QueryText_'+nmProc, -1, tpRead, true);
(*      IBS.SQL.Text:='SELECT RN_ART_NR, RN_ART_ID, RN_SUP_ID, RN_MF_ID, RN_REF_NR, MT_ID, MT_DESCR, MT_MS_ID, MT_MS_DESCR, ' 
                   +'MT_FROM, MT_TO, MT_HP, /*ENG_ID, ENG_MARK,*/ DS_MF_ID '
                   +'FROM REF_NUMBERS, LINK_ART_GA_TYPE, MODEL_TYPES, MODEL_SERIES, /*LINK_ENG_MODEL_TYPES, ENGINES,*/ DATA_SUPPLIERS '
                   +'where LAGT_ART_ID=RN_ART_ID and  LAGT_MT_ID=MT_ID and MS_ID=MT_MS_ID and RN_MF_ID= MS_MF_ID '
                   +'and RN_SUP_ID= DS_ID /*and LEMT_MT_ID=MT_ID  and LEMT_ENG_ID= ENG_ID*/ and RN_REF_NR_BS=:pWare and RN_MF_ID = :pMfId '
                   +'order by RN_REF_NR, RN_MF_ID, MT_MS_ID,MT_ID, DS_BRA, RN_ART_NR'; *)

     IBS.SQL.Text:= 'select MS_MF_ID as RN_MF_ID, RN_REF_NR,RN_REF_NR_BS,RN_ART_NR, RN_ART_ID, RN_SUP_ID, LAGT_MT_ID, '
                  + 'MT_ID, MT_DESCR, MT_MS_ID, MT_MS_DESCR, (select DS_MF_ID from DATA_SUPPLIERS where RN_SUP_ID= DS_ID) DS_MF_ID '
                  + 'from (select RN_MF_ID, RN_REF_NR,RN_REF_NR_BS,RN_ART_NR, RN_ART_ID, RN_SUP_ID, LAGT_MT_ID '
                  + 'FROM REF_NUMBERS, LINK_ART_GA_TYPE where LAGT_ART_ID=RN_ART_ID  and RN_REF_NR_BS=:pWare and (RN_MF_ID= :pMfId1 or RN_MF_ID= :pMfId2) '
                  + 'order by RN_REF_NR_BS, LAGT_MT_ID)  RL '
                  + 'left join (select MT_ID, MT_DESCR, MT_MS_ID, MT_MS_DESCR, MS_MF_ID '
                  + 'from MODEL_TYPES, MODEL_SERIES where MS_ID=MT_MS_ID ) ST on RL.LAGT_MT_ID=ST.MT_ID '
                  + 'order by MT_MS_ID,MT_ID,RN_ART_NR ';
      IBS.Prepare;
//      IBS.ExecQuery;      
      IBSText.SQL.Text:='select rText from GETARTTYPEUsesAndTexts(:pArtID, :pModelID)';
      IBSText.Prepare;
      //-----------------------------------------------------       
      ORD_IBD:= cntsORD.GetFreeCnt;
      IBSLink3:= fnCreateNewIBSQL(ORD_IBD,'QueryLink3_'+nmProc, -1, tpRead, true);
      IBSLink3.SQL.Text:='SELECT LDMWCODE , ldmwwrong Link3, LDEMTRNACODE NCode '
                   +'FROM LINKDETMODWARE, LINKDETAILMODEL '
                   +'where  LDMWWARECODE= :pWareID and '
                   +'LDMWLDEMCODE= LDEMCODE and LDEMDMOSCODE= :pModelID ';
      IBSLink3.Prepare;
      
      ORD_IBS:= fnCreateNewIBSQL(ORD_IBD, 'ORD_IBS_'+nmProc, -1, tpRead, true);
      ORD_IBS.SQL.Text:= 'select Tpart, iif(WCRIORDNUM is null, 999, WCRIORDNUM) ORDNUM, '
        +'WCVSWCRICODE Ttype, WCRIDESCR Tname, WCVSVALUE Ttext, rWrong, rSrc '
        +'from (select LWMNUPART Tpart, LWMNUWCVSCODE, '
        +'  iif(LWMNUWRONG="T", 1, 0) rWrong, lwmnusrclecode rSrc '
        +'  from LINKWAREMODELNODEUSAGE where LWMNULDMWCODE = :pLDMV) '
        +'left join WARECRIVALUES on WCVSCODE = LWMNUWCVSCODE '
        +'left join WARECRITERIES on WCRICODE = WCVSWCRICODE ';
      ORD_IBS.Prepare;
      
//try
    XL:= TExcelApplication.Create(nil);
    WorkBook:= nil;
//--== Инициализируем работу экземпляра Excel
    CoInitializeEx(nil, COINIT_MULTITHREADED);
    XL.ConnectKind:= ckNewInstance;
    XL.Connect;
    XL.Visible[lcid]:= False;
    //XL.AutoQuit:= False;
    XL.ScreenUpdating[lcid]:= False;
    XL.DisplayAlerts[lcid]:= False;
    XL.Calculation[lcid] := xlManual;
 // отменяем автоматическую проверку ошибок в ячейках
    with XL.ErrorCheckingOptions do begin
      BackgroundChecking := False;
      NumberAsText := False;
      InconsistentFormula := False;
    end;

 // создаем файл
    if (Rep = 'RepArray') and Assigned(XL) and (not Assigned(WorkBook)) then begin
      XL.Workbooks.Add(EmptyParam, lcid);
      WorkBook:= XL.ActiveWorkbook;
    end;
    if (Rep <> 'RepArray') and Assigned(XL) and (not Assigned(WorkBook)) then begin
      prStopProcess( UserID, ThreadData.ID);
      if copy(FName, length(FName)-5+1,5)='.xlsx' then
        prAutoFilterXLSX(FName);
      //TestCssStopException;
      WorkBook := XL.Workbooks.Open (FName,     // 1// const Filename: WideString;
                                     0,              // 2// UpdateLinks: OleVariant;
                                     false,          // 3// ReadOnly: OleVariant;
                                     EmptyParam,     // 4// Format: OleVariant;
                                     EmptyParam,     // 5// Password: OleVariant;
                                     EmptyParam,     // 6// WriteResPassword: OleVariant;
                                     true,           // 7// IgnoreReadOnlyRecommended: OleVariant;
                                     EmptyParam,     // 8// Origin: OleVariant;
                                     5,              // 9// Delimiter: OleVariant;
                                     False,          //10// Editable: OleVariant;
                                     false,          //11// Notify: OleVariant;
                                     EmptyParam,     //12// Converter: OleVariant;
                                     EmptyParam,     //13// Local: OleVariant;
                                     EmptyParam,     //14// CorruptLoad: OleVariant;
                                     false,          //15// AddToMru: OleVariant;
                                     lcid);          //16// lcid: Integer): Workbook; safecall;
      SheetCount:= WorkBook.Worksheets.Count; //количество листов excel
      SheetC:= SheetCount;
      SheetID:= 1;
      SetLength(arWaresDop,0);
      j:=0;
      while SheetID <= SheetCount do begin    
        WorkSheet:= WorkBook.Sheets.Item[SheetID] as Excel_TLB._Worksheet;  
        SheetName:= WorkSheet.Name;
//        WorkSheet.Name:= fnValidExcelSheetName('1'+SheetName);
        WorkSheet.Copy(EmptyParam, WorkBook.Sheets.Item[SheetCount+SheetID-1],lcid);
        WorkSheet1:= WorkBook.Sheets.Item[SheetCount+SheetID] as Excel_TLB._Worksheet;
        WorkSheet1.Name:= fnValidExcelSheetName('1'+SheetName);
        
        usedRng:= WorkSheet.Range['A1', EmptyParam].SpecialCells(xlCellTypeLastCell,EmptyParam);
        rows:= usedRng.Row;
        cols:= usedRng.Column;    
        if rows>0 then  SetLength(arWaresDop,length(arWaresDop)+rows);
        for irow:= 1 to rows do begin                                         // по строкам**************
           prStopProcess( UserID, ThreadData.ID);
           TestCssStopException; 
//           ImpCheck.SetProcessPercent( UserID, ThreadData.ID, PPercent);
           usedRng:= WorkSheet.Range['A'+IntToStr(irow), EmptyParam];
           if length(trim(fnOleXLCellReader(VarToStr(usedRng.Value2))))<1 then continue;
           arWaresDop[j]:= fnOleXLCellReader(VarToStr(usedRng.Value2));
           inc(j);
        end;
        inc(SheetID);
      end;
      if length(arWaresDop)>j then  SetLength(arWaresDop,j);
      
    end;
prSheetTreeNodes(WorkBook,{SheetC+}2);    //Узлы
    Percent:= 13;
    ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);
prSheetCriterias(WorkBook,{SheetC+}3);    //критерии
    Percent:= 7;
    ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);
    
    SheetCount:= WorkBook.Sheets.Count;

    if SheetCount > 1 then begin
      SheetID:= {SheetC+}1;
      SheetName:= 'Report45';
      WorkSheet:= WorkBook.Sheets.Item[SheetID] as Excel_TLB._Worksheet;
      WorkSheet.Name:= fnValidExcelSheetName(SheetName);
    end else begin
      while SheetCount < 1 do begin
      //Добавим один новый лист после текущего
        XL.ActiveWorkbook.Sheets.Add(EmptyParam, WorkBook.Sheets.Item[WorkBook.Sheets.Count], 1, xlWorksheet, lcid);
        SheetCount:= WorkBook.Sheets.Count;
      end;
      SheetID:= {SheetC+}1;
      SheetName:= 'Report45';
      WorkSheet:= WorkBook.Sheets.Item[SheetID] as Excel_TLB._Worksheet;
      WorkSheet.Name:= fnValidExcelSheetName(SheetName);
    end;
    WorkSheet:= WorkBook.Sheets.Item[SheetID] as Excel_TLB._Worksheet;
    WorkSheet.Name:= fnValidExcelSheetName(SheetName);
    WorkSheet.Range['C:C', EmptyParam].EntireColumn.NumberFormat:='@';
    WorkSheet.Range['G:G', EmptyParam].EntireColumn.NumberFormat:='@';
    WorkSheet.Range['H:H', EmptyParam].EntireColumn.NumberFormat:='@';

    isHeaderCell:= cHexToInt(cnHeaderCell);
    isHeaderText:= cHEXtoINT(cnHeaderText);
    isGreenCell:= cHexToInt(cnGreenCell);
    isYellowCell:= cHexToInt(cnYellowCell);
    isGrayCell:= cHEXtoINT(cnGrayCell);
    isGrayModel:= cHEXtoINT(cnGrayModel);
        
  //рисуем шапку листа:
    usedRng:= WorkSheet.Range['A1', 'N1'];
    usedRng.Cells.WrapText:= True;
    usedRng.Interior.Color:= isHeaderCell;
    usedRng.Font.Color:= isHeaderText;
    usedRng.Font.Bold:= True;
    usedRng.VerticalAlignment:= xlCenter;
    usedRng.HorizontalAlignment:= xlCenter;
    usedRng.Rows.RowHeight:= 45;
//XL.Columns.NumberFormat:= '@';   
    usedRng:= Worksheet.Range['A1', EmptyParam];
    usedRng.Value2:= 'Наименование'#10+' товара'; //+fnIfStr(TypeSys=constIsAuto, 'АВТО', 'МОТО');
    usedRng.Columns.ColumnWidth:= 15;

    usedRng:= Worksheet.Range['B1', EmptyParam];
    usedRng.Value2:= 'Узел';
    usedRng.Columns.ColumnWidth:= 15;

    usedRng:= Worksheet.Range['C1', EmptyParam];
    usedRng.Value2:= 'Оригинальный'#10+' номер';
    usedRng.Columns.ColumnWidth:= 15;

    usedRng:= Worksheet.Range['D1', EmptyParam];
    usedRng.Columns.ColumnWidth:= 9;
    usedRng.Value2:= 'Статус '#10+'привязки ';

    usedRng:= Worksheet.Range['E1', EmptyParam];
    usedRng.Columns.ColumnWidth:= 15;
    usedRng.Value2:= 'Производитель';
    
    usedRng:= Worksheet.Range['F1', EmptyParam];
    usedRng.Columns.ColumnWidth:= 15;
    usedRng.Value2:= 'Модельный ряд';
    
    usedRng:= Worksheet.Range['G1', EmptyParam];
    usedRng.Columns.ColumnWidth:= 15;
    usedRng.Value2:= 'Модель';
    
    usedRng:= Worksheet.Range['H1', EmptyParam];
    usedRng.Columns.ColumnWidth:= 16;
    usedRng.Value2:= 'год выпуска';
    
    usedRng:= Worksheet.Range['I1', EmptyParam];
    usedRng.Columns.ColumnWidth:= 10;
    usedRng.Value2:= 'Мощность,'#10+' л.с.';
    
    usedRng:= Worksheet.Range['J1', EmptyParam];
    usedRng.Columns.ColumnWidth:= 10;
    usedRng.Value2:= 'Двигатели';
    
    usedRng:= Worksheet.Range['K1', EmptyParam];
    usedRng.Columns.ColumnWidth:= 10;
    usedRng.Value2:= 'Название'#10+' критерия';

    usedRng:= Worksheet.Range['L1', EmptyParam];
    usedRng.Columns.ColumnWidth:= 10;
    usedRng.Value2:= 'Значение'#10+' критерия';
    
    usedRng:= Worksheet.Range['M1', EmptyParam];
    usedRng.Columns.ColumnWidth:= 10;
    usedRng.Value2:= 'Название'#10+' критерия';
    
    usedRng:= Worksheet.Range['N1', EmptyParam];
    usedRng.Columns.ColumnWidth:= 10;
    usedRng.Value2:= 'Значение'#10+' критерия';


////////////////////////////////////////////////////////////////////////////////
      Product:= (length(cache.arEmplInfo[UserID].UserRoles)=1) and (cache.arEmplInfo[UserID].UserRoleExists(rolProduct));

      if Product then 
        MWareList:= Cache.GetSysManagerWares(0,UserID)
      else  MWareList:= Cache.GetSysManagerWares(); 

      LenWare:= Length(arWaresDop);
      prStopProcess( UserID, ThreadData.ID);
      Percent:= 70;
      ii:=2;
      jj:=14;      
      if LenWare>0 then Percent:= Percent/LenWare else ImpCheck.SetProcessPercent(UserID,ThreadData.ID,Percent);
      for i:= 0 to LenWare-1 do begin     /////////////////////////////////
        prStopProcess( UserID, ThreadData.ID);
        k:=MWareList.IndexOf(arWaresDop[i]);
        if k<0 then continue; 
        Ware:= Cache.GetWare(integer(MWareList.Objects[k]));
        arWareID[0]:= Ware.ID;
        Comment:= '';  
        Comment:= Comment+ Ware.Comment+' ; Тип:'+Ware.TypeName;
              
        WareName:='';
        if Ware.IsWare and (Ware.ArticleTD='') then begin
          SetLength(arModID,0);
          SetLength(arModID,10);
          iModID:=0;
          arON:= Ware.ONumLinks.GetLinkListCodes(lkLnkByID);
          for j := 0 to length(arON)-1 do begin
            if Cache.FDCA.OrigNumExist(arON[j]) then begin
              ONum:= Cache.FDCA.GetOriginalNum(arON[j]);
              IBS.ParamByName('pWare').AsString:= ONum.Name;
              Manuf:= Cache.FDCA.Manufacturers.Items[ONum.MfAutoID]; 
              IBS.ParamByName('pMfId1').AsInteger:= Manuf.SubCode;  
              IBS.ParamByName('pMfId2').AsInteger:= Manuf.SubCode;
              if (Manuf.SubCode=111) or (Manuf.SubCode=842) then begin IBS.ParamByName('pMfId1').AsInteger:= 111; IBS.ParamByName('pMfId2').AsInteger:= 842;end;
              if (Manuf.SubCode=80) or (Manuf.SubCode=1526) then begin IBS.ParamByName('pMfId1').AsInteger:= 80; IBS.ParamByName('pMfId2').AsInteger:= 1526;end;
              IBS.ExecQuery;
              ModelID:=-1;
              OE:='';
              iArticle:=0;
              iArticleON:=0;
              SetLength(arArticleON, 0);
              SetLength(arArticleON, 10);   
              SetLength(arArticle, 0);
//              SetLength(arArticle, 10); 
              SetLength(arComment, 0);   
              if (WareName <> Ware.Name) then begin
                    usedRng:= Worksheet.Range['A'+IntToStr(ii), EmptyParam];
                    usedRng.Interior.Color:= isGreenCell;
                    usedRng.Value2:= Ware.Name;
                    WareName:= Ware.Name;
                    usedRng.AddComment(Comment);
                    with Worksheet.Range['A'+IntToStr(ii), EmptyParam].Comment.Shape.TextFrame.Characters(0, EmptyParam) do begin
                      Font.Bold := False;
                      Font.Color := clNavy;
                    end;
                    inc(ii);//переходим на следующую строку
                inc(iCount);
              end;
              if (OE<> ONum.Name) then  begin
                      usedRng:= Worksheet.Range['C'+IntToStr(ii), EmptyParam];
                      if copy(ONum.Name,1,1)='0' 
                      then usedRng.NumberFormat:='@';
                      usedRng.Value2:= ONum.Name;
                      OE:= ONum.Name;
                      usedRng:= Worksheet.Range['E'+IntToStr(ii), EmptyParam];
                      usedRng.Value2:= Manuf.Name;
                inc(iCount);      
              end;  
              IBSRes:= False;                   
              while not IBS.EOF do begin  
                prStopProcess( UserID, ThreadData.ID);
                IBSRes:=True;
                try
                  if (CModelID>-1) and (ModelID<>IBS.FieldByName('MT_ID').AsInteger) then begin

                    SetLength(arArticle, iArticleON);
                    SetLength(arComment, iArticleON);
                    if iCol<iArticleON then  iCol:=iArticleON;

                    if CModelID>-1 then begin
                      if iModID>length(arModID)-1 then  SetLength(arModID,length(arModID)+10);
                      if fnInIntArray(CModelID,arModID)<0 then begin
                        arModID[iModID]:= CModelID;
                        inc(iModID);
                        isColorCell:= isGrayModel;
                      end;                    
                      ss:= StringReplace(fnGetYMBE(Model.Params.pYStart, Model.Params.pMStart, Model.Params.pYEnd, Model.Params.pMEnd),cWebSpace, ' ', [rfReplaceAll]);                 
                      usedRng:= Worksheet.Range['E'+IntToStr(ii), EmptyParam];
                      usedRng.Value2:= Manuf.Name;
                      usedRng:= Worksheet.Range['F'+IntToStr(ii), EmptyParam];
                      if copy(ModelLine.Name,1,1)='0' 
                      then usedRng.NumberFormat:='@';
                      usedRng.Value2:= ModelLine.Name;
                      IBSLink3.ParamByName('pWareID').AsInteger:=Ware.ID;
                      IBSLink3.ParamByName('pModelID').AsInteger:= Model.ID;
                      IBSLink3.ExecQuery;
                      Link3:='';
                      NLink3:='';
                      countNode:=0;
                      SetLength(arNodeID,0);
                      SetLength(arNodeID,10);
                      while not IBSLink3.EOF do begin
                        Link3:= IBSLink3.FieldByName('Link3').AsString;
                        if countNode>0 then NLink3:= NLink3+#10;
                        if Cache.FDCA.AutoTreeNodesSys[constIsAuto].NodeGet(IBSLink3.FieldByName('NCode').AsInteger, Node) then
                          NLink3:= NLink3+ Node.Name{ IBSLink3.FieldByName('NCode').AsInteger};
                        if Length(arNodeID)=countNode then SetLength(arNodeID,Length(arNodeID)+10);
                        arNodeID[countNode]:= TTwoCodes.Create(Node.ID, IBSLink3.FieldByName('LDMWCODE').AsInteger);//Node.ID;
                        inc(countNode);
                        IBSLink3.Next;
                      end;
                      IBSLink3.Close;
                      SetLength(arNodeID,countNode);
                      if countNode>0 then begin
                        for n := 0 to countNode-1 do begin
                          ORD_IBS.ParamByName('pLDMV').AsInteger:= TTwoCodes(arNodeID[n]).ID2;
                          ORD_IBS.ExecQuery;
                          nn:=0;
                          while not ORD_IBS.Eof do begin
                            //if countNode=1 then begin 
                            usedRng:= Worksheet.Range[IntToABC(10+nn)+IntToStr(ii), EmptyParam];
                            if countNode=1 then
                              usedRng.Value2:= ORD_IBS.FieldByName('Tname').AsString
                            else usedRng.Interior.Color:= isYellowCell;
                            if IntToABC(nn)<>'O' then inc(nn);
                            usedRng:= Worksheet.Range[IntToABC(10+nn)+IntToStr(ii), EmptyParam];
                            if countNode=1 then
                              usedRng.Value2:= ORD_IBS.FieldByName('Ttext').AsString
                            else usedRng.Interior.Color:= isYellowCell;;
                            if IntToABC(nn)<>'O' then inc(nn);
                            //end;
                            ORD_IBS.Next;
                          end;
                          ORD_IBS.Close;
                        end;
                        
                        usedRng:= Worksheet.Range['B'+IntToStr(ii), EmptyParam];
                        if countNode=1 then begin
                          usedRng.Value2:= NLink3;
                          usedRng.Borders.Item[xlDiagonalDown].LineStyle := xlNone;
                          usedRng.Borders.Item[xlDiagonalUp].LineStyle := xlNone;
                          usedRng.Borders.Item[xlEdgeRight].Color:= fnGetIntFromRGB(fnColorModulator(Node.ID));
                          usedRng.Borders.Item[xlEdgeRight].LineStyle:= xlContinuous;
                          usedRng.Borders.Item[xlEdgeRight].Weight:= xlThin;
                        end
                        else begin
                          usedRng.Interior.Color:= isYellowCell;
                          usedRng.AddComment(NLink3); 
                          usedRng.Comment.Shape.Height:=150;
                          usedRng.Comment.Shape.Width:= 150;
                          usedRng.Comment.Shape.TextFrame.Characters(0, EmptyParam).Font.Bold:= False;
                        end;
                      end;
                      if Link3<>'' then begin
                        usedRng:= Worksheet.Range['D'+IntToStr(ii), EmptyParam];
                        if countNode=1 then begin
                          usedRng.Value2:= fnIfStr(Link3='F','1','4');
                          //usedRng.Interior.Color:= isGreenCell;
                        end;
                        //else
                        usedRng.Interior.Color:= isGreenCell;//isYellowCell;
                        //if Link3='F' then usedRng.Interior.Color:= isGreenCell
                        //else usedRng.Interior.Color:= isYellowCell;
                      end;

                      usedRng:= Worksheet.Range['G'+IntToStr(ii), EmptyParam];
                      if copy(Model.Name,1,1)='0' 
                      then usedRng.NumberFormat:='@';
                      usedRng.Value2:= Model.Name;
                      usedRng.Borders.Item[xlDiagonalDown].LineStyle := xlNone;
                      usedRng.Borders.Item[xlDiagonalUp].LineStyle := xlNone;
                      usedRng.Borders.Item[xlEdgeRight].Color:= fnGetIntFromRGB(fnColorModulator(Model.ID));
                      usedRng.Borders.Item[xlEdgeRight].LineStyle:= xlContinuous;
                      usedRng.Borders.Item[xlEdgeRight].Weight:= xlThin;
                      usedRng:= WorkSheet.Range['F'+IntToStr(ii), 'G'+IntToStr(ii)];
                      if isColorCell<>0 then
                        usedRng.Interior.Color:= isColorCell;//isYellowCell;
                      usedRng:= Worksheet.Range['H'+IntToStr(ii), EmptyParam];
                      usedRng.Value2:= ss;
                      usedRng:= Worksheet.Range['I'+IntToStr(ii), EmptyParam];
                      usedRng.Value2:= IntToStr(Model.Params.pHP);
                      usedRng:= Worksheet.Range['J'+IntToStr(ii), EmptyParam];
                      usedRng.Value2:= Model.MarksCommaText;
                      for iArt := 0 to length(arArticle)-1 do begin 
                        usedRng:= Worksheet.Range[IntToABC(jj+iArt)+IntToStr(ii), EmptyParam];
                        if arArticle[iArt]<>'' then begin
                          if copy(arArticle[iArt],1,1)='0' 
                          then usedRng.NumberFormat:='@';
                          usedRng.Value2:= arArticle[iArt];
                        end;
                        if arComment[iArt]<>'' then begin
                          usedRng.AddComment(arComment[iArt]);
                          usedRng.Comment.Shape.Height:=150;
                          usedRng.Comment.Shape.Width:= 150;
                          usedRng.Comment.Shape.TextFrame.Characters(0, EmptyParam).Font.Bold:= False;
                        end;
                      end;

                      SetLength(arArticle, 0);
                      SetLength(arArticle, 10);
                      SetLength(arComment, 0);
//                      CModelID:= -1;
//                      CModelLineID:= -1;
                      iArticle:=0;
                      isColorCell:=0;
                      {OE:= ONum.Name;
                      inc(ii);}
                    end;
                    inc(ii);
                  end;
                  ArtID:= IBS.FieldByName('RN_ART_ID').AsInteger;                                                       
                  ModelID:=IBS.FieldByName('MT_ID').AsInteger;
                  ModelLineID:=IBS.FieldByName('MT_MS_ID').AsInteger;
                  ManufID:=IBS.FieldByName('RN_MF_ID').AsInteger;
                  BrandID:=IBS.FieldByName('DS_MF_ID').AsInteger;
                  CManufID:=Cache.FDCA.Manufacturers.GetManufIDByTDcode(ManufID);
                  Manuf:= Cache.FDCA.Manufacturers.Items[CManufID];
                  CModelLineID:=Manuf.GetMfMLineIDByTDcode(ModelLineID);
                  ModelLine:= Cache.FDCA.ModelLines.GetModelLine(CModelLineID);
                  CModelID:= ModelLine.GetMLModelIDByTDcode(ModelID);
                  if CModelID>-1 then begin
                    Model:= Cache.FDCA.Models.GetModel(CModelID);
  //                  OE:= IBS.FieldByName('RN_REF_NR').AsString;
                    if iArticleON>length(arArticleON)-1 then  SetLength(arArticleON,length(arArticleON)+10);
                    if fnInStrArray(arBrand[BrandID]+' '+IBS.FieldByName('RN_ART_NR').AsString,arArticleON)<0 then begin     //fnInStrArray(What: String; Where: Tas; CaseSensitive: boolean=true): integer;
                      arArticleON[iArticleON]:=arBrand[BrandID]+' '+IBS.FieldByName('RN_ART_NR').AsString;
                      inc(iArticleON);
                    end;
                    if length(arArticle)<length(arArticleON) then SetLength(arArticle, length(arArticleON));
  //                  if iArticle>length(arArticle)-1 then  SetLength(arArticle,length(arArticle)+10);
                    if fnInStrArray(arBrand[BrandID]+' '+IBS.FieldByName('RN_ART_NR').AsString,arArticle)<0 then begin     //fnInStrArray(What: String; Where: Tas; CaseSensitive: boolean=true): integer;
                      arArticle[fnInStrArray(arBrand[BrandID]+' '+IBS.FieldByName('RN_ART_NR').AsString,arArticleON)]:=arBrand[BrandID]+' '+IBS.FieldByName('RN_ART_NR').AsString;
                      IBSText.ParamByName('pArtID').AsInteger:= ArtID;
                      IBSText.ParamByName('pModelID').AsInteger:= ModelID;
                      IBSText.ExecQuery;
                      Comment:='';
                      while not IBSText.EOF do begin
                        Comment:= Comment+ IBSText.FieldByName('RTEXT').AsString+#10;
                        IBSText.Next;
                      end;
                      IBSText.Close;
                      if length(arComment)<length(arArticleON) then SetLength(arComment, length(arArticleON));
                      arComment[fnInStrArray(arBrand[BrandID]+' '+IBS.FieldByName('RN_ART_NR').AsString,arArticleON)]:=Comment;
                      inc(iArticle);
                      inc(iCount);
                    end;
                  end;                  

                except
                  on E: EStopError do begin
                    s:= E.Message;
                    raise EStopError.Create(E.Message);
                  end;                  
                  on E: Exception do begin
                    prMessageLOGS('Ошибка в процедуре '+nmProc+' '+ E.Message, 'import', false) ;
                    s:=  'Ошибка при обработке результатов запроса. ';
                    raise Exception.Create(Title+#13+s+E.Message);
                  end;
                end;
        
                IBS.Next;                 
              end;  
              IBS.Close;
              if (CModelID>-1) and (iArticle<>0) then begin
                SetLength(arArticle, iArticleON);
                SetLength(arComment, iArticleON);
                if CModelID>-1 then begin 
                  if iModID>length(arModID)-1 then  SetLength(arModID,length(arModID)+10);
                  if fnInIntArray(CModelID,arModID)<0 then begin
                    arModID[iModID]:= CModelID;
                    inc(iModID);
                    isColorCell:= isGrayModel;
                  end;                  
                  ss:= StringReplace(fnGetYMBE(Model.Params.pYStart, Model.Params.pMStart, Model.Params.pYEnd, Model.Params.pMEnd),cWebSpace, ' ', [rfReplaceAll]);                 
                  usedRng:= Worksheet.Range['E'+IntToStr(ii), EmptyParam];
                  usedRng.Value2:= Manuf.Name;
                  usedRng:= Worksheet.Range['F'+IntToStr(ii), EmptyParam];
                  if copy(ModelLine.Name,1,1)='0' 
                  then usedRng.NumberFormat:='@';
                  usedRng.Value2:= ModelLine.Name;
                  IBSLink3.ParamByName('pWareID').AsInteger:=Ware.ID;
                  IBSLink3.ParamByName('pModelID').AsInteger:= Model.ID;
                  IBSLink3.ExecQuery;
                  Link3:='';
                  NLink3:='';
                  countNode:=0;
                  SetLength(arNodeID,0);
                  SetLength(arNodeID,10);
                  while not IBSLink3.EOF do begin
                    Link3:= IBSLink3.FieldByName('Link3').AsString;
                    if countNode>0 then NLink3:= NLink3+#10;
                    if Cache.FDCA.AutoTreeNodesSys[constIsAuto].NodeGet(IBSLink3.FieldByName('NCode').AsInteger, Node) then
                      NLink3:= NLink3+ Node.Name{ IBSLink3.FieldByName('NCode').AsInteger};
                    if Length(arNodeID)=countNode then SetLength(arNodeID,Length(arNodeID)+10);
                    arNodeID[countNode]:= TTwoCodes.Create(Node.ID, IBSLink3.FieldByName('LDMWCODE').AsInteger);//Node.ID;
                    inc(countNode);
                    IBSLink3.Next;
                  end;
                  IBSLink3.Close;
                  SetLength(arNodeID,countNode);
                  if countNode>0 then begin
                    for n := 0 to countNode-1 do begin
                      ORD_IBS.ParamByName('pLDMV').AsInteger:= TTwoCodes(arNodeID[n]).ID2;
                      ORD_IBS.ExecQuery;
                      nn:=0;
                      while not ORD_IBS.Eof do begin
                        //if countNode=1 then begin 
                        usedRng:= Worksheet.Range[IntToABC(10+nn)+IntToStr(ii), EmptyParam];
                        if countNode=1 then
                          usedRng.Value2:= ORD_IBS.FieldByName('Tname').AsString
                        else usedRng.Interior.Color:= isYellowCell;
                        if IntToABC(nn)<>'O' then inc(nn);
                        usedRng:= Worksheet.Range[IntToABC(10+nn)+IntToStr(ii), EmptyParam];
                        if countNode=1 then
                          usedRng.Value2:= ORD_IBS.FieldByName('Ttext').AsString
                        else usedRng.Interior.Color:= isYellowCell;;
                        if IntToABC(nn)<>'O' then inc(nn);
                        //end;
                        ORD_IBS.Next;
                      end;
                      ORD_IBS.Close;
                    end;
                    usedRng:= Worksheet.Range['B'+IntToStr(ii), EmptyParam];
                    if countNode=1 then begin
                      usedRng.Value2:= NLink3;
                      usedRng.Borders.Item[xlDiagonalDown].LineStyle := xlNone;
                      usedRng.Borders.Item[xlDiagonalUp].LineStyle := xlNone;
                      usedRng.Borders.Item[xlEdgeRight].Color:= fnGetIntFromRGB(fnColorModulator(Node.ID));
                      usedRng.Borders.Item[xlEdgeRight].LineStyle:= xlContinuous;
                      usedRng.Borders.Item[xlEdgeRight].Weight:= xlThin;
                    end
                    else begin
                      usedRng.Interior.Color:= isYellowCell;
                      usedRng.AddComment(NLink3); 
                      usedRng.Comment.Shape.Height:=150;
                      usedRng.Comment.Shape.Width:= 150;
                      usedRng.Comment.Shape.TextFrame.Characters(0, EmptyParam).Font.Bold:= False;
                    end;
                  end;
                  if Link3<>'' then begin
                    usedRng:= Worksheet.Range['D'+IntToStr(ii), EmptyParam];
                    if countNode=1 then  begin
                      usedRng.Value2:= fnIfStr(Link3='F','1','4');
                      usedRng.Interior.Color:= isGreenCell;
                    end
                    else
                      usedRng.Interior.Color:= isYellowCell;
                    //if Link3='F' then usedRng.Interior.Color:= isGreenCell
                    //else usedRng.Interior.Color:= isYellowCell;
                  end;
                  usedRng:= Worksheet.Range['G'+IntToStr(ii), EmptyParam];
                  if copy(Model.Name,1,1)='0'
                  then usedRng.NumberFormat:='@'; 
                  usedRng.Value2:= Model.Name;
                  usedRng.Borders.Item[xlDiagonalDown].LineStyle := xlNone;
                  usedRng.Borders.Item[xlDiagonalUp].LineStyle := xlNone;
                  usedRng.Borders.Item[xlEdgeRight].Color:= fnGetIntFromRGB(fnColorModulator(Model.ID));
                  usedRng.Borders.Item[xlEdgeRight].LineStyle:= xlContinuous;
                  usedRng.Borders.Item[xlEdgeRight].Weight:= xlThin;
                  usedRng:= WorkSheet.Range['F'+IntToStr(ii), 'G'+IntToStr(ii)];
                  if isColorCell<>0 then
                    usedRng.Interior.Color:= isColorCell;//isYellowCell;
                  usedRng:= Worksheet.Range['H'+IntToStr(ii), EmptyParam];
                  usedRng.Value2:= ss;
                  usedRng:= Worksheet.Range['I'+IntToStr(ii), EmptyParam];
                  usedRng.Value2:= IntToStr(Model.Params.pHP);
                  usedRng:= Worksheet.Range['J'+IntToStr(ii), EmptyParam];
                  usedRng.Value2:= Model.MarksCommaText;
                  for iArt := 0 to length(arArticle)-1 do begin 
                    usedRng:= Worksheet.Range[IntToABC(jj+iArt)+IntToStr(ii), EmptyParam];
                    if arArticle[iArt]<>'' then begin
                      if copy(arArticle[iArt],1,1)='0'
                      then usedRng.NumberFormat:='@'; 
                      usedRng.Value2:= arArticle[iArt];
                    end;
                    if arComment[iArt]<>'' then begin
                      usedRng.AddComment(arComment[iArt]);
                      with Worksheet.Range[IntToABC(jj+iArt)+IntToStr(ii), EmptyParam].Comment.Shape.TextFrame.Characters(0, EmptyParam) do begin
                        Font.Bold := False;
                        Worksheet.Range[IntToABC(jj+iArt)+IntToStr(ii), EmptyParam].Comment.Shape.Height:= 150;
                        Worksheet.Range[IntToABC(jj+iArt)+IntToStr(ii), EmptyParam].Comment.Shape.Width:= 100;
  //                    Font.Color := clNavy;
                      end;
                    end;
                  end;
                  Content:= '';                                
                  SetLength(arArticle, 0);
//                  SetLength(arArticle, 10);
                  SetLength(arComment, 0);
                  CModelID:= -1;
//                  CModelLineID:= -1;
                  iArticle:=0;
                  isColorCell:=0;
                  {OE:= ONum.Name;
                  inc(ii); }
                end;
                {OE:= ONum.Name;}
                inc(ii); 
              end;
              if not IBSRes then inc(ii);
              SetLength(arArticle, 0);
              SetLength(arComment, 0);
//              OE:= ONum.Name;
            end;
          end;
        end;
        ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent); 
      end;
    finally      
    usedRng:= WorkSheet.Range[IntToABC(jj)+IntToStr(1), IntToABC(jj+icol-1)+IntToStr(1)];
    usedRng.Cells.WrapText:= True;
    usedRng.Interior.Color:= isHeaderCell;
    usedRng.Font.Color:= isHeaderText;
    usedRng.Font.Bold:= True;
    usedRng.VerticalAlignment:= xlCenter;
    usedRng.HorizontalAlignment:= xlCenter;
    usedRng.Rows.RowHeight:= 45;      
    for i := 0 to iCol-1 do begin
      usedRng:= Worksheet.Range[IntToABC(jj+i)+IntToStr(1), EmptyParam];
      usedRng.Value2:= 'Артикул';
//    Content:= Content+fnGenerateXMLcell('Артикул', BoldHeaderStyle);
    end;
    XL.ActiveWindow.SplitRow := 1;
    XL.ActiveWindow.FreezePanes:=True;
//    MsExcel.Range['D3'].Select;
// устанавливаем закрепление области
//MsExcel.ActiveWindow.FreezePanes:=True;
////////////////////////////////////////////////////////////////////////////////    

      WorkSheet.Activate(lcid);
      XL.ActiveWindow.SplitRow := 1;
      XL.ActiveWindow.FreezePanes:=True;
      Workbook.CheckCompatibility := False;
if Rep <> 'RepArray' then begin
  SheetCount:= WorkBook.Sheets.Count;
  if SheetCount>3 then 
  for SheetID:=SheetCount-3+1 to SheetCount do begin
    WorkSheet1:= WorkBook.Sheets.Item[SheetID] as Excel_TLB._Worksheet;
    WorkSheet1.Name:= fnValidExcelSheetName(copy( WorkSheet1.Name,2,length(WorkSheet1.Name)));
  end;  
  WorkBook.Save(lcid) ;
end
else      
      WorkBook.SaveCopyAs(FName, lcid);
      WorkBook.Close(false,EmptyParam,EmptyParam,lcid);
      XL.Quit;// закрыть Excel
      XL.Disconnect;
      CoUnInitialize;
      prFree(XL);
      prFreeIBSQL(IBS);
      prFreeIBSQL(IBSText);
      if assigned(List) then prFree(List);
      SetLength(arArticleON, 0);
      SetLength(arArticle, 0);
      SetLength(arComment, 0);
      if iCount=0 then begin
        s:= MessText(mtkNotFoundDataUse);
        //raise Exception.Create(Title+#10+'  '+s);
        raise EBOBError.Create(Title+#10+'  '+s)
      end;

      Title:= 'Связь товаров с артикулами по ОЕ(TecDoc) ';
      Subj:= 'Отчет 45 '+fnIfStr(Rep <> 'RepArray',Rep+' ','')+FormatDateTime(cDateTimeFormatY2S, Now());
      ContentType:= XMLContentType;
      lstBodyMail:= TStringList.Create;
      lstBodyMail.Add(Title);  
(*      lstBodyMail.Add(' ');
      lstBodyMail.Add('Начало выполнения: '+FormatDateTime(cDateTimeFormatTSnD, timerStart));
      lstBodyMail.Add('Завершение выполнения: '+ FormatDateTime(cDateTimeFormatTSnD,Now));
      lstBodyMail.Add('Общее время выполнения: '+ FormatDateTime('hh:nn:ss',Now-timerStart)); *)          
    end;
  finally    
    SetLength(arBrand, 0);
    prFreeIBSQL(IBS);
    prFreeIBSQL(IBSText);
    if assigned(IBD) then cntsTDT.SetFreeCnt(IBD, True);
    prFreeIBSQL(IBSLink3);
    prFreeIBSQL(ORD_IBS);
    if assigned(ORD_IBD) then cntsORD.SetFreeCnt(ORD_IBD, True);
//    prFree(UseTextList);
//    prFree(CriUsedList);
    prFree(MWareList);
    SetLength(arWaresDop,0);
  end;
end;
//==============================================================================
function fnRep46(UserID: integer; var lstBodyMail: TStringList; var FName, Subj,
   ContentType:string; ThreadData: TThreadData; filter_data: string): string;
const
 nmProc = 'fnRep46'; // имя процедуры/функции
function SearchWaresByTDSupAndArticle( pArticle: String; // must Free
                                                 notInfo: Boolean=False): TStringList;
// возвращает массив кодов товаров, отсортированных по наименованию
// notInfo=True - только не-ИНФО товары
const nmProc='SearchWaresByTDSupAndArticle';
var i: integer;
    Ware: TWareInfo;
begin
  Result:= fnCreateStringList(False, 10);
  if (pArticle='') then Exit;
  for i:= 1 to High(Cache.arWareInfo) do if Cache.WareExist(i) then begin
    Ware:= cache.GetWare(i);
    if Ware.IsArchive or (Ware.PgrID<1) then Continue;
    if (Ware.PgrID=Cache.pgrDeliv) then Continue; // пропускаем доставки
    if notInfo and Ware.IsINFOgr then Continue;
    if (Ware.ArticleTD<>pArticle)  then Continue;
    Result.AddObject(Ware.Name, pointer(i));
  end;
  if Result.Count>1 then Result.Sort;
end; 
var
  i, icount, iw1, iw2, k,n: integer;
  IBD: TIBDatabase;
  IBS: TIBSQL;
  s, Ga_ID1,Ga_ID2,Sup_ID, Title: string;
  Content, PathFile, art1, art2: string;
  file_csv: textfile;    
//  timer, timerStart: TDateTime;    
  Percent: real;
  SLExcel, WareList1, WareList2: TStringList;
  arRow: tas;
  Ware1, {Ware2,} SWare: TWareInfo;
  SatellWare1, SatellWare2: tai;
  arWareID1,arWareID2: tai;
  FilterData: TStringList;
  TypeDop: integer;
begin
//timerStart:= Now;
SLExcel:=nil;
SLExcel:= TStringList.Create;
//WareList1:= TStringList.Create;
//FilterData:=nil;
FilterData:= TStringList.Create;
FilterData.Text:= filter_data;
TypeDop:= StrToIntDef(FilterData.Values['dop_type'],0);
//TypeDop:=1;
if TypeDop=0 then raise EBOBError.Create('Неправильно выбран тип отчета!');
if TypeDop=1 then begin
  Ga_ID1:='447, 2842';
  Ga_ID2:='448, 2843';
  Sup_ID:= '66, 123';
end;
if TypeDop=2 then begin
  Ga_ID1:='1164';
  Ga_ID2:='1502';
  Sup_ID:= '161';
end;
art1:='';
art2:='';
i:=0;
icount:= 0;
IBD:= nil;
IBS:= nil;
Percent:= 0;
try
  if FName='' then begin
    if not GetEmplTmpFilePath(UserID, PathFile, s) then raise EBOBError.Create(s); 
//        FName:= PathFile+fnFormRepFileName('45_', '.csv', ImpCheck.GetCheckKind(UserID, ThreadData.ID));
    FName:= PathFile+fnFormRepFileName('46_', '.csv', ImpCheck.GetCheckKind(UserID, ThreadData.ID));
  end;
  if FileExists(FName) and not SysUtils.DeleteFile(FName) then begin
    s:= MessText(mtkNotDelPrevFile);
    raise EBOBError.Create(MessText(mtkNotDelPrevFile));
  end;
  Title:= '(46) Подбор взаимосоответствующих запчастей';
Percent:= 2;  
ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);   
  IBD:= cntsTDT.GetFreeCnt;
//  if (IBD=nil) then Exit;
  IBS:= fnCreateNewIBSQL(IBD,'Query_'+nmProc, -1, tpRead, true);
  ibs.ParamCheck:= False;
  IBS.SQL.Add(' execute block returns (xMF1 varchar(60), art1 varchar(22), W1 integer, ');
  IBS.SQL.Add(' xMF2 varchar(60), art2 varchar(22), W2 integer, ');
  IBS.SQL.Add(' mfName varchar(60), mlName varchar(60), mtName varchar(60), xMt integer, ');
  IBS.SQL.Add(' mtLS integer, mtFrom varchar(10), mtTo varchar(10), mtEngMarks varchar(200)) ');
  IBS.SQL.Add(' as ');
  IBS.SQL.Add(' declare variable xMark varchar(60); ');
  IBS.SQL.Add('   begin ');
  IBS.SQL.Add('     for select a11.art_sup_bra, a11.art_nr, a11.art_warecode, ');
  IBS.SQL.Add('      a12.art_sup_bra, a12.art_nr, a12.art_warecode, mt, ');
  IBS.SQL.Add('     ms.ms_mf_descr, mt.mt_ms_descr, mt.mt_descr, mt.mt_hp, ');
  IBS.SQL.Add('       cast(mt.mt_from as varchar(10)), cast(mt.mt_to as varchar(10)) ');
  IBS.SQL.Add('    from (select sel1.lagt_art_id art_id_1, sel1.lagt_mt_id mt, sel2.lagt_art_id art_id_2 ');
  IBS.SQL.Add('       from (select l1.lagt_art_id, l1.lagt_mt_id from LINK_ART_GA_TYPE l1 ');
  IBS.SQL.Add('         left join articles a1 on a1.art_id = l1.lagt_art_id ')  ;
  IBS.SQL.Add('         where a1.art_sup_id in ('+Sup_ID+') and l1.lagt_ga_id in ('+Ga_ID1+')) sel1 ');
  IBS.SQL.Add('       inner join (select l2.lagt_art_id, l2.lagt_mt_id from LINK_ART_GA_TYPE l2 ');
  IBS.SQL.Add('        left join articles a2 on a2.art_id = l2.lagt_art_id  ');
  IBS.SQL.Add('         where a2.art_sup_id in ('+Sup_ID+') and l2.lagt_ga_id in ('+Ga_ID2+') order by l2.lagt_mt_id) sel2 ');
  IBS.SQL.Add('       on sel2.lagt_mt_id = sel1.lagt_mt_id and sel2.lagt_art_id <> sel1.lagt_art_id ');
  IBS.SQL.Add('     group by sel1.lagt_art_id, sel1.lagt_mt_id, sel2.lagt_art_id ');
  IBS.SQL.Add('     order by sel1.lagt_art_id, sel2.lagt_art_id, sel1.lagt_mt_id) ');
  IBS.SQL.Add('     inner join articles a11 on a11.art_id = art_id_1 ');
  IBS.SQL.Add('     inner join articles a12 on a12.art_id = art_id_2 ');
  IBS.SQL.Add('     left join model_types mt on mt.mt_id = mt ');
  IBS.SQL.Add('     left join model_series ms on ms.ms_id = mt.mt_ms_id ');
//  IBS.SQL.Add('     where  a11.art_id=468185');
//  IBS.SQL.Add('     order by a11.art_warecode, a12.art_warecode, a11.art_sup_bra, a12.art_sup_bra,a11.art_nr, a12.art_nr ');
  IBS.SQL.Add('     into :xMF1, :art1, :W1, :xMF2, :art2, :W2, :xMt, ');
  IBS.SQL.Add('       :mfName, :mlName, :mtName, :mtLS, :mtFrom, :mtTo ');
  IBS.SQL.Add('     do begin ');
  IBS.SQL.Add('       mtEngMarks = ""; ');
  IBS.SQL.Add('       for select e.eng_mark from link_eng_model_types ll  ');
  IBS.SQL.Add('         left join engines e on e.eng_id = ll.lemt_eng_id where ll.lemt_mt_id = :xMt ');
  IBS.SQL.Add('       into :xMark do if (xMark<>"") then ');
  IBS.SQL.Add('         if (mtEngMarks = "") then mtEngMarks = xMark; ');
  IBS.SQL.Add('         else mtEngMarks = mtEngMarks || "," ||xMark; ');
  IBS.SQL.Add('       suspend; ');
  IBS.SQL.Add('     end  ');
  IBS.SQL.Add('   end');
//  IBS.Prepare;  
  

  IBS.ExecQuery;
  try    
    AssignFile(file_csv, FName);
    filemode:= fmOpenReadWrite; //назначаем файл
    if FileExists(FName) then Reset(file_csv) else ReWrite(file_csv);
    Append(file_csv);
    //Добавляем шапку:                  
    Title:= 'Подбор взаимосоответствующих запчастей';    

    Content:= Title;    
    WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
    Content:= 'Производитель;Модельный ряд;Модель;Дата выпуска;Мощность;Код;Двигатели';
    WriteLn(file_csv, Content);                                                           /////////////////////////////////////////////
    Content:= ''; 
try    
    while not IBS.EOF do begin
      prStopProcess( UserID, ThreadData.ID);
      try
        Content:= IBS.FieldByName('W1').AsString +';'   //0
                + IBS.FieldByName('W2').AsString +';'   //1
                + IBS.FieldByName('xMF1').AsString +';' //2
                + IBS.FieldByName('art1').AsString +';' //3
                + IBS.FieldByName('xMF2').AsString +';' //4
                + IBS.FieldByName('art2').AsString +';' //5
                + IBS.FieldByName('mfName').AsString +';' //6
                + IBS.FieldByName('mlName').AsString +';' //7
                + IBS.FieldByName('mtName').AsString +';' //8
                + IBS.FieldByName('xMt').AsString +';'    //9
                + IBS.FieldByName('mtLS').AsString +';'   //10
                + IBS.FieldByName('mtFrom').AsString +';' //11
                + IBS.FieldByName('mtTo').AsString +';'   //11
                + IBS.FieldByName('mtEngMarks').AsString; //12
        SLExcel.Add(Content);
        Content:= '';
//break;
        if (IBS.FieldByName('art1').AsString<>art1) or (IBS.FieldByName('art2').AsString<>art2)  then
          inc(icount);
        inc(i);
        art1:= IBS.FieldByName('art1').AsString;
        art2:= IBS.FieldByName('art2').AsString;
      except
        on E: EStopError do begin
          s:= E.Message;
          raise EStopError.Create(E.Message);
        end;
        on E: Exception do begin
          prMessageLOGS('Ошибка в процедуре '+nmProc+' '+ E.Message, 'import', false) ;
          s:=  'Ошибка при обработке результатов запроса. ';
          raise Exception.Create(Title+#13+s+E.Message);
        end;
      end;
        
      IBS.Next;
    end;
    IBS.close;
except
    on E: EStopError do begin
      s:= E.Message;
      raise EStopError.Create(E.Message);
    end;
    on E: Exception do begin
      prMessageLOGS('Ошибка в процедуре '+nmProc+IntToStr(i)+' '+ E.Message, 'import', false) ;
      s:=  'Ошибка при обработке результатов запроса. ';
      raise Exception.Create(Title+#13+s+E.Message);
    end;
end;    
    Percent:= 12;  
    ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);   
    if SLExcel.Count>0 then Percent:= 70/SLExcel.Count;
  
    SLExcel.Sort;
  except
    on E: EStopError do begin
      s:= E.Message;
      raise EStopError.Create(E.Message);
    end;  
    on E: Exception do begin
      prMessageLOGS('Ошибка в процедуре '+nmProc+IntToStr(i)+' '+ E.Message, 'import', false) ;
      s:=  'Ошибка при обработке результатов запроса. ';
      raise Exception.Create(Title+#13+s+E.Message);
    end;
  end;   
finally   
    if icount>0 then
    for i:= 0 to SLExcel.count-1 do begin
      prStopProcess( UserID, ThreadData.ID);
      arRow:=fnSplitString(SLExcel[i]);
      if (art1<>arRow[2]+' '+arRow[3]) or (art2<> arRow[4]+' '+arRow[5]) then begin
        Content:= '';
        WriteLn(file_csv, Content); 
        Content:= arRow[2]+' '+arRow[3]+';'+arRow[4]+' '+arRow[5]+';'+';'+fnIfStr(arRow[0]='0','GB - нет','GB - да')+';'+fnIfStr(arRow[1]='0','GB - нет','GB - да');
        WriteLn(file_csv, Content);
        Content:= '';
//        Content:= arRow[4]+' '+arRow[5]+';'+arRow[2]+' '+arRow[3]+';'+';'+fnIfStr(arRow[1]='0','GB - нет','GB - да')+';'+fnIfStr(arRow[0]='0','GB - нет','GB - да');
//        Content:= arRow[0]+';'+arRow[1];
//        WriteLn(file_csv, Content);
        Content:= '';      
        SetLength(arWareID1,0);
        SetLength(arWareID2,0);
        if (StrToIntDef(arRow[0],-1)>0) and (StrToIntDef(arRow[1],-1)>0) then begin
          if StrToIntDef(arRow[0],-1)>0 then begin
            WareList1:=SearchWaresByTDSupAndArticle(arRow[3]);
            SetLength(arWareID1,0);
            SetLength(arWareID1,WareList1.Count);
            for k := 0 to WareList1.Count-1 do
              arWareID1[k]:= integer(WareList1.Objects[k]);
            prFree(WareList1);
          end;
          if StrToIntDef(arRow[1],-1)>0 then begin
            WareList2:=SearchWaresByTDSupAndArticle(arRow[5]);
            SetLength(arWareID2,0);
            SetLength(arWareID2,WareList2.Count);
            for k := 0 to WareList2.Count-1 do
              arWareID2[k]:= integer(WareList2.Objects[k]);
            prFree(WareList2);
          end;
        
          for iw1 := 0 to length(arWareID1)-1 do begin
            if not Cache.WareExist(arWareID1[iw1]) then continue;
            Ware1:= cache.GetWare(arWareID1[iw1]);
//            if Ware1.SatelliteExists() then begin
              SatellWare1:= Ware1.GetSatellites();
              for k := 0 to length(arWareID2)-1 do begin
                SWare:= Cache.GetWare(arWareID2[k]);
                Content:= SWare.Name+';'+Ware1.Name+';';
                n:= fnInIntArray(arWareID2[k],SatellWare1);
                if n>-1 then Content:= Content+ 'сопутствующий - да'
                else Content:= Content+'сопутствующий - нет';
                WriteLn(file_csv, Content);
                Content:= '';
              end;
//            end;
          end;
          for iw2 := 0 to length(arWareID2)-1 do begin
            if not Cache.WareExist(arWareID2[iw2]) then continue;
            Ware1:= cache.GetWare(arWareID2[iw2]);
//            if Ware1.SatelliteExists() then begin
              SatellWare1:= Ware1.GetSatellites();
              for k := 0 to length(arWareID1)-1 do begin
                SWare:= Cache.GetWare(arWareID1[k]);
                Content:= SWare.Name+';'+Ware1.Name+';';
                n:= fnInIntArray(arWareID1[k],SatellWare1);
                if n>-1 then Content:= Content+'сопутствующий - да'
                else Content:= Content+'сопутствующий - нет';
                WriteLn(file_csv, Content);
                Content:= '';
              end;  
//            end;
          end;
        end;  

      end;
      Content:= arRow[6]+';'+arRow[7]+';'+ #160+arRow[8]+';'+arRow[11]+'-'+arRow[12]+';'+arRow[9]+';'+arRow[10]+';'+arRow[13];
      WriteLn(file_csv, Content);
      Content:= '';
      art1:= arRow[2]+' '+arRow[3];
      art2:= arRow[4]+' '+arRow[5];
      ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);   
    end;

  Percent:= 5;    
      ImpCheck.SetProcessPercent(UserId,ThreadData.ID,Percent);      
//      Title:= 'Информация о начислении баллов по акции ';
      if iCount=0 then begin
        s:= MessText(mtkNotFoundDataUse);
        raise EBOBError.Create(Title+#10+'  '+s)
       // raise Exception.Create(Title+#10+'  '+s);
      end;
      Subj:= '(46) Подбор взаимосоответствующих запчастей '+FormatDateTime(cDateTimeFormatY2S, Now());
      ContentType:= CSVContentType;// for Excel(.csv)
      lstBodyMail:= TStringList.Create;
      lstBodyMail.Add(Title);
      lstBodyMail.Add('Количество товаров: '+IntToStr(icount));
(*      lstBodyMail.Add(' ');
      lstBodyMail.Add(' ');
      lstBodyMail.Add('Начало выполнения: '+FormatDateTime(cDateTimeFormatTSnD, timerStart));
      lstBodyMail.Add('Завершение выполнения: '+ FormatDateTime(cDateTimeFormatTSnD,Now));
      lstBodyMail.Add('Общее время выполнения: '+ FormatDateTime('hh:nn:ss',Now-timerStart));  *)    

  prFreeIBSQL(IBS);
  if assigned(IBD) then cntsTDT.SetFreeCnt(IBD, True);
  prFree(SLExcel);
  CloseFile(file_csv); 
  SetLength(SatellWare1,0); 
  SetLength(SatellWare2,0);
  SetLength(arWareID1,0);
  SetLength(arWareID2,0); 
  prFree(WareList1);
  prFree(WareList2);     
end;
end;
//=======================================================================================
procedure prSheetTreeNodes(WorkBook: Excel_TLB._Workbook; Sheet: integer=1);    
const
 nmProc = 'prSheetTreeNodes'; // имя процедуры/функции
var 
//    Title,  FirmTypeName,FirmClasses: string;
//XL: TExcelApplication;
//  WorkBook: Excel_TLB._Workbook;
  WorkSheet: Excel_TLB._Worksheet;
  usedRng: Range;

  SheetCount: integer;
  SheetID: integer;
  s, SheetName: string;

  TreeList: TStringList;
  FullTreeList: TStringList;

  ExtNodesList: TObjectList;
  ExtNode: TExtendedAutoTreeNode;
//  ParentExtNode: TExtendedAutoTreeNode;
  Node: TAutoTreeNode; 
  CurrentDepth: integer;
  parentNodes: array of TExtendedAutoTreeNode;
  success, isDupNode: boolean;
  isGreenCell: integer;
  isGrayCell: integer;
  isErrorCell: integer;   
  m, i, j{, iCol, iR, LenWare,  iArt, iArticle, iArticleON, iModelLine}: integer;
  ManufsList: TStringList;
  ModelLinesList: TStringList;
  ModelsList: TStringList;
begin
  ExtNodesList:= nil;
  TreeList:=nil;
  FullTreeList:=nil;
  ManufsList:=nil;
  ModelLinesList:=nil;
  ModelsList:=nil;
 try
{ if FName='' then begin
        if not GetEmplTmpFilePath(UserID, PathFile, s) then raise EBOBError.Create(s); 
//        FName:= PathFile+fnFormRepFileName('45_', '.csv', ImpCheck.GetCheckKind(UserID, ThreadData.ID));
        FName:= PathFile+fnFormRepFileName('45_', '.xlsx', ImpCheck.GetCheckKind(UserID, ThreadData.ID));
 end;
 if FileExists(FName) and not SysUtils.DeleteFile(FName) then begin
        s:= MessText(mtkNotDelPrevFile);
        raise EBOBError.Create(MessText(mtkNotDelPrevFile));
 end;   }
  try
  (*
    XL:= TExcelApplication.Create(nil);
    WorkBook:= nil;
//--== Инициализируем работу экземпляра Excel
    CoInitializeEx(nil, COINIT_MULTITHREADED);
    XL.ConnectKind:= ckNewInstance;
    XL.Connect;
    XL.Visible[lcid]:= False;
    //XL.AutoQuit:= False;
    XL.ScreenUpdating[lcid]:= False;
    XL.DisplayAlerts[lcid]:= False;
    XL.Calculation[lcid] := xlManual;
 // отменяем автоматическую проверку ошибок в ячейках
    with XL.ErrorCheckingOptions do begin
      BackgroundChecking := False;
      NumberAsText := False;
      InconsistentFormula := False;
    end;

 // создаем файл
    if Assigned(XL) and (not Assigned(WorkBook)) then begin

      XL.Workbooks.Add(EmptyParam, lcid);
      WorkBook:= XL.ActiveWorkbook;
    //  WorkBook.Name:= FName;

    end;
    *)
        SheetCount:= WorkBook.Sheets.Count;
//Узлы<<<<<<<<<<<<<<<<<<<<<<<<<<<
    if SheetCount > Sheet then begin
      SheetID:= Sheet;
      SheetName:= 'Узлы';
      WorkSheet:= WorkBook.Sheets.Item[SheetID] as Excel_TLB._Worksheet;
      WorkSheet.Name:= fnValidExcelSheetName(SheetName);
    end else begin
      while SheetCount < Sheet do begin
      //Добавим один новый лист после текущего
        Workbook.Sheets.Add(EmptyParam, WorkBook.Sheets.Item[WorkBook.Sheets.Count], 1, xlWorksheet, lcid);
//        XL.ActiveWorkbook.Sheets.Add(EmptyParam, WorkBook.Sheets.Item[WorkBook.Sheets.Count], 1, xlWorksheet, lcid);
        SheetCount:= WorkBook.Sheets.Count;
      end;
      SheetID:= Sheet;
      SheetName:= 'Узлы';
      WorkSheet:= WorkBook.Sheets.Item[SheetID] as Excel_TLB._Worksheet;
      WorkSheet.Name:= fnValidExcelSheetName(SheetName);
    end;

//    TypeSys:= fnTypeSysDecision(UserID);

    CurrentDepth:= 0;

    SetLength(parentNodes, 20);

    FullTreeList:= Cache.FDCA.AutoTreeNodesSys[constIsAuto].NoteGetTree;
    j:= 0;
    TreeList:= TStringList.Create;
    TreeList.Capacity:= FullTreeList.Capacity;

    for i:= 0 to FullTreeList.Count-1 do begin
      with FullTreeList do begin
        Node:= TAutoTreeNode(Objects[i]);
        if Node.Visible then begin
 //       if Node.ID <> Node.MainCode then begin
          TreeList.AddObject(Strings[i], Objects[i]);
 //       end;
          inc(j);
        end;// if Node.Visible then begin
      end;// with FullTreeList do begin
    end;

    TreeList.Capacity:= j;
    prFree(FullTreeList);
  //  TreeList:= Cache.FDCA.AutoTreeNodesSys[TypeSys].NoteGetTree;

    ExtNodesList:= TObjectList.Create(true);
    
  //  ExtNodesList.Capacity:= TreeList.Count;
    with TreeList do begin
      for i:= 0 to (Count-1) do begin
        TestCssStopException;
        ExtNode:= TExtendedAutoTreeNode.Create((TAutoTreeNode(Objects[i])));
        ExtNodesList.Add(ExtNode);

        if (TExtendedAutoTreeNode(ExtNodesList[i]).Link.ParentID < 1) then begin
          CurrentDepth:= 0;
          parentNodes[CurrentDepth]:= TExtendedAutoTreeNode(ExtNodesList[i]);
          TExtendedAutoTreeNode(ExtNodesList[i]).Depth:= CurrentDepth;
          TExtendedAutoTreeNode(ExtNodesList[i]).ParentNode:= nil;
        end else
        if (i>0) and (TExtendedAutoTreeNode(ExtNodesList[i]).Link.ParentID = TExtendedAutoTreeNode(ExtNodesList[i-1]).Link.ParentID) then begin
          parentNodes[CurrentDepth]:= TExtendedAutoTreeNode(ExtNodesList[i]);
          TExtendedAutoTreeNode(ExtNodesList[i]).Depth:= CurrentDepth;
          TExtendedAutoTreeNode(ExtNodesList[i]).ParentNode:= TExtendedAutoTreeNode(ExtNodesList[i-1]).ParentNode;
        end else begin
          success:= false;
          for j:= 0 to CurrentDepth do begin
            if (TExtendedAutoTreeNode(ExtNodesList[i]).Link.ParentID = parentNodes[j].Link.ID) then begin
              TExtendedAutoTreeNode(ExtNodesList[i]).ParentNode:= parentNodes[j];
              CurrentDepth:= j+1;
              parentNodes[CurrentDepth]:= TExtendedAutoTreeNode(ExtNodesList[i]);
              TExtendedAutoTreeNode(ExtNodesList[i]).Depth:= CurrentDepth;
              success:= true;
              Break;
            end;
          end;
          if not success then begin
            Raise Exception.Create ('Рюрик мертв!');
          end;
          
        end;

      end;// for i:= 0 to (Count-1) do begin

    end;//with TreeList do begin

    for j:= 1 to ExtNodesList.Count do begin
      i:= j-1;
      ExtNode:= TExtendedAutoTreeNode(ExtNodesList.items[i]);
      while ExtNode.ParentNode <> nil do begin
        inc(TExtendedAutoTreeNode(ExtNode.ParentNode).CC);
        ExtNode:= TExtendedAutoTreeNode(ExtNode.ParentNode);
      end;
    end;

    isGreenCell:= cHexToInt(cnGreenCell);
    isGrayCell:= cHEXtoINT(cnGrayCell);
    isErrorCell:= cHEXtoINT(cnRedCell);

    WorkSheet.Outline.SummaryRow:= xlSummaryAbove;
    WorkSheet.Outline.AutomaticStyles:= False;
//    WorkSheet.Outline.ShowLevels(EmptyParam, EmptyParam):= xlMin:
//    WorkSheet.Outline.ShowLevels(RowLevels):= xlMax;
    
    for j:= 1 to ExtNodesList.Count do begin
      TestCssStopException;
      isDupNode:= false;
      i:= j-1;
      ExtNode:= TExtendedAutoTreeNode(ExtNodesList.items[i]);
      usedRng:= WorkSheet.Range[IntToABC(ExtNode.Depth)+IntToStr(j), EmptyParam];

      if TAutoTreeNode(ExtNode.Link).ID <> TAutoTreeNode(ExtNode.Link).MainCode then begin
        usedRng.Value2:= TAutoTreeNode(ExtNode.Link).Name+' (дублирующий узел)'; //+'  ('+IntToStr(ExtNode.CC)+')';
        isDupNode:= true;
      end else begin
        usedRng.Value2:= TAutoTreeNode(ExtNode.Link).Name;
      end;

      if ExtNode.CC = 0 then begin
        if not isDupNode then begin
          usedRng.Borders.Item[xlDiagonalDown].LineStyle := xlNone;
          usedRng.Borders.Item[xlDiagonalUp].LineStyle := xlNone;
          usedRng.Borders.Item[xlEdgeRight].Color:=
            fnGetIntFromRGB(fnColorModulator(TAutoTreeNode(TExtendedAutoTreeNode(ExtNodesList.items[i]).Link).ID));
          usedRng.Borders.Item[xlEdgeRight].LineStyle:= xlContinuous;
          usedRng.Borders.Item[xlEdgeRight].Weight:= xlThin;
          usedRng.Interior.Color:= isGreenCell;

        //вставляем гиперссылку ячейки на саму себя
          //vv if TypeSys = constIsAuto then
          WorkSheet.Hyperlinks.Add(usedRng,'#'''+SheetName+
            '''!'+IntToABC(ExtNode.Depth)+IntToStr(j),
              EmptyParam, EmptyParam, EmptyParam);

        end else begin
          if Cache.FDCA.AutoTreeNodesSys[constIsAuto].NodeGet(TAutoTreeNode(ExtNode.Link).MainCode, Node) then begin
            m:= TreeList.IndexOfObject(Node);
            if m > -1 then begin
              //vv if TypeSys = constIsAuto then
              WorkSheet.Hyperlinks.Add(usedRng,'#'''+SheetName+
                '''!'+IntToABC(TExtendedAutoTreeNode(ExtNodesList.items[m]).Depth)+IntToStr(m+1),
                  EmptyParam, EmptyParam, EmptyParam);
              usedRng.Interior.Color:= isGrayCell;    
            end;
          end;
        end;
      end;
    end;
    
  (*
    usedRng:= WorkSheet.Range['B'+IntToStr(recs), EmptyParam];
    usedRng.Value2:= LogStr[2];
    WorkSheet.Hyperlinks.Add(usedRng,'#'''+LogStr[2]+'''!'+LogStr[3],EmptyParam,EmptyParam,
      EmptyParam);
  *)
    j:= 1;
    CurrentDepth:= 0;
    while j <= ExtNodesList.Count do begin
      TestCssStopException;
      i:= j-1;
      ExtNode:= TExtendedAutoTreeNode(ExtNodesList.Items[i]);
      if ExtNode.Depth > CurrentDepth then
        CurrentDepth:= ExtNode.Depth;

      usedRng:= WorkSheet.Range[IntToABC(ExtNode.Depth)+IntToStr(j+1),
        IntToABC(ExtNode.Depth)+IntToStr(j+ExtNode.CC)];
        //.Rows.Group(EmptyParam,
        //  EmptyParam,EmptyParam,EmptyParam);
      if (ExtNode.CC > 0) and (ExtNode.CC <= 14) then begin

        usedRng.Rows.Group(EmptyParam,
                            EmptyParam,EmptyParam,EmptyParam);

        j:= j+ExtNode.CC;
      end;
      if (ExtNode.CC > 14) then begin
        usedRng.Rows.Group(EmptyParam,
                            EmptyParam,EmptyParam,EmptyParam);
      end;

      inc(j);
    end;// while j <= ExtNodesList.Count do begin

    WorkSheet.Activate(lcid);
 //   usedRng:= WorkSheet.Range['A1', WorkSheet.Range['A1', EmptyParam].SpecialCells(xlCellTypeLastCell,EmptyParam)];
    usedRng:= WorkSheet.UsedRange[lcid];

    usedRng.Columns.ColumnWidth:= 25;
    usedRng.WrapText:= True;
//    usedRng.WrapText:= True;
    usedRng.Rows.AutoFit;

    for i:= CurrentDepth+1 downto 1 do
      WorkSheet.Outline.ShowLevels(i, EmptyParam);
   
  (*
//      usedRng.AddComment(IntToStr(TAutoTreeNode(TExtendedAutoTreeNode(ExtNodesList.items[i]).Link).ID));
      //        , EmptyParam, EmptyParam);

    //  color:= usedRng.Borders.Item[xlEdgeRight].Color;
    //  usedRng:= WorkSheet.Range[IntToABC(ExtNode.Depth+1)+IntToStr(j), EmptyParam];
    //  usedRng.Value2:= IntToStr(fnColorDemodulator(color));
  *)
//    pass:= fnGenWebPass;
//    WorkSheet.Name:= fnValidExcelSheetName(pass);

//-Узлы

  finally

  end;
 finally
{   prFree(ExtNodesList);
  prFree(TreeList);
  prFree(FullTreeList);
  prFree(ManufsList);
  prFree(ModelLinesList);
  prFree(ModelsList);
}
{  WorkBook.SaveCopyAs(FName, lcid);
  WorkBook.Close(false,EmptyParam,EmptyParam,lcid);
  XL.Quit;// закрыть Excel
  XL.Disconnect;
  CoUnInitialize;
  prFree(XL);  }
  ExtNodesList.Clear;
  prFree(ExtNodesList); 
  //ExtNodesList.Free;
  prFree(TreeList);
  SetLength(parentNodes,0);
  SetLength(s,0); 
 end;
end;
//==============================================================================
procedure prSheetCriterias(WorkBook: Excel_TLB._Workbook; Sheet: integer=1);    
const
 nmProc = 'prSheetTreeNodes'; // имя процедуры/функции
var 
  IBORD: TIBDatabase;
  IBORDSQL: TIBSQL;
  WorkSheet: Excel_TLB._Worksheet;
  usedRng: Range;

  SheetCount: integer;
  SheetID: integer;
  SheetName: string;
  isHeaderCell: integer;
  isHeaderText: integer;
  i: integer;

begin
    SheetCount:= WorkBook.Sheets.Count;
//Узлы<<<<<<<<<<<<<<<<<<<<<<<<<<<
    if SheetCount > Sheet then begin
      SheetID:= Sheet;
      SheetName:= 'Критерии';
      WorkSheet:= WorkBook.Sheets.Item[SheetID] as Excel_TLB._Worksheet;
      WorkSheet.Name:= fnValidExcelSheetName(SheetName);
    end else begin
      while SheetCount < Sheet do begin
      //Добавим один новый лист после текущего
        Workbook.Sheets.Add(EmptyParam, WorkBook.Sheets.Item[WorkBook.Sheets.Count], 1, xlWorksheet, lcid);
//        XL.ActiveWorkbook.Sheets.Add(EmptyParam, WorkBook.Sheets.Item[WorkBook.Sheets.Count], 1, xlWorksheet, lcid);
        SheetCount:= WorkBook.Sheets.Count;
      end;
      SheetID:= Sheet;
      SheetName:= 'Критерии';
      WorkSheet:= WorkBook.Sheets.Item[SheetID] as Excel_TLB._Worksheet;
      WorkSheet.Name:= fnValidExcelSheetName(SheetName);
    end;
    isHeaderCell:= cHexToInt(cnHeaderCell);
    isHeaderText:= cHEXtoINT(cnHeaderText);
  //рисуем шапку листа:
    usedRng:= WorkSheet.Range['A1','A1'];
    usedRng.Cells.WrapText:= True;
    usedRng.Interior.Color:= isHeaderCell;
    usedRng.Font.Color:= isHeaderText;
    usedRng.Font.Bold:= True;
    usedRng.VerticalAlignment:= xlCenter;
    usedRng.HorizontalAlignment:= xlCenter;
    usedRng.Rows.RowHeight:= 45;

    usedRng:= Worksheet.Range['A1', EmptyParam];
    usedRng.Value2:= 'Название критерия'; 
    usedRng.Columns.ColumnWidth:= 40;

//    IBORD:= nil;
    IBORDSQL:= nil;
    IBORD:= cntsORD.GetFreeCnt;
    IBORDSQL:= fnCreateNewIBSQL(IBORD, 'SQL_'+nmProc, -1, tpRead, true);
    try
      i:= 2; 
      IBORDSQL.SQL.Text:= 'SELECT WCRICODE, WCRIDESCR FROM WARECRITERIES ORDER BY UPPERCASE(WCRIDESCR)';
      IBORDSQL.ExecQuery;
      while not IBORDSQL.EOF do begin
        usedRng:= Worksheet.Range['A'+IntToStr(i), EmptyParam];
        usedRng.Value2:= IBORDSQL.fieldByName('WCRIDESCR').AsString; 
        inc(i);
        IBORDSQL.Next;
      end;
//      IBORDSQL.Close;
    finally
      prFreeIBSQL(IBORDSQL);
      cntsORD.SetFreeCnt(IBORD, True);
    end;
end;
//==============================================================================
procedure prGetBaseStamp(Stream: TBoBMemoryStream; ThreadData: TThreadData);
const nmProc = 'prGetBaseStamp'; // имя процедуры/функции
var s, Subj, ContentType, filter_data, FName, email, Fnames: String;  
    UserId, ImpTypeId, i: Integer; 
    Stream1: TBoBMemoryStream;
    lstBodyMail, lstAttach,FilterData: TStringList;
//DateStart,DateEnd: TDateTime;
    timerStart: TDateTime;
begin
  timerStart:= Now;
  ImpTypeId:= -1;
  Stream.Position:= 0;
  UserID:= 0;
  lstBodyMail:= nil; 
  lstAttach:= nil;
//  FilterData:= nil;
  FilterData:= TStringList.Create;
  try
    if not Cache.WareLinksUnLocked then raise EBOBError.Create(MessText(mtkFuncNotEnable));

    UserID:= Stream.ReadInt;
    ImpTypeId:= Stream.ReadInt;
    filter_data:= Stream.ReadStr;
    FilterData.Text:= filter_data;
    email:= FilterData.Values['dop_email'];
    prSetThLogParams(ThreadData, 0, UserId, 0, 'ImpTypeId= '+IntToStr(ImpTypeId)+#10+'filter_data= '+filter_data);

    if not Cache.EmplExist(UserID) then raise EBOBError.Create(MessText(mtkNotEmplExist));  

    if not (Cache.CheckEmplImpType(UserID, ImpTypeId, True)) then raise EBOBError.Create(MessText(mtkNotRightExists));//report
    ImpCheck.AddProcess(constOpExport, UserID, ImpTypeId, ThreadData);
//    while not GetProcessRun(UserID, ThreadData.ID) do sleep(100); 
    if GetProcessRun(UserID, ThreadData.ID) then       //очередь
prMessageLOGS('Очередь отчетов/импортов: UserID='+IntToStr(UserID)+' отчет: '+GetProcessName(UserID, ThreadData.ID)+' -- можно выполнять. ', 'import_test', false) 
else prMessageLOGS('Очередь отчетов/импортов: UserID='+IntToStr(UserID)+' отчет: '+GetProcessName(UserID, ThreadData.ID), 'import_test', false) ;
    case ImpTypeId  of
       3:  fnGetOriginalNumsFreeI(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData, filter_data);     //
                                                                                                             
      10: apGetAttrFile(UserID, lstBodyMail, FName, Subj, ContentType,  ThreadData, s);                      

      12: apGetLinkDetModWareFile(UserID, lstBodyMail, FName, Subj, ContentType, s, ThreadData);             

      24, 25, 34, 36, 39, 40, 53: prGetAutoDataFromTDT(ImpTypeId, UserID, lstBodyMail, FName, Subj, ContentType, ThreadData, filter_data);

      16: apGetMgrWaresDataAnalitics (UserID, lstBodyMail, FName, Subj, ContentType, s,ThreadData);      //    

      17: apGetLink2forModels(UserID, lstBodyMail, FName, Subj, ContentType, s, ThreadData);                 

      18: fnGetGBAndTecDocWareLinks(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData, filter_data); 

      19: apGetWareDetModFile(UserID, lstBodyMail, FName, Subj, ContentType, s, ThreadData);

      //21: fnGetTecDocWareLinks(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData, filter_data);

      22: apGetMgrWaresWoTDarts(UserID, lstBodyMail, FName, Subj, ContentType, s, ThreadData, filter_data);  

      23: fnGetAnalogsFree(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData, filter_data);          

      26: prGetReport26{prGetAnalystReport1}(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData, filter_data);  

      27: fnGetNewLinkManager(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData, filter_data);       

      28: fnGetOriginalNumsFreeON(UserID, lstBodyMail, FName, Subj, ContentType, s, ThreadData, filter_data);   

      29: fnProductReportSearchWareClient(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData, filter_data);   

      30: fnReportSearchQtyMax(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData, filter_data);      

      31: apGetWareNodeLines (UserID, lstBodyMail, FName, Subj, ContentType, s, ThreadData);                 

      32: fnWidthOfRangeRep(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData, filter_data);         

      33:  fnExportNotInfoFileRep(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData, filter_data);   

      42{35}:  fnRepCrossAnalogs1(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData, filter_data);   
      
      37: fnStatistic(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData, filter_data); 
      //fnRepWebArmSystemStatistic(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData, filter_data); 

      38:  fnReport38(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData, filter_data);                
      //fnRepAnalogONTypes(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData, filter_data);
      //fnRepAnalogTypes(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData, filter_data);
      //fnRepAnalogGBTypes(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData, filter_data);
      //fnRepTypesNull(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData, filter_data);
      43:  fnConnectCountUser(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData, filter_data);        
      
      44:  fnRepActionText(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData, filter_data);           

      45:  fnRepOETecDoc45(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData, filter_data);           

      46:  fnRep46(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData, filter_data);                   

      47:  fnRep47(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData, filter_data);
                                                                                                              
      48:  fnRepNotific48(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData, filter_data);
                                                                                                             
      49:  fnRep49(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData, filter_data);
      
      50:  fnRep50{fnFirmIP}(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData, filter_data); 

      52, 54:  fnRep52(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData, filter_data); 

      58: fnGetPhones{fnRep000}(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData, filter_data);

      59:  fnRep59(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData, filter_data);

      60:  fnRep60(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData, filter_data);
      
      61:  fnRep61(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData, filter_data);
           
      else raise EBOBError.Create('Неизвестный код отчета - '+IntToStr(ImpTypeId));
    end; // case
    //timer:= Now;
    if (s<>'') then raise EBOBError.Create(s);

//------------------------------------------------------- 
    if (FName='') then raise EBOBError.Create('Ошибка формирования файла');
    Fnames:= FName;             // проверяем на несколько файлов
    with fnSplit(',', FNames) do try
      if (Count>1) then FName:= Strings[0]; // имя zip - по 1-му файлу
      FName:= FName+'.zip';
      ZipAddFiles(FName, FNames);
      for i:= 0 to Count-1 do
        if FileExists(Strings[i]) then SysUtils.DeleteFile(Strings[i]);
    finally
      Free;
    end;
//    ZipAddFiles(FName+'.zip', FName);
//    if (FName<>'') and FileExists(FName) then SysUtils.DeleteFile(FName);
//    FName:= FName+'.zip';
//------------------------------------------------------- 

    Stream.Clear;
    Stream.WriteInt(aeSuccess);
    Stream.WriteStr('application/zip');//(ContentType);
    Stream.WriteStr(ExtractFileName(FName));

    Stream1:= TBoBMemoryStream.Create;
    try
      Stream1.Clear;
      Stream1.LoadFromFile(FName);
      Stream.WriteInt(Stream1.Size);
      Stream.CopyFrom(Stream1, 0);
    finally                                                                    
      prFree(Stream1);
    end;
  except
    on E: EStopError do begin
      Stream.Clear;
      Stream.WriteInt(aeCommonError);
      Stream.WriteStr(E.Message);
      fnWriteToLog(ThreadData, lgmsUserError, nmProc+' ImpTypeID = '+IntToStr(ImpTypeId), '', E.Message, '');
    end;  
    on E: EBOBError do begin
      Stream.Clear;
      Stream.WriteInt(aeCommonError);
      Stream.WriteStr(E.Message);
      fnWriteToLog(ThreadData, lgmsUserError, nmProc+' ImpTypeID = '+IntToStr(ImpTypeId), '', E.Message, '');
    end;
    on E: Exception do begin
      Stream.Clear;
      Stream.WriteInt(aeCommonError);
      Stream.WriteStr(MessText(mtkErrProcess));
      fnWriteToLog(ThreadData, lgmsSysError, nmProc+' ImpTypeID = '+IntToStr(ImpTypeId), '', E.Message, '');
    end;
  end;
  if (lstBodyMail<>nil) then try
//      if Trim(Cache.arEmplInfo[UserID].Mail)='' then raise Exception.Create('Не найден email сотрудника '+Cache.arEmplInfo[UserID].EmplShortName+'!');
//1411      zmAddFilesWithPass(FName+'.zip', FName{, Cache.arEmplInfo[UserID].USERPASSFORSERVER});
    lstBodyMail.Add('');
    lstBodyMail.Add('Начало выполнения: '+FormatDateTime(cDateTimeFormatTSnD, timerStart));
    lstBodyMail.Add('Завершение выполнения: '+ FormatDateTime(cDateTimeFormatTSnD,Now));
    lstBodyMail.Add('Общее время выполнения: '+ FormatDateTime('hh:nn:ss',Now-timerStart));
    lstAttach:= TStringList.Create;
    if FileExists(FName) then
      lstAttach.Add(FName);
    if email<>'' then try
      n_SysMailSend(email, Subj, lstBodyMail, lstAttach, '', '', true);
    except
    on E: Exception do
      fnWriteToLog(ThreadData, lgmsSysError, nmProc, 'Ошибка отправки почты на доп. email: ', E.Message, '');
    end;
    if FileExists(FName) and (lstAttach.Count=0) then lstAttach.Add(FName);
    
    if Trim(Cache.arEmplInfo[UserID].Mail)='' then
      raise Exception.Create('Не найден email сотрудника '+Cache.arEmplInfo[UserID].EmplShortName+'!');
    n_SysMailSend(Cache.arEmplInfo[UserID].Mail, Subj, lstBodyMail, lstAttach, '', '', true);
  except
    on E: Exception do
      fnWriteToLog(ThreadData, lgmsSysError, nmProc, 'Ошибка отправки почты: ', E.Message, '');
  end;
  Stream.Position:= 0;
  if (FName<>'') and FileExists(FName) then SysUtils.DeleteFile(FName);
  if ((FName+'.zip')<>'') and FileExists(FName+'.zip') then SysUtils.DeleteFile(FName+'.zip');
//  prMessageLOG(FloatToStr (RoundTo((Now-timer)*60*60*24,-5)));
  ImpCheck.DelProcess(UserID, ThreadData.ID);
  prFree(lstBodyMail);
  prFree(lstAttach);
end; //prGetBaseStamp
//--============================================================================================--//

procedure prCommonImport(Stream: TBoBMemoryStream; ThreadData: TThreadData);
const nmProc = 'prCommonImport'; // имя процедуры/функции
var
  UserId, ImpTypeId, FSize: integer;
  Folder, DirImp, FName, PathFile, Subj, ContentType, s, email: string;
  Stream1: TBoBMemoryStream;
  lstBodyMail, lstAttach: TStringList;
//  pIniFile: TINIFile;
ErrPos: string;
timerStart: TDateTime;
//arRoles: tai;
begin
  timerStart:= Now;
  ImpTypeId:= -1;
  Stream.Position := 0;
  lstBodyMail:= nil;
  lstAttach:= nil;
  UserID:= 0;
  try
    if not Cache.WareLinksUnLocked then raise EBOBError.Create(MessText(mtkFuncNotEnable));
ErrPos:='Imp1';
    UserId:= Stream.ReadInt;
    ImpTypeId:= Stream.ReadInt;
//email:= Stream.ReadStr;    
    FName:= Stream.ReadStr;
    FSize:= Stream.ReadInt;
//    email:= Stream.ReadStr;
    prSetThLogParams(ThreadData, 0, UserId, 0, 'ImpTypeId= '+ IntToStr(ImpTypeId)+#10+'FName= '+FName);

    if not GetEmplTmpFilePath(UserID, PathFile, s) then raise EBOBError.Create(s); // здесь и EmplExist 
//    if not Cache.EmplExist(UserID) then raise EBOBError.Create(MessText(mtkNotEmplExist));

//    if not (Cache.CheckEmplImpType(UserID, ImpTypeId)) then raise EBOBError.Create(MessText(mtkNotRightExists)); 
//ErrPos:='Imp2';
    FName:= UTF8ToAnsi(PathFile+FName);
    if FileExists(FName) and not SysUtils.DeleteFile(FName) then
      raise EBOBError.Create(MessText(mtkNotDelPrevFile));

    Stream1:= TBoBMemoryStream.Create;
    Stream1.CopyFrom(Stream, FSize);
    Stream1.SaveToFile(FName);
    Stream1.Clear;
    email:= Stream.ReadStr;                
//ErrPos:='Imp3';    

    if not (Cache.CheckEmplImpType(UserID, ImpTypeId, False)) then raise EBOBError.Create(MessText(mtkNotRightExists)); //import

    ImpCheck.AddProcess(constOpImport, UserID, ImpTypeId, ThreadData);
//    while not GetProcessRun(UserID, ThreadData.ID) do sleep(100);
    if GetProcessRun(UserID, ThreadData.ID) then        //очередь
prMessageLOGS('Очередь отчетов/импортов: UserID='+IntToStr(UserID)+' импорт: '+GetProcessName(UserID, ThreadData.ID)+' -- можно выполнять. ', 'import_test', false) 
else prMessageLOGS('Очередь отчетов/импортов: UserID='+IntToStr(UserID)+' импорт: '+GetProcessName(UserID, ThreadData.ID), 'import_test', false) ;
    case ImpTypeId  of
      3, 28:  apImportOriginalNums(UserId, lstBodyMail, FName, Subj, ContentType, ThreadData);      //

      10:     apImportAttributes(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData);         //

      12:     apImportLinkDetModWare(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData);     //

      24, 25, 34, 36, 39, 40: prSetAutoDataFromTDT(ImpTypeId, UserID, lstBodyMail, FName, Subj, ContentType, ThreadData);

      17:     apImportLinkDetModWare(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData);     //

      18, 22: apImportGBandTecDocWareLinks(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData);     //

      19:     apImportWareDetModFile(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData);           //

      20:     apImportAutoWares(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData);               //

      //21:   apImportTecDocLinksForGBwares(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData);

      23:     prImportAnalogsFreeLink(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData);

      33:     prUpdateGraFiles(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData);
      
      35:     prImportAnalogs(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData);          //

      41:     prImportSATELLITES(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData);      //

      44:     prImportActionText(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData);  

      45:     prImpOETecDoc45(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData);  

      51:     fnRepOETecDoc45(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData, '');  

      55:     prImp55(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData);  
       
      56:     prImport56(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData);   

      57:     prImport57(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData);  

      62:     prImport62(UserID, lstBodyMail, FName, Subj, ContentType, ThreadData); 

      4..6: raise EBOBError.Create('Импорт не предусмотрен.');

      else raise Exception.Create('Неизвестный код импорта - '+IntToStr(ImpTypeId));
    end;
    ZipAddFiles(FName+'.zip', FName);
    //zmAddFilesWithPass(FName+'.zip', FName{, Cache.arEmplInfo[UserID].USERPASSFORSERVER});    //1411
    if (FName<>'') and FileExists(FName) then SysUtils.DeleteFile(FName);                     //1411
    FName:= FName+'.zip';                                                                     //1411
    
    Stream.Clear;
    Stream.WriteInt(aeSuccess);
    Stream.WriteStr('application/zip');
    Stream.WriteStr(ExtractFileName(FName));

    try
      Stream1.Clear;
      Stream1.LoadFromFile(FName);
      Stream.WriteInt(Stream1.Size);
      Stream.CopyFrom(Stream1, 0);
    finally                                                                    
      prFree(Stream1);
    end;

    if (lstBodyMail<>nil) then try
      lstBodyMail.Add('');
      lstBodyMail.Add('Начало выполнения: '+FormatDateTime(cDateTimeFormatTSnD, timerStart));
      lstBodyMail.Add('Завершение выполнения: '+ FormatDateTime(cDateTimeFormatTSnD,Now));
      lstBodyMail.Add('Общее время выполнения: '+ FormatDateTime('hh:nn:ss',Now-timerStart));    

//1411      zmAddFilesWithPass(FName+'.zip', FName, Cache.arEmplInfo[UserID].USERPASSFORSERVER);
      lstAttach:= TStringList.Create;
      lstAttach.Add(FName{+'.zip'});
      if email<>'' then try     
        n_SysMailSend(email, Subj, lstBodyMail, lstAttach, '', '', true);
      except                                                                      
      on E: Exception do
        fnWriteToLog(ThreadData, lgmsSysError, nmProc, 'Ошибка отправки почты на доп. email: ', E.Message, '');
      end;
      if lstAttach.Count=0 then lstAttach.Add(FName{+'.zip'});
      if Trim(Cache.arEmplInfo[UserID].Mail)='' then raise Exception.Create('Не найден email сотрудника '+Cache.arEmplInfo[UserID].EmplShortName+'!');
      s:= n_SysMailSend(Cache.arEmplInfo[UserID].Mail, Subj, lstBodyMail, lstAttach, '', '', true);  
      if s<>'' then fnWriteToLog(ThreadData, lgmsSysError, nmProc, 'Ошибка отправки почты', s, '');  
    except
      on E: Exception do
        fnWriteToLog(ThreadData, lgmsSysError, nmProc, 'Ошибка отправки почты', E.Message, '');
    end;

  //  pIniFile:= TINIFile.Create(nmIniFileBOB);   //  нет Free
  //  Folder:= pIniFile.ReadString('Options', 'FilesImport', '');
    Folder:= GetIniParam(nmIniFileBOB, 'Options', 'FilesImport', 'TMP'); 
    DirImp:= ExtractFilePath(Application.ExeName)+Folder;
    if not DirectoryExists(DirImp) then CreateDir(DirImp);
    //if not DirectoryExists(DirImp+PathDelim+nfs) then CreateDir(DirImp+PathDelim+nfs);

    if ((FName)<>'') and FileExists(FName) then begin
      if Cache.EmplExist(UserID) then
        RenameFile(FName, fnTestDirEnd(DirImp)+Cache.arEmplInfo[UserID].ServerLogin+'_'+ExtractFileName(fname));
        //SysUtils.DeleteFile(FName+'.zip');
    end;

  except
    on E: EBOBError do begin
      Stream.Clear;
      Stream.WriteInt(aeCommonError);
      Stream.WriteStr(E.Message);
      fnWriteToLog(ThreadData, lgmsUserError, nmProc+' ImpTypeID = '+IntToStr(ImpTypeId), '', E.Message, '');
//prMessageLOGS(' 1'+nmProc+': '+E.Message+ 'ErrPos='+IntToStr(ErrPos), 'Import', false);      
    end;
    on E: Exception do begin
      Stream.Clear;
      Stream.WriteInt(aeCommonError);
      Stream.WriteStr(MessText(mtkErrProcess));
      fnWriteToLog(ThreadData, lgmsSysError, nmProc+' ImpTypeID = '+IntToStr(ImpTypeId), '', E.Message, '');
//prMessageLOGS(' 2'+nmProc+': '+E.Message+ 'ErrPos='+IntToStr(ErrPos), 'Import', false);      
    end;
  end;
  Stream.Position:= 0;
  if (FName<>'') and FileExists(FName) then SysUtils.DeleteFile(FName);
  if (FName+'.zip'<>'') and FileExists(FName+'.zip') then SysUtils.DeleteFile(FName+'.zip');
  prFree(Stream1);
  prFree(lstAttach);
  prFree(lstBodyMail);
//  prFree(pIniFile);   

  ImpCheck.DelProcess(UserID, ThreadData.Id);

end; //prCommonImport 
//--========================================================================--//
{ TExtendedAutoTreeNode }
//--========================================================================--//
constructor TExtendedAutoTreeNode.Create(aTreeNode: TAutoTreeNode);
begin
  inherited Create;
  Link:= aTreeNode;
  Depth:= 0;
  CC:= 0;
  ParentNode:= nil;
  MainNodeIndex:= -1;
  NodeSys:= -1;
end;
//--========================================================================--//
constructor TExtendedAutoTreeNode.Create(aTreeNode: TAutoTreeNode; aTypeSys: integer);
begin
  inherited Create;
  Link:= aTreeNode;
  Depth:= 0;
  CC:= 0;
  ParentNode:= nil;
  MainNodeIndex:= -1;
  NodeSys:= aTypeSys;
end;
//--========================================================================--//
destructor TExtendedAutoTreeNode.Destroy;
begin
  inherited Destroy;
end;
//--========================================================================--//
function TExtendedAutoTreeNode.GetAllParentNames: tas;
var i: integer;
begin
  SetLength(Result, Depth+1);
  for i:= Depth downto 0 do begin
    Result[i]:= Link.Name;
    if Link.ParentID > 0 then
      Link:= Cache.FDCA.AutoTreeNodesSys[Link.TypeSys][Link.ParentID];
  end;
end;
//--========================================================================--//
{ WareAnaliticsData }
//--========================================================================--//
procedure TWareAnaliticsData.CheckImgDescrExist(ImagePath, DescrPath: string);
const cnEmptyDescr = 10;
var FileName: string;
begin
  if not Assigned(Self) then Exit;
  if Trim(ImagePath) <> '' then begin
    FileName:= ImagePath+IntToStr(Ware.ID)+'.jpg';
    if GetFileSize(FileName) > cnEmptyDescr then FWareImageExist:= True;
  end;
  if Trim(DescrPath) <> '' then begin
    FileName:= DescrPath+IntToStr(Ware.ID)+'.html';
    if GetFileSize(FileName) > cnEmptyDescr then FWareDescrExist:= True;
  end;
end;
//--========================================================================--//
constructor TWareAnaliticsData.Create(aWare: TWareInfo; aRole: integer; aTypeSys: integer);
begin
  inherited Create;
  try
    FUserRole:= aRole;
    FTypeSys:= aTypeSys;
    FWare:= aWare;
    FWareName:= '';
    FWarePgr:= '';
    FWareDescr:= '';
    FWareDescrExist:= false;
    FWareImageExist:= false;
    FWareManager:= '';
    FWareUsageCount:= -1;
//    FWareUsageWrongCount:= 0;
    FWareModelsList:= '';
    FWareArticleTD:= '';
  except
    on E: Exception do prMessageLOGS('TWareAnaliticsData.Create: '+E.Message, 'Import', false);
  end;
end;
//--========================================================================--//
procedure TWareAnaliticsData.FillSelfData (aImpType: integer);
var ModelsList: TList;
begin
  ModelsList:= nil;
  if not Assigned(Self) then Exit;
  try
    FImpType:= aImpType;
    FWareName:= FWare.Name;
    FWarePgr:= FWare.PgrName;
    FWareDescr:= FWare.Comment;
    ModelsList:= FWare.GetSysModels(TypeSys);
    FWareUsageCount:= ModelsList.Count;
    FWareArticleTD:= FWare.ArticleTD;
    case aImpType of
      16, 19: begin
        case UserRole of
          17, 18, 19: begin
            FWareManager:= Cache.arEmplInfo[FWare.ManagerID].EmplShortName;
          end;
        end;
(*        case TypeSys of
          constIsMoto: begin
            for i:= 0 to ModelsList.Count-1 do begin
              Model:= TModelAuto(ModelsList.Items[i]);
              FWareModelsList:= FWareModelsList+Model.WebName+' '#10;
            end;
          end;
        end;      *)
      end;
    end;
  except
    on E: Exception do begin
      prMessageLOGS('TWareAnaliticsData.FillSelfData. wareID: '+IntToStr(Ware.ID)+#9+E.Message, 'Import', false);
    end;
  end;
  prFree(ModelsList);
end;
//--========================================================================--//
function TWareAnaliticsData.GetHeaderData(aXMLdata: boolean=false; aXMLReportStyle: TXmlReportStyle=nil): Tas;
var i: integer;
begin
  if not Assigned(Self) then Exit;
  SetLength(Result, 10);
  if not aXMLdata then begin
    Result[0]:= 'Наименование товара';   //наименование товара
    Result[1]:= 'Группа';
    //vv Result[2]:= 'Комментарий';  // 
    Result[2]:= 'Кол-во моделей'; // изменила порядок
    i:= 3;
    case ImpType of
      16: begin
        Result[3]:= 'Картинка';
        Result[4]:= 'Описание';
        i:= 5;
        case UserRole of
          17, 18, 19: begin
            Result[i]:= 'Менеджер товара';
            inc(i);
            case TypeSys of
              constIsMoto: begin
                Result[i]:= 'Применяется в моделях';
                inc(i);
              end;
            end;
          end;
          9: begin
            case TypeSys of
              constIsMoto: begin
                Result[i]:= 'Применяется в моделях';
                inc(i);
              end;
            end;
          end;
        end;
        Result[i]:= 'Артикул TecDoc';
      end; // 16
      19: begin

      end;
    end;

  end else begin         //наименование товара
    Result[0]:= '<Row>'+fnGenerateXMLcell('Наименование товара', aXMLReportStyle);
    Result[1]:= fnGenerateXMLcell('Группа', aXMLReportStyle);
    //Result[2]:= fnGenerateXMLcell('Комментарий', aXMLReportStyle);
    Result[2]:= fnGenerateXMLcell('Кол-во моделей', aXMLReportStyle);
    i:= 3;
    case ImpType of
      16: begin
        Result[i]:= fnGenerateXMLcell('Картинка', aXMLReportStyle);
        inc(i);
        Result[i]:= fnGenerateXMLcell('Описание', aXMLReportStyle);
        inc(i);
        case UserRole of
          17, 18, 19: begin
            Result[i]:= fnGenerateXMLcell('Менеджер товара', aXMLReportStyle);
            inc(i);
{            case TypeSys of
              constIsMoto: begin
                Result[i]:= fnGenerateXMLcell('Применяется в моделях', aXMLReportStyle);
                inc(i);
              end;
            end;             }
          end;
{          9: begin
            case TypeSys of
              constIsMoto: begin
                Result[i]:= fnGenerateXMLcell('Применяется в моделях', aXMLReportStyle);
                inc(i);
              end;
            end;
          end;            }
        end;
        Result[i]:= fnGenerateXMLcell('Артикул TecDoc', aXMLReportStyle);
        inc(i);
        SetLength(Result, i);
        Result[i-1]:= Result[i-1]+'</Row>';
      end;
      19: begin

      end;
    end;
  end;
  SetLength(Result, i);
end;
//--========================================================================--//
function TWareAnaliticsData.GetXmlDataRow (aXmlReportStyle: TXmlReportStyle=nil): string;
const isExt  = 'Есть';
      notExt = 'Нет';
var s: String;
begin
  if not Assigned(Self) then Exit;
  s:= IntToStr(UsageCount);
  Result:='<Row>'+fnGenerateXMLcell(Name, aXmlReportStyle)+  //наименование товара
                  fnGenerateXMLcell(PgrName, aXmlReportStyle)+  //наименование подгруппы
                  fnGenerateXMLcell(s, aXmlReportStyle); //количество моделей, в которых используется товар
  case ImpType of
    16: begin
      s:= fnIfStr(Image, isExt, notExt); //наличие картинки
      Result:= Result+fnGenerateXMLcell(s, aXmlReportStyle);
      s:= fnIfStr(TextDescr, isExt, notExt); //наличие описания
      Result:= Result+fnGenerateXMLcell(s, aXmlReportStyle); 
//      if Image then
//           Result:= Result+fnGenerateXMLcell(isExt, aXmlReportStyle)
//      else Result:= Result+fnGenerateXMLcell(notExt, aXmlReportStyle);
//      if TextDescr then   //наличие описания
//           Result:= Result+fnGenerateXMLcell(isExt, aXmlReportStyle)
//      else Result:= Result+fnGenerateXMLcell(notExt, aXmlReportStyle);
      case UserRole of
        17, 18, 19: begin
          Result:= Result+fnGenerateXMLcell(WareMgr, aXmlReportStyle);
        (*  case TypeSys of
            constIsMoto: begin
              Result:= Result+fnGenerateXMLcell(ModelsList);
            end;
          end;  *)
        end;
(*        9: begin
          case TypeSys of
            constIsMoto: begin
              Result:= Result+fnGenerateXMLcell(ModelsList);
            end;
          end;
        end;           *)
      end;
    end;
    19: begin
//      Result:= Result+ fnGenerateXMLcell(IntToStr(UsageWrongCount), aXmlReportStyle);
    end;
  end;
  Result:= Result+fnGenerateXMLcell(ArticleTD, aXmlReportStyle);  
  Result:= Result+'</Row>';
end;

//--========================================================================--//
{ TMMLink }
//--========================================================================--//
constructor TMMLink.Create(aID: integer; aLinks: pointer);
begin
  inherited Create;
  ID:= aID;
  Links:= aLinks;
end;
end.
